
/Users/chipmc/Documents/Maker/Particle/Projects/LoRA-Particle-Gateway/target/4.0.2/boron/LoRA-Particle-Gateway.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00011a60  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000c5a80  000c5a80  00015a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000c5aa4  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000002e8  2003d57c  000c5aa8  0002d57c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000f8c  2003d868  2003d868  0003d868  2**3
                  ALLOC
  7 .module_info_suffix 0000002c  000c5d90  000c5d90  00035d90  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  8 .module_info_crc 00000004  000c5dbc  000c5dbc  00035dbc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0029c2e9  00000000  00000000  00035dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0002c4d2  00000000  00000000  002d20a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0006f570  00000000  00000000  002fe57b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00005068  00000000  00000000  0036daeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00012728  00000000  00000000  00372b53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0005ecce  00000000  00000000  0038527b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00095f3b  00000000  00000000  003e3f49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00173303  00000000  00000000  00479e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000f884  00000000  00000000  005ed188  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f00d f8e9 	bl	c1208 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f00d f90b 	bl	c1258 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003d57c 	.word	0x2003d57c
   b404c:	000c5aa8 	.word	0x000c5aa8
   b4050:	2003d864 	.word	0x2003d864
   b4054:	2003d868 	.word	0x2003d868
   b4058:	2003e7f4 	.word	0x2003e7f4

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f00c f9ad 	bl	c03c0 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000c5a3c 	.word	0x000c5a3c
   b4080:	000c5a80 	.word	0x000c5a80

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f001 bcec 	b.w	b5a60 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f001 fdd5 	bl	b5c38 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f00c b94d 	b.w	c0330 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f009 b901 	b.w	bd29c <malloc>

000b409a <_Znaj>:
   b409a:	f009 b8ff 	b.w	bd29c <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f009 b905 	b.w	bd2ac <free>
	...

000b40a4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f008 ff82 	bl	bcfb4 <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000bcb55 	.word	0x000bcb55
   b40b8:	000c362c 	.word	0x000c362c

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_ZN14LoRA_FunctionsD1Ev>:

LoRA_Functions::LoRA_Functions() {
}

LoRA_Functions::~LoRA_Functions() {
}
   b40cc:	4770      	bx	lr

000b40ce <_ZN14LoRA_FunctionsD0Ev>:
LoRA_Functions::~LoRA_Functions() {
   b40ce:	b510      	push	{r4, lr}
}
   b40d0:	2104      	movs	r1, #4
LoRA_Functions::~LoRA_Functions() {
   b40d2:	4604      	mov	r4, r0
}
   b40d4:	f7ff ffe3 	bl	b409e <_ZdlPvj>
   b40d8:	4620      	mov	r0, r4
   b40da:	bd10      	pop	{r4, pc}

000b40dc <_ZN16JsonParserStaticILj1024ELj50EED1Ev>:
 *
 * @param MAX_TOKENS The maximum number of tokens you expect. Each object has a token and two for each key/value pair.
 * Each array is a token and one for each element in the array.
 */
template <size_t BUFFER_SIZE, size_t MAX_TOKENS>
class JsonParserStatic : public JsonParser {
   b40dc:	b510      	push	{r4, lr}
   b40de:	4b03      	ldr	r3, [pc, #12]	; (b40ec <_ZN16JsonParserStaticILj1024ELj50EED1Ev+0x10>)
   b40e0:	6003      	str	r3, [r0, #0]
   b40e2:	4604      	mov	r4, r0
   b40e4:	f004 fc12 	bl	b890c <_ZN10JsonParserD1Ev>
   b40e8:	4620      	mov	r0, r4
   b40ea:	bd10      	pop	{r4, pc}
   b40ec:	000c3d28 	.word	0x000c3d28

000b40f0 <_ZN16JsonParserStaticILj1024ELj50EED0Ev>:
   b40f0:	b510      	push	{r4, lr}
   b40f2:	4604      	mov	r4, r0
   b40f4:	f7ff fff2 	bl	b40dc <_ZN16JsonParserStaticILj1024ELj50EED1Ev>
   b40f8:	4620      	mov	r0, r4
   b40fa:	f240 714c 	movw	r1, #1868	; 0x74c
   b40fe:	f7ff ffce 	bl	b409e <_ZdlPvj>
   b4102:	4620      	mov	r0, r4
   b4104:	bd10      	pop	{r4, pc}

000b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>:
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b4106:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4108:	461d      	mov	r5, r3
		if (getValueTokenByKey(container, name, value)) {
   b410a:	ab01      	add	r3, sp, #4
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b410c:	4604      	mov	r4, r0
		if (getValueTokenByKey(container, name, value)) {
   b410e:	f004 fddf 	bl	b8cd0 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b4112:	b120      	cbz	r0, b411e <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0+0x18>
			return getTokenValue(value, result);
   b4114:	9901      	ldr	r1, [sp, #4]
   b4116:	462a      	mov	r2, r5
   b4118:	4620      	mov	r0, r4
   b411a:	f004 fcef 	bl	b8afc <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>
	}
   b411e:	b003      	add	sp, #12
   b4120:	bd30      	pop	{r4, r5, pc}

000b4122 <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>:
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b4122:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4124:	461d      	mov	r5, r3
		if (getValueTokenByKey(container, name, value)) {
   b4126:	ab01      	add	r3, sp, #4
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b4128:	4604      	mov	r4, r0
		if (getValueTokenByKey(container, name, value)) {
   b412a:	f004 fdd1 	bl	b8cd0 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b412e:	b120      	cbz	r0, b413a <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0+0x18>
			return getTokenValue(value, result);
   b4130:	9901      	ldr	r1, [sp, #4]
   b4132:	462a      	mov	r2, r5
   b4134:	4620      	mov	r0, r4
   b4136:	f004 fdad 	bl	b8c94 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
	}
   b413a:	b003      	add	sp, #12
   b413c:	bd30      	pop	{r4, r5, pc}

000b413e <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b413e:	b40e      	push	{r1, r2, r3}
   b4140:	b500      	push	{lr}
   b4142:	b08c      	sub	sp, #48	; 0x30
   b4144:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b4146:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b414a:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b414e:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4150:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b4154:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4156:	6801      	ldr	r1, [r0, #0]
   b4158:	aa04      	add	r2, sp, #16
   b415a:	201e      	movs	r0, #30
    attr.flags = 0;
   b415c:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4160:	f008 ff38 	bl	bcfd4 <log_message_v>
}
   b4164:	b00c      	add	sp, #48	; 0x30
   b4166:	f85d eb04 	ldr.w	lr, [sp], #4
   b416a:	b003      	add	sp, #12
   b416c:	4770      	bx	lr
	...

000b4170 <_ZN14LoRA_Functions8instanceEv>:
LoRA_Functions &LoRA_Functions::instance() {
   b4170:	b510      	push	{r4, lr}
    if (!_instance) {
   b4172:	4c06      	ldr	r4, [pc, #24]	; (b418c <_ZN14LoRA_Functions8instanceEv+0x1c>)
   b4174:	6823      	ldr	r3, [r4, #0]
   b4176:	b933      	cbnz	r3, b4186 <_ZN14LoRA_Functions8instanceEv+0x16>
        _instance = new LoRA_Functions();
   b4178:	2004      	movs	r0, #4
   b417a:	f7ff ff8c 	bl	b4096 <_Znwj>
   b417e:	b108      	cbz	r0, b4184 <_ZN14LoRA_Functions8instanceEv+0x14>
LoRA_Functions::LoRA_Functions() {
   b4180:	4b03      	ldr	r3, [pc, #12]	; (b4190 <_ZN14LoRA_Functions8instanceEv+0x20>)
   b4182:	6003      	str	r3, [r0, #0]
        _instance = new LoRA_Functions();
   b4184:	6020      	str	r0, [r4, #0]
}
   b4186:	6820      	ldr	r0, [r4, #0]
   b4188:	bd10      	pop	{r4, pc}
   b418a:	bf00      	nop
   b418c:	2003d86c 	.word	0x2003d86c
   b4190:	000c3d38 	.word	0x000c3d38

000b4194 <_ZN14LoRA_Functions4loopEv>:
	return true;
}

void LoRA_Functions::loop() {
												
}
   b4194:	4770      	bx	lr
	...

000b4198 <_ZN14LoRA_Functions11clearBufferEv>:
// ************************************************************************
// *****					Common LoRA Functions					*******
// ************************************************************************


void LoRA_Functions::clearBuffer() {
   b4198:	b510      	push	{r4, lr}
	uint8_t bufT[RH_RF95_MAX_MESSAGE_LEN];
	uint8_t lenT;

	while(driver.recv(bufT, &lenT)) {};
   b419a:	4c06      	ldr	r4, [pc, #24]	; (b41b4 <_ZN14LoRA_Functions11clearBufferEv+0x1c>)
void LoRA_Functions::clearBuffer() {
   b419c:	b0c0      	sub	sp, #256	; 0x100
	while(driver.recv(bufT, &lenT)) {};
   b419e:	f10d 0203 	add.w	r2, sp, #3
   b41a2:	a901      	add	r1, sp, #4
   b41a4:	4620      	mov	r0, r4
   b41a6:	f007 fc8b 	bl	bbac0 <_ZN7RH_RF954recvEPhS0_>
   b41aa:	2800      	cmp	r0, #0
   b41ac:	d1f7      	bne.n	b419e <_ZN14LoRA_Functions11clearBufferEv+0x6>
}
   b41ae:	b040      	add	sp, #256	; 0x100
   b41b0:	bd10      	pop	{r4, pc}
   b41b2:	bf00      	nop
   b41b4:	2003d8ec 	.word	0x2003d8ec

000b41b8 <_ZN14LoRA_Functions14sleepLoRaRadioEv>:

void LoRA_Functions::sleepLoRaRadio() {
	driver.sleep();                             	// Here is where we will power down the LoRA radio module
   b41b8:	4801      	ldr	r0, [pc, #4]	; (b41c0 <_ZN14LoRA_Functions14sleepLoRaRadioEv+0x8>)
   b41ba:	f007 bc6e 	b.w	bba9a <_ZN7RH_RF955sleepEv>
   b41be:	bf00      	nop
   b41c0:	2003d8ec 	.word	0x2003d8ec

000b41c4 <_ZN14LoRA_Functions15initializeRadioEv>:
}

bool  LoRA_Functions::initializeRadio() {  			// Set up the Radio Module
	digitalWrite(RFM95_RST,LOW);					// Reset the radio module before setup
   b41c4:	4b13      	ldr	r3, [pc, #76]	; (b4214 <_ZN14LoRA_Functions15initializeRadioEv+0x50>)
bool  LoRA_Functions::initializeRadio() {  			// Set up the Radio Module
   b41c6:	b510      	push	{r4, lr}
	digitalWrite(RFM95_RST,LOW);					// Reset the radio module before setup
   b41c8:	881c      	ldrh	r4, [r3, #0]
   b41ca:	2100      	movs	r1, #0
   b41cc:	4620      	mov	r0, r4
   b41ce:	f00c f990 	bl	c04f2 <digitalWrite>
	delay(10);
   b41d2:	200a      	movs	r0, #10
   b41d4:	f009 f8e2 	bl	bd39c <delay>
	digitalWrite(RFM95_RST,HIGH);
   b41d8:	2101      	movs	r1, #1
   b41da:	4620      	mov	r0, r4
   b41dc:	f00c f989 	bl	c04f2 <digitalWrite>
	delay(10);
   b41e0:	200a      	movs	r0, #10
   b41e2:	f009 f8db 	bl	bd39c <delay>

	if (!manager.init()) {
   b41e6:	480c      	ldr	r0, [pc, #48]	; (b4218 <_ZN14LoRA_Functions15initializeRadioEv+0x54>)
   b41e8:	f007 f9f5 	bl	bb5d6 <_ZN8RHRouter4initEv>
   b41ec:	4604      	mov	r4, r0
   b41ee:	b928      	cbnz	r0, b41fc <_ZN14LoRA_Functions15initializeRadioEv+0x38>
		Log.info("init failed");					// Defaults after init are 434.0MHz, 0.05MHz AFC pull-in, modulation FSK_Rb2_4Fd36
   b41f0:	490a      	ldr	r1, [pc, #40]	; (b421c <_ZN14LoRA_Functions15initializeRadioEv+0x58>)
   b41f2:	480b      	ldr	r0, [pc, #44]	; (b4220 <_ZN14LoRA_Functions15initializeRadioEv+0x5c>)
   b41f4:	f7ff ffa3 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	}
	driver.setFrequency(RF95_FREQ);					// Frequency is typically 868.0 or 915.0 in the Americas, or 433.0 in the EU - Are there more settings possible here?
	driver.setTxPower(23, false);                   // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then you can set transmitter powers from 5 to 23 dBm (13dBm default).  PA_BOOST?

return true;
}
   b41f8:	4620      	mov	r0, r4
   b41fa:	bd10      	pop	{r4, pc}
	driver.setFrequency(RF95_FREQ);					// Frequency is typically 868.0 or 915.0 in the Americas, or 433.0 in the EU - Are there more settings possible here?
   b41fc:	ed9f 0a09 	vldr	s0, [pc, #36]	; b4224 <_ZN14LoRA_Functions15initializeRadioEv+0x60>
   b4200:	4809      	ldr	r0, [pc, #36]	; (b4228 <_ZN14LoRA_Functions15initializeRadioEv+0x64>)
   b4202:	f007 fce1 	bl	bbbc8 <_ZN7RH_RF9512setFrequencyEf>
	driver.setTxPower(23, false);                   // If you are using RFM95/96/97/98 modules which uses the PA_BOOST transmitter pin, then you can set transmitter powers from 5 to 23 dBm (13dBm default).  PA_BOOST?
   b4206:	4808      	ldr	r0, [pc, #32]	; (b4228 <_ZN14LoRA_Functions15initializeRadioEv+0x64>)
   b4208:	2200      	movs	r2, #0
   b420a:	2117      	movs	r1, #23
   b420c:	f007 fe56 	bl	bbebc <_ZN7RH_RF9510setTxPowerEab>
return true;
   b4210:	e7f2      	b.n	b41f8 <_ZN14LoRA_Functions15initializeRadioEv+0x34>
   b4212:	bf00      	nop
   b4214:	000c4800 	.word	0x000c4800
   b4218:	2003e168 	.word	0x2003e168
   b421c:	000c3641 	.word	0x000c3641
   b4220:	2003e650 	.word	0x2003e650
   b4224:	4464c000 	.word	0x4464c000
   b4228:	2003d8ec 	.word	0x2003d8ec

000b422c <_ZN14LoRA_Functions5setupEb>:
bool LoRA_Functions::setup(bool gatewayID) {
   b422c:	b510      	push	{r4, lr}
   b422e:	460c      	mov	r4, r1
   b4230:	b086      	sub	sp, #24
	LoRA_Functions::initializeRadio();
   b4232:	f7ff ffc7 	bl	b41c4 <_ZN14LoRA_Functions15initializeRadioEv>
	if (gatewayID == true) {
   b4236:	2c00      	cmp	r4, #0
   b4238:	d03c      	beq.n	b42b4 <_ZN14LoRA_Functions5setupEb+0x88>
		sysStatus.set_nodeNumber(GATEWAY_ADDRESS);							// Gateway - Manager is initialized by default with GATEWAY_ADDRESS - make sure it is stored in FRAM
   b423a:	f002 f8bd 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b423e:	2100      	movs	r1, #0
   b4240:	f002 fa9e 	bl	b6780 <_ZN13sysStatusData14set_nodeNumberEh>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   b4244:	a802      	add	r0, sp, #8
   b4246:	f008 ff91 	bl	bd16c <spark_deviceID>
		Log.info("LoRA Radio initialized as a gateway with a deviceID of %s", System.deviceID().c_str());
   b424a:	9a02      	ldr	r2, [sp, #8]
   b424c:	4937      	ldr	r1, [pc, #220]	; (b432c <_ZN14LoRA_Functions5setupEb+0x100>)
   b424e:	4838      	ldr	r0, [pc, #224]	; (b4330 <_ZN14LoRA_Functions5setupEb+0x104>)
   b4250:	f7ff ff75 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		Log.info("LoRA Radio initialized as an unconfigured node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b4254:	a802      	add	r0, sp, #8
   b4256:	f00b fb7b 	bl	bf950 <_ZN6StringD1Ev>
	jp.addString(nodeDatabase.get_nodeIDJson());				// Read in the JSON string from memory
   b425a:	f002 f97b 	bl	b6554 <_ZN10nodeIDData8instanceEv>
   b425e:	4601      	mov	r1, r0
   b4260:	a802      	add	r0, sp, #8
   b4262:	f002 f9a1 	bl	b65a8 <_ZNK10nodeIDData14get_nodeIDJsonEv>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b4266:	9902      	ldr	r1, [sp, #8]
	bool addString(const char *data) { return addData(data, strlen(data)); }
   b4268:	9101      	str	r1, [sp, #4]
   b426a:	4608      	mov	r0, r1
   b426c:	f00d f8bf 	bl	c13ee <strlen>
   b4270:	9901      	ldr	r1, [sp, #4]
   b4272:	4602      	mov	r2, r0
   b4274:	482f      	ldr	r0, [pc, #188]	; (b4334 <_ZN14LoRA_Functions5setupEb+0x108>)
   b4276:	f004 fb84 	bl	b8982 <_ZN10JsonBuffer7addDataEPKcj>
   b427a:	a802      	add	r0, sp, #8
   b427c:	f00b fb68 	bl	bf950 <_ZN6StringD1Ev>
	Log.info("The node string is: %s",nodeDatabase.get_nodeIDJson().c_str());
   b4280:	f002 f968 	bl	b6554 <_ZN10nodeIDData8instanceEv>
   b4284:	4601      	mov	r1, r0
   b4286:	a802      	add	r0, sp, #8
   b4288:	f002 f98e 	bl	b65a8 <_ZNK10nodeIDData14get_nodeIDJsonEv>
   b428c:	9a02      	ldr	r2, [sp, #8]
   b428e:	492a      	ldr	r1, [pc, #168]	; (b4338 <_ZN14LoRA_Functions5setupEb+0x10c>)
   b4290:	4827      	ldr	r0, [pc, #156]	; (b4330 <_ZN14LoRA_Functions5setupEb+0x104>)
   b4292:	f7ff ff54 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b4296:	a802      	add	r0, sp, #8
   b4298:	f00b fb5a 	bl	bf950 <_ZN6StringD1Ev>
	if (jp.parse()) Log.info("Parsed Successfully");
   b429c:	4825      	ldr	r0, [pc, #148]	; (b4334 <_ZN14LoRA_Functions5setupEb+0x108>)
   b429e:	f005 f8c9 	bl	b9434 <_ZN10JsonParser5parseEv>
   b42a2:	2800      	cmp	r0, #0
   b42a4:	d03b      	beq.n	b431e <_ZN14LoRA_Functions5setupEb+0xf2>
   b42a6:	4925      	ldr	r1, [pc, #148]	; (b433c <_ZN14LoRA_Functions5setupEb+0x110>)
		Log.info("Parsing error resetting nodeID database");
   b42a8:	4821      	ldr	r0, [pc, #132]	; (b4330 <_ZN14LoRA_Functions5setupEb+0x104>)
   b42aa:	f7ff ff48 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
}
   b42ae:	2001      	movs	r0, #1
   b42b0:	b006      	add	sp, #24
   b42b2:	bd10      	pop	{r4, pc}
	else if (sysStatus.get_nodeNumber() > 0 && sysStatus.get_nodeNumber() <= 10) {
   b42b4:	f002 f880 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b42b8:	f002 f9fa 	bl	b66b0 <_ZNK13sysStatusData14get_nodeNumberEv>
   b42bc:	b1d8      	cbz	r0, b42f6 <_ZN14LoRA_Functions5setupEb+0xca>
   b42be:	f002 f87b 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b42c2:	f002 f9f5 	bl	b66b0 <_ZNK13sysStatusData14get_nodeNumberEv>
   b42c6:	280a      	cmp	r0, #10
   b42c8:	d815      	bhi.n	b42f6 <_ZN14LoRA_Functions5setupEb+0xca>
		manager.setThisAddress(sysStatus.get_nodeNumber());// Node - use the Node address in valid range from memory
   b42ca:	f002 f875 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b42ce:	f002 f9ef 	bl	b66b0 <_ZNK13sysStatusData14get_nodeNumberEv>
   b42d2:	4601      	mov	r1, r0
   b42d4:	481a      	ldr	r0, [pc, #104]	; (b4340 <_ZN14LoRA_Functions5setupEb+0x114>)
   b42d6:	f006 fcaa 	bl	bac2e <_ZN10RHDatagram14setThisAddressEh>
		Log.info("LoRA Radio initialized as node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b42da:	4819      	ldr	r0, [pc, #100]	; (b4340 <_ZN14LoRA_Functions5setupEb+0x114>)
   b42dc:	f006 fc8d 	bl	babfa <_ZN10RHDatagram11thisAddressEv>
   b42e0:	9001      	str	r0, [sp, #4]
   b42e2:	a802      	add	r0, sp, #8
   b42e4:	f008 ff42 	bl	bd16c <spark_deviceID>
   b42e8:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   b42ec:	4915      	ldr	r1, [pc, #84]	; (b4344 <_ZN14LoRA_Functions5setupEb+0x118>)
		Log.info("LoRA Radio initialized as an unconfigured node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b42ee:	4810      	ldr	r0, [pc, #64]	; (b4330 <_ZN14LoRA_Functions5setupEb+0x104>)
   b42f0:	f7ff ff25 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b42f4:	e7ae      	b.n	b4254 <_ZN14LoRA_Functions5setupEb+0x28>
		sysStatus.set_nodeNumber(11);
   b42f6:	f002 f85f 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b42fa:	210b      	movs	r1, #11
   b42fc:	f002 fa40 	bl	b6780 <_ZN13sysStatusData14set_nodeNumberEh>
		manager.setThisAddress(11);
   b4300:	210b      	movs	r1, #11
   b4302:	480f      	ldr	r0, [pc, #60]	; (b4340 <_ZN14LoRA_Functions5setupEb+0x114>)
   b4304:	f006 fc93 	bl	bac2e <_ZN10RHDatagram14setThisAddressEh>
		Log.info("LoRA Radio initialized as an unconfigured node %i and a deviceID of %s", manager.thisAddress(), System.deviceID().c_str());
   b4308:	480d      	ldr	r0, [pc, #52]	; (b4340 <_ZN14LoRA_Functions5setupEb+0x114>)
   b430a:	f006 fc76 	bl	babfa <_ZN10RHDatagram11thisAddressEv>
   b430e:	9001      	str	r0, [sp, #4]
   b4310:	a802      	add	r0, sp, #8
   b4312:	f008 ff2b 	bl	bd16c <spark_deviceID>
   b4316:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   b431a:	490b      	ldr	r1, [pc, #44]	; (b4348 <_ZN14LoRA_Functions5setupEb+0x11c>)
   b431c:	e7e7      	b.n	b42ee <_ZN14LoRA_Functions5setupEb+0xc2>
		nodeDatabase.resetNodeIDs();
   b431e:	f002 f919 	bl	b6554 <_ZN10nodeIDData8instanceEv>
   b4322:	f002 f959 	bl	b65d8 <_ZN10nodeIDData12resetNodeIDsEv>
		Log.info("Parsing error resetting nodeID database");
   b4326:	4909      	ldr	r1, [pc, #36]	; (b434c <_ZN14LoRA_Functions5setupEb+0x120>)
   b4328:	e7be      	b.n	b42a8 <_ZN14LoRA_Functions5setupEb+0x7c>
   b432a:	bf00      	nop
   b432c:	000c364d 	.word	0x000c364d
   b4330:	2003e650 	.word	0x2003e650
   b4334:	2003da1c 	.word	0x2003da1c
   b4338:	000c3705 	.word	0x000c3705
   b433c:	000c371c 	.word	0x000c371c
   b4340:	2003e16c 	.word	0x2003e16c
   b4344:	000c3687 	.word	0x000c3687
   b4348:	000c36be 	.word	0x000c36be
   b434c:	000c3730 	.word	0x000c3730

000b4350 <_ZN14LoRA_Functions25decipherDataReportGatewayEv>:
	return false;
}

// These are the receive and respond messages for data reports

bool LoRA_Functions::decipherDataReportGateway() {			// Receives the data report and loads results into current object for reporting
   b4350:	b538      	push	{r3, r4, r5, lr}
	current.set_hourlyCount(buf[4] << 8 | buf[5]);
   b4352:	4c1e      	ldr	r4, [pc, #120]	; (b43cc <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0x7c>)
   b4354:	f002 f878 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b4358:	88a1      	ldrh	r1, [r4, #4]
   b435a:	ba49      	rev16	r1, r1
   b435c:	b289      	uxth	r1, r1
   b435e:	f002 fb5e 	bl	b6a1e <_ZN17currentStatusData15set_hourlyCountEt>
	current.set_dailyCount(buf[6] << 8 | buf[7]);
   b4362:	f002 f871 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b4366:	88e1      	ldrh	r1, [r4, #6]
   b4368:	ba49      	rev16	r1, r1
   b436a:	b289      	uxth	r1, r1
   b436c:	f002 fb5d 	bl	b6a2a <_ZN17currentStatusData14set_dailyCountEt>
	current.set_sensorType(buf[8]);
   b4370:	f002 f86a 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b4374:	7a21      	ldrb	r1, [r4, #8]
   b4376:	f002 fa63 	bl	b6840 <_ZN17currentStatusData14set_sensorTypeEh>
	current.set_internalTempC(buf[9]);
   b437a:	f002 f865 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b437e:	7a61      	ldrb	r1, [r4, #9]
   b4380:	f002 fa3a 	bl	b67f8 <_ZN17currentStatusData17set_internalTempCEh>
	current.set_stateOfCharge(buf[10]);
   b4384:	f002 f860 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b4388:	4605      	mov	r5, r0
   b438a:	7aa0      	ldrb	r0, [r4, #10]
   b438c:	f00c fb0a 	bl	c09a4 <__aeabi_ui2d>
   b4390:	ec41 0b10 	vmov	d0, r0, r1
   b4394:	4628      	mov	r0, r5
   b4396:	f002 f89f 	bl	b64d8 <_ZN17currentStatusData17set_stateOfChargeEd>
	current.set_batteryState(buf[11]);
   b439a:	f002 f855 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b439e:	7ae1      	ldrb	r1, [r4, #11]
   b43a0:	f002 fa30 	bl	b6804 <_ZN17currentStatusData16set_batteryStateEh>
	current.set_resetCount(buf[12]);
   b43a4:	f002 f850 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b43a8:	7b21      	ldrb	r1, [r4, #12]
   b43aa:	f002 fa31 	bl	b6810 <_ZN17currentStatusData14set_resetCountEh>
	current.set_messageCount(buf[13]);
   b43ae:	f002 f84b 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b43b2:	7b61      	ldrb	r1, [r4, #13]
   b43b4:	f002 fa32 	bl	b681c <_ZN17currentStatusData16set_messageCountEh>
	current.set_successCount(buf[14]);
   b43b8:	f002 f846 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b43bc:	7ba1      	ldrb	r1, [r4, #14]
   b43be:	f002 fa33 	bl	b6828 <_ZN17currentStatusData16set_successCountEh>

	lora_state = DATA_ACK;		// Prepare to respond
   b43c2:	4b03      	ldr	r3, [pc, #12]	; (b43d0 <_ZN14LoRA_Functions25decipherDataReportGatewayEv+0x80>)
   b43c4:	2204      	movs	r2, #4
   b43c6:	701a      	strb	r2, [r3, #0]
	return true;
}
   b43c8:	2001      	movs	r0, #1
   b43ca:	bd38      	pop	{r3, r4, r5, pc}
   b43cc:	2003d870 	.word	0x2003d870
   b43d0:	2003d868 	.word	0x2003d868

000b43d4 <_ZN14LoRA_Functions12findDeviceIDEii>:
	nodeDatabase.set_nodeIDJson(jp.getBuffer());									// This should backup the nodeID database - now updated to persistent storage

	return index;
}

String LoRA_Functions::findDeviceID(int nodeNumber, int radioID)  {
   b43d4:	b570      	push	{r4, r5, r6, lr}
   b43d6:	b088      	sub	sp, #32
	String nodeDeviceID;
   b43d8:	491d      	ldr	r1, [pc, #116]	; (b4450 <_ZN14LoRA_Functions12findDeviceIDEii+0x7c>)
String LoRA_Functions::findDeviceID(int nodeNumber, int radioID)  {
   b43da:	4604      	mov	r4, r0
	String nodeDeviceID;
   b43dc:	a804      	add	r0, sp, #16
String LoRA_Functions::findDeviceID(int nodeNumber, int radioID)  {
   b43de:	4616      	mov	r6, r2
   b43e0:	461d      	mov	r5, r3
	String nodeDeviceID;
   b43e2:	f00b fb00 	bl	bf9e6 <_ZN6StringC1EPK19__FlashStringHelper>
	int nodeRadioID;

	const JsonParserGeneratorRK::jsmntok_t *nodesArrayContainer;			// Token for the outer array
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b43e6:	481b      	ldr	r0, [pc, #108]	; (b4454 <_ZN14LoRA_Functions12findDeviceIDEii+0x80>)
   b43e8:	f004 fb0d 	bl	b8a06 <_ZNK10JsonParser14getOuterObjectEv>
   b43ec:	4a1a      	ldr	r2, [pc, #104]	; (b4458 <_ZN14LoRA_Functions12findDeviceIDEii+0x84>)
   b43ee:	4601      	mov	r1, r0
   b43f0:	ab03      	add	r3, sp, #12
   b43f2:	4818      	ldr	r0, [pc, #96]	; (b4454 <_ZN14LoRA_Functions12findDeviceIDEii+0x80>)
   b43f4:	f004 fc6c 	bl	b8cd0 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	const JsonParserGeneratorRK::jsmntok_t *nodeObjectContainer;			// Token for the objects in the array (I beleive)

	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   b43f8:	9903      	ldr	r1, [sp, #12]
   b43fa:	4816      	ldr	r0, [pc, #88]	; (b4454 <_ZN14LoRA_Functions12findDeviceIDEii+0x80>)
   b43fc:	1e72      	subs	r2, r6, #1
   b43fe:	f004 fb24 	bl	b8a4a <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) return "null";							// Ran out of entries - no match found
   b4402:	4601      	mov	r1, r0
   b4404:	b948      	cbnz	r0, b441a <_ZN14LoRA_Functions12findDeviceIDEii+0x46>
   b4406:	4915      	ldr	r1, [pc, #84]	; (b445c <_ZN14LoRA_Functions12findDeviceIDEii+0x88>)
   b4408:	4620      	mov	r0, r4
   b440a:	f00b faec 	bl	bf9e6 <_ZN6StringC1EPK19__FlashStringHelper>
	String nodeDeviceID;
   b440e:	a804      	add	r0, sp, #16
   b4410:	f00b fa9e 	bl	bf950 <_ZN6StringD1Ev>
	if (nodeRadioID != radioID) return "null";								// Not the right nodeNumber / nodeID combo

	jp.getValueByKey(nodeObjectContainer, "dID", nodeDeviceID);				// Get the deviceID and compare
	if (nodeDeviceID == NULL) return "null";
	else return nodeDeviceID;
}
   b4414:	4620      	mov	r0, r4
   b4416:	b008      	add	sp, #32
   b4418:	bd70      	pop	{r4, r5, r6, pc}
	jp.getValueByKey(nodeObjectContainer,"rID", nodeRadioID);				// Get the radioID to see if it is a match
   b441a:	ab02      	add	r3, sp, #8
   b441c:	9001      	str	r0, [sp, #4]
   b441e:	4a10      	ldr	r2, [pc, #64]	; (b4460 <_ZN14LoRA_Functions12findDeviceIDEii+0x8c>)
   b4420:	480c      	ldr	r0, [pc, #48]	; (b4454 <_ZN14LoRA_Functions12findDeviceIDEii+0x80>)
   b4422:	f7ff fe70 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	if (nodeRadioID != radioID) return "null";								// Not the right nodeNumber / nodeID combo
   b4426:	9b02      	ldr	r3, [sp, #8]
   b4428:	9901      	ldr	r1, [sp, #4]
   b442a:	42ab      	cmp	r3, r5
   b442c:	d1eb      	bne.n	b4406 <_ZN14LoRA_Functions12findDeviceIDEii+0x32>
	jp.getValueByKey(nodeObjectContainer, "dID", nodeDeviceID);				// Get the deviceID and compare
   b442e:	4809      	ldr	r0, [pc, #36]	; (b4454 <_ZN14LoRA_Functions12findDeviceIDEii+0x80>)
   b4430:	4a0c      	ldr	r2, [pc, #48]	; (b4464 <_ZN14LoRA_Functions12findDeviceIDEii+0x90>)
   b4432:	ab04      	add	r3, sp, #16
   b4434:	f7ff fe75 	bl	b4122 <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4438:	2100      	movs	r1, #0
   b443a:	a804      	add	r0, sp, #16
   b443c:	f00b fb99 	bl	bfb72 <_ZNK6String6equalsEPKc>
	if (nodeDeviceID == NULL) return "null";
   b4440:	2800      	cmp	r0, #0
   b4442:	d1e0      	bne.n	b4406 <_ZN14LoRA_Functions12findDeviceIDEii+0x32>
	else return nodeDeviceID;
   b4444:	a904      	add	r1, sp, #16
   b4446:	4620      	mov	r0, r4
   b4448:	f00b fafe 	bl	bfa48 <_ZN6StringC1EOS_>
   b444c:	e7df      	b.n	b440e <_ZN14LoRA_Functions12findDeviceIDEii+0x3a>
   b444e:	bf00      	nop
   b4450:	000c5454 	.word	0x000c5454
   b4454:	2003da1c 	.word	0x2003da1c
   b4458:	000c3758 	.word	0x000c3758
   b445c:	000c375e 	.word	0x000c375e
   b4460:	000c3763 	.word	0x000c3763
   b4464:	000c3767 	.word	0x000c3767

000b4468 <_ZN14LoRA_Functions14nodeConfiguredEii>:

bool LoRA_Functions::nodeConfigured(int nodeNumber, int radioID)  {
   b4468:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (nodeNumber > 10) return false;
   b446a:	290a      	cmp	r1, #10
bool LoRA_Functions::nodeConfigured(int nodeNumber, int radioID)  {
   b446c:	460c      	mov	r4, r1
   b446e:	9201      	str	r2, [sp, #4]
	if (nodeNumber > 10) return false;
   b4470:	dd02      	ble.n	b4478 <_ZN14LoRA_Functions14nodeConfiguredEii+0x10>
	jp.getValueByKey(nodeObjectContainer, "rID", radioID);					// Get the radioID for the node number in question

	if (radioID == current.get_nodeID()) return true;
	else {
		Log.info("Node not configured");  // See the raw JSON string
		return false;
   b4472:	2000      	movs	r0, #0
	}
}
   b4474:	b004      	add	sp, #16
   b4476:	bd10      	pop	{r4, pc}
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4478:	4811      	ldr	r0, [pc, #68]	; (b44c0 <_ZN14LoRA_Functions14nodeConfiguredEii+0x58>)
   b447a:	f004 fac4 	bl	b8a06 <_ZNK10JsonParser14getOuterObjectEv>
   b447e:	4a11      	ldr	r2, [pc, #68]	; (b44c4 <_ZN14LoRA_Functions14nodeConfiguredEii+0x5c>)
   b4480:	4601      	mov	r1, r0
   b4482:	ab03      	add	r3, sp, #12
   b4484:	480e      	ldr	r0, [pc, #56]	; (b44c0 <_ZN14LoRA_Functions14nodeConfiguredEii+0x58>)
   b4486:	f004 fc23 	bl	b8cd0 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   b448a:	9903      	ldr	r1, [sp, #12]
   b448c:	480c      	ldr	r0, [pc, #48]	; (b44c0 <_ZN14LoRA_Functions14nodeConfiguredEii+0x58>)
   b448e:	1e62      	subs	r2, r4, #1
   b4490:	f004 fadb 	bl	b8a4a <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) return false;							// Ran out of entries - no match found
   b4494:	4601      	mov	r1, r0
   b4496:	2800      	cmp	r0, #0
   b4498:	d0eb      	beq.n	b4472 <_ZN14LoRA_Functions14nodeConfiguredEii+0xa>
	jp.getValueByKey(nodeObjectContainer, "rID", radioID);					// Get the radioID for the node number in question
   b449a:	ab01      	add	r3, sp, #4
   b449c:	4a0a      	ldr	r2, [pc, #40]	; (b44c8 <_ZN14LoRA_Functions14nodeConfiguredEii+0x60>)
   b449e:	4808      	ldr	r0, [pc, #32]	; (b44c0 <_ZN14LoRA_Functions14nodeConfiguredEii+0x58>)
   b44a0:	f7ff fe31 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	if (radioID == current.get_nodeID()) return true;
   b44a4:	f001 ffd0 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b44a8:	f002 fa49 	bl	b693e <_ZNK17currentStatusData10get_nodeIDEv>
   b44ac:	9b01      	ldr	r3, [sp, #4]
   b44ae:	4298      	cmp	r0, r3
   b44b0:	d004      	beq.n	b44bc <_ZN14LoRA_Functions14nodeConfiguredEii+0x54>
		Log.info("Node not configured");  // See the raw JSON string
   b44b2:	4906      	ldr	r1, [pc, #24]	; (b44cc <_ZN14LoRA_Functions14nodeConfiguredEii+0x64>)
   b44b4:	4806      	ldr	r0, [pc, #24]	; (b44d0 <_ZN14LoRA_Functions14nodeConfiguredEii+0x68>)
   b44b6:	f7ff fe42 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b44ba:	e7da      	b.n	b4472 <_ZN14LoRA_Functions14nodeConfiguredEii+0xa>
	if (radioID == current.get_nodeID()) return true;
   b44bc:	2001      	movs	r0, #1
   b44be:	e7d9      	b.n	b4474 <_ZN14LoRA_Functions14nodeConfiguredEii+0xc>
   b44c0:	2003da1c 	.word	0x2003da1c
   b44c4:	000c3758 	.word	0x000c3758
   b44c8:	000c3763 	.word	0x000c3763
   b44cc:	000c376b 	.word	0x000c376b
   b44d0:	2003e650 	.word	0x2003e650

000b44d4 <_ZN14LoRA_Functions7getTypeEi>:

	nodeDatabase.set_nodeIDJson(jp.getBuffer());									// This should backup the nodeID database - now updated to persistent storage
	return true;
}

byte LoRA_Functions::getType(int nodeNumber) {
   b44d4:	b513      	push	{r0, r1, r4, lr}
	int type;

	const JsonParserGeneratorRK::jsmntok_t *nodesArrayContainer;			// Token for the outer array
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b44d6:	4816      	ldr	r0, [pc, #88]	; (b4530 <_ZN14LoRA_Functions7getTypeEi+0x5c>)
byte LoRA_Functions::getType(int nodeNumber) {
   b44d8:	460c      	mov	r4, r1
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b44da:	f004 fa94 	bl	b8a06 <_ZNK10JsonParser14getOuterObjectEv>
   b44de:	4a15      	ldr	r2, [pc, #84]	; (b4534 <_ZN14LoRA_Functions7getTypeEi+0x60>)
   b44e0:	4601      	mov	r1, r0
   b44e2:	ab01      	add	r3, sp, #4
   b44e4:	4812      	ldr	r0, [pc, #72]	; (b4530 <_ZN14LoRA_Functions7getTypeEi+0x5c>)
   b44e6:	f004 fbf3 	bl	b8cd0 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	const JsonParserGeneratorRK::jsmntok_t *nodeObjectContainer;			// Token for the objects in the array (I beleive)

	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   b44ea:	9901      	ldr	r1, [sp, #4]
   b44ec:	4810      	ldr	r0, [pc, #64]	; (b4530 <_ZN14LoRA_Functions7getTypeEi+0x5c>)
   b44ee:	1e62      	subs	r2, r4, #1
   b44f0:	f004 faab 	bl	b8a4a <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) {
   b44f4:	4601      	mov	r1, r0
   b44f6:	b970      	cbnz	r0, b4516 <_ZN14LoRA_Functions7getTypeEi+0x42>
		Log.info("From getType function Node number not found so returning %d",current.get_sensorType());
   b44f8:	f001 ffa6 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b44fc:	f002 f923 	bl	b6746 <_ZNK17currentStatusData14get_sensorTypeEv>
   b4500:	490d      	ldr	r1, [pc, #52]	; (b4538 <_ZN14LoRA_Functions7getTypeEi+0x64>)
   b4502:	4602      	mov	r2, r0
   b4504:	480d      	ldr	r0, [pc, #52]	; (b453c <_ZN14LoRA_Functions7getTypeEi+0x68>)
   b4506:	f7ff fe1a 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		return current.get_sensorType();									// Ran out of entries, go with what was reported by the node
   b450a:	f001 ff9d 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b450e:	f002 f91a 	bl	b6746 <_ZNK17currentStatusData14get_sensorTypeEv>
	} 

	jp.getValueByKey(nodeObjectContainer, "type", type);
	Log.info("Returning sensor type %d",type);
	return type;
}
   b4512:	b002      	add	sp, #8
   b4514:	bd10      	pop	{r4, pc}
	jp.getValueByKey(nodeObjectContainer, "type", type);
   b4516:	4a0a      	ldr	r2, [pc, #40]	; (b4540 <_ZN14LoRA_Functions7getTypeEi+0x6c>)
   b4518:	4805      	ldr	r0, [pc, #20]	; (b4530 <_ZN14LoRA_Functions7getTypeEi+0x5c>)
   b451a:	466b      	mov	r3, sp
   b451c:	f7ff fdf3 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	Log.info("Returning sensor type %d",type);
   b4520:	4806      	ldr	r0, [pc, #24]	; (b453c <_ZN14LoRA_Functions7getTypeEi+0x68>)
   b4522:	9a00      	ldr	r2, [sp, #0]
   b4524:	4907      	ldr	r1, [pc, #28]	; (b4544 <_ZN14LoRA_Functions7getTypeEi+0x70>)
   b4526:	f7ff fe0a 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	return type;
   b452a:	f89d 0000 	ldrb.w	r0, [sp]
   b452e:	e7f0      	b.n	b4512 <_ZN14LoRA_Functions7getTypeEi+0x3e>
   b4530:	2003da1c 	.word	0x2003da1c
   b4534:	000c3758 	.word	0x000c3758
   b4538:	000c377f 	.word	0x000c377f
   b453c:	2003e650 	.word	0x2003e650
   b4540:	000c37bb 	.word	0x000c37bb
   b4544:	000c37c0 	.word	0x000c37c0

000b4548 <_ZN14LoRA_Functions8getAlertEi>:
	return true;

}

byte LoRA_Functions::getAlert(int nodeNumber) {
	if (nodeNumber > 10) return 255;										// Not a configured node
   b4548:	290a      	cmp	r1, #10
byte LoRA_Functions::getAlert(int nodeNumber) {
   b454a:	b513      	push	{r0, r1, r4, lr}
   b454c:	460c      	mov	r4, r1
	if (nodeNumber > 10) return 255;										// Not a configured node
   b454e:	dc13      	bgt.n	b4578 <_ZN14LoRA_Functions8getAlertEi+0x30>

	int pendingAlert;

	const JsonParserGeneratorRK::jsmntok_t *nodesArrayContainer;			// Token for the outer array
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4550:	480f      	ldr	r0, [pc, #60]	; (b4590 <_ZN14LoRA_Functions8getAlertEi+0x48>)
   b4552:	f004 fa58 	bl	b8a06 <_ZNK10JsonParser14getOuterObjectEv>
   b4556:	4a0f      	ldr	r2, [pc, #60]	; (b4594 <_ZN14LoRA_Functions8getAlertEi+0x4c>)
   b4558:	4601      	mov	r1, r0
   b455a:	ab01      	add	r3, sp, #4
   b455c:	480c      	ldr	r0, [pc, #48]	; (b4590 <_ZN14LoRA_Functions8getAlertEi+0x48>)
   b455e:	f004 fbb7 	bl	b8cd0 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	const JsonParserGeneratorRK::jsmntok_t *nodeObjectContainer;			// Token for the objects in the array (I beleive)

	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   b4562:	9901      	ldr	r1, [sp, #4]
   b4564:	480a      	ldr	r0, [pc, #40]	; (b4590 <_ZN14LoRA_Functions8getAlertEi+0x48>)
   b4566:	1e62      	subs	r2, r4, #1
   b4568:	f004 fa6f 	bl	b8a4a <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) {
   b456c:	4601      	mov	r1, r0
   b456e:	b928      	cbnz	r0, b457c <_ZN14LoRA_Functions8getAlertEi+0x34>
		Log.info("From getAlert function, Node number not found");
   b4570:	4909      	ldr	r1, [pc, #36]	; (b4598 <_ZN14LoRA_Functions8getAlertEi+0x50>)
   b4572:	480a      	ldr	r0, [pc, #40]	; (b459c <_ZN14LoRA_Functions8getAlertEi+0x54>)
   b4574:	f7ff fde3 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	if (nodeNumber > 10) return 255;										// Not a configured node
   b4578:	20ff      	movs	r0, #255	; 0xff
   b457a:	e006      	b.n	b458a <_ZN14LoRA_Functions8getAlertEi+0x42>
		return 255;															// Ran out of entries 
	} 

	jp.getValueByKey(nodeObjectContainer, "pend", pendingAlert);
   b457c:	4804      	ldr	r0, [pc, #16]	; (b4590 <_ZN14LoRA_Functions8getAlertEi+0x48>)
   b457e:	4a08      	ldr	r2, [pc, #32]	; (b45a0 <_ZN14LoRA_Functions8getAlertEi+0x58>)
   b4580:	466b      	mov	r3, sp
   b4582:	f7ff fdc0 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>

	return pendingAlert;
   b4586:	f89d 0000 	ldrb.w	r0, [sp]

}
   b458a:	b002      	add	sp, #8
   b458c:	bd10      	pop	{r4, pc}
   b458e:	bf00      	nop
   b4590:	2003da1c 	.word	0x2003da1c
   b4594:	000c3758 	.word	0x000c3758
   b4598:	000c37d9 	.word	0x000c37d9
   b459c:	2003e650 	.word	0x2003e650
   b45a0:	000c3807 	.word	0x000c3807

000b45a4 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv>:

	// Log.info(nodeDatabase.get_nodeIDJson());  // See the raw JSON string

}

bool LoRA_Functions::nodeConnectionsHealthy() {								// Connections are healthy if at least one node connected in last two periods
   b45a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b45a8:	4605      	mov	r5, r0
// Resets the LoRA Radio if not healthy
	
	int lastConnect;
	time_t secondsPerPeriod = sysStatus.get_frequencyMinutes() * 60;
   b45aa:	f001 ff05 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b45ae:	f002 f964 	bl	b687a <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b45b2:	263c      	movs	r6, #60	; 0x3c
   b45b4:	4346      	muls	r6, r0
	bool health = true;

	const JsonParserGeneratorRK::jsmntok_t *nodesArrayContainer;			// Token for the outer array
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b45b6:	4821      	ldr	r0, [pc, #132]	; (b463c <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x98>)
	const JsonParserGeneratorRK::jsmntok_t *nodeObjectContainer;			// Token for the objects in the array (I beleive)

	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b45b8:	4f20      	ldr	r7, [pc, #128]	; (b463c <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x98>)
		if(nodeObjectContainer == NULL) break;								// Ran out of entries 

		jp.getValueByKey(nodeObjectContainer, "last", lastConnect);
   b45ba:	f8df 809c 	ldr.w	r8, [pc, #156]	; b4658 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0xb4>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b45be:	f004 fa22 	bl	b8a06 <_ZNK10JsonParser14getOuterObjectEv>
   b45c2:	4a1f      	ldr	r2, [pc, #124]	; (b4640 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x9c>)
   b45c4:	4601      	mov	r1, r0
   b45c6:	ab01      	add	r3, sp, #4
   b45c8:	481c      	ldr	r0, [pc, #112]	; (b463c <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x98>)
   b45ca:	f004 fb81 	bl	b8cd0 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b45ce:	2400      	movs	r4, #0
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b45d0:	9901      	ldr	r1, [sp, #4]
   b45d2:	4622      	mov	r2, r4
   b45d4:	4638      	mov	r0, r7
   b45d6:	f004 fa38 	bl	b8a4a <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
		if(nodeObjectContainer == NULL) break;								// Ran out of entries 
   b45da:	4601      	mov	r1, r0
   b45dc:	b168      	cbz	r0, b45fa <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x56>
		jp.getValueByKey(nodeObjectContainer, "last", lastConnect);
   b45de:	466b      	mov	r3, sp
   b45e0:	4642      	mov	r2, r8
   b45e2:	4638      	mov	r0, r7
   b45e4:	f7ff fd8f 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>

		if ((Time.now() - lastConnect) > secondsPerPeriod) {				// If any of the nodes fail to connect - will extend loRA dwell time
   b45e8:	f00b fd73 	bl	c00d2 <_ZN9TimeClass3nowEv>
   b45ec:	9b00      	ldr	r3, [sp, #0]
   b45ee:	1ac0      	subs	r0, r0, r3
   b45f0:	4286      	cmp	r6, r0
   b45f2:	db19      	blt.n	b4628 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x84>
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b45f4:	3401      	adds	r4, #1
   b45f6:	2c0a      	cmp	r4, #10
   b45f8:	d1ea      	bne.n	b45d0 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x2c>
			health = false;
			break;															// Don't need to keep checking
		}
	}

	Log.info("Node connections are %s ", (health) ? "healthy":"unhealthy");
   b45fa:	4a12      	ldr	r2, [pc, #72]	; (b4644 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0xa0>)
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b45fc:	2401      	movs	r4, #1
	Log.info("Node connections are %s ", (health) ? "healthy":"unhealthy");
   b45fe:	4912      	ldr	r1, [pc, #72]	; (b4648 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0xa4>)
   b4600:	4812      	ldr	r0, [pc, #72]	; (b464c <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0xa8>)
   b4602:	f7ff fd9c 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>

	if(!health) {
   b4606:	b994      	cbnz	r4, b462e <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x8a>
		Log.info("Node connections unhealthy, reseting LoRA radio");
   b4608:	4911      	ldr	r1, [pc, #68]	; (b4650 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0xac>)
   b460a:	4810      	ldr	r0, [pc, #64]	; (b464c <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0xa8>)
   b460c:	f7ff fd97 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		sysStatus.set_connectivityMode(1);									// This will set a longer LoRA connection window
   b4610:	f001 fed2 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b4614:	2101      	movs	r1, #1
   b4616:	f002 f8bf 	bl	b6798 <_ZN13sysStatusData20set_connectivityModeEh>
		LoRA_Functions::initializeRadio();
   b461a:	4628      	mov	r0, r5
   b461c:	f7ff fdd2 	bl	b41c4 <_ZN14LoRA_Functions15initializeRadioEv>
	}
	else sysStatus.set_connectivityMode(0);									// This will set a normal LoRA connection window

	return health;
}
   b4620:	4620      	mov	r0, r4
   b4622:	b002      	add	sp, #8
   b4624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	Log.info("Node connections are %s ", (health) ? "healthy":"unhealthy");
   b4628:	4a0a      	ldr	r2, [pc, #40]	; (b4654 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0xb0>)
			health = false;
   b462a:	2400      	movs	r4, #0
   b462c:	e7e7      	b.n	b45fe <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x5a>
	else sysStatus.set_connectivityMode(0);									// This will set a normal LoRA connection window
   b462e:	f001 fec3 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b4632:	2100      	movs	r1, #0
   b4634:	f002 f8b0 	bl	b6798 <_ZN13sysStatusData20set_connectivityModeEh>
   b4638:	e7f2      	b.n	b4620 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv+0x7c>
   b463a:	bf00      	nop
   b463c:	2003da1c 	.word	0x2003da1c
   b4640:	000c3758 	.word	0x000c3758
   b4644:	000c380e 	.word	0x000c380e
   b4648:	000c381b 	.word	0x000c381b
   b464c:	2003e650 	.word	0x2003e650
   b4650:	000c3834 	.word	0x000c3834
   b4654:	000c380c 	.word	0x000c380c
   b4658:	000c3816 	.word	0x000c3816

000b465c <_ZN14LoRA_Functions14stringCheckSumE6String>:

int LoRA_Functions::stringCheckSum(String str){												// This function is made for the Particle DeviceID
   b465c:	b570      	push	{r4, r5, r6, lr}
    int result = 0;
    for(unsigned int i = 0; i < str.length(); i++){
   b465e:	2500      	movs	r5, #0
int LoRA_Functions::stringCheckSum(String str){												// This function is made for the Particle DeviceID
   b4660:	460e      	mov	r6, r1
    int result = 0;
   b4662:	462c      	mov	r4, r5
    for(unsigned int i = 0; i < str.length(); i++){
   b4664:	68b3      	ldr	r3, [r6, #8]
   b4666:	429d      	cmp	r5, r3
   b4668:	d218      	bcs.n	b469c <_ZN14LoRA_Functions14stringCheckSumE6String+0x40>
      int asciiCode = (int)str[i];
   b466a:	4629      	mov	r1, r5
   b466c:	4630      	mov	r0, r6
   b466e:	f00b faa7 	bl	bfbc0 <_ZN6StringixEj>
   b4672:	7803      	ldrb	r3, [r0, #0]

      if (asciiCode >=48 && asciiCode <58) {              // 0-9
   b4674:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   b4678:	2a09      	cmp	r2, #9
   b467a:	d802      	bhi.n	b4682 <_ZN14LoRA_Functions14stringCheckSumE6String+0x26>
        result += asciiCode - 48;
   b467c:	4414      	add	r4, r2
    for(unsigned int i = 0; i < str.length(); i++){
   b467e:	3501      	adds	r5, #1
   b4680:	e7f0      	b.n	b4664 <_ZN14LoRA_Functions14stringCheckSumE6String+0x8>
      } 
      else if (asciiCode >=65 && asciiCode < 71) {        // A-F
   b4682:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
   b4686:	2a05      	cmp	r2, #5
   b4688:	d802      	bhi.n	b4690 <_ZN14LoRA_Functions14stringCheckSumE6String+0x34>
        result += 10 + asciiCode -65;
   b468a:	3b37      	subs	r3, #55	; 0x37
      }
      else if (asciiCode >=97 && asciiCode < 103) {       // a - f
        result += 10 + asciiCode -97;
   b468c:	441c      	add	r4, r3
   b468e:	e7f6      	b.n	b467e <_ZN14LoRA_Functions14stringCheckSumE6String+0x22>
      else if (asciiCode >=97 && asciiCode < 103) {       // a - f
   b4690:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   b4694:	2a05      	cmp	r2, #5
   b4696:	d8f2      	bhi.n	b467e <_ZN14LoRA_Functions14stringCheckSumE6String+0x22>
        result += 10 + asciiCode -97;
   b4698:	3b57      	subs	r3, #87	; 0x57
   b469a:	e7f7      	b.n	b468c <_ZN14LoRA_Functions14stringCheckSumE6String+0x30>
      }
    }
    return result;
}
   b469c:	4620      	mov	r0, r4
   b469e:	bd70      	pop	{r4, r5, r6, pc}

000b46a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b46a0:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b46a2:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b46a4:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b46a6:	b17c      	cbz	r4, b46c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b46a8:	6863      	ldr	r3, [r4, #4]
   b46aa:	3b01      	subs	r3, #1
   b46ac:	6063      	str	r3, [r4, #4]
   b46ae:	b95b      	cbnz	r3, b46c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b46b0:	6823      	ldr	r3, [r4, #0]
   b46b2:	4620      	mov	r0, r4
   b46b4:	689b      	ldr	r3, [r3, #8]
   b46b6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b46b8:	68a3      	ldr	r3, [r4, #8]
   b46ba:	3b01      	subs	r3, #1
   b46bc:	60a3      	str	r3, [r4, #8]
   b46be:	b91b      	cbnz	r3, b46c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b46c0:	6823      	ldr	r3, [r4, #0]
   b46c2:	4620      	mov	r0, r4
   b46c4:	68db      	ldr	r3, [r3, #12]
   b46c6:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b46c8:	4628      	mov	r0, r5
   b46ca:	bd38      	pop	{r3, r4, r5, pc}

000b46cc <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv>:
bool LoRA_Functions::acknowledgeJoinRequestGateway() {
   b46cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	Log.info("Acknowledge Join Request");
   b46d0:	495e      	ldr	r1, [pc, #376]	; (b484c <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x180>)
   b46d2:	485f      	ldr	r0, [pc, #380]	; (b4850 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x184>)
	buf[0] = highByte(sysStatus.get_magicNumber());					// Magic number - so you can trust me
   b46d4:	4c5f      	ldr	r4, [pc, #380]	; (b4854 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x188>)
bool LoRA_Functions::acknowledgeJoinRequestGateway() {
   b46d6:	b0a6      	sub	sp, #152	; 0x98
	Log.info("Acknowledge Join Request");
   b46d8:	f7ff fd31 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	buf[0] = highByte(sysStatus.get_magicNumber());					// Magic number - so you can trust me
   b46dc:	f001 fe6c 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b46e0:	f002 f8c6 	bl	b6870 <_ZNK13sysStatusData15get_magicNumberEv>
   b46e4:	0a00      	lsrs	r0, r0, #8
   b46e6:	7020      	strb	r0, [r4, #0]
	buf[1] = lowByte(sysStatus.get_magicNumber());					// Magic number - so you can trust me
   b46e8:	f001 fe66 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b46ec:	f002 f8c0 	bl	b6870 <_ZNK13sysStatusData15get_magicNumberEv>
   b46f0:	7060      	strb	r0, [r4, #1]
	buf[2] = ((uint8_t) ((Time.now()) >> 24));  					// Fourth byte - current time
   b46f2:	f00b fcee 	bl	c00d2 <_ZN9TimeClass3nowEv>
   b46f6:	1600      	asrs	r0, r0, #24
   b46f8:	70a0      	strb	r0, [r4, #2]
	buf[3] = ((uint8_t) ((Time.now()) >> 16));						// Third byte
   b46fa:	f00b fcea 	bl	c00d2 <_ZN9TimeClass3nowEv>
   b46fe:	1400      	asrs	r0, r0, #16
   b4700:	70e0      	strb	r0, [r4, #3]
	buf[4] = ((uint8_t) ((Time.now()) >> 8));						// Second byte
   b4702:	f00b fce6 	bl	c00d2 <_ZN9TimeClass3nowEv>
   b4706:	1200      	asrs	r0, r0, #8
   b4708:	7120      	strb	r0, [r4, #4]
	buf[5] = ((uint8_t) (Time.now()));		    					// First byte		
   b470a:	f00b fce2 	bl	c00d2 <_ZN9TimeClass3nowEv>
   b470e:	7160      	strb	r0, [r4, #5]
	buf[6] = highByte(sysStatus.get_frequencyMinutes());			// Frequency of reports - for Gateways
   b4710:	f001 fe52 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b4714:	f002 f8b1 	bl	b687a <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4718:	0a00      	lsrs	r0, r0, #8
   b471a:	71a0      	strb	r0, [r4, #6]
	buf[7] = lowByte(sysStatus.get_frequencyMinutes());	
   b471c:	f001 fe4c 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b4720:	f002 f8ab 	bl	b687a <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4724:	71e0      	strb	r0, [r4, #7]
	buf[8] = (current.get_nodeNumber() != 11) ?  0 : 1;				// Clear the alert code for the node unless the nodeNumber process failed
   b4726:	f001 fe8f 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b472a:	f001 ffe4 	bl	b66f6 <_ZNK17currentStatusData14get_nodeNumberEv>
   b472e:	f1a0 030b 	sub.w	r3, r0, #11
   b4732:	4258      	negs	r0, r3
   b4734:	4158      	adcs	r0, r3
   b4736:	7220      	strb	r0, [r4, #8]
	buf[9] = current.get_nodeNumber();								
   b4738:	f001 fe86 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b473c:	f001 ffdb 	bl	b66f6 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4740:	7260      	strb	r0, [r4, #9]
	buf[10] = current.get_sensorType();								// In a join request the node type overwrites the node database value
   b4742:	f001 fe81 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b4746:	f001 fffe 	bl	b6746 <_ZNK17currentStatusData14get_sensorTypeEv>
	digitalWrite(BLUE_LED,HIGH);			        				// Sending data
   b474a:	4b43      	ldr	r3, [pc, #268]	; (b4858 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x18c>)
	buf[10] = current.get_sensorType();								// In a join request the node type overwrites the node database value
   b474c:	72a0      	strb	r0, [r4, #10]
	digitalWrite(BLUE_LED,HIGH);			        				// Sending data
   b474e:	881f      	ldrh	r7, [r3, #0]
   b4750:	2101      	movs	r1, #1
   b4752:	4638      	mov	r0, r7
   b4754:	f00b fecd 	bl	c04f2 <digitalWrite>
	byte nodeAddress = (current.get_tempNodeNumber() == 0) ? current.get_nodeNumber() : current.get_tempNodeNumber();  // get the return address right
   b4758:	f001 fe76 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b475c:	f001 ffd0 	bl	b6700 <_ZNK17currentStatusData18get_tempNodeNumberEv>
   b4760:	2800      	cmp	r0, #0
   b4762:	d15d      	bne.n	b4820 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x154>
   b4764:	f001 fe70 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b4768:	f001 ffc5 	bl	b66f6 <_ZNK17currentStatusData14get_nodeNumberEv>
   b476c:	4605      	mov	r5, r0
	Log.info("Sending response to %d with free memory = %li", nodeAddress, System.freeMemory());
   b476e:	f00b fb1f 	bl	bfdb0 <_ZN11SystemClass10freeMemoryEv>
   b4772:	493a      	ldr	r1, [pc, #232]	; (b485c <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x190>)
   b4774:	4603      	mov	r3, r0
   b4776:	462a      	mov	r2, r5
   b4778:	4835      	ldr	r0, [pc, #212]	; (b4850 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x184>)
   b477a:	f7ff fce0 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	if (manager.sendtoWait(buf, 11, nodeAddress, JOIN_ACK) == RH_ROUTER_ERROR_NONE) {
   b477e:	2302      	movs	r3, #2
   b4780:	9300      	str	r3, [sp, #0]
   b4782:	4934      	ldr	r1, [pc, #208]	; (b4854 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x188>)
   b4784:	4836      	ldr	r0, [pc, #216]	; (b4860 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x194>)
   b4786:	462b      	mov	r3, r5
   b4788:	220b      	movs	r2, #11
   b478a:	f006 fce9 	bl	bb160 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b478e:	4606      	mov	r6, r0
   b4790:	2800      	cmp	r0, #0
   b4792:	d14a      	bne.n	b482a <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x15e>
		current.set_tempNodeNumber(current.get_nodeNumber());		// Temp no longer needed
   b4794:	f001 fe58 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b4798:	4680      	mov	r8, r0
   b479a:	f001 fe55 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b479e:	f001 ffaa 	bl	b66f6 <_ZNK17currentStatusData14get_nodeNumberEv>
   b47a2:	4601      	mov	r1, r0
   b47a4:	4640      	mov	r0, r8
   b47a6:	f002 f821 	bl	b67ec <_ZN17currentStatusData18set_tempNodeNumberEh>
		digitalWrite(BLUE_LED,LOW);
   b47aa:	4631      	mov	r1, r6
   b47ac:	4638      	mov	r0, r7
   b47ae:	f00b fea0 	bl	c04f2 <digitalWrite>
		snprintf(messageString,sizeof(messageString),"Node %d joined with sensorType %s, alert %d and RSSI / SNR of %d / %d", nodeAddress, (buf[10] ==0)? "car":"person",current.get_alertCodeNode(), current.get_RSSI(), current.get_SNR());
   b47b2:	7aa2      	ldrb	r2, [r4, #10]
   b47b4:	4b2b      	ldr	r3, [pc, #172]	; (b4864 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x198>)
   b47b6:	4c2c      	ldr	r4, [pc, #176]	; (b4868 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x19c>)
   b47b8:	2a00      	cmp	r2, #0
   b47ba:	bf18      	it	ne
   b47bc:	461c      	movne	r4, r3
   b47be:	f001 fe43 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b47c2:	f001 ffbb 	bl	b673c <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b47c6:	4606      	mov	r6, r0
   b47c8:	f001 fe3e 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b47cc:	f002 fa90 	bl	b6cf0 <_ZNK17currentStatusData8get_RSSIEv>
   b47d0:	4607      	mov	r7, r0
   b47d2:	f001 fe39 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b47d6:	f002 fa90 	bl	b6cfa <_ZNK17currentStatusData7get_SNREv>
   b47da:	4a24      	ldr	r2, [pc, #144]	; (b486c <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x1a0>)
   b47dc:	462b      	mov	r3, r5
   b47de:	e9cd 7002 	strd	r7, r0, [sp, #8]
   b47e2:	e9cd 4600 	strd	r4, r6, [sp]
   b47e6:	2180      	movs	r1, #128	; 0x80
   b47e8:	a806      	add	r0, sp, #24
   b47ea:	f008 fd7f 	bl	bd2ec <snprintf>
		Log.info(messageString);
   b47ee:	4818      	ldr	r0, [pc, #96]	; (b4850 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x184>)
   b47f0:	a906      	add	r1, sp, #24
   b47f2:	f7ff fca4 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b47f6:	f008 fcb1 	bl	bd15c <spark_cloud_flag_connected>
		if (Particle.connected()) Particle.publish("status", messageString,PRIVATE);
   b47fa:	4604      	mov	r4, r0
   b47fc:	b320      	cbz	r0, b4848 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x17c>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b47fe:	4b1c      	ldr	r3, [pc, #112]	; (b4870 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x1a4>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4800:	491c      	ldr	r1, [pc, #112]	; (b4874 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x1a8>)
   b4802:	781b      	ldrb	r3, [r3, #0]
   b4804:	f88d 3000 	strb.w	r3, [sp]
   b4808:	a804      	add	r0, sp, #16
   b480a:	233c      	movs	r3, #60	; 0x3c
   b480c:	aa06      	add	r2, sp, #24
   b480e:	f009 f891 	bl	bd934 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b4812:	a805      	add	r0, sp, #20
   b4814:	f7ff ff44 	bl	b46a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b4818:	4620      	mov	r0, r4
   b481a:	b026      	add	sp, #152	; 0x98
   b481c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	byte nodeAddress = (current.get_tempNodeNumber() == 0) ? current.get_nodeNumber() : current.get_tempNodeNumber();  // get the return address right
   b4820:	f001 fe12 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b4824:	f001 ff6c 	bl	b6700 <_ZNK17currentStatusData18get_tempNodeNumberEv>
   b4828:	e7a0      	b.n	b476c <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0xa0>
		Log.info("Node %d join response not acknowledged", current.get_tempNodeNumber()); // Acknowledgement not received - this needs more attention as node is in undefined state
   b482a:	f001 fe0d 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b482e:	f001 ff67 	bl	b6700 <_ZNK17currentStatusData18get_tempNodeNumberEv>
   b4832:	4911      	ldr	r1, [pc, #68]	; (b4878 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x1ac>)
   b4834:	4602      	mov	r2, r0
   b4836:	4806      	ldr	r0, [pc, #24]	; (b4850 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x184>)
   b4838:	f7ff fc81 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED,LOW);
   b483c:	2100      	movs	r1, #0
   b483e:	4638      	mov	r0, r7
   b4840:	f00b fe57 	bl	c04f2 <digitalWrite>
		return false;
   b4844:	2400      	movs	r4, #0
   b4846:	e7e7      	b.n	b4818 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x14c>
		return true;
   b4848:	2401      	movs	r4, #1
   b484a:	e7e5      	b.n	b4818 <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv+0x14c>
   b484c:	000c386f 	.word	0x000c386f
   b4850:	2003e650 	.word	0x2003e650
   b4854:	2003d870 	.word	0x2003d870
   b4858:	000c47f8 	.word	0x000c47f8
   b485c:	000c3888 	.word	0x000c3888
   b4860:	2003e168 	.word	0x2003e168
   b4864:	000c3868 	.word	0x000c3868
   b4868:	000c3864 	.word	0x000c3864
   b486c:	000c38b6 	.word	0x000c38b6
   b4870:	2003d869 	.word	0x2003d869
   b4874:	000c38fc 	.word	0x000c38fc
   b4878:	000c3903 	.word	0x000c3903

000b487c <_ZN14LoRA_Functions13printNodeDataEb>:
void LoRA_Functions::printNodeData(bool publish) {
   b487c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4880:	b0d9      	sub	sp, #356	; 0x164
   b4882:	460f      	mov	r7, r1
	String nodeDeviceID;
   b4884:	a810      	add	r0, sp, #64	; 0x40
   b4886:	4946      	ldr	r1, [pc, #280]	; (b49a0 <_ZN14LoRA_Functions13printNodeDataEb+0x124>)
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b4888:	4d46      	ldr	r5, [pc, #280]	; (b49a4 <_ZN14LoRA_Functions13printNodeDataEb+0x128>)
		jp.getValueByKey(nodeObjectContainer, "dID", nodeDeviceID);
   b488a:	f8df 8144 	ldr.w	r8, [pc, #324]	; b49d0 <_ZN14LoRA_Functions13printNodeDataEb+0x154>
		jp.getValueByKey(nodeObjectContainer,"rID", radioID);
   b488e:	f8df 9144 	ldr.w	r9, [pc, #324]	; b49d4 <_ZN14LoRA_Functions13printNodeDataEb+0x158>
	String nodeDeviceID;
   b4892:	f00b f8a8 	bl	bf9e6 <_ZN6StringC1EPK19__FlashStringHelper>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4896:	4843      	ldr	r0, [pc, #268]	; (b49a4 <_ZN14LoRA_Functions13printNodeDataEb+0x128>)
   b4898:	f004 f8b5 	bl	b8a06 <_ZNK10JsonParser14getOuterObjectEv>
   b489c:	4a42      	ldr	r2, [pc, #264]	; (b49a8 <_ZN14LoRA_Functions13printNodeDataEb+0x12c>)
   b489e:	4601      	mov	r1, r0
   b48a0:	ab0f      	add	r3, sp, #60	; 0x3c
   b48a2:	4840      	ldr	r0, [pc, #256]	; (b49a4 <_ZN14LoRA_Functions13printNodeDataEb+0x128>)
   b48a4:	f004 fa14 	bl	b8cd0 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b48a8:	2600      	movs	r6, #0
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b48aa:	990f      	ldr	r1, [sp, #60]	; 0x3c
   b48ac:	4632      	mov	r2, r6
   b48ae:	4628      	mov	r0, r5
   b48b0:	f004 f8cb 	bl	b8a4a <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
		if(nodeObjectContainer == NULL) {
   b48b4:	4604      	mov	r4, r0
   b48b6:	2800      	cmp	r0, #0
   b48b8:	d06c      	beq.n	b4994 <_ZN14LoRA_Functions13printNodeDataEb+0x118>
		jp.getValueByKey(nodeObjectContainer, "dID", nodeDeviceID);
   b48ba:	4601      	mov	r1, r0
   b48bc:	ab10      	add	r3, sp, #64	; 0x40
   b48be:	4642      	mov	r2, r8
   b48c0:	4628      	mov	r0, r5
   b48c2:	f7ff fc2e 	bl	b4122 <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer,"rID", radioID);
   b48c6:	ab0a      	add	r3, sp, #40	; 0x28
   b48c8:	464a      	mov	r2, r9
   b48ca:	4621      	mov	r1, r4
   b48cc:	4628      	mov	r0, r5
   b48ce:	f7ff fc1a 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "node", nodeNumber);
   b48d2:	4a36      	ldr	r2, [pc, #216]	; (b49ac <_ZN14LoRA_Functions13printNodeDataEb+0x130>)
   b48d4:	ab09      	add	r3, sp, #36	; 0x24
   b48d6:	4621      	mov	r1, r4
   b48d8:	4628      	mov	r0, r5
   b48da:	f7ff fc14 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "last", lastConnect);
   b48de:	4a34      	ldr	r2, [pc, #208]	; (b49b0 <_ZN14LoRA_Functions13printNodeDataEb+0x134>)
   b48e0:	ab0b      	add	r3, sp, #44	; 0x2c
   b48e2:	4621      	mov	r1, r4
   b48e4:	4628      	mov	r0, r5
   b48e6:	f7ff fc0e 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(nodeObjectContainer, "type", sensorType);
   b48ea:	4a32      	ldr	r2, [pc, #200]	; (b49b4 <_ZN14LoRA_Functions13printNodeDataEb+0x138>)
   b48ec:	ab0c      	add	r3, sp, #48	; 0x30
   b48ee:	4621      	mov	r1, r4
   b48f0:	4628      	mov	r0, r5
   b48f2:	f7ff fc08 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		if (getValueTokenByKey(container, name, value)) {
   b48f6:	4a30      	ldr	r2, [pc, #192]	; (b49b8 <_ZN14LoRA_Functions13printNodeDataEb+0x13c>)
   b48f8:	ab14      	add	r3, sp, #80	; 0x50
   b48fa:	4621      	mov	r1, r4
   b48fc:	4628      	mov	r0, r5
   b48fe:	f004 f9e7 	bl	b8cd0 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b4902:	b120      	cbz	r0, b490e <_ZN14LoRA_Functions13printNodeDataEb+0x92>
			return getTokenValue(value, result);
   b4904:	9914      	ldr	r1, [sp, #80]	; 0x50
   b4906:	aa0d      	add	r2, sp, #52	; 0x34
   b4908:	4628      	mov	r0, r5
   b490a:	f004 f909 	bl	b8b20 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERf>
		jp.getValueByKey(nodeObjectContainer, "pend", pendingAlert);
   b490e:	4621      	mov	r1, r4
   b4910:	4a2a      	ldr	r2, [pc, #168]	; (b49bc <_ZN14LoRA_Functions13printNodeDataEb+0x140>)
   b4912:	ab0e      	add	r3, sp, #56	; 0x38
   b4914:	4628      	mov	r0, r5
   b4916:	f7ff fbf6 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		snprintf(data, sizeof(data), "Node %d, deviceID: %s, checksum %d, lastConnected: %s, type %d, success %4.2f with pending alert %d", nodeNumber, nodeDeviceID.c_str(), radioID, Time.timeStr(lastConnect).c_str(), sensorType, successPercent, pendingAlert);
   b491a:	e9dd b20a 	ldrd	fp, r2, [sp, #40]	; 0x28
   b491e:	a814      	add	r0, sp, #80	; 0x50
   b4920:	17d3      	asrs	r3, r2, #31
   b4922:	9c09      	ldr	r4, [sp, #36]	; 0x24
	const char * c_str() const { return buffer; }
   b4924:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
   b4928:	f00b face 	bl	bfec8 <_ZN9TimeClass7timeStrEx>
   b492c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   b492e:	980d      	ldr	r0, [sp, #52]	; 0x34
   b4930:	9306      	str	r3, [sp, #24]
   b4932:	f00c f859 	bl	c09e8 <__aeabi_f2d>
   b4936:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b4938:	9303      	str	r3, [sp, #12]
   b493a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b493c:	4a20      	ldr	r2, [pc, #128]	; (b49c0 <_ZN14LoRA_Functions13printNodeDataEb+0x144>)
   b493e:	f8cd a000 	str.w	sl, [sp]
   b4942:	e9cd 0104 	strd	r0, r1, [sp, #16]
   b4946:	e9cd b301 	strd	fp, r3, [sp, #4]
   b494a:	f44f 7180 	mov.w	r1, #256	; 0x100
   b494e:	4623      	mov	r3, r4
   b4950:	a818      	add	r0, sp, #96	; 0x60
   b4952:	f008 fccb 	bl	bd2ec <snprintf>
   b4956:	a814      	add	r0, sp, #80	; 0x50
   b4958:	f00a fffa 	bl	bf950 <_ZN6StringD1Ev>
		Log.info(data);
   b495c:	4819      	ldr	r0, [pc, #100]	; (b49c4 <_ZN14LoRA_Functions13printNodeDataEb+0x148>)
   b495e:	a918      	add	r1, sp, #96	; 0x60
   b4960:	f7ff fbed 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4964:	f008 fbfa 	bl	bd15c <spark_cloud_flag_connected>
		if (Particle.connected() && publish) {
   b4968:	b188      	cbz	r0, b498e <_ZN14LoRA_Functions13printNodeDataEb+0x112>
   b496a:	b187      	cbz	r7, b498e <_ZN14LoRA_Functions13printNodeDataEb+0x112>
   b496c:	4b16      	ldr	r3, [pc, #88]	; (b49c8 <_ZN14LoRA_Functions13printNodeDataEb+0x14c>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b496e:	4917      	ldr	r1, [pc, #92]	; (b49cc <_ZN14LoRA_Functions13printNodeDataEb+0x150>)
   b4970:	781b      	ldrb	r3, [r3, #0]
   b4972:	f88d 3000 	strb.w	r3, [sp]
   b4976:	aa18      	add	r2, sp, #96	; 0x60
   b4978:	233c      	movs	r3, #60	; 0x3c
   b497a:	a814      	add	r0, sp, #80	; 0x50
   b497c:	f008 ffda 	bl	bd934 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b4980:	a815      	add	r0, sp, #84	; 0x54
   b4982:	f7ff fe8d 	bl	b46a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
			delay(1000);
   b4986:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b498a:	f008 fd07 	bl	bd39c <delay>
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b498e:	3601      	adds	r6, #1
   b4990:	2e0a      	cmp	r6, #10
   b4992:	d18a      	bne.n	b48aa <_ZN14LoRA_Functions13printNodeDataEb+0x2e>
	String nodeDeviceID;
   b4994:	a810      	add	r0, sp, #64	; 0x40
   b4996:	f00a ffdb 	bl	bf950 <_ZN6StringD1Ev>
}
   b499a:	b059      	add	sp, #356	; 0x164
   b499c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b49a0:	000c5454 	.word	0x000c5454
   b49a4:	2003da1c 	.word	0x2003da1c
   b49a8:	000c3758 	.word	0x000c3758
   b49ac:	000c392a 	.word	0x000c392a
   b49b0:	000c3816 	.word	0x000c3816
   b49b4:	000c37bb 	.word	0x000c37bb
   b49b8:	000c392f 	.word	0x000c392f
   b49bc:	000c3807 	.word	0x000c3807
   b49c0:	000c3934 	.word	0x000c3934
   b49c4:	2003e650 	.word	0x2003e650
   b49c8:	2003d869 	.word	0x2003d869
   b49cc:	000c3998 	.word	0x000c3998
   b49d0:	000c3767 	.word	0x000c3767
   b49d4:	000c3763 	.word	0x000c3763

000b49d8 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>:
	 *
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
   b49d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b49da:	4604      	mov	r4, r0
   b49dc:	4615      	mov	r5, r2
   b49de:	9101      	str	r1, [sp, #4]
		insertCheckSeparator();
   b49e0:	f004 fa9a 	bl	b8f18 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   b49e4:	9901      	ldr	r1, [sp, #4]
   b49e6:	2201      	movs	r2, #1
   b49e8:	4620      	mov	r0, r4
   b49ea:	f004 fa03 	bl	b8df4 <_ZN10JsonWriter12insertStringEPKcb>
		insertValue(key);
		insertChar(':');
   b49ee:	4620      	mov	r0, r4
   b49f0:	213a      	movs	r1, #58	; 0x3a
   b49f2:	f004 f9b3 	bl	b8d5c <_ZN10JsonWriter10insertCharEc>
	void insertValue(int value) { insertsprintf("%d", value); }
   b49f6:	4904      	ldr	r1, [pc, #16]	; (b4a08 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_+0x30>)
   b49f8:	462a      	mov	r2, r5
   b49fa:	4620      	mov	r0, r4
		insertValue(value);
	}
   b49fc:	b003      	add	sp, #12
   b49fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	void insertValue(int value) { insertsprintf("%d", value); }
   b4a02:	f004 b9ea 	b.w	b8dda <_ZN10JsonWriter13insertsprintfEPKcz>
   b4a06:	bf00      	nop
   b4a08:	000c3bbf 	.word	0x000c3bbf

000b4a0c <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE>:
}
   b4a0c:	b513      	push	{r0, r1, r4, lr}
        val_(val) {
   b4a0e:	4b11      	ldr	r3, [pc, #68]	; (b4a54 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x48>)
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
   b4a10:	4c11      	ldr	r4, [pc, #68]	; (b4a58 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x4c>)
   b4a12:	2201      	movs	r2, #1
   b4a14:	701a      	strb	r2, [r3, #0]
   b4a16:	2332      	movs	r3, #50	; 0x32
   b4a18:	9300      	str	r3, [sp, #0]
   b4a1a:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   b4a1e:	f204 432c 	addw	r3, r4, #1068	; 0x42c
   b4a22:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b4a26:	4620      	mov	r0, r4
   b4a28:	f003 ffd2 	bl	b89d0 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
   b4a2c:	4b0b      	ldr	r3, [pc, #44]	; (b4a5c <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x50>)
   b4a2e:	6023      	str	r3, [r4, #0]
RH_RF95 driver(RFM95_CS, RFM95_INT);
   b4a30:	4a0b      	ldr	r2, [pc, #44]	; (b4a60 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x54>)
   b4a32:	4c0c      	ldr	r4, [pc, #48]	; (b4a64 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x58>)
   b4a34:	490c      	ldr	r1, [pc, #48]	; (b4a68 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x5c>)
   b4a36:	4b0d      	ldr	r3, [pc, #52]	; (b4a6c <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x60>)
   b4a38:	7812      	ldrb	r2, [r2, #0]
   b4a3a:	7809      	ldrb	r1, [r1, #0]
   b4a3c:	4620      	mov	r0, r4
   b4a3e:	f007 f885 	bl	bbb4c <_ZN7RH_RF95C1EhhR12RHGenericSPI>
RHMesh manager(driver, GATEWAY_ADDRESS);
   b4a42:	480b      	ldr	r0, [pc, #44]	; (b4a70 <_GLOBAL__sub_I__ZN14LoRA_Functions9_instanceE+0x64>)
   b4a44:	2200      	movs	r2, #0
   b4a46:	4621      	mov	r1, r4
}
   b4a48:	b002      	add	sp, #8
   b4a4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RHMesh manager(driver, GATEWAY_ADDRESS);
   b4a4e:	f006 bb7d 	b.w	bb14c <_ZN6RHMeshC1ER15RHGenericDriverh>
   b4a52:	bf00      	nop
   b4a54:	2003d869 	.word	0x2003d869
   b4a58:	2003da1c 	.word	0x2003da1c
   b4a5c:	000c3d28 	.word	0x000c3d28
   b4a60:	000c47fe 	.word	0x000c47fe
   b4a64:	2003d8ec 	.word	0x2003d8ec
   b4a68:	000c47fc 	.word	0x000c47fc
   b4a6c:	2003e4e4 	.word	0x2003e4e4
   b4a70:	2003e168 	.word	0x2003e168

000b4a74 <_ZN14LoRA_Functions14findNodeNumberEPKci>:
uint8_t LoRA_Functions::findNodeNumber(const char* deviceID, int radioID) {
   b4a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4a78:	b097      	sub	sp, #92	; 0x5c
   b4a7a:	4604      	mov	r4, r0
   b4a7c:	460d      	mov	r5, r1
	String nodeDeviceID;
   b4a7e:	a802      	add	r0, sp, #8
   b4a80:	4965      	ldr	r1, [pc, #404]	; (b4c18 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1a4>)
uint8_t LoRA_Functions::findNodeNumber(const char* deviceID, int radioID) {
   b4a82:	4690      	mov	r8, r2
	String nodeDeviceID;
   b4a84:	f00a ffaf 	bl	bf9e6 <_ZN6StringC1EPK19__FlashStringHelper>
	if (radioID != LoRA_Functions::stringCheckSum(deviceID)) {
   b4a88:	4629      	mov	r1, r5
   b4a8a:	a806      	add	r0, sp, #24
   b4a8c:	f00a ffab 	bl	bf9e6 <_ZN6StringC1EPK19__FlashStringHelper>
   b4a90:	a906      	add	r1, sp, #24
   b4a92:	4620      	mov	r0, r4
   b4a94:	f7ff fde2 	bl	b465c <_ZN14LoRA_Functions14stringCheckSumE6String>
   b4a98:	4604      	mov	r4, r0
   b4a9a:	a806      	add	r0, sp, #24
   b4a9c:	f00a ff58 	bl	bf950 <_ZN6StringD1Ev>
   b4aa0:	4544      	cmp	r4, r8
   b4aa2:	d00b      	beq.n	b4abc <_ZN14LoRA_Functions14findNodeNumberEPKci+0x48>
		Log.info("DeviceID and checksum mismatch - setting node to 11");
   b4aa4:	495d      	ldr	r1, [pc, #372]	; (b4c1c <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1a8>)
   b4aa6:	485e      	ldr	r0, [pc, #376]	; (b4c20 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1ac>)
   b4aa8:	f7ff fb49 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		return 11;															// Return value for unconfigured node
   b4aac:	240b      	movs	r4, #11
	String nodeDeviceID;
   b4aae:	a802      	add	r0, sp, #8
   b4ab0:	f00a ff4e 	bl	bf950 <_ZN6StringD1Ev>
}
   b4ab4:	4620      	mov	r0, r4
   b4ab6:	b017      	add	sp, #92	; 0x5c
   b4ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	else Log.info("Checksum validated");
   b4abc:	4959      	ldr	r1, [pc, #356]	; (b4c24 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1b0>)
   b4abe:	4858      	ldr	r0, [pc, #352]	; (b4c20 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1ac>)
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b4ac0:	f8df 9164 	ldr.w	r9, [pc, #356]	; b4c28 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1b4>
		jp.getValueByKey(nodeObjectContainer, "dID", nodeDeviceID);			// Get the deviceID and compare
   b4ac4:	f8df b174 	ldr.w	fp, [pc, #372]	; b4c3c <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1c8>
	else Log.info("Checksum validated");
   b4ac8:	f7ff fb39 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4acc:	4856      	ldr	r0, [pc, #344]	; (b4c28 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1b4>)
   b4ace:	f003 ff9a 	bl	b8a06 <_ZNK10JsonParser14getOuterObjectEv>
   b4ad2:	4a56      	ldr	r2, [pc, #344]	; (b4c2c <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1b8>)
   b4ad4:	4601      	mov	r1, r0
   b4ad6:	ab01      	add	r3, sp, #4
   b4ad8:	4853      	ldr	r0, [pc, #332]	; (b4c28 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1b4>)
   b4ada:	f004 f8f9 	bl	b8cd0 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b4ade:	2600      	movs	r6, #0
		nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, i);
   b4ae0:	9901      	ldr	r1, [sp, #4]
   b4ae2:	4632      	mov	r2, r6
   b4ae4:	4648      	mov	r0, r9
   b4ae6:	f003 ffb0 	bl	b8a4a <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
   b4aea:	1c74      	adds	r4, r6, #1
		if(nodeObjectContainer == NULL) {
   b4aec:	4607      	mov	r7, r0
   b4aee:	46a2      	mov	sl, r4
   b4af0:	2800      	cmp	r0, #0
   b4af2:	d176      	bne.n	b4be2 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x16e>
			Log.info("findNodeNumber ran out of entries at i = %d",i);
   b4af4:	494e      	ldr	r1, [pc, #312]	; (b4c30 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1bc>)
   b4af6:	484a      	ldr	r0, [pc, #296]	; (b4c20 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1ac>)
   b4af8:	4632      	mov	r2, r6
   b4afa:	f7ff fb20 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	JsonModifier mod(jp);
   b4afe:	494a      	ldr	r1, [pc, #296]	; (b4c28 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1b4>)
	nodeNumber = index;
   b4b00:	9400      	str	r4, [sp, #0]
	JsonModifier mod(jp);
   b4b02:	a806      	add	r0, sp, #24
   b4b04:	f004 fa4c 	bl	b8fa0 <_ZN12JsonModifierC1ER10JsonParser>
	Log.info("New node will be assigned number %d, deviceID of %s",nodeNumber, deviceID);
   b4b08:	462b      	mov	r3, r5
   b4b0a:	9a00      	ldr	r2, [sp, #0]
   b4b0c:	4949      	ldr	r1, [pc, #292]	; (b4c34 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1c0>)
   b4b0e:	4844      	ldr	r0, [pc, #272]	; (b4c20 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1ac>)
   b4b10:	f7ff fb15 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	mod.startAppend(jp.getOuterArray());
   b4b14:	4844      	ldr	r0, [pc, #272]	; (b4c28 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1b4>)
   b4b16:	f003 ff6b 	bl	b89f0 <_ZNK10JsonParser13getOuterArrayEv>
   b4b1a:	4601      	mov	r1, r0
   b4b1c:	a806      	add	r0, sp, #24
   b4b1e:	f004 fa7a 	bl	b9016 <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE>
	bool startObject() { return startObjectOrArray('{', '}'); };
   b4b22:	227d      	movs	r2, #125	; 0x7d
   b4b24:	217b      	movs	r1, #123	; 0x7b
   b4b26:	a806      	add	r0, sp, #24
   b4b28:	f004 fa01 	bl	b8f2e <_ZN10JsonWriter18startObjectOrArrayEcc>
		mod.insertKeyValue("node", nodeNumber);
   b4b2c:	9a00      	ldr	r2, [sp, #0]
   b4b2e:	4942      	ldr	r1, [pc, #264]	; (b4c38 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1c4>)
   b4b30:	a806      	add	r0, sp, #24
   b4b32:	f7ff ff51 	bl	b49d8 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		insertCheckSeparator();
   b4b36:	a806      	add	r0, sp, #24
   b4b38:	f004 f9ee 	bl	b8f18 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   b4b3c:	2201      	movs	r2, #1
   b4b3e:	a806      	add	r0, sp, #24
   b4b40:	493e      	ldr	r1, [pc, #248]	; (b4c3c <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1c8>)
   b4b42:	f004 f957 	bl	b8df4 <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
   b4b46:	a806      	add	r0, sp, #24
   b4b48:	213a      	movs	r1, #58	; 0x3a
   b4b4a:	f004 f907 	bl	b8d5c <_ZN10JsonWriter10insertCharEc>
	void insertValue(const char *value) { insertString(value, true); }
   b4b4e:	4629      	mov	r1, r5
   b4b50:	a806      	add	r0, sp, #24
   b4b52:	2201      	movs	r2, #1
   b4b54:	f004 f94e 	bl	b8df4 <_ZN10JsonWriter12insertStringEPKcb>
		mod.insertKeyValue("rID",radioID);
   b4b58:	4642      	mov	r2, r8
   b4b5a:	4939      	ldr	r1, [pc, #228]	; (b4c40 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1cc>)
   b4b5c:	a806      	add	r0, sp, #24
   b4b5e:	f7ff ff3b 	bl	b49d8 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		mod.insertKeyValue("last", Time.now());
   b4b62:	f00b fab6 	bl	c00d2 <_ZN9TimeClass3nowEv>
   b4b66:	4605      	mov	r5, r0
		insertCheckSeparator();
   b4b68:	a806      	add	r0, sp, #24
   b4b6a:	f004 f9d5 	bl	b8f18 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   b4b6e:	2201      	movs	r2, #1
   b4b70:	a806      	add	r0, sp, #24
   b4b72:	4934      	ldr	r1, [pc, #208]	; (b4c44 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1d0>)
   b4b74:	f004 f93e 	bl	b8df4 <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
   b4b78:	a806      	add	r0, sp, #24
   b4b7a:	213a      	movs	r1, #58	; 0x3a
   b4b7c:	f004 f8ee 	bl	b8d5c <_ZN10JsonWriter10insertCharEc>
	void insertValue(long value) { insertsprintf("%ld", value); }
   b4b80:	462a      	mov	r2, r5
   b4b82:	a806      	add	r0, sp, #24
   b4b84:	4930      	ldr	r1, [pc, #192]	; (b4c48 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1d4>)
   b4b86:	f004 f928 	bl	b8dda <_ZN10JsonWriter13insertsprintfEPKcz>
		mod.insertKeyValue("type", (int)3);									// This is a temp value that will be updated
   b4b8a:	4930      	ldr	r1, [pc, #192]	; (b4c4c <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1d8>)
   b4b8c:	2203      	movs	r2, #3
   b4b8e:	a806      	add	r0, sp, #24
   b4b90:	f7ff ff22 	bl	b49d8 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		insertCheckSeparator();
   b4b94:	a806      	add	r0, sp, #24
   b4b96:	f004 f9bf 	bl	b8f18 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
   b4b9a:	2201      	movs	r2, #1
   b4b9c:	a806      	add	r0, sp, #24
   b4b9e:	492c      	ldr	r1, [pc, #176]	; (b4c50 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1dc>)
   b4ba0:	f004 f928 	bl	b8df4 <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
   b4ba4:	213a      	movs	r1, #58	; 0x3a
   b4ba6:	a806      	add	r0, sp, #24
   b4ba8:	f004 f8d8 	bl	b8d5c <_ZN10JsonWriter10insertCharEc>
		insertValue(value);
   b4bac:	ed9f 0a29 	vldr	s0, [pc, #164]	; b4c54 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1e0>
   b4bb0:	a806      	add	r0, sp, #24
   b4bb2:	f004 f9d5 	bl	b8f60 <_ZN10JsonWriter11insertValueEf>
		mod.insertKeyValue("pend",(int)0);
   b4bb6:	2200      	movs	r2, #0
   b4bb8:	4927      	ldr	r1, [pc, #156]	; (b4c58 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1e4>)
   b4bba:	a806      	add	r0, sp, #24
   b4bbc:	f7ff ff0c 	bl	b49d8 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		mod.finishObjectOrArray();
   b4bc0:	a806      	add	r0, sp, #24
   b4bc2:	f004 f8d9 	bl	b8d78 <_ZN10JsonWriter19finishObjectOrArrayEv>
	mod.finish();
   b4bc6:	a806      	add	r0, sp, #24
   b4bc8:	f004 fc81 	bl	b94ce <_ZN12JsonModifier6finishEv>
	nodeDatabase.set_nodeIDJson(jp.getBuffer());									// This should backup the nodeID database - now updated to persistent storage
   b4bcc:	f001 fcc2 	bl	b6554 <_ZN10nodeIDData8instanceEv>
   b4bd0:	f8d9 1004 	ldr.w	r1, [r9, #4]
   b4bd4:	f001 fcfa 	bl	b65cc <_ZN10nodeIDData14set_nodeIDJsonEPKc>
	JsonModifier mod(jp);
   b4bd8:	a806      	add	r0, sp, #24
	return index;
   b4bda:	b2e4      	uxtb	r4, r4
	JsonModifier mod(jp);
   b4bdc:	f003 fe82 	bl	b88e4 <_ZN12JsonModifierD1Ev>
   b4be0:	e765      	b.n	b4aae <_ZN14LoRA_Functions14findNodeNumberEPKci+0x3a>
		jp.getValueByKey(nodeObjectContainer, "dID", nodeDeviceID);			// Get the deviceID and compare
   b4be2:	4601      	mov	r1, r0
   b4be4:	ab02      	add	r3, sp, #8
   b4be6:	4648      	mov	r0, r9
   b4be8:	465a      	mov	r2, fp
   b4bea:	f7ff fa9a 	bl	b4122 <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b4bee:	4629      	mov	r1, r5
   b4bf0:	a802      	add	r0, sp, #8
   b4bf2:	f00a ffbe 	bl	bfb72 <_ZNK6String6equalsEPKc>
		if (nodeDeviceID == deviceID) {
   b4bf6:	b140      	cbz	r0, b4c0a <_ZN14LoRA_Functions14findNodeNumberEPKci+0x196>
			jp.getValueByKey(nodeObjectContainer, "node", nodeNumber);		// A match!
   b4bf8:	4a0f      	ldr	r2, [pc, #60]	; (b4c38 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1c4>)
   b4bfa:	480b      	ldr	r0, [pc, #44]	; (b4c28 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x1b4>)
   b4bfc:	466b      	mov	r3, sp
   b4bfe:	4639      	mov	r1, r7
   b4c00:	f7ff fa81 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
			return nodeNumber;												// All is good - return node number for the deviceID passed to the function
   b4c04:	f89d 4000 	ldrb.w	r4, [sp]
   b4c08:	e751      	b.n	b4aae <_ZN14LoRA_Functions14findNodeNumberEPKci+0x3a>
		index++;															// This will be the node number for the next node if no match is found
   b4c0a:	1cb4      	adds	r4, r6, #2
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b4c0c:	4656      	mov	r6, sl
   b4c0e:	2e0a      	cmp	r6, #10
   b4c10:	f47f af66 	bne.w	b4ae0 <_ZN14LoRA_Functions14findNodeNumberEPKci+0x6c>
   b4c14:	e773      	b.n	b4afe <_ZN14LoRA_Functions14findNodeNumberEPKci+0x8a>
   b4c16:	bf00      	nop
   b4c18:	000c5454 	.word	0x000c5454
   b4c1c:	000c39a1 	.word	0x000c39a1
   b4c20:	2003e650 	.word	0x2003e650
   b4c24:	000c39d5 	.word	0x000c39d5
   b4c28:	2003da1c 	.word	0x2003da1c
   b4c2c:	000c3758 	.word	0x000c3758
   b4c30:	000c39e8 	.word	0x000c39e8
   b4c34:	000c3a14 	.word	0x000c3a14
   b4c38:	000c392a 	.word	0x000c392a
   b4c3c:	000c3767 	.word	0x000c3767
   b4c40:	000c3763 	.word	0x000c3763
   b4c44:	000c3816 	.word	0x000c3816
   b4c48:	000c4c20 	.word	0x000c4c20
   b4c4c:	000c37bb 	.word	0x000c37bb
   b4c50:	000c392f 	.word	0x000c392f
   b4c54:	00000000 	.word	0x00000000
   b4c58:	000c3807 	.word	0x000c3807

000b4c5c <_ZN14LoRA_Functions10nodeUpdateEif>:
bool LoRA_Functions::nodeUpdate(int nodeNumber, float successPercent)  {
   b4c5c:	b530      	push	{r4, r5, lr}
   b4c5e:	ed2d 8b02 	vpush	{d8}
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4c62:	4d26      	ldr	r5, [pc, #152]	; (b4cfc <_ZN14LoRA_Functions10nodeUpdateEif+0xa0>)
bool LoRA_Functions::nodeUpdate(int nodeNumber, float successPercent)  {
   b4c64:	b093      	sub	sp, #76	; 0x4c
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4c66:	4628      	mov	r0, r5
bool LoRA_Functions::nodeUpdate(int nodeNumber, float successPercent)  {
   b4c68:	460c      	mov	r4, r1
   b4c6a:	eeb0 8a40 	vmov.f32	s16, s0
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4c6e:	f003 feca 	bl	b8a06 <_ZNK10JsonParser14getOuterObjectEv>
   b4c72:	4a23      	ldr	r2, [pc, #140]	; (b4d00 <_ZN14LoRA_Functions10nodeUpdateEif+0xa4>)
   b4c74:	4601      	mov	r1, r0
   b4c76:	466b      	mov	r3, sp
   b4c78:	4628      	mov	r0, r5
   b4c7a:	f004 f829 	bl	b8cd0 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   b4c7e:	1e62      	subs	r2, r4, #1
   b4c80:	9900      	ldr	r1, [sp, #0]
   b4c82:	4628      	mov	r0, r5
   b4c84:	f003 fee1 	bl	b8a4a <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) return false;							// Ran out of entries - no match found
   b4c88:	4604      	mov	r4, r0
   b4c8a:	2800      	cmp	r0, #0
   b4c8c:	d032      	beq.n	b4cf4 <_ZN14LoRA_Functions10nodeUpdateEif+0x98>
	jp.getValueTokenByKey(nodeObjectContainer, "last", value);			// Update last connection time
   b4c8e:	ab01      	add	r3, sp, #4
   b4c90:	4a1c      	ldr	r2, [pc, #112]	; (b4d04 <_ZN14LoRA_Functions10nodeUpdateEif+0xa8>)
   b4c92:	4601      	mov	r1, r0
   b4c94:	4628      	mov	r0, r5
   b4c96:	f004 f81b 	bl	b8cd0 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	JsonModifier mod(jp);
   b4c9a:	4629      	mov	r1, r5
   b4c9c:	a802      	add	r0, sp, #8
   b4c9e:	f004 f97f 	bl	b8fa0 <_ZN12JsonModifierC1ER10JsonParser>
	mod.startModify(value);
   b4ca2:	9901      	ldr	r1, [sp, #4]
   b4ca4:	a802      	add	r0, sp, #8
   b4ca6:	f004 f98d 	bl	b8fc4 <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE>
	mod.insertValue((int)Time.now());
   b4caa:	f00b fa12 	bl	c00d2 <_ZN9TimeClass3nowEv>
	void insertValue(int value) { insertsprintf("%d", value); }
   b4cae:	4916      	ldr	r1, [pc, #88]	; (b4d08 <_ZN14LoRA_Functions10nodeUpdateEif+0xac>)
   b4cb0:	4602      	mov	r2, r0
   b4cb2:	a802      	add	r0, sp, #8
   b4cb4:	f004 f891 	bl	b8dda <_ZN10JsonWriter13insertsprintfEPKcz>
	mod.finish();
   b4cb8:	a802      	add	r0, sp, #8
   b4cba:	f004 fc08 	bl	b94ce <_ZN12JsonModifier6finishEv>
	jp.getValueTokenByKey(nodeObjectContainer, "succ", value);			// Update the success percentage value
   b4cbe:	4a13      	ldr	r2, [pc, #76]	; (b4d0c <_ZN14LoRA_Functions10nodeUpdateEif+0xb0>)
   b4cc0:	ab01      	add	r3, sp, #4
   b4cc2:	4621      	mov	r1, r4
   b4cc4:	4628      	mov	r0, r5
   b4cc6:	f004 f803 	bl	b8cd0 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	mod.startModify(value);
   b4cca:	9901      	ldr	r1, [sp, #4]
   b4ccc:	a802      	add	r0, sp, #8
   b4cce:	f004 f979 	bl	b8fc4 <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE>
	mod.insertValue((float)successPercent);
   b4cd2:	eeb0 0a48 	vmov.f32	s0, s16
   b4cd6:	a802      	add	r0, sp, #8
   b4cd8:	f004 f942 	bl	b8f60 <_ZN10JsonWriter11insertValueEf>
	mod.finish();
   b4cdc:	a802      	add	r0, sp, #8
   b4cde:	f004 fbf6 	bl	b94ce <_ZN12JsonModifier6finishEv>
	nodeDatabase.set_nodeIDJson(jp.getBuffer());									// This should backup the nodeID database - now updated to persistent storage
   b4ce2:	f001 fc37 	bl	b6554 <_ZN10nodeIDData8instanceEv>
   b4ce6:	6869      	ldr	r1, [r5, #4]
   b4ce8:	f001 fc70 	bl	b65cc <_ZN10nodeIDData14set_nodeIDJsonEPKc>
	JsonModifier mod(jp);
   b4cec:	a802      	add	r0, sp, #8
   b4cee:	f003 fdf9 	bl	b88e4 <_ZN12JsonModifierD1Ev>
	return true;
   b4cf2:	2001      	movs	r0, #1
}
   b4cf4:	b013      	add	sp, #76	; 0x4c
   b4cf6:	ecbd 8b02 	vpop	{d8}
   b4cfa:	bd30      	pop	{r4, r5, pc}
   b4cfc:	2003da1c 	.word	0x2003da1c
   b4d00:	000c3758 	.word	0x000c3758
   b4d04:	000c3816 	.word	0x000c3816
   b4d08:	000c3bbf 	.word	0x000c3bbf
   b4d0c:	000c392f 	.word	0x000c392f

000b4d10 <_ZN14LoRA_Functions10changeTypeEii>:
bool LoRA_Functions::changeType(int nodeNumber, int newType) {
   b4d10:	b570      	push	{r4, r5, r6, lr}
	if (nodeNumber > 10) return false;
   b4d12:	290a      	cmp	r1, #10
bool LoRA_Functions::changeType(int nodeNumber, int newType) {
   b4d14:	b094      	sub	sp, #80	; 0x50
   b4d16:	460c      	mov	r4, r1
   b4d18:	4616      	mov	r6, r2
	if (nodeNumber > 10) return false;
   b4d1a:	dc3d      	bgt.n	b4d98 <_ZN14LoRA_Functions10changeTypeEii+0x88>
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4d1c:	4d1f      	ldr	r5, [pc, #124]	; (b4d9c <_ZN14LoRA_Functions10changeTypeEii+0x8c>)
   b4d1e:	4628      	mov	r0, r5
   b4d20:	f003 fe71 	bl	b8a06 <_ZNK10JsonParser14getOuterObjectEv>
   b4d24:	4a1e      	ldr	r2, [pc, #120]	; (b4da0 <_ZN14LoRA_Functions10changeTypeEii+0x90>)
   b4d26:	4601      	mov	r1, r0
   b4d28:	ab02      	add	r3, sp, #8
   b4d2a:	4628      	mov	r0, r5
   b4d2c:	f003 ffd0 	bl	b8cd0 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);
   b4d30:	1e62      	subs	r2, r4, #1
   b4d32:	9902      	ldr	r1, [sp, #8]
   b4d34:	4628      	mov	r0, r5
   b4d36:	f003 fe88 	bl	b8a4a <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) return false;								// Ran out of entries 
   b4d3a:	4604      	mov	r4, r0
   b4d3c:	b360      	cbz	r0, b4d98 <_ZN14LoRA_Functions10changeTypeEii+0x88>
	jp.getValueByKey(nodeObjectContainer, "type", type);
   b4d3e:	4601      	mov	r1, r0
   b4d40:	4a18      	ldr	r2, [pc, #96]	; (b4da4 <_ZN14LoRA_Functions10changeTypeEii+0x94>)
   b4d42:	ab01      	add	r3, sp, #4
   b4d44:	4628      	mov	r0, r5
   b4d46:	f7ff f9de 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	Log.info("Changing sensor type from %d to %d", type, newType);
   b4d4a:	9a01      	ldr	r2, [sp, #4]
   b4d4c:	4916      	ldr	r1, [pc, #88]	; (b4da8 <_ZN14LoRA_Functions10changeTypeEii+0x98>)
   b4d4e:	4817      	ldr	r0, [pc, #92]	; (b4dac <_ZN14LoRA_Functions10changeTypeEii+0x9c>)
   b4d50:	4633      	mov	r3, r6
   b4d52:	f7ff f9f4 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	jp.getValueTokenByKey(nodeObjectContainer, "type", value);
   b4d56:	ab03      	add	r3, sp, #12
   b4d58:	4a12      	ldr	r2, [pc, #72]	; (b4da4 <_ZN14LoRA_Functions10changeTypeEii+0x94>)
   b4d5a:	4621      	mov	r1, r4
   b4d5c:	4628      	mov	r0, r5
   b4d5e:	f003 ffb7 	bl	b8cd0 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	JsonModifier mod(jp);
   b4d62:	4629      	mov	r1, r5
   b4d64:	a804      	add	r0, sp, #16
   b4d66:	f004 f91b 	bl	b8fa0 <_ZN12JsonModifierC1ER10JsonParser>
	mod.startModify(value);
   b4d6a:	9903      	ldr	r1, [sp, #12]
   b4d6c:	a804      	add	r0, sp, #16
   b4d6e:	f004 f929 	bl	b8fc4 <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE>
   b4d72:	4632      	mov	r2, r6
   b4d74:	490e      	ldr	r1, [pc, #56]	; (b4db0 <_ZN14LoRA_Functions10changeTypeEii+0xa0>)
   b4d76:	a804      	add	r0, sp, #16
   b4d78:	f004 f82f 	bl	b8dda <_ZN10JsonWriter13insertsprintfEPKcz>
	mod.finish();
   b4d7c:	a804      	add	r0, sp, #16
   b4d7e:	f004 fba6 	bl	b94ce <_ZN12JsonModifier6finishEv>
	nodeDatabase.set_nodeIDJson(jp.getBuffer());									// This should backup the nodeID database - now updated to persistent storage
   b4d82:	f001 fbe7 	bl	b6554 <_ZN10nodeIDData8instanceEv>
   b4d86:	6869      	ldr	r1, [r5, #4]
   b4d88:	f001 fc20 	bl	b65cc <_ZN10nodeIDData14set_nodeIDJsonEPKc>
	JsonModifier mod(jp);
   b4d8c:	a804      	add	r0, sp, #16
   b4d8e:	f003 fda9 	bl	b88e4 <_ZN12JsonModifierD1Ev>
	return true;
   b4d92:	2001      	movs	r0, #1
}
   b4d94:	b014      	add	sp, #80	; 0x50
   b4d96:	bd70      	pop	{r4, r5, r6, pc}
	if (nodeNumber > 10) return false;
   b4d98:	2000      	movs	r0, #0
   b4d9a:	e7fb      	b.n	b4d94 <_ZN14LoRA_Functions10changeTypeEii+0x84>
   b4d9c:	2003da1c 	.word	0x2003da1c
   b4da0:	000c3758 	.word	0x000c3758
   b4da4:	000c37bb 	.word	0x000c37bb
   b4da8:	000c3a48 	.word	0x000c3a48
   b4dac:	2003e650 	.word	0x2003e650
   b4db0:	000c3bbf 	.word	0x000c3bbf

000b4db4 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv>:
bool LoRA_Functions::decipherJoinRequestGateway() {			// Ths only question here is whether the node with the join request needs a new nodeNumber or is just looking for a clock set
   b4db4:	b5f0      	push	{r4, r5, r6, r7, lr}
		nodeDeviceID[i] = buf[i+4];
   b4db6:	4a48      	ldr	r2, [pc, #288]	; (b4ed8 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x124>)
bool LoRA_Functions::decipherJoinRequestGateway() {			// Ths only question here is whether the node with the join request needs a new nodeNumber or is just looking for a clock set
   b4db8:	b08d      	sub	sp, #52	; 0x34
		nodeDeviceID[i] = buf[i+4];
   b4dba:	ac05      	add	r4, sp, #20
bool LoRA_Functions::decipherJoinRequestGateway() {			// Ths only question here is whether the node with the join request needs a new nodeNumber or is just looking for a clock set
   b4dbc:	4605      	mov	r5, r0
		nodeDeviceID[i] = buf[i+4];
   b4dbe:	f102 0318 	add.w	r3, r2, #24
   b4dc2:	4627      	mov	r7, r4
   b4dc4:	6810      	ldr	r0, [r2, #0]
   b4dc6:	6851      	ldr	r1, [r2, #4]
   b4dc8:	4626      	mov	r6, r4
   b4dca:	c603      	stmia	r6!, {r0, r1}
   b4dcc:	3208      	adds	r2, #8
   b4dce:	429a      	cmp	r2, r3
   b4dd0:	4634      	mov	r4, r6
   b4dd2:	d1f7      	bne.n	b4dc4 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x10>
   b4dd4:	7813      	ldrb	r3, [r2, #0]
   b4dd6:	7033      	strb	r3, [r6, #0]
	current.set_sensorType(buf[29]);								// Store device type in the current data buffer 
   b4dd8:	f001 fb36 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b4ddc:	4b3f      	ldr	r3, [pc, #252]	; (b4edc <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x128>)
   b4dde:	7f59      	ldrb	r1, [r3, #29]
   b4de0:	f001 fd2e 	bl	b6840 <_ZN17currentStatusData14set_sensorTypeEh>
	if (current.get_nodeNumber() < 11 && !LoRA_Functions::instance().nodeConfigured(current.get_nodeNumber(),current.get_nodeID())) {
   b4de4:	f001 fb30 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b4de8:	f001 fc85 	bl	b66f6 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4dec:	280a      	cmp	r0, #10
   b4dee:	d844      	bhi.n	b4e7a <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xc6>
   b4df0:	f7ff f9be 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b4df4:	4604      	mov	r4, r0
   b4df6:	f001 fb27 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b4dfa:	f001 fc7c 	bl	b66f6 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4dfe:	9003      	str	r0, [sp, #12]
   b4e00:	f001 fb22 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b4e04:	f001 fd9b 	bl	b693e <_ZNK17currentStatusData10get_nodeIDEv>
   b4e08:	9903      	ldr	r1, [sp, #12]
   b4e0a:	4602      	mov	r2, r0
   b4e0c:	4620      	mov	r0, r4
   b4e0e:	f7ff fb2b 	bl	b4468 <_ZN14LoRA_Functions14nodeConfiguredEii>
   b4e12:	bb90      	cbnz	r0, b4e7a <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xc6>
		Log.info("Node %d join request from %s setting clock",current.get_nodeNumber(), nodeDeviceID);
   b4e14:	f001 fb18 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b4e18:	f001 fc6d 	bl	b66f6 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4e1c:	4930      	ldr	r1, [pc, #192]	; (b4ee0 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x12c>)
   b4e1e:	4602      	mov	r2, r0
   b4e20:	463b      	mov	r3, r7
   b4e22:	4830      	ldr	r0, [pc, #192]	; (b4ee4 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x130>)
   b4e24:	f7ff f98b 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	current.set_alertCodeNode(1);									// This is a join request so alert code is 1
   b4e28:	f001 fb0e 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b4e2c:	2101      	movs	r1, #1
   b4e2e:	f001 fd01 	bl	b6834 <_ZN17currentStatusData17set_alertCodeNodeEh>
	current.set_alertTimestampNode(Time.now());
   b4e32:	f001 fb09 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b4e36:	4604      	mov	r4, r0
   b4e38:	f00b f94b 	bl	c00d2 <_ZN9TimeClass3nowEv>
   b4e3c:	4602      	mov	r2, r0
   b4e3e:	17c3      	asrs	r3, r0, #31
   b4e40:	4620      	mov	r0, r4
   b4e42:	f001 fe46 	bl	b6ad2 <_ZN17currentStatusData22set_alertTimestampNodeEx>
	if (current.get_nodeNumber() == 11) return false;
   b4e46:	f001 faff 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b4e4a:	f001 fc54 	bl	b66f6 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4e4e:	280b      	cmp	r0, #11
   b4e50:	d03f      	beq.n	b4ed2 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x11e>
	LoRA_Functions::changeType(current.get_nodeNumber(),current.get_sensorType());  // Record the sensor type in the nodeID structure
   b4e52:	f001 faf9 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b4e56:	f001 fc4e 	bl	b66f6 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4e5a:	9003      	str	r0, [sp, #12]
   b4e5c:	f001 faf4 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b4e60:	f001 fc71 	bl	b6746 <_ZNK17currentStatusData14get_sensorTypeEv>
   b4e64:	9903      	ldr	r1, [sp, #12]
   b4e66:	4602      	mov	r2, r0
   b4e68:	4628      	mov	r0, r5
   b4e6a:	f7ff ff51 	bl	b4d10 <_ZN14LoRA_Functions10changeTypeEii>
	lora_state = JOIN_ACK;			// Prepare to respond
   b4e6e:	4b1e      	ldr	r3, [pc, #120]	; (b4ee8 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x134>)
   b4e70:	2202      	movs	r2, #2
   b4e72:	701a      	strb	r2, [r3, #0]
	return true;
   b4e74:	2001      	movs	r0, #1
}
   b4e76:	b00d      	add	sp, #52	; 0x34
   b4e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
		current.set_tempNodeNumber(current.get_nodeNumber());			// Store the old node number for the ack - also differentiates between unconfigured node and time set
   b4e7a:	f001 fae5 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b4e7e:	4604      	mov	r4, r0
   b4e80:	f001 fae2 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b4e84:	f001 fc37 	bl	b66f6 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4e88:	4601      	mov	r1, r0
   b4e8a:	4620      	mov	r0, r4
   b4e8c:	f001 fcae 	bl	b67ec <_ZN17currentStatusData18set_tempNodeNumberEh>
		current.set_nodeNumber(findNodeNumber(nodeDeviceID,current.get_nodeID()));		// Look up the new node number
   b4e90:	f001 fada 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b4e94:	4604      	mov	r4, r0
   b4e96:	f001 fad7 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b4e9a:	f001 fd50 	bl	b693e <_ZNK17currentStatusData10get_nodeIDEv>
   b4e9e:	4639      	mov	r1, r7
   b4ea0:	4602      	mov	r2, r0
   b4ea2:	4628      	mov	r0, r5
   b4ea4:	f7ff fde6 	bl	b4a74 <_ZN14LoRA_Functions14findNodeNumberEPKci>
   b4ea8:	4601      	mov	r1, r0
   b4eaa:	4620      	mov	r0, r4
   b4eac:	f001 fc98 	bl	b67e0 <_ZN17currentStatusData14set_nodeNumberEh>
		Log.info("Node %d join request from %s will change node number to %d", current.get_tempNodeNumber(), nodeDeviceID ,current.get_nodeNumber());
   b4eb0:	f001 faca 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b4eb4:	f001 fc24 	bl	b6700 <_ZNK17currentStatusData18get_tempNodeNumberEv>
   b4eb8:	9003      	str	r0, [sp, #12]
   b4eba:	f001 fac5 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b4ebe:	f001 fc1a 	bl	b66f6 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4ec2:	9a03      	ldr	r2, [sp, #12]
   b4ec4:	9000      	str	r0, [sp, #0]
   b4ec6:	4909      	ldr	r1, [pc, #36]	; (b4eec <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x138>)
   b4ec8:	4806      	ldr	r0, [pc, #24]	; (b4ee4 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x130>)
   b4eca:	463b      	mov	r3, r7
   b4ecc:	f7ff f937 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b4ed0:	e7aa      	b.n	b4e28 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0x74>
	if (current.get_nodeNumber() == 11) return false;
   b4ed2:	2000      	movs	r0, #0
   b4ed4:	e7cf      	b.n	b4e76 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv+0xc2>
   b4ed6:	bf00      	nop
   b4ed8:	2003d874 	.word	0x2003d874
   b4edc:	2003d870 	.word	0x2003d870
   b4ee0:	000c3a6b 	.word	0x000c3a6b
   b4ee4:	2003e650 	.word	0x2003e650
   b4ee8:	2003d868 	.word	0x2003d868
   b4eec:	000c3a96 	.word	0x000c3a96

000b4ef0 <_ZN14LoRA_Functions11changeAlertEii>:
bool LoRA_Functions::changeAlert(int nodeNumber, int newAlert) {
   b4ef0:	b570      	push	{r4, r5, r6, lr}
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4ef2:	4d20      	ldr	r5, [pc, #128]	; (b4f74 <_ZN14LoRA_Functions11changeAlertEii+0x84>)
bool LoRA_Functions::changeAlert(int nodeNumber, int newAlert) {
   b4ef4:	b094      	sub	sp, #80	; 0x50
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4ef6:	4628      	mov	r0, r5
bool LoRA_Functions::changeAlert(int nodeNumber, int newAlert) {
   b4ef8:	460c      	mov	r4, r1
   b4efa:	4616      	mov	r6, r2
	jp.getValueTokenByKey(jp.getOuterObject(), "nodes", nodesArrayContainer);
   b4efc:	f003 fd83 	bl	b8a06 <_ZNK10JsonParser14getOuterObjectEv>
   b4f00:	4a1d      	ldr	r2, [pc, #116]	; (b4f78 <_ZN14LoRA_Functions11changeAlertEii+0x88>)
   b4f02:	4601      	mov	r1, r0
   b4f04:	ab02      	add	r3, sp, #8
   b4f06:	4628      	mov	r0, r5
   b4f08:	f003 fee2 	bl	b8cd0 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	nodeObjectContainer = jp.getTokenByIndex(nodesArrayContainer, nodeNumber-1);	// find the entry for the node of interest
   b4f0c:	1e62      	subs	r2, r4, #1
   b4f0e:	9902      	ldr	r1, [sp, #8]
   b4f10:	4628      	mov	r0, r5
   b4f12:	f003 fd9a 	bl	b8a4a <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
	if(nodeObjectContainer == NULL) return false;							// Ran out of entries - node number entry not found triggers alert
   b4f16:	4604      	mov	r4, r0
   b4f18:	b350      	cbz	r0, b4f70 <_ZN14LoRA_Functions11changeAlertEii+0x80>
	jp.getValueByKey(nodeObjectContainer, "pend", currentAlert);			// Now we have the oject for the specific node
   b4f1a:	4601      	mov	r1, r0
   b4f1c:	4a17      	ldr	r2, [pc, #92]	; (b4f7c <_ZN14LoRA_Functions11changeAlertEii+0x8c>)
   b4f1e:	ab01      	add	r3, sp, #4
   b4f20:	4628      	mov	r0, r5
   b4f22:	f7ff f8f0 	bl	b4106 <_ZNK10JsonParser13getValueByKeyIiEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	Log.info("Changing pending alert from %d to %d", currentAlert, newAlert);
   b4f26:	9a01      	ldr	r2, [sp, #4]
   b4f28:	4915      	ldr	r1, [pc, #84]	; (b4f80 <_ZN14LoRA_Functions11changeAlertEii+0x90>)
   b4f2a:	4816      	ldr	r0, [pc, #88]	; (b4f84 <_ZN14LoRA_Functions11changeAlertEii+0x94>)
   b4f2c:	4633      	mov	r3, r6
   b4f2e:	f7ff f906 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
	jp.getValueTokenByKey(nodeObjectContainer, "pend", value);
   b4f32:	ab03      	add	r3, sp, #12
   b4f34:	4a11      	ldr	r2, [pc, #68]	; (b4f7c <_ZN14LoRA_Functions11changeAlertEii+0x8c>)
   b4f36:	4621      	mov	r1, r4
   b4f38:	4628      	mov	r0, r5
   b4f3a:	f003 fec9 	bl	b8cd0 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	JsonModifier mod(jp);													// Create a modifier object
   b4f3e:	4629      	mov	r1, r5
   b4f40:	a804      	add	r0, sp, #16
   b4f42:	f004 f82d 	bl	b8fa0 <_ZN12JsonModifierC1ER10JsonParser>
	mod.startModify(value);													// Update the pending alert value for the selected node
   b4f46:	9903      	ldr	r1, [sp, #12]
   b4f48:	a804      	add	r0, sp, #16
   b4f4a:	f004 f83b 	bl	b8fc4 <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE>
   b4f4e:	4632      	mov	r2, r6
   b4f50:	490d      	ldr	r1, [pc, #52]	; (b4f88 <_ZN14LoRA_Functions11changeAlertEii+0x98>)
   b4f52:	a804      	add	r0, sp, #16
   b4f54:	f003 ff41 	bl	b8dda <_ZN10JsonWriter13insertsprintfEPKcz>
	mod.finish();
   b4f58:	a804      	add	r0, sp, #16
   b4f5a:	f004 fab8 	bl	b94ce <_ZN12JsonModifier6finishEv>
	nodeDatabase.set_nodeIDJson(jp.getBuffer());									// This updates the JSON object but doe not commit to to persistent storage
   b4f5e:	f001 faf9 	bl	b6554 <_ZN10nodeIDData8instanceEv>
   b4f62:	6869      	ldr	r1, [r5, #4]
   b4f64:	f001 fb32 	bl	b65cc <_ZN10nodeIDData14set_nodeIDJsonEPKc>
	JsonModifier mod(jp);													// Create a modifier object
   b4f68:	a804      	add	r0, sp, #16
   b4f6a:	f003 fcbb 	bl	b88e4 <_ZN12JsonModifierD1Ev>
	return true;
   b4f6e:	2001      	movs	r0, #1
}
   b4f70:	b014      	add	sp, #80	; 0x50
   b4f72:	bd70      	pop	{r4, r5, r6, pc}
   b4f74:	2003da1c 	.word	0x2003da1c
   b4f78:	000c3758 	.word	0x000c3758
   b4f7c:	000c3807 	.word	0x000c3807
   b4f80:	000c3ad1 	.word	0x000c3ad1
   b4f84:	2003e650 	.word	0x2003e650
   b4f88:	000c3bbf 	.word	0x000c3bbf

000b4f8c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv>:
bool LoRA_Functions::acknowledgeDataReportGateway() { 		// This is a response to a data message 
   b4f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4f8e:	ed2d 8b02 	vpush	{d8}
   b4f92:	b0a9      	sub	sp, #164	; 0xa4
   b4f94:	4605      	mov	r5, r0
	buf[2] = ((uint8_t) ((Time.now()) >> 24)); 		// Fourth byte - current time
   b4f96:	f00b f89c 	bl	c00d2 <_ZN9TimeClass3nowEv>
   b4f9a:	4ca8      	ldr	r4, [pc, #672]	; (b523c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2b0>)
   b4f9c:	1600      	asrs	r0, r0, #24
   b4f9e:	70a0      	strb	r0, [r4, #2]
	buf[3] = ((uint8_t) ((Time.now()) >> 16));		// Third byte
   b4fa0:	f00b f897 	bl	c00d2 <_ZN9TimeClass3nowEv>
   b4fa4:	1400      	asrs	r0, r0, #16
   b4fa6:	70e0      	strb	r0, [r4, #3]
	buf[4] = ((uint8_t) ((Time.now()) >> 8));		// Second byte
   b4fa8:	f00b f893 	bl	c00d2 <_ZN9TimeClass3nowEv>
   b4fac:	1200      	asrs	r0, r0, #8
   b4fae:	7120      	strb	r0, [r4, #4]
	buf[5] = ((uint8_t) (Time.now()));		    	// First byte			
   b4fb0:	f00b f88f 	bl	c00d2 <_ZN9TimeClass3nowEv>
   b4fb4:	7160      	strb	r0, [r4, #5]
	buf[6] = highByte(sysStatus.get_frequencyMinutes());	// Frequency of reports set by the gateway
   b4fb6:	f001 f9ff 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b4fba:	f001 fc5e 	bl	b687a <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4fbe:	0a00      	lsrs	r0, r0, #8
   b4fc0:	71a0      	strb	r0, [r4, #6]
	buf[7] = lowByte(sysStatus.get_frequencyMinutes());	
   b4fc2:	f001 f9f9 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b4fc6:	f001 fc58 	bl	b687a <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b4fca:	71e0      	strb	r0, [r4, #7]
	if (current.get_nodeNumber() == 11) {			// This is a data report from an unconfigured node - need to tell it to rejoin
   b4fcc:	f001 fa3c 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b4fd0:	f001 fb91 	bl	b66f6 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4fd4:	280b      	cmp	r0, #11
   b4fd6:	f040 8082 	bne.w	b50de <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x152>
		Log.info("Node %d is invalid, setting alert code to 1", current.get_nodeNumber());
   b4fda:	f001 fa35 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b4fde:	f001 fb8a 	bl	b66f6 <_ZNK17currentStatusData14get_nodeNumberEv>
   b4fe2:	4997      	ldr	r1, [pc, #604]	; (b5240 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2b4>)
   b4fe4:	4602      	mov	r2, r0
   b4fe6:	4897      	ldr	r0, [pc, #604]	; (b5244 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2b8>)
   b4fe8:	f7ff f8a9 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		current.set_alertCodeNode(1);				// This will ensure the node rejoins the network
   b4fec:	f001 fa2c 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b4ff0:	2101      	movs	r1, #1
   b4ff2:	f001 fc1f 	bl	b6834 <_ZN17currentStatusData17set_alertCodeNodeEh>
		current.set_alertTimestampNode(Time.now());
   b4ff6:	f001 fa27 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b4ffa:	4605      	mov	r5, r0
   b4ffc:	f00b f869 	bl	c00d2 <_ZN9TimeClass3nowEv>
   b5000:	4602      	mov	r2, r0
   b5002:	17c3      	asrs	r3, r0, #31
   b5004:	4628      	mov	r0, r5
   b5006:	f001 fd64 	bl	b6ad2 <_ZN17currentStatusData22set_alertTimestampNodeEx>
		buf[8] = current.get_alertCodeNode();												
   b500a:	f001 fa1d 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b500e:	f001 fb95 	bl	b673c <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b5012:	7220      	strb	r0, [r4, #8]
		buf[9] = current.get_sensorType();			// Since the node is unconfigured, we need to beleive it when it tells us the type
   b5014:	f001 fa18 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b5018:	f001 fb95 	bl	b6746 <_ZNK17currentStatusData14get_sensorTypeEv>
   b501c:	7260      	strb	r0, [r4, #9]
	buf[10] = current.get_openHours();
   b501e:	f001 fa13 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b5022:	f001 fdcf 	bl	b6bc4 <_ZNK17currentStatusData13get_openHoursEv>
   b5026:	72a0      	strb	r0, [r4, #10]
	buf[11] = current.get_messageCount();			// Repeat back message number
   b5028:	f001 fa0e 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b502c:	f001 fb7c 	bl	b6728 <_ZNK17currentStatusData16get_messageCountEv>
	digitalWrite(BLUE_LED,HIGH);			       	// Sending data
   b5030:	4b85      	ldr	r3, [pc, #532]	; (b5248 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2bc>)
	buf[11] = current.get_messageCount();			// Repeat back message number
   b5032:	72e0      	strb	r0, [r4, #11]
	digitalWrite(BLUE_LED,HIGH);			       	// Sending data
   b5034:	881d      	ldrh	r5, [r3, #0]
   b5036:	2101      	movs	r1, #1
   b5038:	4628      	mov	r0, r5
   b503a:	f00b fa5a 	bl	c04f2 <digitalWrite>
	byte nodeAddress = (current.get_tempNodeNumber() == 0) ? current.get_nodeNumber() : current.get_tempNodeNumber();  // get the return address right
   b503e:	f001 fa03 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b5042:	f001 fb5d 	bl	b6700 <_ZNK17currentStatusData18get_tempNodeNumberEv>
   b5046:	2800      	cmp	r0, #0
   b5048:	f040 80e2 	bne.w	b5210 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x284>
   b504c:	f001 f9fc 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b5050:	f001 fb51 	bl	b66f6 <_ZNK17currentStatusData14get_nodeNumberEv>
	if (manager.sendtoWait(buf, 12, nodeAddress, DATA_ACK) == RH_ROUTER_ERROR_NONE) {
   b5054:	2304      	movs	r3, #4
   b5056:	4979      	ldr	r1, [pc, #484]	; (b523c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2b0>)
   b5058:	9300      	str	r3, [sp, #0]
   b505a:	220c      	movs	r2, #12
   b505c:	4603      	mov	r3, r0
   b505e:	487b      	ldr	r0, [pc, #492]	; (b524c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2c0>)
   b5060:	f006 f87e 	bl	bb160 <_ZN6RHMesh10sendtoWaitEPhhhh>
   b5064:	4601      	mov	r1, r0
   b5066:	2800      	cmp	r0, #0
   b5068:	f040 80d7 	bne.w	b521a <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x28e>
		digitalWrite(BLUE_LED,LOW);
   b506c:	4628      	mov	r0, r5
   b506e:	f00b fa40 	bl	c04f2 <digitalWrite>
		snprintf(messageString,sizeof(messageString),"Node %d data report %d acknowledged with alert %d, and RSSI / SNR of %d / %d", current.get_nodeNumber(), buf[10], buf[8], current.get_RSSI(), current.get_SNR());
   b5072:	f001 f9e9 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b5076:	f001 fb3e 	bl	b66f6 <_ZNK17currentStatusData14get_nodeNumberEv>
   b507a:	7aa5      	ldrb	r5, [r4, #10]
   b507c:	7a26      	ldrb	r6, [r4, #8]
   b507e:	9005      	str	r0, [sp, #20]
   b5080:	f001 f9e2 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b5084:	f001 fe34 	bl	b6cf0 <_ZNK17currentStatusData8get_RSSIEv>
   b5088:	4604      	mov	r4, r0
   b508a:	f001 f9dd 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b508e:	f001 fe34 	bl	b6cfa <_ZNK17currentStatusData7get_SNREv>
   b5092:	9b05      	ldr	r3, [sp, #20]
   b5094:	4a6e      	ldr	r2, [pc, #440]	; (b5250 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2c4>)
   b5096:	e9cd 4002 	strd	r4, r0, [sp, #8]
   b509a:	2180      	movs	r1, #128	; 0x80
   b509c:	e9cd 5600 	strd	r5, r6, [sp]
   b50a0:	a808      	add	r0, sp, #32
   b50a2:	f008 f923 	bl	bd2ec <snprintf>
		Log.info(messageString);
   b50a6:	4867      	ldr	r0, [pc, #412]	; (b5244 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2b8>)
   b50a8:	a908      	add	r1, sp, #32
   b50aa:	f7ff f848 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b50ae:	f008 f855 	bl	bd15c <spark_cloud_flag_connected>
		if (Particle.connected()) Particle.publish("status", messageString,PRIVATE);
   b50b2:	4604      	mov	r4, r0
   b50b4:	2800      	cmp	r0, #0
   b50b6:	f000 80bf 	beq.w	b5238 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2ac>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b50ba:	4b66      	ldr	r3, [pc, #408]	; (b5254 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2c8>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b50bc:	4966      	ldr	r1, [pc, #408]	; (b5258 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2cc>)
   b50be:	781b      	ldrb	r3, [r3, #0]
   b50c0:	f88d 3000 	strb.w	r3, [sp]
   b50c4:	a806      	add	r0, sp, #24
   b50c6:	233c      	movs	r3, #60	; 0x3c
   b50c8:	aa08      	add	r2, sp, #32
   b50ca:	f008 fc33 	bl	bd934 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b50ce:	a807      	add	r0, sp, #28
   b50d0:	f7ff fae6 	bl	b46a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b50d4:	4620      	mov	r0, r4
   b50d6:	b029      	add	sp, #164	; 0xa4
   b50d8:	ecbd 8b02 	vpop	{d8}
   b50dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		current.set_alertCodeNode(LoRA_Functions::getAlert(current.get_nodeNumber()));
   b50de:	f001 f9b3 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b50e2:	4606      	mov	r6, r0
   b50e4:	f001 f9b0 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b50e8:	f001 fb05 	bl	b66f6 <_ZNK17currentStatusData14get_nodeNumberEv>
   b50ec:	4601      	mov	r1, r0
   b50ee:	4628      	mov	r0, r5
   b50f0:	f7ff fa2a 	bl	b4548 <_ZN14LoRA_Functions8getAlertEi>
   b50f4:	4601      	mov	r1, r0
   b50f6:	4630      	mov	r0, r6
   b50f8:	f001 fb9c 	bl	b6834 <_ZN17currentStatusData17set_alertCodeNodeEh>
		if (current.get_alertCodeNode() > 0) Log.info("Node %d has a pending alert %d", current.get_nodeNumber(), current.get_alertCodeNode());
   b50fc:	f001 f9a4 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b5100:	f001 fb1c 	bl	b673c <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b5104:	b170      	cbz	r0, b5124 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x198>
   b5106:	f001 f99f 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b510a:	f001 faf4 	bl	b66f6 <_ZNK17currentStatusData14get_nodeNumberEv>
   b510e:	9005      	str	r0, [sp, #20]
   b5110:	f001 f99a 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b5114:	f001 fb12 	bl	b673c <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b5118:	9a05      	ldr	r2, [sp, #20]
   b511a:	4950      	ldr	r1, [pc, #320]	; (b525c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2d0>)
   b511c:	4603      	mov	r3, r0
   b511e:	4849      	ldr	r0, [pc, #292]	; (b5244 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2b8>)
   b5120:	f7ff f80d 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		if (current.get_alertCodeNode() == 7) {							// if it is a change in type alert - we can do that here
   b5124:	f001 f990 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b5128:	f001 fb08 	bl	b673c <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b512c:	2807      	cmp	r0, #7
   b512e:	d166      	bne.n	b51fe <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x272>
			int newSensorType = LoRA_Functions::getType(current.get_nodeNumber());
   b5130:	f001 f98a 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b5134:	f001 fadf 	bl	b66f6 <_ZNK17currentStatusData14get_nodeNumberEv>
   b5138:	4601      	mov	r1, r0
   b513a:	4628      	mov	r0, r5
   b513c:	f7ff f9ca 	bl	b44d4 <_ZN14LoRA_Functions7getTypeEi>
   b5140:	4606      	mov	r6, r0
			Log.info("In data acknowledge, changing type to from %d to %d", current.get_sensorType(), newSensorType );
   b5142:	f001 f981 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b5146:	f001 fafe 	bl	b6746 <_ZNK17currentStatusData14get_sensorTypeEv>
   b514a:	4945      	ldr	r1, [pc, #276]	; (b5260 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2d4>)
   b514c:	4602      	mov	r2, r0
   b514e:	4633      	mov	r3, r6
   b5150:	483c      	ldr	r0, [pc, #240]	; (b5244 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2b8>)
   b5152:	f7fe fff4 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
			current.set_sensorType(newSensorType);	// Update current value for data report
   b5156:	f001 f977 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b515a:	4631      	mov	r1, r6
   b515c:	f001 fb70 	bl	b6840 <_ZN17currentStatusData14set_sensorTypeEh>
			buf[9] = newSensorType;
   b5160:	7266      	strb	r6, [r4, #9]
		if (current.get_alertCodeNode() != 0) LoRA_Functions::changeAlert(current.get_nodeNumber(),0); 	// The alert was serviced or applied - no longer pending
   b5162:	f001 f971 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b5166:	f001 fae9 	bl	b673c <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b516a:	b140      	cbz	r0, b517e <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1f2>
   b516c:	f001 f96c 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b5170:	f001 fac1 	bl	b66f6 <_ZNK17currentStatusData14get_nodeNumberEv>
   b5174:	2200      	movs	r2, #0
   b5176:	4601      	mov	r1, r0
   b5178:	4628      	mov	r0, r5
   b517a:	f7ff feb9 	bl	b4ef0 <_ZN14LoRA_Functions11changeAlertEii>
		buf[8] = current.get_alertCodeNode();
   b517e:	f001 f963 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b5182:	f001 fadb 	bl	b673c <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b5186:	7220      	strb	r0, [r4, #8]
		if (current.get_messageCount()==0) successPercent = 0.0;
   b5188:	f001 f95e 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b518c:	f001 facc 	bl	b6728 <_ZNK17currentStatusData16get_messageCountEv>
   b5190:	b3d8      	cbz	r0, b520a <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x27e>
		else successPercent = ((current.get_successCount()+1.0)/(float)current.get_messageCount()) * 100.0;  // Add one to success because we are receving the message
   b5192:	f001 f959 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b5196:	f001 facc 	bl	b6732 <_ZNK17currentStatusData16get_successCountEv>
   b519a:	4605      	mov	r5, r0
   b519c:	f001 f954 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b51a0:	f001 fac2 	bl	b6728 <_ZNK17currentStatusData16get_messageCountEv>
   b51a4:	ee08 0a10 	vmov	s16, r0
   b51a8:	4628      	mov	r0, r5
   b51aa:	f00b fc0b 	bl	c09c4 <__aeabi_i2d>
   b51ae:	4b2d      	ldr	r3, [pc, #180]	; (b5264 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2d8>)
   b51b0:	2200      	movs	r2, #0
   b51b2:	f00b fabb 	bl	c072c <__adddf3>
   b51b6:	eef8 7a48 	vcvt.f32.u32	s15, s16
   b51ba:	4606      	mov	r6, r0
   b51bc:	ee17 0a90 	vmov	r0, s15
   b51c0:	460f      	mov	r7, r1
   b51c2:	f00b fc11 	bl	c09e8 <__aeabi_f2d>
   b51c6:	4602      	mov	r2, r0
   b51c8:	460b      	mov	r3, r1
   b51ca:	4630      	mov	r0, r6
   b51cc:	4639      	mov	r1, r7
   b51ce:	f00b fd8d 	bl	c0cec <__aeabi_ddiv>
   b51d2:	4b25      	ldr	r3, [pc, #148]	; (b5268 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2dc>)
   b51d4:	2200      	movs	r2, #0
   b51d6:	f00b fc5f 	bl	c0a98 <__aeabi_dmul>
   b51da:	f00b ff55 	bl	c1088 <__aeabi_d2f>
   b51de:	ee08 0a10 	vmov	s16, r0
		LoRA_Functions::instance().nodeUpdate(current.get_nodeNumber(), successPercent);
   b51e2:	f7fe ffc5 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b51e6:	4605      	mov	r5, r0
   b51e8:	f001 f92e 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b51ec:	f001 fa83 	bl	b66f6 <_ZNK17currentStatusData14get_nodeNumberEv>
   b51f0:	eeb0 0a48 	vmov.f32	s0, s16
   b51f4:	4601      	mov	r1, r0
   b51f6:	4628      	mov	r0, r5
   b51f8:	f7ff fd30 	bl	b4c5c <_ZN14LoRA_Functions10nodeUpdateEif>
   b51fc:	e70f      	b.n	b501e <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x92>
		else buf[9] = current.get_sensorType();
   b51fe:	f001 f923 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b5202:	f001 faa0 	bl	b6746 <_ZNK17currentStatusData14get_sensorTypeEv>
   b5206:	7260      	strb	r0, [r4, #9]
   b5208:	e7ab      	b.n	b5162 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x1d6>
		if (current.get_messageCount()==0) successPercent = 0.0;
   b520a:	ed9f 8a18 	vldr	s16, [pc, #96]	; b526c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2e0>
   b520e:	e7e8      	b.n	b51e2 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x256>
	byte nodeAddress = (current.get_tempNodeNumber() == 0) ? current.get_nodeNumber() : current.get_tempNodeNumber();  // get the return address right
   b5210:	f001 f91a 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b5214:	f001 fa74 	bl	b6700 <_ZNK17currentStatusData18get_tempNodeNumberEv>
   b5218:	e71c      	b.n	b5054 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0xc8>
		Log.info("Node %d data report response not acknowledged", current.get_nodeNumber());
   b521a:	f001 f915 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b521e:	f001 fa6a 	bl	b66f6 <_ZNK17currentStatusData14get_nodeNumberEv>
   b5222:	4913      	ldr	r1, [pc, #76]	; (b5270 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2e4>)
   b5224:	4602      	mov	r2, r0
   b5226:	4807      	ldr	r0, [pc, #28]	; (b5244 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x2b8>)
   b5228:	f7fe ff89 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		digitalWrite(BLUE_LED,LOW);
   b522c:	2100      	movs	r1, #0
   b522e:	4628      	mov	r0, r5
   b5230:	f00b f95f 	bl	c04f2 <digitalWrite>
		return false;
   b5234:	2400      	movs	r4, #0
   b5236:	e74d      	b.n	b50d4 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x148>
		return true;
   b5238:	2401      	movs	r4, #1
   b523a:	e74b      	b.n	b50d4 <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv+0x148>
   b523c:	2003d870 	.word	0x2003d870
   b5240:	000c3af6 	.word	0x000c3af6
   b5244:	2003e650 	.word	0x2003e650
   b5248:	000c47f8 	.word	0x000c47f8
   b524c:	2003e168 	.word	0x2003e168
   b5250:	000c3b75 	.word	0x000c3b75
   b5254:	2003d869 	.word	0x2003d869
   b5258:	000c38fc 	.word	0x000c38fc
   b525c:	000c3b22 	.word	0x000c3b22
   b5260:	000c3b41 	.word	0x000c3b41
   b5264:	3ff00000 	.word	0x3ff00000
   b5268:	40590000 	.word	0x40590000
   b526c:	00000000 	.word	0x00000000
   b5270:	000c3bc2 	.word	0x000c3bc2

000b5274 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv>:
bool LoRA_Functions::listenForLoRAMessageGateway() {
   b5274:	b570      	push	{r4, r5, r6, lr}
   b5276:	b088      	sub	sp, #32
	uint8_t len = sizeof(buf);
   b5278:	2379      	movs	r3, #121	; 0x79
   b527a:	f88d 301a 	strb.w	r3, [sp, #26]
	if (manager.recvfromAck(buf, &len, &from, &dest, &id, &messageFlag, &hops))	{	// We have received a message - need to validate it
   b527e:	f10d 031f 	add.w	r3, sp, #31
   b5282:	9303      	str	r3, [sp, #12]
   b5284:	f10d 031e 	add.w	r3, sp, #30
   b5288:	4d78      	ldr	r5, [pc, #480]	; (b546c <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x1f8>)
   b528a:	9302      	str	r3, [sp, #8]
   b528c:	f10d 031d 	add.w	r3, sp, #29
   b5290:	9301      	str	r3, [sp, #4]
   b5292:	ab07      	add	r3, sp, #28
   b5294:	9300      	str	r3, [sp, #0]
   b5296:	4876      	ldr	r0, [pc, #472]	; (b5470 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x1fc>)
   b5298:	f10d 031b 	add.w	r3, sp, #27
   b529c:	f10d 021a 	add.w	r2, sp, #26
   b52a0:	4629      	mov	r1, r5
   b52a2:	f005 ff91 	bl	bb1c8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   b52a6:	b908      	cbnz	r0, b52ac <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x38>
		else {Log.info("Invalid message flag"); return false;}
   b52a8:	2000      	movs	r0, #0
   b52aa:	e0c8      	b.n	b543e <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x1ca>
		buf[len] = 0;
   b52ac:	f89d 301a 	ldrb.w	r3, [sp, #26]
   b52b0:	2400      	movs	r4, #0
   b52b2:	54ec      	strb	r4, [r5, r3]
		if (!((buf[0] << 8 | buf[1]) == sysStatus.get_magicNumber())) {
   b52b4:	882e      	ldrh	r6, [r5, #0]
   b52b6:	f001 f87f 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b52ba:	f001 fad9 	bl	b6870 <_ZNK13sysStatusData15get_magicNumberEv>
   b52be:	ba76      	rev16	r6, r6
   b52c0:	b2b6      	uxth	r6, r6
   b52c2:	42b0      	cmp	r0, r6
   b52c4:	d014      	beq.n	b52f0 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x7c>
			Log.info("Node %d message magic number of %d did not match the Magic Number in memory %d - Ignoring", current.get_nodeNumber(),(buf[0] << 8 | buf[1]), sysStatus.get_magicNumber());
   b52c6:	f001 f8bf 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b52ca:	f001 fa14 	bl	b66f6 <_ZNK17currentStatusData14get_nodeNumberEv>
   b52ce:	882b      	ldrh	r3, [r5, #0]
   b52d0:	9005      	str	r0, [sp, #20]
   b52d2:	ba5b      	rev16	r3, r3
   b52d4:	b29b      	uxth	r3, r3
   b52d6:	9304      	str	r3, [sp, #16]
   b52d8:	f001 f86e 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b52dc:	f001 fac8 	bl	b6870 <_ZNK13sysStatusData15get_magicNumberEv>
   b52e0:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   b52e4:	9000      	str	r0, [sp, #0]
   b52e6:	4963      	ldr	r1, [pc, #396]	; (b5474 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x200>)
   b52e8:	4863      	ldr	r0, [pc, #396]	; (b5478 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x204>)
   b52ea:	f7fe ff28 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
			return false;
   b52ee:	e7db      	b.n	b52a8 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x34>
		current.set_nodeNumber(from);												// Captures the nodeNumber 
   b52f0:	f001 f8aa 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b52f4:	f89d 101b 	ldrb.w	r1, [sp, #27]
   b52f8:	f001 fa72 	bl	b67e0 <_ZN17currentStatusData14set_nodeNumberEh>
		current.set_tempNodeNumber(0);												// Clear for new response
   b52fc:	f001 f8a4 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b5300:	4621      	mov	r1, r4
   b5302:	f001 fa73 	bl	b67ec <_ZN17currentStatusData18set_tempNodeNumberEh>
		current.set_RSSI(driver.lastRssi());										// Signal strength
   b5306:	f001 f89f 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b530a:	4604      	mov	r4, r0
   b530c:	485b      	ldr	r0, [pc, #364]	; (b547c <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x208>)
   b530e:	f005 fd0c 	bl	bad2a <_ZN15RHGenericDriver8lastRssiEv>
   b5312:	4601      	mov	r1, r0
   b5314:	4620      	mov	r0, r4
   b5316:	f001 fd0d 	bl	b6d34 <_ZN17currentStatusData8set_RSSIEs>
		current.set_SNR(driver.lastSNR());											// Signal to noise ratio
   b531a:	f001 f895 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b531e:	4604      	mov	r4, r0
   b5320:	4856      	ldr	r0, [pc, #344]	; (b547c <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x208>)
   b5322:	f006 fea1 	bl	bc068 <_ZN7RH_RF957lastSNREv>
   b5326:	b201      	sxth	r1, r0
   b5328:	4620      	mov	r0, r4
   b532a:	f001 fd09 	bl	b6d40 <_ZN17currentStatusData7set_SNREs>
		current.set_nodeID(buf[2] << 8 | buf[3]);									// Captures the nodeID for Data or Alert reports
   b532e:	f001 f88b 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b5332:	8869      	ldrh	r1, [r5, #2]
		lora_state = (LoRA_State)(0x0F & messageFlag);								// Strip out the overhead byte to get the message flag
   b5334:	4c52      	ldr	r4, [pc, #328]	; (b5480 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x20c>)
		Log.info("Node %d with ID %d a %s message with RSSI/SNR of %d / %d", current.get_nodeNumber(), current.get_nodeID(), loraStateNames[lora_state], current.get_RSSI(), current.get_SNR());
   b5336:	4d53      	ldr	r5, [pc, #332]	; (b5484 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x210>)
		current.set_nodeID(buf[2] << 8 | buf[3]);									// Captures the nodeID for Data or Alert reports
   b5338:	ba49      	rev16	r1, r1
   b533a:	b289      	uxth	r1, r1
   b533c:	f001 fb69 	bl	b6a12 <_ZN17currentStatusData10set_nodeIDEt>
		lora_state = (LoRA_State)(0x0F & messageFlag);								// Strip out the overhead byte to get the message flag
   b5340:	f89d 301e 	ldrb.w	r3, [sp, #30]
   b5344:	f003 030f 	and.w	r3, r3, #15
   b5348:	7023      	strb	r3, [r4, #0]
		Log.info("Node %d with ID %d a %s message with RSSI/SNR of %d / %d", current.get_nodeNumber(), current.get_nodeID(), loraStateNames[lora_state], current.get_RSSI(), current.get_SNR());
   b534a:	f001 f87d 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b534e:	f001 f9d2 	bl	b66f6 <_ZNK17currentStatusData14get_nodeNumberEv>
   b5352:	9005      	str	r0, [sp, #20]
   b5354:	f001 f878 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b5358:	f001 faf1 	bl	b693e <_ZNK17currentStatusData10get_nodeIDEv>
   b535c:	7821      	ldrb	r1, [r4, #0]
   b535e:	9004      	str	r0, [sp, #16]
   b5360:	eb05 1501 	add.w	r5, r5, r1, lsl #4
   b5364:	f001 f870 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b5368:	f001 fcc2 	bl	b6cf0 <_ZNK17currentStatusData8get_RSSIEv>
   b536c:	4606      	mov	r6, r0
   b536e:	f001 f86b 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b5372:	f001 fcc2 	bl	b6cfa <_ZNK17currentStatusData7get_SNREv>
   b5376:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   b537a:	4943      	ldr	r1, [pc, #268]	; (b5488 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x214>)
   b537c:	9500      	str	r5, [sp, #0]
   b537e:	e9cd 6001 	strd	r6, r0, [sp, #4]
   b5382:	483d      	ldr	r0, [pc, #244]	; (b5478 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x204>)
   b5384:	f7fe fedb 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		if (current.get_nodeNumber() < 11 && !LoRA_Functions::instance().nodeConfigured(current.get_nodeNumber(),current.get_nodeID())) {
   b5388:	f001 f85e 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b538c:	f001 f9b3 	bl	b66f6 <_ZNK17currentStatusData14get_nodeNumberEv>
   b5390:	280a      	cmp	r0, #10
   b5392:	d825      	bhi.n	b53e0 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x16c>
   b5394:	f7fe feec 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b5398:	4605      	mov	r5, r0
   b539a:	f001 f855 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b539e:	f001 f9aa 	bl	b66f6 <_ZNK17currentStatusData14get_nodeNumberEv>
   b53a2:	9004      	str	r0, [sp, #16]
   b53a4:	f001 f850 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b53a8:	f001 fac9 	bl	b693e <_ZNK17currentStatusData10get_nodeIDEv>
   b53ac:	9904      	ldr	r1, [sp, #16]
   b53ae:	4602      	mov	r2, r0
   b53b0:	4628      	mov	r0, r5
   b53b2:	f7ff f859 	bl	b4468 <_ZN14LoRA_Functions14nodeConfiguredEii>
   b53b6:	b998      	cbnz	r0, b53e0 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x16c>
			Log.info("Node not properly configured, resetting node number");
   b53b8:	4934      	ldr	r1, [pc, #208]	; (b548c <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x218>)
   b53ba:	482f      	ldr	r0, [pc, #188]	; (b5478 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x204>)
   b53bc:	f7fe febf 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
			current.set_tempNodeNumber(current.get_nodeNumber());				// Store node number in temp for the repsonse
   b53c0:	f001 f842 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b53c4:	4605      	mov	r5, r0
   b53c6:	f001 f83f 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b53ca:	f001 f994 	bl	b66f6 <_ZNK17currentStatusData14get_nodeNumberEv>
   b53ce:	4601      	mov	r1, r0
   b53d0:	4628      	mov	r0, r5
   b53d2:	f001 fa0b 	bl	b67ec <_ZN17currentStatusData18set_tempNodeNumberEh>
			current.set_nodeNumber(11);											// Set node number to 11
   b53d6:	f001 f837 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b53da:	210b      	movs	r1, #11
   b53dc:	f001 fa00 	bl	b67e0 <_ZN17currentStatusData14set_nodeNumberEh>
		if (lora_state == DATA_RPT) {if(!LoRA_Functions::instance().decipherDataReportGateway()) return false;}
   b53e0:	7823      	ldrb	r3, [r4, #0]
   b53e2:	2b03      	cmp	r3, #3
   b53e4:	d12d      	bne.n	b5442 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x1ce>
   b53e6:	f7fe fec3 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b53ea:	f7fe ffb1 	bl	b4350 <_ZN14LoRA_Functions25decipherDataReportGatewayEv>
		else if (lora_state == JOIN_REQ) {if(!LoRA_Functions::instance().decipherJoinRequestGateway()) return false;}
   b53ee:	2800      	cmp	r0, #0
   b53f0:	f43f af5a 	beq.w	b52a8 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x34>
		if (sysStatus.get_updatedFrequencyMinutes() > 0) {              			// If we are to change the update frequency, we need to tell the nodes (or at least one node) about it.
   b53f4:	f000 ffe0 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b53f8:	f001 fa9c 	bl	b6934 <_ZNK13sysStatusData27get_updatedFrequencyMinutesEv>
   b53fc:	b1c0      	cbz	r0, b5430 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x1bc>
			sysStatus.set_frequencyMinutes(sysStatus.get_updatedFrequencyMinutes());// This was the temporary value from the particle function
   b53fe:	f000 ffdb 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b5402:	4605      	mov	r5, r0
   b5404:	f000 ffd8 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b5408:	f001 fa94 	bl	b6934 <_ZNK13sysStatusData27get_updatedFrequencyMinutesEv>
   b540c:	4601      	mov	r1, r0
   b540e:	4628      	mov	r0, r5
   b5410:	f001 faf3 	bl	b69fa <_ZN13sysStatusData20set_frequencyMinutesEt>
			sysStatus.set_updatedFrequencyMinutes(0);
   b5414:	f000 ffd0 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b5418:	2100      	movs	r1, #0
   b541a:	f001 faf4 	bl	b6a06 <_ZN13sysStatusData27set_updatedFrequencyMinutesEt>
			Log.info("We are updating the publish frequency to %i minutes", sysStatus.get_frequencyMinutes());
   b541e:	f000 ffcb 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b5422:	f001 fa2a 	bl	b687a <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b5426:	491a      	ldr	r1, [pc, #104]	; (b5490 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x21c>)
   b5428:	4602      	mov	r2, r0
   b542a:	4813      	ldr	r0, [pc, #76]	; (b5478 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x204>)
   b542c:	f7fe fe87 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		if (lora_state == DATA_ACK) { if(LoRA_Functions::instance().acknowledgeDataReportGateway()) return true;}
   b5430:	7823      	ldrb	r3, [r4, #0]
   b5432:	2b04      	cmp	r3, #4
   b5434:	d111      	bne.n	b545a <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x1e6>
   b5436:	f7fe fe9b 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b543a:	f7ff fda7 	bl	b4f8c <_ZN14LoRA_Functions28acknowledgeDataReportGatewayEv>
}
   b543e:	b008      	add	sp, #32
   b5440:	bd70      	pop	{r4, r5, r6, pc}
		else if (lora_state == JOIN_REQ) {if(!LoRA_Functions::instance().decipherJoinRequestGateway()) return false;}
   b5442:	2b01      	cmp	r3, #1
   b5444:	d104      	bne.n	b5450 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x1dc>
   b5446:	f7fe fe93 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b544a:	f7ff fcb3 	bl	b4db4 <_ZN14LoRA_Functions26decipherJoinRequestGatewayEv>
   b544e:	e7ce      	b.n	b53ee <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x17a>
		else {Log.info("Invalid message flag, returning"); return false;}
   b5450:	4910      	ldr	r1, [pc, #64]	; (b5494 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x220>)
		else {Log.info("Invalid message flag"); return false;}
   b5452:	4809      	ldr	r0, [pc, #36]	; (b5478 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x204>)
   b5454:	f7fe fe73 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b5458:	e726      	b.n	b52a8 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x34>
		else if (lora_state == JOIN_ACK) { if(LoRA_Functions::instance().acknowledgeJoinRequestGateway()) return true;}
   b545a:	2b02      	cmp	r3, #2
   b545c:	d104      	bne.n	b5468 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x1f4>
   b545e:	f7fe fe87 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b5462:	f7ff f933 	bl	b46cc <_ZN14LoRA_Functions29acknowledgeJoinRequestGatewayEv>
   b5466:	e7ea      	b.n	b543e <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x1ca>
		else {Log.info("Invalid message flag"); return false;}
   b5468:	490b      	ldr	r1, [pc, #44]	; (b5498 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x224>)
   b546a:	e7f2      	b.n	b5452 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv+0x1de>
   b546c:	2003d870 	.word	0x2003d870
   b5470:	2003e168 	.word	0x2003e168
   b5474:	000c3bf0 	.word	0x000c3bf0
   b5478:	2003e650 	.word	0x2003e650
   b547c:	2003d8ec 	.word	0x2003d8ec
   b5480:	2003d868 	.word	0x2003d868
   b5484:	2003d57c 	.word	0x2003d57c
   b5488:	000c3c4a 	.word	0x000c3c4a
   b548c:	000c3c83 	.word	0x000c3c83
   b5490:	000c3cd7 	.word	0x000c3cd7
   b5494:	000c3cb7 	.word	0x000c3cb7
   b5498:	000c3d0b 	.word	0x000c3d0b

000b549c <_Z18outOfMemoryHandleryi>:
	Log.info(stateTransitionString);
}

// Here are the various hardware and timer interrupt service routines
void outOfMemoryHandler(system_event_t event, int param) {
    outOfMemory = param;
   b549c:	4b01      	ldr	r3, [pc, #4]	; (b54a4 <_Z18outOfMemoryHandleryi+0x8>)
   b549e:	601a      	str	r2, [r3, #0]
}
   b54a0:	4770      	bx	lr
   b54a2:	bf00      	nop
   b54a4:	2003d5ec 	.word	0x2003d5ec

000b54a8 <_Z13userSwitchISRv>:

void userSwitchISR() {
	userSwitchDectected = true;
   b54a8:	4b01      	ldr	r3, [pc, #4]	; (b54b0 <_Z13userSwitchISRv+0x8>)
   b54aa:	2201      	movs	r2, #1
   b54ac:	701a      	strb	r2, [r3, #0]
}
   b54ae:	4770      	bx	lr
   b54b0:	2003e463 	.word	0x2003e463

000b54b4 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_>:
        system_set_flag(flag, value, nullptr);
    }

    static SleepResult sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags);

    static void subscribedEventHandler(system_event_t events, int data, void* pointer, void* context) {
   b54b4:	b530      	push	{r4, r5, lr}
   b54b6:	b085      	sub	sp, #20
   b54b8:	4604      	mov	r4, r0
   b54ba:	9808      	ldr	r0, [sp, #32]
        if (!context) {
   b54bc:	b160      	cbz	r0, b54d8 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        auto pContext = static_cast<const SystemEventContext*>(context);
        if (!pContext->callable) {
   b54be:	6840      	ldr	r0, [r0, #4]
   b54c0:	b150      	cbz	r0, b54d8 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        std::function<void(system_event_t, int, void*)>* handler = reinterpret_cast< std::function<void(system_event_t, int, void*)>* >(pContext->callable);
        if (!(*handler)) {
   b54c2:	6885      	ldr	r5, [r0, #8]
   b54c4:	b145      	cbz	r5, b54d8 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        (*handler)(events, data, pointer);
   b54c6:	e9cd 4102 	strd	r4, r1, [sp, #8]
   b54ca:	e9cd 2300 	strd	r2, r3, [sp]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b54ce:	68c4      	ldr	r4, [r0, #12]
   b54d0:	ab01      	add	r3, sp, #4
   b54d2:	466a      	mov	r2, sp
   b54d4:	a902      	add	r1, sp, #8
   b54d6:	47a0      	blx	r4
    }
   b54d8:	b005      	add	sp, #20
   b54da:	bd30      	pop	{r4, r5, pc}

000b54dc <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b54dc:	b530      	push	{r4, r5, lr}
   b54de:	b085      	sub	sp, #20
	    return __source._M_access<_Functor*>();
   b54e0:	6800      	ldr	r0, [r0, #0]
   b54e2:	6813      	ldr	r3, [r2, #0]
            handler(events, data);
   b54e4:	9301      	str	r3, [sp, #4]
   b54e6:	e9d1 4500 	ldrd	r4, r5, [r1]
      if (_M_empty())
   b54ea:	6883      	ldr	r3, [r0, #8]
   b54ec:	e9cd 4502 	strd	r4, r5, [sp, #8]
   b54f0:	b90b      	cbnz	r3, b54f6 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_+0x1a>
	__throw_bad_function_call();
   b54f2:	f00b f909 	bl	c0708 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b54f6:	68c3      	ldr	r3, [r0, #12]
   b54f8:	aa01      	add	r2, sp, #4
   b54fa:	a902      	add	r1, sp, #8
   b54fc:	4798      	blx	r3
      }
   b54fe:	b005      	add	sp, #20
   b5500:	bd30      	pop	{r4, r5, pc}

000b5502 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b5502:	2a01      	cmp	r2, #1
   b5504:	d102      	bne.n	b550c <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b5506:	6001      	str	r1, [r0, #0]
      }
   b5508:	2000      	movs	r0, #0
   b550a:	4770      	bx	lr
	  switch (__op)
   b550c:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b550e:	bf04      	itt	eq
   b5510:	680b      	ldreq	r3, [r1, #0]
   b5512:	6003      	streq	r3, [r0, #0]
	      break;
   b5514:	e7f8      	b.n	b5508 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b5516 <_ZNSt17_Function_handlerIFvyiEPS0_E9_M_invokeERKSt9_Any_dataOyOi>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b5516:	6803      	ldr	r3, [r0, #0]
   b5518:	6812      	ldr	r2, [r2, #0]
   b551a:	e9d1 0100 	ldrd	r0, r1, [r1]
   b551e:	4718      	bx	r3

000b5520 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   b5520:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b5522:	2000      	movs	r0, #0
   b5524:	f007 fe3a 	bl	bd19c <spark_sync_time_pending>
   b5528:	b128      	cbz	r0, b5536 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b552a:	f007 fe17 	bl	bd15c <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   b552e:	f080 0001 	eor.w	r0, r0, #1
   b5532:	b2c0      	uxtb	r0, r0
    }
   b5534:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   b5536:	2001      	movs	r0, #1
   b5538:	e7fc      	b.n	b5534 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000b553a <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b553a:	b510      	push	{r4, lr}
      if (_M_manager)
   b553c:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b553e:	4604      	mov	r4, r0
      if (_M_manager)
   b5540:	b113      	cbz	r3, b5548 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5542:	2203      	movs	r2, #3
   b5544:	4601      	mov	r1, r0
   b5546:	4798      	blx	r3
    }
   b5548:	4620      	mov	r0, r4
   b554a:	bd10      	pop	{r4, pc}

000b554c <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_>:
        context.destructor = [](void* callable) -> void {
   b554c:	b510      	push	{r4, lr}
            delete callableWrapper;
   b554e:	4604      	mov	r4, r0
   b5550:	b138      	cbz	r0, b5562 <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_+0x16>
    class function<_Res(_ArgTypes...)>
   b5552:	f7ff fff2 	bl	b553a <_ZNSt14_Function_baseD1Ev>
   b5556:	4620      	mov	r0, r4
   b5558:	2110      	movs	r1, #16
        };
   b555a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            delete callableWrapper;
   b555e:	f7fe bd9e 	b.w	b409e <_ZdlPvj>
        };
   b5562:	bd10      	pop	{r4, pc}

000b5564 <_Z22publishStateTransitionv>:
{
   b5564:	b570      	push	{r4, r5, r6, lr}
	if (state == IDLE_STATE && !Time.isValid()) snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s with invalid time", stateNames[oldState],stateNames[state]);
   b5566:	4c14      	ldr	r4, [pc, #80]	; (b55b8 <_Z22publishStateTransitionv+0x54>)
   b5568:	4d14      	ldr	r5, [pc, #80]	; (b55bc <_Z22publishStateTransitionv+0x58>)
   b556a:	7823      	ldrb	r3, [r4, #0]
   b556c:	4e14      	ldr	r6, [pc, #80]	; (b55c0 <_Z22publishStateTransitionv+0x5c>)
   b556e:	2b02      	cmp	r3, #2
{
   b5570:	b0c2      	sub	sp, #264	; 0x108
	if (state == IDLE_STATE && !Time.isValid()) snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s with invalid time", stateNames[oldState],stateNames[state]);
   b5572:	d117      	bne.n	b55a4 <_Z22publishStateTransitionv+0x40>
   b5574:	f00a fd90 	bl	c0098 <_ZN9TimeClass7isValidEv>
   b5578:	b9a0      	cbnz	r0, b55a4 <_Z22publishStateTransitionv+0x40>
   b557a:	7822      	ldrb	r2, [r4, #0]
   b557c:	7833      	ldrb	r3, [r6, #0]
   b557e:	eb05 1202 	add.w	r2, r5, r2, lsl #4
   b5582:	9200      	str	r2, [sp, #0]
   b5584:	4a0f      	ldr	r2, [pc, #60]	; (b55c4 <_Z22publishStateTransitionv+0x60>)
   b5586:	eb05 1303 	add.w	r3, r5, r3, lsl #4
	else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b558a:	f44f 7180 	mov.w	r1, #256	; 0x100
   b558e:	a802      	add	r0, sp, #8
   b5590:	f007 feac 	bl	bd2ec <snprintf>
	oldState = state;
   b5594:	7823      	ldrb	r3, [r4, #0]
	Log.info(stateTransitionString);
   b5596:	480c      	ldr	r0, [pc, #48]	; (b55c8 <_Z22publishStateTransitionv+0x64>)
	oldState = state;
   b5598:	7033      	strb	r3, [r6, #0]
	Log.info(stateTransitionString);
   b559a:	a902      	add	r1, sp, #8
   b559c:	f7fe fdcf 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
}
   b55a0:	b042      	add	sp, #264	; 0x108
   b55a2:	bd70      	pop	{r4, r5, r6, pc}
	else snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   b55a4:	7822      	ldrb	r2, [r4, #0]
   b55a6:	7833      	ldrb	r3, [r6, #0]
   b55a8:	eb05 1202 	add.w	r2, r5, r2, lsl #4
   b55ac:	9200      	str	r2, [sp, #0]
   b55ae:	eb05 1303 	add.w	r3, r5, r3, lsl #4
   b55b2:	4a06      	ldr	r2, [pc, #24]	; (b55cc <_Z22publishStateTransitionv+0x68>)
   b55b4:	e7e9      	b.n	b558a <_Z22publishStateTransitionv+0x26>
   b55b6:	bf00      	nop
   b55b8:	2003e462 	.word	0x2003e462
   b55bc:	2003d5f0 	.word	0x2003d5f0
   b55c0:	2003e461 	.word	0x2003e461
   b55c4:	000c3d40 	.word	0x000c3d40
   b55c8:	2003e650 	.word	0x2003e650
   b55cc:	000c3d60 	.word	0x000c3d60

000b55d0 <_Z21secondsUntilNextEventv>:
 * 
 * @details - Computes seconds and returns 10 if the device is in test mode or time is invalid
 * 
 * 
 */
int secondsUntilNextEvent() {											// Time till next scheduled event
   b55d0:	b510      	push	{r4, lr}
	unsigned long secondsToReturn = 10;									// Minimum is 10 seconds to avoid transmit loop

	unsigned long wakeBoundary = sysStatus.get_frequencyMinutes() * 60UL;
   b55d2:	f000 fef1 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b55d6:	f001 f950 	bl	b687a <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b55da:	4604      	mov	r4, r0
   	if (Time.isValid()) {
   b55dc:	f00a fd5c 	bl	c0098 <_ZN9TimeClass7isValidEv>
   b55e0:	b908      	cbnz	r0, b55e6 <_Z21secondsUntilNextEventv+0x16>
	unsigned long secondsToReturn = 10;									// Minimum is 10 seconds to avoid transmit loop
   b55e2:	200a      	movs	r0, #10
		secondsToReturn = constrain( wakeBoundary - Time.now() % wakeBoundary, 10UL, wakeBoundary);  // In test mode, we will set a minimum of 10 seconds
        // Log.info("Report frequency %d mins, next event in %lu seconds", sysStatus.get_frequencyMinutes(), secondsToReturn);
    }
	return secondsToReturn;
}
   b55e4:	bd10      	pop	{r4, pc}
	unsigned long wakeBoundary = sysStatus.get_frequencyMinutes() * 60UL;
   b55e6:	203c      	movs	r0, #60	; 0x3c
   b55e8:	4344      	muls	r4, r0
		secondsToReturn = constrain( wakeBoundary - Time.now() % wakeBoundary, 10UL, wakeBoundary);  // In test mode, we will set a minimum of 10 seconds
   b55ea:	f00a fd72 	bl	c00d2 <_ZN9TimeClass3nowEv>
   b55ee:	fbb0 f3f4 	udiv	r3, r0, r4
   b55f2:	fb03 0014 	mls	r0, r3, r4, r0
   b55f6:	1a20      	subs	r0, r4, r0
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }

template <typename T, typename U, typename V>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }
   b55f8:	2809      	cmp	r0, #9
   b55fa:	d9f2      	bls.n	b55e2 <_Z21secondsUntilNextEventv+0x12>
   b55fc:	42a0      	cmp	r0, r4
   b55fe:	bf28      	it	cs
   b5600:	4620      	movcs	r0, r4
   b5602:	e7ef      	b.n	b55e4 <_Z21secondsUntilNextEventv+0x14>

000b5604 <_Z14publishWebhookh>:
 * @details Nodes and Gateways will use the same format for this webook - data sources will change
 * 
 * 
 */

void publishWebhook(uint8_t nodeNumber) {
   b5604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5608:	ed2d 8b02 	vpush	{d8}
   b560c:	b0e7      	sub	sp, #412	; 0x19c
	char data[256];                             						// Store the date in this character array - not global
	// Battery conect information - https://docs.particle.io/reference/device-os/firmware/boron/#batterystate-
    const char* batteryContext[8] = {"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   b560e:	ad1e      	add	r5, sp, #120	; 0x78
   b5610:	2300      	movs	r3, #0
   b5612:	61eb      	str	r3, [r5, #28]
   b5614:	4b8a      	ldr	r3, [pc, #552]	; (b5840 <_Z14publishWebhookh+0x23c>)
   b5616:	602b      	str	r3, [r5, #0]
   b5618:	4b8a      	ldr	r3, [pc, #552]	; (b5844 <_Z14publishWebhookh+0x240>)
   b561a:	606b      	str	r3, [r5, #4]
   b561c:	4b8a      	ldr	r3, [pc, #552]	; (b5848 <_Z14publishWebhookh+0x244>)
   b561e:	60ab      	str	r3, [r5, #8]
   b5620:	4b8a      	ldr	r3, [pc, #552]	; (b584c <_Z14publishWebhookh+0x248>)
   b5622:	60eb      	str	r3, [r5, #12]
   b5624:	4b8a      	ldr	r3, [pc, #552]	; (b5850 <_Z14publishWebhookh+0x24c>)
   b5626:	612b      	str	r3, [r5, #16]
   b5628:	4b8a      	ldr	r3, [pc, #552]	; (b5854 <_Z14publishWebhookh+0x250>)
   b562a:	616b      	str	r3, [r5, #20]
   b562c:	4b8a      	ldr	r3, [pc, #552]	; (b5858 <_Z14publishWebhookh+0x254>)
   b562e:	61ab      	str	r3, [r5, #24]

	if (nodeNumber > 0) {												// Webhook for a node
   b5630:	4604      	mov	r4, r0
   b5632:	2800      	cmp	r0, #0
   b5634:	f000 80b1 	beq.w	b579a <_Z14publishWebhookh+0x196>
		String deviceID = LoRA_Functions::instance().findDeviceID(nodeNumber, current.get_nodeID());
   b5638:	f7fe fd9a 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b563c:	9012      	str	r0, [sp, #72]	; 0x48
   b563e:	f000 ff03 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b5642:	f001 f97c 	bl	b693e <_ZNK17currentStatusData10get_nodeIDEv>
   b5646:	4622      	mov	r2, r4
   b5648:	4603      	mov	r3, r0
   b564a:	9912      	ldr	r1, [sp, #72]	; 0x48
   b564c:	a81a      	add	r0, sp, #104	; 0x68
   b564e:	f7fe fec1 	bl	b43d4 <_ZN14LoRA_Functions12findDeviceIDEii>
   b5652:	4982      	ldr	r1, [pc, #520]	; (b585c <_Z14publishWebhookh+0x258>)
   b5654:	a81a      	add	r0, sp, #104	; 0x68
   b5656:	f00a fa8c 	bl	bfb72 <_ZNK6String6equalsEPKc>
		if (deviceID == "null") return;
   b565a:	4604      	mov	r4, r0
   b565c:	b138      	cbz	r0, b566e <_Z14publishWebhookh+0x6a>
		String deviceID = LoRA_Functions::instance().findDeviceID(nodeNumber, current.get_nodeID());
   b565e:	a81a      	add	r0, sp, #104	; 0x68
   b5660:	f00a f976 	bl	bf950 <_ZN6StringD1Ev>
		Particle.deviceID().c_str(), 0, 0, sysStatus.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
		current.get_internalTempC(), sysStatus.get_resetCount(), sysStatus.get_messageCount(), Time.now());
		PublishQueuePosix::instance().publish("Ubidots-LoRA-Gateway-v1", data, PRIVATE | WITH_ACK);
	}
	return;
}
   b5664:	b067      	add	sp, #412	; 0x19c
   b5666:	ecbd 8b02 	vpop	{d8}
   b566a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		float percentSuccess = ((current.get_successCount() * 1.0)/ current.get_messageCount())*100.0;
   b566e:	f000 feeb 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b5672:	f001 f85e 	bl	b6732 <_ZNK17currentStatusData16get_successCountEv>
   b5676:	4680      	mov	r8, r0
   b5678:	f000 fee6 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b567c:	f001 f854 	bl	b6728 <_ZNK17currentStatusData16get_messageCountEv>
	const char * c_str() const { return buffer; }
   b5680:	f8dd b068 	ldr.w	fp, [sp, #104]	; 0x68
   b5684:	4682      	mov	sl, r0
		deviceID.c_str(), current.get_hourlyCount(), current.get_dailyCount(), current.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b5686:	f000 fedf 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b568a:	f001 f95d 	bl	b6948 <_ZNK17currentStatusData15get_hourlyCountEv>
   b568e:	9013      	str	r0, [sp, #76]	; 0x4c
   b5690:	f000 feda 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b5694:	f001 f988 	bl	b69a8 <_ZNK17currentStatusData14get_dailyCountEv>
   b5698:	9014      	str	r0, [sp, #80]	; 0x50
   b569a:	f000 fed5 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b569e:	f001 f852 	bl	b6746 <_ZNK17currentStatusData14get_sensorTypeEv>
   b56a2:	9015      	str	r0, [sp, #84]	; 0x54
   b56a4:	f000 fed0 	bl	b6448 <_ZN17currentStatusData8instanceEv>
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"alerts\": %d, \"node\": %d, \"rssi\":%d,  \"snr\":%d, \"msg\":%d, \"success\":%4.2f, \"timestamp\":%lu000}",\
   b56a8:	f000 fef6 	bl	b6498 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b56ac:	eeb0 8a40 	vmov.f32	s16, s0
   b56b0:	eef0 8a60 	vmov.f32	s17, s1
		deviceID.c_str(), current.get_hourlyCount(), current.get_dailyCount(), current.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b56b4:	f000 fec8 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b56b8:	f001 f82c 	bl	b6714 <_ZNK17currentStatusData16get_batteryStateEv>
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"alerts\": %d, \"node\": %d, \"rssi\":%d,  \"snr\":%d, \"msg\":%d, \"success\":%4.2f, \"timestamp\":%lu000}",\
   b56bc:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
   b56c0:	9312      	str	r3, [sp, #72]	; 0x48
		current.get_internalTempC(), current.get_resetCount(), current.get_alertCodeNode(), current.get_nodeNumber(), current.get_RSSI(), current.get_SNR(), current.get_messageCount(), percentSuccess, Time.now());
   b56c2:	f000 fec1 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b56c6:	f001 f820 	bl	b670a <_ZNK17currentStatusData17get_internalTempCEv>
   b56ca:	9016      	str	r0, [sp, #88]	; 0x58
   b56cc:	f000 febc 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b56d0:	f001 f825 	bl	b671e <_ZNK17currentStatusData14get_resetCountEv>
   b56d4:	9017      	str	r0, [sp, #92]	; 0x5c
   b56d6:	f000 feb7 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b56da:	f001 f82f 	bl	b673c <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b56de:	9018      	str	r0, [sp, #96]	; 0x60
   b56e0:	f000 feb2 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b56e4:	f001 f807 	bl	b66f6 <_ZNK17currentStatusData14get_nodeNumberEv>
   b56e8:	4605      	mov	r5, r0
   b56ea:	f000 fead 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b56ee:	f001 faff 	bl	b6cf0 <_ZNK17currentStatusData8get_RSSIEv>
   b56f2:	4606      	mov	r6, r0
   b56f4:	f000 fea8 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b56f8:	f001 faff 	bl	b6cfa <_ZNK17currentStatusData7get_SNREv>
   b56fc:	4607      	mov	r7, r0
   b56fe:	f000 fea3 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b5702:	f001 f811 	bl	b6728 <_ZNK17currentStatusData16get_messageCountEv>
   b5706:	9019      	str	r0, [sp, #100]	; 0x64
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"alerts\": %d, \"node\": %d, \"rssi\":%d,  \"snr\":%d, \"msg\":%d, \"success\":%4.2f, \"timestamp\":%lu000}",\
   b5708:	f00a fce3 	bl	c00d2 <_ZN9TimeClass3nowEv>
   b570c:	9010      	str	r0, [sp, #64]	; 0x40
		float percentSuccess = ((current.get_successCount() * 1.0)/ current.get_messageCount())*100.0;
   b570e:	4640      	mov	r0, r8
   b5710:	f00b f958 	bl	c09c4 <__aeabi_i2d>
   b5714:	4680      	mov	r8, r0
   b5716:	4650      	mov	r0, sl
   b5718:	4689      	mov	r9, r1
   b571a:	f00b f953 	bl	c09c4 <__aeabi_i2d>
   b571e:	4602      	mov	r2, r0
   b5720:	460b      	mov	r3, r1
   b5722:	4640      	mov	r0, r8
   b5724:	4649      	mov	r1, r9
   b5726:	f00b fae1 	bl	c0cec <__aeabi_ddiv>
   b572a:	4b4d      	ldr	r3, [pc, #308]	; (b5860 <_Z14publishWebhookh+0x25c>)
   b572c:	2200      	movs	r2, #0
   b572e:	f00b f9b3 	bl	c0a98 <__aeabi_dmul>
   b5732:	f00b fca9 	bl	c1088 <__aeabi_d2f>
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d,\"alerts\": %d, \"node\": %d, \"rssi\":%d,  \"snr\":%d, \"msg\":%d, \"success\":%4.2f, \"timestamp\":%lu000}",\
   b5736:	f00b f957 	bl	c09e8 <__aeabi_f2d>
   b573a:	9b19      	ldr	r3, [sp, #100]	; 0x64
   b573c:	4a49      	ldr	r2, [pc, #292]	; (b5864 <_Z14publishWebhookh+0x260>)
   b573e:	e9cd 730c 	strd	r7, r3, [sp, #48]	; 0x30
   b5742:	9b18      	ldr	r3, [sp, #96]	; 0x60
   b5744:	9309      	str	r3, [sp, #36]	; 0x24
   b5746:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b5748:	9308      	str	r3, [sp, #32]
   b574a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b574c:	9307      	str	r3, [sp, #28]
   b574e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b5750:	9306      	str	r3, [sp, #24]
   b5752:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b5754:	9302      	str	r3, [sp, #8]
   b5756:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b5758:	9301      	str	r3, [sp, #4]
   b575a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b575c:	9300      	str	r3, [sp, #0]
   b575e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   b5762:	465b      	mov	r3, fp
   b5764:	f44f 7180 	mov.w	r1, #256	; 0x100
   b5768:	ed8d 8b04 	vstr	d8, [sp, #16]
   b576c:	a826      	add	r0, sp, #152	; 0x98
   b576e:	e9cd 560a 	strd	r5, r6, [sp, #40]	; 0x28
   b5772:	f007 fdbb 	bl	bd2ec <snprintf>
		PublishQueuePosix::instance().publish("Ubidots-LoRA-Node-v1", data, PRIVATE | WITH_ACK);
   b5776:	f004 fdb3 	bl	ba2e0 <_ZN17PublishQueuePosix8instanceEv>
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   b577a:	4b3b      	ldr	r3, [pc, #236]	; (b5868 <_Z14publishWebhookh+0x264>)
   b577c:	4a3b      	ldr	r2, [pc, #236]	; (b586c <_Z14publishWebhookh+0x268>)
   b577e:	781b      	ldrb	r3, [r3, #0]
   b5780:	7812      	ldrb	r2, [r2, #0]
	 *
	 * This function almost always returns true. If you queue more events than fit in the buffer the
	 * oldest (sometimes second oldest) is discarded.
	 */
	inline bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
		return publishCommon(eventName, data, 60, flags1, flags2);
   b5782:	493b      	ldr	r1, [pc, #236]	; (b5870 <_Z14publishWebhookh+0x26c>)
   b5784:	4313      	orrs	r3, r2
   b5786:	6802      	ldr	r2, [r0, #0]
   b5788:	f88d 3000 	strb.w	r3, [sp]
   b578c:	f88d 4004 	strb.w	r4, [sp, #4]
   b5790:	6814      	ldr	r4, [r2, #0]
   b5792:	233c      	movs	r3, #60	; 0x3c
   b5794:	aa26      	add	r2, sp, #152	; 0x98
   b5796:	47a0      	blx	r4
   b5798:	e761      	b.n	b565e <_Z14publishWebhookh+0x5a>
		takeMeasurements();												// Loads the current values for the Gateway
   b579a:	f002 f8b3 	bl	b7904 <_Z16takeMeasurementsv>
        return spark_deviceID();
   b579e:	a81a      	add	r0, sp, #104	; 0x68
   b57a0:	f007 fce4 	bl	bd16c <spark_deviceID>
   b57a4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   b57a6:	9312      	str	r3, [sp, #72]	; 0x48
		Particle.deviceID().c_str(), 0, 0, sysStatus.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b57a8:	f000 fe06 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b57ac:	f000 ff9e 	bl	b66ec <_ZNK13sysStatusData14get_sensorTypeEv>
   b57b0:	4606      	mov	r6, r0
   b57b2:	f000 fe49 	bl	b6448 <_ZN17currentStatusData8instanceEv>
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d, \"msg\":%d, \"timestamp\":%lu000}",\
   b57b6:	f000 fe6f 	bl	b6498 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b57ba:	eeb0 8a40 	vmov.f32	s16, s0
   b57be:	eef0 8a60 	vmov.f32	s17, s1
		Particle.deviceID().c_str(), 0, 0, sysStatus.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b57c2:	f000 fe41 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b57c6:	f000 ffa5 	bl	b6714 <_ZNK17currentStatusData16get_batteryStateEv>
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d, \"msg\":%d, \"timestamp\":%lu000}",\
   b57ca:	f855 9020 	ldr.w	r9, [r5, r0, lsl #2]
		current.get_internalTempC(), sysStatus.get_resetCount(), sysStatus.get_messageCount(), Time.now());
   b57ce:	f000 fe3b 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b57d2:	f000 ff9a 	bl	b670a <_ZNK17currentStatusData17get_internalTempCEv>
   b57d6:	4605      	mov	r5, r0
   b57d8:	f000 fdee 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b57dc:	f000 ff72 	bl	b66c4 <_ZNK13sysStatusData14get_resetCountEv>
   b57e0:	4607      	mov	r7, r0
   b57e2:	f000 fde9 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b57e6:	f000 ff72 	bl	b66ce <_ZNK13sysStatusData16get_messageCountEv>
   b57ea:	4680      	mov	r8, r0
		snprintf(data, sizeof(data), "{\"deviceid\":\"%s\", \"hourly\":%u, \"daily\":%u, \"sensortype\":%d, \"battery\":%4.2f,\"key1\":\"%s\",\"temp\":%d, \"resets\":%d, \"msg\":%d, \"timestamp\":%lu000}",\
   b57ec:	f00a fc71 	bl	c00d2 <_ZN9TimeClass3nowEv>
   b57f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b57f2:	4a20      	ldr	r2, [pc, #128]	; (b5874 <_Z14publishWebhookh+0x270>)
   b57f4:	9400      	str	r4, [sp, #0]
   b57f6:	f44f 7180 	mov.w	r1, #256	; 0x100
   b57fa:	e9cd 8009 	strd	r8, r0, [sp, #36]	; 0x24
   b57fe:	e9cd 4601 	strd	r4, r6, [sp, #4]
   b5802:	e9cd 5707 	strd	r5, r7, [sp, #28]
   b5806:	ed8d 8b04 	vstr	d8, [sp, #16]
   b580a:	f8cd 9018 	str.w	r9, [sp, #24]
   b580e:	a826      	add	r0, sp, #152	; 0x98
   b5810:	f007 fd6c 	bl	bd2ec <snprintf>
		Particle.deviceID().c_str(), 0, 0, sysStatus.get_sensorType(), current.get_stateOfCharge(), batteryContext[current.get_batteryState()],\
   b5814:	a81a      	add	r0, sp, #104	; 0x68
   b5816:	f00a f89b 	bl	bf950 <_ZN6StringD1Ev>
		PublishQueuePosix::instance().publish("Ubidots-LoRA-Gateway-v1", data, PRIVATE | WITH_ACK);
   b581a:	f004 fd61 	bl	ba2e0 <_ZN17PublishQueuePosix8instanceEv>
   b581e:	4b12      	ldr	r3, [pc, #72]	; (b5868 <_Z14publishWebhookh+0x264>)
   b5820:	4a12      	ldr	r2, [pc, #72]	; (b586c <_Z14publishWebhookh+0x268>)
   b5822:	781b      	ldrb	r3, [r3, #0]
   b5824:	7812      	ldrb	r2, [r2, #0]
   b5826:	4914      	ldr	r1, [pc, #80]	; (b5878 <_Z14publishWebhookh+0x274>)
   b5828:	4313      	orrs	r3, r2
   b582a:	6802      	ldr	r2, [r0, #0]
   b582c:	f88d 3000 	strb.w	r3, [sp]
   b5830:	f88d 4004 	strb.w	r4, [sp, #4]
   b5834:	6814      	ldr	r4, [r2, #0]
   b5836:	233c      	movs	r3, #60	; 0x3c
   b5838:	aa26      	add	r2, sp, #152	; 0x98
   b583a:	47a0      	blx	r4
   b583c:	e712      	b.n	b5664 <_Z14publishWebhookh+0x60>
   b583e:	bf00      	nop
   b5840:	000c3d6e 	.word	0x000c3d6e
   b5844:	000c3d76 	.word	0x000c3d76
   b5848:	000c3d7a 	.word	0x000c3d7a
   b584c:	000c3d83 	.word	0x000c3d83
   b5850:	000c3d8b 	.word	0x000c3d8b
   b5854:	000c3d97 	.word	0x000c3d97
   b5858:	000c3d9d 	.word	0x000c3d9d
   b585c:	000c375e 	.word	0x000c375e
   b5860:	40590000 	.word	0x40590000
   b5864:	000c3da9 	.word	0x000c3da9
   b5868:	2003e31d 	.word	0x2003e31d
   b586c:	2003e31c 	.word	0x2003e31c
   b5870:	000c3e77 	.word	0x000c3e77
   b5874:	000c3e8c 	.word	0x000c3e8c
   b5878:	000c3f1a 	.word	0x000c3f1a

000b587c <_ZNSt8functionIFvyiEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
   b587c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b587e:	2300      	movs	r3, #0
   b5880:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b5882:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b5884:	4604      	mov	r4, r0
   b5886:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b5888:	b12b      	cbz	r3, b5896 <_ZNSt8functionIFvyiEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b588a:	2202      	movs	r2, #2
   b588c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b588e:	68eb      	ldr	r3, [r5, #12]
   b5890:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b5892:	68ab      	ldr	r3, [r5, #8]
   b5894:	60a3      	str	r3, [r4, #8]
    }
   b5896:	4620      	mov	r0, r4
   b5898:	bd38      	pop	{r3, r4, r5, pc}
	...

000b589c <_ZN11SystemClass2onEySt8functionIFvyiEE>:
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b589c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b58a0:	b095      	sub	sp, #84	; 0x54
   b58a2:	4605      	mov	r5, r0
        };
   b58a4:	991c      	ldr	r1, [sp, #112]	; 0x70
   b58a6:	a804      	add	r0, sp, #16
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
   b58a8:	4690      	mov	r8, r2
   b58aa:	461f      	mov	r7, r3
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b58ac:	ae0c      	add	r6, sp, #48	; 0x30
        };
   b58ae:	f7ff ffe5 	bl	b587c <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b58b2:	a904      	add	r1, sp, #16
   b58b4:	a808      	add	r0, sp, #32
   b58b6:	f7ff ffe1 	bl	b587c <_ZNSt8functionIFvyiEEC1ERKS1_>
   b58ba:	a908      	add	r1, sp, #32
   b58bc:	4630      	mov	r0, r6
   b58be:	f7ff ffdd 	bl	b587c <_ZNSt8functionIFvyiEEC1ERKS1_>
    _Function_base() : _M_manager(nullptr) { }
   b58c2:	f04f 0900 	mov.w	r9, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b58c6:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
   b58c8:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b58cc:	f7fe fbe3 	bl	b4096 <_Znwj>
   b58d0:	4604      	mov	r4, r0
   b58d2:	b1a0      	cbz	r0, b58fe <_ZN11SystemClass2onEySt8functionIFvyiEE+0x62>
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b58d4:	e896 0003 	ldmia.w	r6, {r0, r1}
   b58d8:	ab01      	add	r3, sp, #4
   b58da:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b58de:	e894 0003 	ldmia.w	r4, {r0, r1}
   b58e2:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b58e6:	e893 0003 	ldmia.w	r3, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b58ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
      __a = _GLIBCXX_MOVE(__b);
   b58ec:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b58ee:	60a3      	str	r3, [r4, #8]
   b58f0:	e884 0003 	stmia.w	r4, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b58f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
      __a = _GLIBCXX_MOVE(__b);
   b58f6:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
   b58fa:	920f      	str	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   b58fc:	60e3      	str	r3, [r4, #12]
	    _M_invoker = &_My_handler::_M_invoke;
   b58fe:	4b24      	ldr	r3, [pc, #144]	; (b5990 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf4>)
   b5900:	9313      	str	r3, [sp, #76]	; 0x4c
	    _M_manager = &_My_handler::_M_manager;
   b5902:	4b24      	ldr	r3, [pc, #144]	; (b5994 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf8>)
   b5904:	9312      	str	r3, [sp, #72]	; 0x48
              callable_(callable) {
   b5906:	2200      	movs	r2, #0
   b5908:	2300      	movs	r3, #0
   b590a:	f04f 0900 	mov.w	r9, #0
   b590e:	e9c5 2300 	strd	r2, r3, [r5]
        context.version = SYSTEM_EVENT_CONTEXT_VERSION;
   b5912:	4b21      	ldr	r3, [pc, #132]	; (b5998 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xfc>)
              callable_(callable) {
   b5914:	f8c5 9008 	str.w	r9, [r5, #8]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b5918:	2010      	movs	r0, #16
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b591a:	9410      	str	r4, [sp, #64]	; 0x40
        SystemEventContext context = {};
   b591c:	e9cd 3901 	strd	r3, r9, [sp, #4]
   b5920:	f8cd 900c 	str.w	r9, [sp, #12]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   b5924:	f7fe fbb7 	bl	b4096 <_Znwj>
   b5928:	4604      	mov	r4, r0
   b592a:	b1d8      	cbz	r0, b5964 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
    bool _M_empty() const { return !_M_manager; }
   b592c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    _Function_base() : _M_manager(nullptr) { }
   b592e:	f8c0 9008 	str.w	r9, [r0, #8]
      if (static_cast<bool>(__x))
   b5932:	b133      	cbz	r3, b5942 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xa6>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b5934:	2202      	movs	r2, #2
   b5936:	a910      	add	r1, sp, #64	; 0x40
   b5938:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b593a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b593c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b593e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b5940:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
   b5942:	4b16      	ldr	r3, [pc, #88]	; (b599c <_ZN11SystemClass2onEySt8functionIFvyiEE+0x100>)
   b5944:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b5946:	4a16      	ldr	r2, [pc, #88]	; (b59a0 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x104>)
        context.callable = wrapper;
   b5948:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   b594a:	ab01      	add	r3, sp, #4
   b594c:	4640      	mov	r0, r8
   b594e:	4639      	mov	r1, r7
   b5950:	f007 fb8a 	bl	bd068 <system_subscribe_event>
        if (r) {
   b5954:	b1b0      	cbz	r0, b5984 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xe8>
    class function<_Res(_ArgTypes...)>
   b5956:	4620      	mov	r0, r4
   b5958:	f7ff fdef 	bl	b553a <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
   b595c:	2110      	movs	r1, #16
   b595e:	4620      	mov	r0, r4
   b5960:	f7fe fb9d 	bl	b409e <_ZdlPvj>
   b5964:	a810      	add	r0, sp, #64	; 0x40
   b5966:	f7ff fde8 	bl	b553a <_ZNSt14_Function_baseD1Ev>
   b596a:	4630      	mov	r0, r6
   b596c:	f7ff fde5 	bl	b553a <_ZNSt14_Function_baseD1Ev>
   b5970:	a808      	add	r0, sp, #32
   b5972:	f7ff fde2 	bl	b553a <_ZNSt14_Function_baseD1Ev>
   b5976:	a804      	add	r0, sp, #16
   b5978:	f7ff fddf 	bl	b553a <_ZNSt14_Function_baseD1Ev>
    }
   b597c:	4628      	mov	r0, r5
   b597e:	b015      	add	sp, #84	; 0x54
   b5980:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            sub = SystemEventSubscription(events, context.callable);
   b5984:	9b02      	ldr	r3, [sp, #8]
   b5986:	60ab      	str	r3, [r5, #8]
   b5988:	e9c5 8700 	strd	r8, r7, [r5]
   b598c:	e7ea      	b.n	b5964 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
   b598e:	bf00      	nop
   b5990:	000b54dd 	.word	0x000b54dd
   b5994:	000b59a5 	.word	0x000b59a5
   b5998:	000c0002 	.word	0x000c0002
   b599c:	000b554d 	.word	0x000b554d
   b59a0:	000b54b5 	.word	0x000b54b5

000b59a4 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
   b59a4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b59a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b59a8:	4604      	mov	r4, r0
	switch (__op)
   b59aa:	d104      	bne.n	b59b6 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
	    return __source._M_access<_Functor*>();
   b59ac:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b59ae:	6003      	str	r3, [r0, #0]
      }
   b59b0:	2000      	movs	r0, #0
   b59b2:	b003      	add	sp, #12
   b59b4:	bd30      	pop	{r4, r5, pc}
	  switch (__op)
   b59b6:	2a02      	cmp	r2, #2
   b59b8:	d00c      	beq.n	b59d4 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x30>
   b59ba:	2a03      	cmp	r2, #3
   b59bc:	d1f8      	bne.n	b59b0 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b59be:	6804      	ldr	r4, [r0, #0]
   b59c0:	2c00      	cmp	r4, #0
   b59c2:	d0f5      	beq.n	b59b0 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b59c4:	4620      	mov	r0, r4
   b59c6:	f7ff fdb8 	bl	b553a <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b59ca:	2110      	movs	r1, #16
   b59cc:	4620      	mov	r0, r4
   b59ce:	f7fe fb66 	bl	b409e <_ZdlPvj>
   b59d2:	e7ed      	b.n	b59b0 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  __dest._M_access<_Functor*>() =
   b59d4:	6809      	ldr	r1, [r1, #0]
   b59d6:	9101      	str	r1, [sp, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
   b59d8:	2010      	movs	r0, #16
   b59da:	f7fe fb5c 	bl	b4096 <_Znwj>
   b59de:	4605      	mov	r5, r0
   b59e0:	b110      	cbz	r0, b59e8 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x44>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   b59e2:	9901      	ldr	r1, [sp, #4]
   b59e4:	f7ff ff4a 	bl	b587c <_ZNSt8functionIFvyiEEC1ERKS1_>
	  __dest._M_access<_Functor*>() =
   b59e8:	6025      	str	r5, [r4, #0]
	}
   b59ea:	e7e1      	b.n	b59b0 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>

000b59ec <_GLOBAL__sub_I___appProductVersion>:
        val_(val) {
   b59ec:	4b16      	ldr	r3, [pc, #88]	; (b5a48 <_GLOBAL__sub_I___appProductVersion+0x5c>)
}
   b59ee:	b510      	push	{r4, lr}
   b59f0:	2401      	movs	r4, #1
   b59f2:	701c      	strb	r4, [r3, #0]
   b59f4:	4b15      	ldr	r3, [pc, #84]	; (b5a4c <_GLOBAL__sub_I___appProductVersion+0x60>)
   b59f6:	2208      	movs	r2, #8
   b59f8:	701a      	strb	r2, [r3, #0]
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   b59fa:	f00a fd13 	bl	c0424 <spark_protocol_instance>
   b59fe:	2300      	movs	r3, #0
   b5a00:	461a      	mov	r2, r3
   b5a02:	2107      	movs	r1, #7
   b5a04:	f00a fd1e 	bl	c0444 <spark_protocol_set_product_firmware_version>
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   b5a08:	f00a fd0c 	bl	c0424 <spark_protocol_instance>
   b5a0c:	2300      	movs	r3, #0
   b5a0e:	461a      	mov	r2, r3
   b5a10:	210d      	movs	r1, #13
   b5a12:	f00a fd0f 	bl	c0434 <spark_protocol_set_product_id>
ENABLE_ENUM_CLASS_BITWISE(SystemSleepNetworkFlag);

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   b5a16:	4b0e      	ldr	r3, [pc, #56]	; (b5a50 <_GLOBAL__sub_I___appProductVersion+0x64>)
   b5a18:	1d1a      	adds	r2, r3, #4
   b5a1a:	601a      	str	r2, [r3, #0]
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
        config_.size = sizeof(hal_sleep_config_t);
   b5a1c:	4a0d      	ldr	r2, [pc, #52]	; (b5a54 <_GLOBAL__sub_I___appProductVersion+0x68>)
   b5a1e:	605a      	str	r2, [r3, #4]
              valid_(true) {
   b5a20:	2200      	movs	r2, #0
   b5a22:	e9c3 2202 	strd	r2, r2, [r3, #8]
   b5a26:	611a      	str	r2, [r3, #16]
   b5a28:	751c      	strb	r4, [r3, #20]
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   b5a2a:	f00a fddb 	bl	c05e4 <_Z19__fetch_global_Wirev>
   b5a2e:	2269      	movs	r2, #105	; 0x69
   b5a30:	4601      	mov	r1, r0
   b5a32:	4809      	ldr	r0, [pc, #36]	; (b5a58 <_GLOBAL__sub_I___appProductVersion+0x6c>)
   b5a34:	f001 ffc6 	bl	b79c4 <_ZN6AB1805C1ER7TwoWireh>
};

/**
 * @brief Perform time conversions. This is the main class you will need.
 */
class LocalTimeConvert {
   b5a38:	4808      	ldr	r0, [pc, #32]	; (b5a5c <_GLOBAL__sub_I___appProductVersion+0x70>)
   b5a3a:	2306      	movs	r3, #6
   b5a3c:	f840 3b04 	str.w	r3, [r0], #4
}
   b5a40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5a44:	f003 bf04 	b.w	b9850 <_ZN22LocalTimePosixTimezoneC1Ev>
   b5a48:	2003e31c 	.word	0x2003e31c
   b5a4c:	2003e31d 	.word	0x2003e31d
   b5a50:	2003e354 	.word	0x2003e354
   b5a54:	00030010 	.word	0x00030010
   b5a58:	2003e334 	.word	0x2003e334
   b5a5c:	2003e370 	.word	0x2003e370

000b5a60 <setup>:
{
   b5a60:	b5f0      	push	{r4, r5, r6, r7, lr}
        return hal_timer_millis(nullptr);
   b5a62:	2000      	movs	r0, #0
   b5a64:	b09d      	sub	sp, #116	; 0x74
   b5a66:	f007 f88d 	bl	bcb84 <hal_timer_millis>
        while (_while() && !_condition()) {
   b5a6a:	f242 7510 	movw	r5, #10000	; 0x2710
        return hal_timer_millis(nullptr);
   b5a6e:	4604      	mov	r4, r0
   b5a70:	2000      	movs	r0, #0
   b5a72:	f007 f887 	bl	bcb84 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b5a76:	1b00      	subs	r0, r0, r4
   b5a78:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b5a7c:	42a8      	cmp	r0, r5
   b5a7e:	f171 0300 	sbcs.w	r3, r1, #0
   b5a82:	d207      	bcs.n	b5a94 <setup+0x34>
	waitFor(Serial.isConnected, 10000);				// Wait for serial connection
   b5a84:	f00a fc0c 	bl	c02a0 <_Z16_fetch_usbserialv>
   b5a88:	f00a fbff 	bl	c028a <_ZN9USBSerial11isConnectedEv>
   b5a8c:	b910      	cbnz	r0, b5a94 <setup+0x34>
            spark_process();
   b5a8e:	f007 fb55 	bl	bd13c <spark_process>
        while (_while() && !_condition()) {
   b5a92:	e7ed      	b.n	b5a70 <setup+0x10>
   b5a94:	f00a fc04 	bl	c02a0 <_Z16_fetch_usbserialv>
   b5a98:	f00a fbf7 	bl	c028a <_ZN9USBSerial11isConnectedEv>
    initializePinModes();                           // Sets the pinModes
   b5a9c:	f001 fde2 	bl	b7664 <_Z18initializePinModesv>
    initializePowerCfg();                           // Sets the power configuration for solar
   b5aa0:	f001 fe14 	bl	b76cc <_Z18initializePowerCfgv>
	sysStatus.setup();
   b5aa4:	f000 fc88 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b5aa8:	6803      	ldr	r3, [r0, #0]
     * This is used during chip detection as FOUT goes high after the AB1805
     * is initialized. While FOUT is low, the I2C interface is not yet ready.
     * 
     * The FOUT/nIRQ pin is also used for one-time and periodic interrupts.
     */
    AB1805 &withFOUT(pin_t pin) { foutPin = pin; return *this; };
   b5aaa:	4e53      	ldr	r6, [pc, #332]	; (b5bf8 <setup+0x198>)
   b5aac:	681b      	ldr	r3, [r3, #0]
     * @brief Use the current time as the time to start with
     * 
     * This does not start the conversion; you must also call the convert() method after setting
     * all of the settings you want to use.
     */
    LocalTimeConvert &withCurrentTime() { this->time = Time.now(); return *this; };
   b5aae:	4f53      	ldr	r7, [pc, #332]	; (b5bfc <setup+0x19c>)
   b5ab0:	4798      	blx	r3
	current.setup();
   b5ab2:	f000 fcc9 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b5ab6:	6803      	ldr	r3, [r0, #0]
   b5ab8:	681b      	ldr	r3, [r3, #0]
   b5aba:	4798      	blx	r3
	nodeDatabase.setup();
   b5abc:	f000 fd4a 	bl	b6554 <_ZN10nodeIDData8instanceEv>
   b5ac0:	6803      	ldr	r3, [r0, #0]
   b5ac2:	681b      	ldr	r3, [r3, #0]
   b5ac4:	4798      	blx	r3
    Particle_Functions::instance().setup();         // Sets up all the Particle functions and variables defined in particle_fn.h
   b5ac6:	f001 f9e3 	bl	b6e90 <_ZN18Particle_Functions8instanceEv>
   b5aca:	f001 f9f3 	bl	b6eb4 <_ZN18Particle_Functions5setupEv>
   b5ace:	2308      	movs	r3, #8
    ab1805.withFOUT(D8).setup();                	// Initialize AB1805 RTC   
   b5ad0:	2101      	movs	r1, #1
   b5ad2:	4630      	mov	r0, r6
   b5ad4:	8173      	strh	r3, [r6, #10]
   b5ad6:	f002 fc71 	bl	b83bc <_ZN6AB18055setupEb>
    ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);	// Enable watchdog
   b5ada:	217c      	movs	r1, #124	; 0x7c
   b5adc:	4630      	mov	r0, r6
   b5ade:	f002 f86f 	bl	b7bc0 <_ZN6AB18056setWDTEi>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5ae2:	4b47      	ldr	r3, [pc, #284]	; (b5c00 <setup+0x1a0>)
   b5ae4:	9306      	str	r3, [sp, #24]
	    _M_invoker = &_My_handler::_M_invoke;
   b5ae6:	4b47      	ldr	r3, [pc, #284]	; (b5c04 <setup+0x1a4>)
   b5ae8:	9309      	str	r3, [sp, #36]	; 0x24
	System.on(out_of_memory, outOfMemoryHandler);   // Enabling an out of memory handler is a good safety tip. If we run out of memory a System.reset() is done.
   b5aea:	ad06      	add	r5, sp, #24
	    _M_manager = &_My_handler::_M_manager;
   b5aec:	4b46      	ldr	r3, [pc, #280]	; (b5c08 <setup+0x1a8>)
   b5aee:	9308      	str	r3, [sp, #32]
   b5af0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   b5af4:	2300      	movs	r3, #0
   b5af6:	a802      	add	r0, sp, #8
   b5af8:	9500      	str	r5, [sp, #0]
   b5afa:	f7ff fecf 	bl	b589c <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b5afe:	4628      	mov	r0, r5
   b5b00:	f7ff fd1b 	bl	b553a <_ZNSt14_Function_baseD1Ev>
	PublishQueuePosix::instance().setup();          // Initialize PublishQueuePosixRK
   b5b04:	f004 fbec 	bl	ba2e0 <_ZN17PublishQueuePosix8instanceEv>
   b5b08:	f004 fdf0 	bl	ba6ec <_ZN17PublishQueuePosix5setupEv>
	LoRA_Functions::instance().setup(true);			// Start the LoRA radio (true for Gateway and false for Node)
   b5b0c:	f7fe fb30 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b5b10:	2101      	movs	r1, #1
   b5b12:	f7fe fb8b 	bl	b422c <_ZN14LoRA_Functions5setupEb>
	LocalTime::instance().withConfig(LocalTimePosixTimezone("EST5EDT,M3.2.0/2:00:00,M11.1.0/2:00:00"));			// East coast of the US
   b5b16:	f004 f87b 	bl	b9c10 <_ZN9LocalTime8instanceEv>
   b5b1a:	493c      	ldr	r1, [pc, #240]	; (b5c0c <setup+0x1ac>)
   b5b1c:	4604      	mov	r4, r0
   b5b1e:	4628      	mov	r0, r5
   b5b20:	f003 ff48 	bl	b99b4 <_ZN22LocalTimePosixTimezoneC1EPKc>
class LocalTimePosixTimezone {
   b5b24:	a907      	add	r1, sp, #28
   b5b26:	f104 0008 	add.w	r0, r4, #8
   b5b2a:	f009 ff98 	bl	bfa5e <_ZN6StringaSERKS_>
class LocalTimeHMS {
   b5b2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b5b30:	61e3      	str	r3, [r4, #28]
class LocalTimePosixTimezone {
   b5b32:	a90d      	add	r1, sp, #52	; 0x34
   b5b34:	f104 0020 	add.w	r0, r4, #32
   b5b38:	f009 ff91 	bl	bfa5e <_ZN6StringaSERKS_>
class LocalTimeHMS {
   b5b3c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   b5b3e:	6363      	str	r3, [r4, #52]	; 0x34
class LocalTimeChange {
   b5b40:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b5b42:	63e3      	str	r3, [r4, #60]	; 0x3c
class LocalTimeHMS {
   b5b44:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b5b46:	6463      	str	r3, [r4, #68]	; 0x44
class LocalTimeChange {
   b5b48:	9b18      	ldr	r3, [sp, #96]	; 0x60
   b5b4a:	64e3      	str	r3, [r4, #76]	; 0x4c
class LocalTimeHMS {
   b5b4c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   b5b4e:	6563      	str	r3, [r4, #84]	; 0x54
class LocalTimePosixTimezone {
   b5b50:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
   b5b54:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
   b5b58:	4628      	mov	r0, r5
   b5b5a:	f003 fce7 	bl	b952c <_ZN22LocalTimePosixTimezoneD1Ev>
    LocalTimeConvert &withCurrentTime() { this->time = Time.now(); return *this; };
   b5b5e:	f00a fab8 	bl	c00d2 <_ZN9TimeClass3nowEv>
   b5b62:	17c3      	asrs	r3, r0, #31
   b5b64:	e9c7 0318 	strd	r0, r3, [r7, #96]	; 0x60
	conv.withCurrentTime().convert();  				        // Convert to local time for use later
   b5b68:	4638      	mov	r0, r7
   b5b6a:	f004 f8c9 	bl	b9d00 <_ZN16LocalTimeConvert7convertEv>
	if (Time.isValid()) {
   b5b6e:	f00a fa93 	bl	c0098 <_ZN9TimeClass7isValidEv>
   b5b72:	4c27      	ldr	r4, [pc, #156]	; (b5c10 <setup+0x1b0>)
   b5b74:	2800      	cmp	r0, #0
   b5b76:	d037      	beq.n	b5be8 <setup+0x188>
		Log.info("LocalTime initialized, time is %s and RTC %s set", conv.format("%I:%M:%S%p").c_str(), (ab1805.isRTCSet()) ? "is" : "is not");
   b5b78:	4639      	mov	r1, r7
   b5b7a:	4a26      	ldr	r2, [pc, #152]	; (b5c14 <setup+0x1b4>)
   b5b7c:	4628      	mov	r0, r5
   b5b7e:	f003 ffa9 	bl	b9ad4 <_ZN16LocalTimeConvert6formatEPKc>
    /**
     * @brief Returns true if the RTC has been set
     * 
     * On cold power-up before cloud connecting, this will be false. Note that
     */
    bool isRTCSet() { return isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC); };
   b5b82:	2301      	movs	r3, #1
   b5b84:	461a      	mov	r2, r3
   b5b86:	2110      	movs	r1, #16
   b5b88:	4630      	mov	r0, r6
   b5b8a:	9f06      	ldr	r7, [sp, #24]
   b5b8c:	f002 f899 	bl	b7cc2 <_ZN6AB180510isBitClearEhhb>
   b5b90:	4921      	ldr	r1, [pc, #132]	; (b5c18 <setup+0x1b8>)
   b5b92:	4b22      	ldr	r3, [pc, #136]	; (b5c1c <setup+0x1bc>)
   b5b94:	463a      	mov	r2, r7
   b5b96:	2800      	cmp	r0, #0
   b5b98:	bf18      	it	ne
   b5b9a:	460b      	movne	r3, r1
   b5b9c:	4820      	ldr	r0, [pc, #128]	; (b5c20 <setup+0x1c0>)
   b5b9e:	4921      	ldr	r1, [pc, #132]	; (b5c24 <setup+0x1c4>)
   b5ba0:	f7fe facd 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b5ba4:	4628      	mov	r0, r5
   b5ba6:	f009 fed3 	bl	bf950 <_ZN6StringD1Ev>
	if (!digitalRead(BUTTON_PIN)) {
   b5baa:	4b1f      	ldr	r3, [pc, #124]	; (b5c28 <setup+0x1c8>)
   b5bac:	881d      	ldrh	r5, [r3, #0]
   b5bae:	4628      	mov	r0, r5
   b5bb0:	f00a fcb8 	bl	c0524 <digitalRead>
   b5bb4:	b950      	cbnz	r0, b5bcc <setup+0x16c>
		Log.info("User button pressed, connected mode");
   b5bb6:	491d      	ldr	r1, [pc, #116]	; (b5c2c <setup+0x1cc>)
   b5bb8:	4819      	ldr	r0, [pc, #100]	; (b5c20 <setup+0x1c0>)
   b5bba:	f7fe fac0 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		sysStatus.set_connectivityMode(3);					  // connectivityMode Code 3 keeps both LoRA and Cellular connections on
   b5bbe:	f000 fbfb 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b5bc2:	2103      	movs	r1, #3
   b5bc4:	f000 fde8 	bl	b6798 <_ZN13sysStatusData20set_connectivityModeEh>
		state = CONNECTING_STATE;
   b5bc8:	2305      	movs	r3, #5
   b5bca:	7023      	strb	r3, [r4, #0]
	attachInterrupt(BUTTON_PIN,userSwitchISR,CHANGE); // We may need to monitor the user switch to change behaviours / modes
   b5bcc:	2200      	movs	r2, #0
   b5bce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5bd2:	4917      	ldr	r1, [pc, #92]	; (b5c30 <setup+0x1d0>)
   b5bd4:	9200      	str	r2, [sp, #0]
   b5bd6:	4628      	mov	r0, r5
   b5bd8:	f008 f960 	bl	bde9c <_Z15attachInterrupttPFvvE13InterruptModeah>
	if (state == INITIALIZATION_STATE) state = IDLE_STATE;  // This is not a bad way to start - could also go to the LoRA_STATE
   b5bdc:	7823      	ldrb	r3, [r4, #0]
   b5bde:	b90b      	cbnz	r3, b5be4 <setup+0x184>
   b5be0:	2302      	movs	r3, #2
   b5be2:	7023      	strb	r3, [r4, #0]
}
   b5be4:	b01d      	add	sp, #116	; 0x74
   b5be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Log.info("LocalTime not initialized so will need to Connect to Particle");
   b5be8:	4912      	ldr	r1, [pc, #72]	; (b5c34 <setup+0x1d4>)
   b5bea:	480d      	ldr	r0, [pc, #52]	; (b5c20 <setup+0x1c0>)
   b5bec:	f7fe faa7 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		state = CONNECTING_STATE;
   b5bf0:	2305      	movs	r3, #5
   b5bf2:	7023      	strb	r3, [r4, #0]
   b5bf4:	e7d9      	b.n	b5baa <setup+0x14a>
   b5bf6:	bf00      	nop
   b5bf8:	2003e334 	.word	0x2003e334
   b5bfc:	2003e370 	.word	0x2003e370
   b5c00:	000b549d 	.word	0x000b549d
   b5c04:	000b5517 	.word	0x000b5517
   b5c08:	000b5503 	.word	0x000b5503
   b5c0c:	000c3f3c 	.word	0x000c3f3c
   b5c10:	2003e462 	.word	0x2003e462
   b5c14:	000c3f63 	.word	0x000c3f63
   b5c18:	000c3f32 	.word	0x000c3f32
   b5c1c:	000c3f35 	.word	0x000c3f35
   b5c20:	2003e650 	.word	0x2003e650
   b5c24:	000c3f6e 	.word	0x000c3f6e
   b5c28:	000c47fa 	.word	0x000c47fa
   b5c2c:	000c3fdd 	.word	0x000c3fdd
   b5c30:	000b54a9 	.word	0x000b54a9
   b5c34:	000c3f9f 	.word	0x000c3f9f

000b5c38 <loop>:
void loop() {
   b5c38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	switch (state) {
   b5c3c:	4d79      	ldr	r5, [pc, #484]	; (b5e24 <loop+0x1ec>)
   b5c3e:	782b      	ldrb	r3, [r5, #0]
   b5c40:	3b01      	subs	r3, #1
void loop() {
   b5c42:	b093      	sub	sp, #76	; 0x4c
   b5c44:	2b06      	cmp	r3, #6
   b5c46:	d81d      	bhi.n	b5c84 <loop+0x4c>
   b5c48:	e8df f013 	tbh	[pc, r3, lsl #1]
   b5c4c:	000702a8 	.word	0x000702a8
   b5c50:	010a0045 	.word	0x010a0045
   b5c54:	026501f6 	.word	0x026501f6
   b5c58:	01d8      	.short	0x01d8
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b5c5a:	4b73      	ldr	r3, [pc, #460]	; (b5e28 <loop+0x1f0>)
   b5c5c:	781b      	ldrb	r3, [r3, #0]
   b5c5e:	2b02      	cmp	r3, #2
   b5c60:	d001      	beq.n	b5c66 <loop+0x2e>
   b5c62:	f7ff fc7f 	bl	b5564 <_Z22publishStateTransitionv>
			if (nextEventTime || sysStatus.get_connectivityMode() >= 2) {
   b5c66:	4c71      	ldr	r4, [pc, #452]	; (b5e2c <loop+0x1f4>)
   b5c68:	7823      	ldrb	r3, [r4, #0]
   b5c6a:	b11b      	cbz	r3, b5c74 <loop+0x3c>
				nextEventTime = false;
   b5c6c:	2300      	movs	r3, #0
   b5c6e:	7023      	strb	r3, [r4, #0]
				if (sysStatus.get_connectivityMode() >= 2) state = LoRA_STATE;				// Go to the LoRA State
   b5c70:	2304      	movs	r3, #4
   b5c72:	e006      	b.n	b5c82 <loop+0x4a>
			if (nextEventTime || sysStatus.get_connectivityMode() >= 2) {
   b5c74:	f000 fba0 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b5c78:	f000 fd1f 	bl	b66ba <_ZNK13sysStatusData20get_connectivityModeEv>
   b5c7c:	2801      	cmp	r0, #1
   b5c7e:	d8f5      	bhi.n	b5c6c <loop+0x34>
			else state = SLEEPING_STATE;	// Go to sleep unless we are in the connected state										
   b5c80:	2303      	movs	r3, #3
   b5c82:	702b      	strb	r3, [r5, #0]
	ab1805.loop();                                  // Keeps the RTC synchronized with the Boron's clock
   b5c84:	486a      	ldr	r0, [pc, #424]	; (b5e30 <loop+0x1f8>)
   b5c86:	f002 fb47 	bl	b8318 <_ZN6AB18054loopEv>
	PublishQueuePosix::instance().loop();           // Check to see if we need to tend to the message queue
   b5c8a:	f004 fb29 	bl	ba2e0 <_ZN17PublishQueuePosix8instanceEv>
   b5c8e:	f004 fa19 	bl	ba0c4 <_ZN17PublishQueuePosix4loopEv>
	sysStatus.loop();
   b5c92:	f000 fb91 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b5c96:	f000 fbad 	bl	b63f4 <_ZN13sysStatusData4loopEv>
	current.loop();
   b5c9a:	f000 fbd5 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b5c9e:	f000 fbf1 	bl	b6484 <_ZN17currentStatusData4loopEv>
	nodeDatabase.loop();
   b5ca2:	f000 fc57 	bl	b6554 <_ZN10nodeIDData8instanceEv>
   b5ca6:	f000 fc75 	bl	b6594 <_ZN10nodeIDData4loopEv>
	LoRA_Functions::instance().loop();				// Check to see if Node connections are healthy
   b5caa:	f7fe fa61 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b5cae:	f7fe fa71 	bl	b4194 <_ZN14LoRA_Functions4loopEv>
	if (outOfMemory >= 0) {                         // In this function we are going to reset the system if there is an out of memory error
   b5cb2:	4b60      	ldr	r3, [pc, #384]	; (b5e34 <loop+0x1fc>)
   b5cb4:	681b      	ldr	r3, [r3, #0]
   b5cb6:	2b00      	cmp	r3, #0
   b5cb8:	f2c0 82a4 	blt.w	b6204 <loop+0x5cc>
		Log.info("Resetting due to low memory");
   b5cbc:	495e      	ldr	r1, [pc, #376]	; (b5e38 <loop+0x200>)
   b5cbe:	485f      	ldr	r0, [pc, #380]	; (b5e3c <loop+0x204>)
   b5cc0:	f7fe fa3d 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
		delay(2000);
   b5cc4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b5cc8:	f007 fb68 	bl	bd39c <delay>
}
   b5ccc:	b013      	add	sp, #76	; 0x4c
   b5cce:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		System.reset();
   b5cd2:	f00a b80a 	b.w	bfcea <_ZN11SystemClass5resetEv>
			if (state != oldState) publishStateTransition();                   // We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b5cd6:	4b54      	ldr	r3, [pc, #336]	; (b5e28 <loop+0x1f0>)
   b5cd8:	781b      	ldrb	r3, [r3, #0]
   b5cda:	2b03      	cmp	r3, #3
   b5cdc:	d001      	beq.n	b5ce2 <loop+0xaa>
   b5cde:	f7ff fc41 	bl	b5564 <_Z22publishStateTransitionv>
     * @brief Stops the watchdog timer. Useful before entering sleep mode.
     * 
     * This is done automatically right before reset (using the reset system event)
     * so the watchdog won't trigger during a firmware update. 
     */
    bool stopWDT() { return setWDT(0); };
   b5ce2:	2100      	movs	r1, #0
   b5ce4:	4852      	ldr	r0, [pc, #328]	; (b5e30 <loop+0x1f8>)
			Log.info("Sleep for %i seconds till next event at %s with %li free memory", wakeInSeconds, Time.format(time, "%T").c_str(),System.freeMemory());
   b5ce6:	4f56      	ldr	r7, [pc, #344]	; (b5e40 <loop+0x208>)
        return true;
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
   b5ce8:	4c56      	ldr	r4, [pc, #344]	; (b5e44 <loop+0x20c>)
   b5cea:	f001 ff69 	bl	b7bc0 <_ZN6AB18056setWDTEi>
			int wakeInSeconds = secondsUntilNextEvent();  		   		   	   // Time till next event
   b5cee:	f7ff fc6f 	bl	b55d0 <_Z21secondsUntilNextEventv>
   b5cf2:	4680      	mov	r8, r0
			time_t time = Time.now() + wakeInSeconds;
   b5cf4:	f00a f9ed 	bl	c00d2 <_ZN9TimeClass3nowEv>
   b5cf8:	eb00 0208 	add.w	r2, r0, r8
			Log.info("Sleep for %i seconds till next event at %s with %li free memory", wakeInSeconds, Time.format(time, "%T").c_str(),System.freeMemory());
   b5cfc:	17d3      	asrs	r3, r2, #31
   b5cfe:	4952      	ldr	r1, [pc, #328]	; (b5e48 <loop+0x210>)
   b5d00:	9700      	str	r7, [sp, #0]
   b5d02:	a80a      	add	r0, sp, #40	; 0x28
   b5d04:	f00a f986 	bl	c0014 <_ZN9TimeClass6formatExPKc>
   b5d08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b5d0a:	9304      	str	r3, [sp, #16]
   b5d0c:	f00a f850 	bl	bfdb0 <_ZN11SystemClass10freeMemoryEv>
   b5d10:	9b04      	ldr	r3, [sp, #16]
   b5d12:	494e      	ldr	r1, [pc, #312]	; (b5e4c <loop+0x214>)
   b5d14:	9000      	str	r0, [sp, #0]
   b5d16:	4642      	mov	r2, r8
   b5d18:	4848      	ldr	r0, [pc, #288]	; (b5e3c <loop+0x204>)
   b5d1a:	f7fe fa10 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b5d1e:	a80a      	add	r0, sp, #40	; 0x28
   b5d20:	f009 fe16 	bl	bf950 <_ZN6StringD1Ev>
   b5d24:	7d23      	ldrb	r3, [r4, #20]
   b5d26:	2b00      	cmp	r3, #0
   b5d28:	d050      	beq.n	b5dcc <loop+0x194>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   b5d2a:	2302      	movs	r3, #2
   b5d2c:	7223      	strb	r3, [r4, #8]
				.gpio(BUTTON_PIN,CHANGE)
   b5d2e:	4b48      	ldr	r3, [pc, #288]	; (b5e50 <loop+0x218>)
   b5d30:	f8b3 9000 	ldrh.w	r9, [r3]
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b5d34:	6823      	ldr	r3, [r4, #0]
   b5d36:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   b5d38:	b1f3      	cbz	r3, b5d78 <loop+0x140>
            if (start->type == type) {
   b5d3a:	889a      	ldrh	r2, [r3, #4]
   b5d3c:	2a01      	cmp	r2, #1
   b5d3e:	d006      	beq.n	b5d4e <loop+0x116>
            start = start->next;
   b5d40:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b5d42:	e7f9      	b.n	b5d38 <loop+0x100>
                auto gpioWakeup = reinterpret_cast<hal_wakeup_source_gpio_t*>(wakeup);
                if (gpioWakeup->pin == pin) {
                    gpioWakeup->mode = mode;
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
   b5d44:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   b5d46:	b1bb      	cbz	r3, b5d78 <loop+0x140>
            if (start->type == type) {
   b5d48:	889a      	ldrh	r2, [r3, #4]
   b5d4a:	2a01      	cmp	r2, #1
   b5d4c:	d1fa      	bne.n	b5d44 <loop+0x10c>
                if (gpioWakeup->pin == pin) {
   b5d4e:	899a      	ldrh	r2, [r3, #12]
   b5d50:	454a      	cmp	r2, r9
   b5d52:	d1f7      	bne.n	b5d44 <loop+0x10c>
                    gpioWakeup->mode = mode;
   b5d54:	2200      	movs	r2, #0
   b5d56:	739a      	strb	r2, [r3, #14]
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
        if (valid_) {
   b5d58:	7d23      	ldrb	r3, [r4, #20]
   b5d5a:	2b00      	cmp	r3, #0
   b5d5c:	d036      	beq.n	b5dcc <loop+0x194>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   b5d5e:	6823      	ldr	r3, [r4, #0]
				.duration(wakeInSeconds * 1000L);
   b5d60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b5d64:	68db      	ldr	r3, [r3, #12]
   b5d66:	fb00 f808 	mul.w	r8, r0, r8
        if (!start) {
   b5d6a:	b1db      	cbz	r3, b5da4 <loop+0x16c>
            if (start->type == type) {
   b5d6c:	889a      	ldrh	r2, [r3, #4]
   b5d6e:	2a04      	cmp	r2, #4
   b5d70:	f000 8243 	beq.w	b61fa <loop+0x5c2>
            start = start->next;
   b5d74:	689b      	ldr	r3, [r3, #8]
        while (start) {
   b5d76:	e7f8      	b.n	b5d6a <loop+0x132>
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_gpio_t();
   b5d78:	4936      	ldr	r1, [pc, #216]	; (b5e54 <loop+0x21c>)
   b5d7a:	2010      	movs	r0, #16
   b5d7c:	f00a fcba 	bl	c06f4 <_ZnwjRKSt9nothrow_t>
   b5d80:	4606      	mov	r6, r0
   b5d82:	2800      	cmp	r0, #0
   b5d84:	f000 823c 	beq.w	b6200 <loop+0x5c8>
   b5d88:	2210      	movs	r2, #16
   b5d8a:	2100      	movs	r1, #0
   b5d8c:	f00b fa64 	bl	c1258 <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   b5d90:	4b31      	ldr	r3, [pc, #196]	; (b5e58 <loop+0x220>)
   b5d92:	6033      	str	r3, [r6, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
   b5d94:	2301      	movs	r3, #1
   b5d96:	80b3      	strh	r3, [r6, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b5d98:	6923      	ldr	r3, [r4, #16]
   b5d9a:	60b3      	str	r3, [r6, #8]
            wakeupSource->pin = pin;
   b5d9c:	f8a6 900c 	strh.w	r9, [r6, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b5da0:	6126      	str	r6, [r4, #16]
   b5da2:	e7d9      	b.n	b5d58 <loop+0x120>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   b5da4:	492b      	ldr	r1, [pc, #172]	; (b5e54 <loop+0x21c>)
   b5da6:	2010      	movs	r0, #16
   b5da8:	f00a fca4 	bl	c06f4 <_ZnwjRKSt9nothrow_t>
   b5dac:	4606      	mov	r6, r0
   b5dae:	2800      	cmp	r0, #0
   b5db0:	f000 8226 	beq.w	b6200 <loop+0x5c8>
   b5db4:	2210      	movs	r2, #16
   b5db6:	2100      	movs	r1, #0
   b5db8:	f00b fa4e 	bl	c1258 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   b5dbc:	4b26      	ldr	r3, [pc, #152]	; (b5e58 <loop+0x220>)
   b5dbe:	6033      	str	r3, [r6, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   b5dc0:	2304      	movs	r3, #4
   b5dc2:	80b3      	strh	r3, [r6, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b5dc4:	6923      	ldr	r3, [r4, #16]
            wakeupSource->ms = ms;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b5dc6:	6126      	str	r6, [r4, #16]
            wakeupSource->ms = ms;
   b5dc8:	e9c6 3802 	strd	r3, r8, [r6, #8]
			SystemSleepResult result = System.sleep(config);                   // Put the device to sleep device continues operations from here
   b5dcc:	491d      	ldr	r1, [pc, #116]	; (b5e44 <loop+0x20c>)
   b5dce:	a807      	add	r0, sp, #28
   b5dd0:	f009 ff8e 	bl	bfcf0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
     * sleep modes where executinon continues. You may also want to call `updateWakeReason()`.
     * 
     * It's safe to call resumeWDT() even if the WDT has never been set, it does nothing
     * in this case, leaving the watchdog off.
     */
    bool resumeWDT() { return setWDT(-1); };
   b5dd4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b5dd8:	4815      	ldr	r0, [pc, #84]	; (b5e30 <loop+0x1f8>)
   b5dda:	f001 fef1 	bl	b7bc0 <_ZN6AB18056setWDTEi>
			state = IDLE_STATE;
   b5dde:	2302      	movs	r3, #2
   b5de0:	702b      	strb	r3, [r5, #0]
			nextEventTime = true;
   b5de2:	4b12      	ldr	r3, [pc, #72]	; (b5e2c <loop+0x1f4>)
   b5de4:	2201      	movs	r2, #1
   b5de6:	701a      	strb	r2, [r3, #0]
			Log.info("Awoke at %s with %li free memory", Time.format(Time.now(), "%T").c_str(), System.freeMemory());
   b5de8:	f00a f973 	bl	c00d2 <_ZN9TimeClass3nowEv>
   b5dec:	4916      	ldr	r1, [pc, #88]	; (b5e48 <loop+0x210>)
   b5dee:	9700      	str	r7, [sp, #0]
   b5df0:	17c3      	asrs	r3, r0, #31
   b5df2:	4602      	mov	r2, r0
   b5df4:	a80a      	add	r0, sp, #40	; 0x28
   b5df6:	f00a f90d 	bl	c0014 <_ZN9TimeClass6formatExPKc>
   b5dfa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b5dfc:	9204      	str	r2, [sp, #16]
   b5dfe:	f009 ffd7 	bl	bfdb0 <_ZN11SystemClass10freeMemoryEv>
   b5e02:	9a04      	ldr	r2, [sp, #16]
   b5e04:	4915      	ldr	r1, [pc, #84]	; (b5e5c <loop+0x224>)
   b5e06:	4603      	mov	r3, r0
   b5e08:	480c      	ldr	r0, [pc, #48]	; (b5e3c <loop+0x204>)
   b5e0a:	f7fe f998 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b5e0e:	a80a      	add	r0, sp, #40	; 0x28
   b5e10:	f009 fd9e 	bl	bf950 <_ZN6StringD1Ev>
        if (wakeupSource_) {
   b5e14:	9807      	ldr	r0, [sp, #28]
   b5e16:	2800      	cmp	r0, #0
   b5e18:	f43f af34 	beq.w	b5c84 <loop+0x4c>
            free(wakeupSource_);
   b5e1c:	f007 fa46 	bl	bd2ac <free>
		} break;
   b5e20:	e730      	b.n	b5c84 <loop+0x4c>
   b5e22:	bf00      	nop
   b5e24:	2003e462 	.word	0x2003e462
   b5e28:	2003e461 	.word	0x2003e461
   b5e2c:	2003e460 	.word	0x2003e460
   b5e30:	2003e334 	.word	0x2003e334
   b5e34:	2003d5ec 	.word	0x2003d5ec
   b5e38:	000c4104 	.word	0x000c4104
   b5e3c:	2003e650 	.word	0x2003e650
   b5e40:	000c400d 	.word	0x000c400d
   b5e44:	2003e354 	.word	0x2003e354
   b5e48:	2003e6a8 	.word	0x2003e6a8
   b5e4c:	000c4010 	.word	0x000c4010
   b5e50:	000c47fa 	.word	0x000c47fa
   b5e54:	000c55d8 	.word	0x000c55d8
   b5e58:	00030010 	.word	0x00030010
   b5e5c:	000c4050 	.word	0x000c4050
			if (state != oldState) {
   b5e60:	4bbf      	ldr	r3, [pc, #764]	; (b6160 <loop+0x528>)
   b5e62:	f8df 8334 	ldr.w	r8, [pc, #820]	; b6198 <loop+0x560>
   b5e66:	781b      	ldrb	r3, [r3, #0]
   b5e68:	4cbe      	ldr	r4, [pc, #760]	; (b6164 <loop+0x52c>)
   b5e6a:	2b04      	cmp	r3, #4
   b5e6c:	d072      	beq.n	b5f54 <loop+0x31c>
				if (oldState != REPORTING_STATE) startLoRAWindow = millis();    // Mark when we enter this state - for timeouts - but multiple messages won't keep us here forever
   b5e6e:	2b07      	cmp	r3, #7
   b5e70:	d003      	beq.n	b5e7a <loop+0x242>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b5e72:	f006 fe77 	bl	bcb64 <HAL_Timer_Get_Milli_Seconds>
   b5e76:	f8c8 0000 	str.w	r0, [r8]
				publishStateTransition();                   					// We will apply the back-offs before sending to ERROR state - so if we are here we will take action
   b5e7a:	f7ff fb73 	bl	b5564 <_Z22publishStateTransitionv>
				LoRA_Functions::instance().clearBuffer();						// Clear the buffer before we start the LoRA state
   b5e7e:	f7fe f977 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b5e82:	f7fe f989 	bl	b4198 <_ZN14LoRA_Functions11clearBufferEv>
   b5e86:	f00a f924 	bl	c00d2 <_ZN9TimeClass3nowEv>
   b5e8a:	4eb7      	ldr	r6, [pc, #732]	; (b6168 <loop+0x530>)
   b5e8c:	17c3      	asrs	r3, r0, #31
   b5e8e:	e9c6 0318 	strd	r0, r3, [r6, #96]	; 0x60
				conv.withCurrentTime().convert();								// Get the time and convert to Local
   b5e92:	4630      	mov	r0, r6
   b5e94:	f003 ff34 	bl	b9d00 <_ZN16LocalTimeConvert7convertEv>
    /**
     * @brief Get the value of this object as a LocalTimeHMS (hour minute second)
     * 
     * @return LocalTimeHMS 
     */
    LocalTimeHMS getLocalTimeHMS() const { return LocalTimeHMS(localTimeValue); };
   b5e98:	f106 0168 	add.w	r1, r6, #104	; 0x68
   b5e9c:	a807      	add	r0, sp, #28
   b5e9e:	f003 fdc1 	bl	b9a24 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>
				if (conv.getLocalTimeHMS().hour >= sysStatus.get_openTime() && conv.getLocalTimeHMS().hour <= sysStatus.get_closeTime()) current.set_openHours(true);
   b5ea2:	f99d 7020 	ldrsb.w	r7, [sp, #32]
   b5ea6:	f000 fa87 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b5eaa:	f000 fc15 	bl	b66d8 <_ZNK13sysStatusData12get_openTimeEv>
   b5eae:	4287      	cmp	r7, r0
   b5eb0:	f2c0 8093 	blt.w	b5fda <loop+0x3a2>
   b5eb4:	f106 0168 	add.w	r1, r6, #104	; 0x68
   b5eb8:	a80a      	add	r0, sp, #40	; 0x28
   b5eba:	f003 fdb3 	bl	b9a24 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>
   b5ebe:	f99d 702c 	ldrsb.w	r7, [sp, #44]	; 0x2c
   b5ec2:	f000 fa79 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b5ec6:	f000 fc0c 	bl	b66e2 <_ZNK13sysStatusData13get_closeTimeEv>
   b5eca:	4287      	cmp	r7, r0
   b5ecc:	a80a      	add	r0, sp, #40	; 0x28
   b5ece:	bfcc      	ite	gt
   b5ed0:	2700      	movgt	r7, #0
   b5ed2:	2701      	movle	r7, #1
   b5ed4:	f003 fb1a 	bl	b950c <_ZN12LocalTimeHMSD1Ev>
   b5ed8:	a807      	add	r0, sp, #28
   b5eda:	f003 fb17 	bl	b950c <_ZN12LocalTimeHMSD1Ev>
   b5ede:	2f00      	cmp	r7, #0
   b5ee0:	d07d      	beq.n	b5fde <loop+0x3a6>
   b5ee2:	f000 fab1 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b5ee6:	2101      	movs	r1, #1
				else current.set_openHours(false);
   b5ee8:	f000 feea 	bl	b6cc0 <_ZN17currentStatusData13set_openHoursEb>
				if (sysStatus.get_connectivityMode() == 0) connectionWindow = DEFAULT_LORA_WINDOW;
   b5eec:	f000 fa64 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b5ef0:	f000 fbe3 	bl	b66ba <_ZNK13sysStatusData20get_connectivityModeEv>
   b5ef4:	2800      	cmp	r0, #0
   b5ef6:	d176      	bne.n	b5fe6 <loop+0x3ae>
   b5ef8:	2303      	movs	r3, #3
				else connectionWindow = STAY_CONNECTED;
   b5efa:	7023      	strb	r3, [r4, #0]
				Log.info("Gateway is listening for %u (%u) minutes for LoRA messages and the park is %s (%d / %d / %d)", connectionWindow, sysStatus.get_connectivityMode(), (current.get_openHours()) ? "open":"closed", conv.getLocalTimeHMS().hour, sysStatus.get_openTime(), sysStatus.get_closeTime());
   b5efc:	7822      	ldrb	r2, [r4, #0]
   b5efe:	9205      	str	r2, [sp, #20]
   b5f00:	f000 fa5a 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b5f04:	f000 fbd9 	bl	b66ba <_ZNK13sysStatusData20get_connectivityModeEv>
   b5f08:	9004      	str	r0, [sp, #16]
   b5f0a:	f000 fa9d 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b5f0e:	f000 fe59 	bl	b6bc4 <_ZNK17currentStatusData13get_openHoursEv>
   b5f12:	4e96      	ldr	r6, [pc, #600]	; (b616c <loop+0x534>)
   b5f14:	4996      	ldr	r1, [pc, #600]	; (b6170 <loop+0x538>)
   b5f16:	2800      	cmp	r0, #0
   b5f18:	bf08      	it	eq
   b5f1a:	460e      	moveq	r6, r1
   b5f1c:	4995      	ldr	r1, [pc, #596]	; (b6174 <loop+0x53c>)
   b5f1e:	a80a      	add	r0, sp, #40	; 0x28
   b5f20:	f003 fd80 	bl	b9a24 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>
   b5f24:	f99d 902c 	ldrsb.w	r9, [sp, #44]	; 0x2c
   b5f28:	f000 fa46 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b5f2c:	f000 fbd4 	bl	b66d8 <_ZNK13sysStatusData12get_openTimeEv>
   b5f30:	4607      	mov	r7, r0
   b5f32:	f000 fa41 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b5f36:	f000 fbd4 	bl	b66e2 <_ZNK13sysStatusData13get_closeTimeEv>
   b5f3a:	e9cd 6900 	strd	r6, r9, [sp]
   b5f3e:	e9cd 7002 	strd	r7, r0, [sp, #8]
   b5f42:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   b5f46:	488c      	ldr	r0, [pc, #560]	; (b6178 <loop+0x540>)
   b5f48:	498c      	ldr	r1, [pc, #560]	; (b617c <loop+0x544>)
   b5f4a:	f7fe f8f8 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b5f4e:	a80a      	add	r0, sp, #40	; 0x28
   b5f50:	f003 fadc 	bl	b950c <_ZN12LocalTimeHMSD1Ev>
			if (LoRA_Functions::instance().listenForLoRAMessageGateway()) {
   b5f54:	f7fe f90c 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b5f58:	f7ff f98c 	bl	b5274 <_ZN14LoRA_Functions27listenForLoRAMessageGatewayEv>
   b5f5c:	b160      	cbz	r0, b5f78 <loop+0x340>
				if (current.get_alertCodeNode() != 1 && current.get_openHours()) {	// We don't report Join alerts or after hours
   b5f5e:	f000 fa73 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b5f62:	f000 fbeb 	bl	b673c <_ZNK17currentStatusData17get_alertCodeNodeEv>
   b5f66:	2801      	cmp	r0, #1
   b5f68:	d006      	beq.n	b5f78 <loop+0x340>
   b5f6a:	f000 fa6d 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b5f6e:	f000 fe29 	bl	b6bc4 <_ZNK17currentStatusData13get_openHoursEv>
   b5f72:	b108      	cbz	r0, b5f78 <loop+0x340>
					state = REPORTING_STATE; 									// Received and acknowledged data from a node - need to report the alert
   b5f74:	2307      	movs	r3, #7
   b5f76:	702b      	strb	r3, [r5, #0]
   b5f78:	f006 fdf4 	bl	bcb64 <HAL_Timer_Get_Milli_Seconds>
			if ((millis() - startLoRAWindow) > (connectionWindow *60000UL)) { 								// Keeps us in listening mode for the specified windpw - then back to idle unless in test mode - keeps listening
   b5f7c:	f8d8 3000 	ldr.w	r3, [r8]
   b5f80:	1ac0      	subs	r0, r0, r3
   b5f82:	7823      	ldrb	r3, [r4, #0]
   b5f84:	f64e 2260 	movw	r2, #60000	; 0xea60
   b5f88:	4353      	muls	r3, r2
   b5f8a:	4298      	cmp	r0, r3
   b5f8c:	f67f ae7a 	bls.w	b5c84 <loop+0x4c>
				LoRA_Functions::instance().nodeConnectionsHealthy();										// Will see if any nodes checked in - if not - will reset
   b5f90:	f7fe f8ee 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b5f94:	f7fe fb06 	bl	b45a4 <_ZN14LoRA_Functions22nodeConnectionsHealthyEv>
				LoRA_Functions::instance().sleepLoRaRadio();												// Done with the LoRA phase - put the radio to sleep
   b5f98:	f7fe f8ea 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b5f9c:	f7fe f90c 	bl	b41b8 <_ZN14LoRA_Functions14sleepLoRaRadioEv>
				LoRA_Functions::instance().printNodeData(false);
   b5fa0:	f7fe f8e6 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b5fa4:	2100      	movs	r1, #0
   b5fa6:	f7fe fc69 	bl	b487c <_ZN14LoRA_Functions13printNodeDataEb>
				nodeDatabase.flush(true);
   b5faa:	f000 fad3 	bl	b6554 <_ZN10nodeIDData8instanceEv>
   b5fae:	6803      	ldr	r3, [r0, #0]
   b5fb0:	2101      	movs	r1, #1
   b5fb2:	68db      	ldr	r3, [r3, #12]
   b5fb4:	4798      	blx	r3
				if (Time.hour() != Time.hour(sysStatus.get_lastConnection()) && current.get_openHours()) state = CONNECTING_STATE;  	// Only Connect once an hour after the LoRA window is over and if the park is open
   b5fb6:	f00a f89d 	bl	c00f4 <_ZN9TimeClass4hourEv>
   b5fba:	4604      	mov	r4, r0
   b5fbc:	f000 f9fc 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b5fc0:	f000 fd50 	bl	b6a64 <_ZNK13sysStatusData18get_lastConnectionEv>
   b5fc4:	f009 ff5c 	bl	bfe80 <_ZN9TimeClass4hourEx>
   b5fc8:	4284      	cmp	r4, r0
   b5fca:	d004      	beq.n	b5fd6 <loop+0x39e>
   b5fcc:	f000 fa3c 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b5fd0:	f000 fdf8 	bl	b6bc4 <_ZNK17currentStatusData13get_openHoursEv>
   b5fd4:	b980      	cbnz	r0, b5ff8 <loop+0x3c0>
				else state = IDLE_STATE;
   b5fd6:	2302      	movs	r3, #2
   b5fd8:	e653      	b.n	b5c82 <loop+0x4a>
				if (conv.getLocalTimeHMS().hour >= sysStatus.get_openTime() && conv.getLocalTimeHMS().hour <= sysStatus.get_closeTime()) current.set_openHours(true);
   b5fda:	2700      	movs	r7, #0
   b5fdc:	e77c      	b.n	b5ed8 <loop+0x2a0>
				else current.set_openHours(false);
   b5fde:	f000 fa33 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b5fe2:	4639      	mov	r1, r7
   b5fe4:	e780      	b.n	b5ee8 <loop+0x2b0>
				else if (sysStatus.get_connectivityMode() == 1) connectionWindow = LONG_LORA_WINDOW;
   b5fe6:	f000 f9e7 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b5fea:	f000 fb66 	bl	b66ba <_ZNK13sysStatusData20get_connectivityModeEv>
   b5fee:	2801      	cmp	r0, #1
   b5ff0:	bf0c      	ite	eq
   b5ff2:	230a      	moveq	r3, #10
				else connectionWindow = STAY_CONNECTED;
   b5ff4:	233c      	movne	r3, #60	; 0x3c
   b5ff6:	e780      	b.n	b5efa <loop+0x2c2>
				if (Time.hour() != Time.hour(sysStatus.get_lastConnection()) && current.get_openHours()) state = CONNECTING_STATE;  	// Only Connect once an hour after the LoRA window is over and if the park is open
   b5ff8:	2305      	movs	r3, #5
   b5ffa:	e642      	b.n	b5c82 <loop+0x4a>
			if (state != oldState) publishStateTransition();
   b5ffc:	4b58      	ldr	r3, [pc, #352]	; (b6160 <loop+0x528>)
   b5ffe:	781b      	ldrb	r3, [r3, #0]
   b6000:	2b07      	cmp	r3, #7
   b6002:	d001      	beq.n	b6008 <loop+0x3d0>
   b6004:	f7ff faae 	bl	b5564 <_Z22publishStateTransitionv>
			uint8_t nodeNumber = current.get_nodeNumber();						// Put this here to reduce line length
   b6008:	f000 fa1e 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b600c:	f000 fb73 	bl	b66f6 <_ZNK17currentStatusData14get_nodeNumberEv>
			publishWebhook(nodeNumber);
   b6010:	f7ff faf8 	bl	b5604 <_Z14publishWebhookh>
			current.set_alertCodeNode(0);										// Zero alert code after send
   b6014:	f000 fa18 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b6018:	2100      	movs	r1, #0
   b601a:	f000 fc0b 	bl	b6834 <_ZN17currentStatusData17set_alertCodeNodeEh>
			sysStatus.set_messageCount(sysStatus.get_messageCount() + 1);		// Increment the message counter 
   b601e:	f000 f9cb 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b6022:	4604      	mov	r4, r0
   b6024:	f000 f9c8 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b6028:	f000 fb51 	bl	b66ce <_ZNK13sysStatusData16get_messageCountEv>
   b602c:	3001      	adds	r0, #1
   b602e:	b2c1      	uxtb	r1, r0
   b6030:	4620      	mov	r0, r4
   b6032:	f000 fbbd 	bl	b67b0 <_ZN13sysStatusData16set_messageCountEh>
			state = LoRA_STATE;
   b6036:	e61b      	b.n	b5c70 <loop+0x38>
			if (state != oldState) {
   b6038:	4b49      	ldr	r3, [pc, #292]	; (b6160 <loop+0x528>)
   b603a:	4c51      	ldr	r4, [pc, #324]	; (b6180 <loop+0x548>)
   b603c:	781b      	ldrb	r3, [r3, #0]
   b603e:	2b05      	cmp	r3, #5
   b6040:	d027      	beq.n	b6092 <loop+0x45a>
				publishStateTransition();  
   b6042:	f7ff fa8f 	bl	b5564 <_Z22publishStateTransitionv>
				if (Time.day(sysStatus.get_lastConnection()) != conv.getLocalTimeYMD().getDay()) {
   b6046:	f000 f9b7 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b604a:	f000 fd0b 	bl	b6a64 <_ZNK13sysStatusData18get_lastConnectionEv>
   b604e:	f009 ff1f 	bl	bfe90 <_ZN9TimeClass3dayEx>
        fromLocalTimeValue(value);
   b6052:	4948      	ldr	r1, [pc, #288]	; (b6174 <loop+0x53c>)
   b6054:	4606      	mov	r6, r0
   b6056:	a80a      	add	r0, sp, #40	; 0x28
   b6058:	f003 fd01 	bl	b9a5e <_ZN12LocalTimeYMD18fromLocalTimeValueERK14LocalTimeValue>
    /**
     * @brief Get the value of this object as a LocalTimeYMD (year month day0)
     * 
     * @return LocalTimeYMD 
     */
    LocalTimeYMD getLocalTimeYMD() const { return LocalTimeYMD(localTimeValue); };
   b605c:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
   b6060:	ebb6 0fd3 	cmp.w	r6, r3, lsr #3
   b6064:	d007      	beq.n	b6076 <loop+0x43e>
					current.resetEverything();
   b6066:	f000 f9ef 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b606a:	f000 fd37 	bl	b6adc <_ZN17currentStatusData15resetEverythingEv>
					Log.info("New Day - Resetting everything");
   b606e:	4945      	ldr	r1, [pc, #276]	; (b6184 <loop+0x54c>)
   b6070:	4841      	ldr	r0, [pc, #260]	; (b6178 <loop+0x540>)
   b6072:	f7fe f864 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
				publishWebhook(sysStatus.get_nodeNumber());								// Before we connect - let's send the gateway's webhook
   b6076:	f000 f99f 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b607a:	f000 fb19 	bl	b66b0 <_ZNK13sysStatusData14get_nodeNumberEv>
   b607e:	f7ff fac1 	bl	b5604 <_Z14publishWebhookh>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b6082:	f007 f86b 	bl	bd15c <spark_cloud_flag_connected>
				if (!Particle.connected()) Particle.connect();							// Time to connect to Particle
   b6086:	b908      	cbnz	r0, b608c <loop+0x454>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   b6088:	f007 f860 	bl	bd14c <spark_cloud_flag_connect>
   b608c:	f006 fd6a 	bl	bcb64 <HAL_Timer_Get_Milli_Seconds>
				connectingTimeout = millis();
   b6090:	6020      	str	r0, [r4, #0]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b6092:	f007 f863 	bl	bd15c <spark_cloud_flag_connected>
			if (Particle.connected() || millis() - connectingTimeout > 600000L) {		// Either we will connect or we will timeout - will try for 10 minutes 
   b6096:	b338      	cbz	r0, b60e8 <loop+0x4b0>
				sysStatus.set_lastConnection(Time.now());
   b6098:	f000 f98e 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b609c:	4606      	mov	r6, r0
   b609e:	f00a f818 	bl	c00d2 <_ZN9TimeClass3nowEv>
   b60a2:	4602      	mov	r2, r0
   b60a4:	17c3      	asrs	r3, r0, #31
   b60a6:	4630      	mov	r0, r6
   b60a8:	f000 fd04 	bl	b6ab4 <_ZN13sysStatusData18set_lastConnectionEx>
				sysStatus.set_lastConnectionDuration((millis() - connectingTimeout) / 1000);	// Record connection time in seconds
   b60ac:	f000 f984 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b60b0:	4606      	mov	r6, r0
   b60b2:	f006 fd57 	bl	bcb64 <HAL_Timer_Get_Milli_Seconds>
   b60b6:	6821      	ldr	r1, [r4, #0]
   b60b8:	1a41      	subs	r1, r0, r1
   b60ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b60be:	fbb1 f1f0 	udiv	r1, r1, r0
   b60c2:	4630      	mov	r0, r6
   b60c4:	b289      	uxth	r1, r1
   b60c6:	f000 fc92 	bl	b69ee <_ZN13sysStatusData26set_lastConnectionDurationEt>
   b60ca:	f007 f847 	bl	bd15c <spark_cloud_flag_connected>
				if (Particle.connected()) {
   b60ce:	b1c8      	cbz	r0, b6104 <loop+0x4cc>
   b60d0:	f007 f844 	bl	bd15c <spark_cloud_flag_connected>
        if (!connected()) {
   b60d4:	b110      	cbz	r0, b60dc <loop+0x4a4>
        return spark_sync_time(NULL);
   b60d6:	2000      	movs	r0, #0
   b60d8:	f007 f858 	bl	bd18c <spark_sync_time>
					waitUntil(Particle.syncTimeDone);										// Make sure sync is complete
   b60dc:	f7ff fa20 	bl	b5520 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        while (_while() && !_condition()) {
   b60e0:	b950      	cbnz	r0, b60f8 <loop+0x4c0>
            spark_process();
   b60e2:	f007 f82b 	bl	bd13c <spark_process>
        while (_while() && !_condition()) {
   b60e6:	e7f9      	b.n	b60dc <loop+0x4a4>
   b60e8:	f006 fd3c 	bl	bcb64 <HAL_Timer_Get_Milli_Seconds>
			if (Particle.connected() || millis() - connectingTimeout > 600000L) {		// Either we will connect or we will timeout - will try for 10 minutes 
   b60ec:	6823      	ldr	r3, [r4, #0]
   b60ee:	1ac0      	subs	r0, r0, r3
   b60f0:	4b25      	ldr	r3, [pc, #148]	; (b6188 <loop+0x550>)
   b60f2:	4298      	cmp	r0, r3
   b60f4:	d8d0      	bhi.n	b6098 <loop+0x460>
   b60f6:	e5c5      	b.n	b5c84 <loop+0x4c>
					waitUntil(Particle.syncTimeDone);										// Make sure sync is complete
   b60f8:	f7ff fa12 	bl	b5520 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
					CellularSignal sig = Cellular.RSSI();
   b60fc:	4923      	ldr	r1, [pc, #140]	; (b618c <loop+0x554>)
   b60fe:	a80a      	add	r0, sp, #40	; 0x28
   b6100:	f007 f9c6 	bl	bd490 <_ZN5spark13CellularClass4RSSIEv>
				if (sysStatus.get_connectivityMode() >= 2) state = LoRA_STATE;				// Go to the LoRA State
   b6104:	f000 f958 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b6108:	f000 fad7 	bl	b66ba <_ZNK13sysStatusData20get_connectivityModeEv>
   b610c:	2801      	cmp	r0, #1
   b610e:	f63f adaf 	bhi.w	b5c70 <loop+0x38>
				else state = DISCONNECTING_STATE;	 									// Typically, we will disconnect and sleep to save power - publishes occur during the 90 seconds before disconnect
   b6112:	2306      	movs	r3, #6
   b6114:	e5b5      	b.n	b5c82 <loop+0x4a>
			if (state != oldState) {
   b6116:	4b12      	ldr	r3, [pc, #72]	; (b6160 <loop+0x528>)
   b6118:	4c1d      	ldr	r4, [pc, #116]	; (b6190 <loop+0x558>)
   b611a:	781b      	ldrb	r3, [r3, #0]
   b611c:	2b06      	cmp	r3, #6
   b611e:	d004      	beq.n	b612a <loop+0x4f2>
				publishStateTransition(); 
   b6120:	f7ff fa20 	bl	b5564 <_Z22publishStateTransitionv>
   b6124:	f006 fd1e 	bl	bcb64 <HAL_Timer_Get_Milli_Seconds>
				stayConnectedWindow = millis(); 
   b6128:	6020      	str	r0, [r4, #0]
   b612a:	f006 fd1b 	bl	bcb64 <HAL_Timer_Get_Milli_Seconds>
			if ((millis() - stayConnectedWindow > 90000UL) && PublishQueuePosix::instance().getCanSleep()) {	// Stay on-line for 90 seconds and until we are done clearing the queue
   b612e:	6823      	ldr	r3, [r4, #0]
   b6130:	1ac0      	subs	r0, r0, r3
   b6132:	4b18      	ldr	r3, [pc, #96]	; (b6194 <loop+0x55c>)
   b6134:	4298      	cmp	r0, r3
   b6136:	f67f ada5 	bls.w	b5c84 <loop+0x4c>
   b613a:	f004 f8d1 	bl	ba2e0 <_ZN17PublishQueuePosix8instanceEv>
   b613e:	f890 30b3 	ldrb.w	r3, [r0, #179]	; 0xb3
   b6142:	2b00      	cmp	r3, #0
   b6144:	f43f ad9e 	beq.w	b5c84 <loop+0x4c>
				if (sysStatus.get_connectivityMode() <= 1) Particle_Functions::instance().disconnectFromParticle();
   b6148:	f000 f936 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b614c:	f000 fab5 	bl	b66ba <_ZNK13sysStatusData20get_connectivityModeEv>
   b6150:	2801      	cmp	r0, #1
   b6152:	f63f af40 	bhi.w	b5fd6 <loop+0x39e>
   b6156:	f000 fe9b 	bl	b6e90 <_ZN18Particle_Functions8instanceEv>
   b615a:	f001 f9eb 	bl	b7534 <_ZN18Particle_Functions22disconnectFromParticleEv>
   b615e:	e73a      	b.n	b5fd6 <loop+0x39e>
   b6160:	2003e461 	.word	0x2003e461
   b6164:	2003e328 	.word	0x2003e328
   b6168:	2003e370 	.word	0x2003e370
   b616c:	000c4001 	.word	0x000c4001
   b6170:	000c4006 	.word	0x000c4006
   b6174:	2003e3d8 	.word	0x2003e3d8
   b6178:	2003e650 	.word	0x2003e650
   b617c:	000c4071 	.word	0x000c4071
   b6180:	2003e32c 	.word	0x2003e32c
   b6184:	000c40ce 	.word	0x000c40ce
   b6188:	000927c0 	.word	0x000927c0
   b618c:	2003e60c 	.word	0x2003e60c
   b6190:	2003e330 	.word	0x2003e330
   b6194:	00015f90 	.word	0x00015f90
   b6198:	2003e324 	.word	0x2003e324
			static system_tick_t resetTimeout = millis();
   b619c:	4c1b      	ldr	r4, [pc, #108]	; (b620c <loop+0x5d4>)
   b619e:	4e1c      	ldr	r6, [pc, #112]	; (b6210 <loop+0x5d8>)
   b61a0:	7823      	ldrb	r3, [r4, #0]
   b61a2:	f3bf 8f5b 	dmb	ish
   b61a6:	f013 0f01 	tst.w	r3, #1
   b61aa:	d109      	bne.n	b61c0 <loop+0x588>
   b61ac:	4620      	mov	r0, r4
   b61ae:	f7fd ff85 	bl	b40bc <__cxa_guard_acquire>
   b61b2:	b128      	cbz	r0, b61c0 <loop+0x588>
   b61b4:	f006 fcd6 	bl	bcb64 <HAL_Timer_Get_Milli_Seconds>
   b61b8:	6030      	str	r0, [r6, #0]
   b61ba:	4620      	mov	r0, r4
   b61bc:	f7fd ff83 	bl	b40c6 <__cxa_guard_release>
			if (state != oldState) publishStateTransition();
   b61c0:	4b14      	ldr	r3, [pc, #80]	; (b6214 <loop+0x5dc>)
   b61c2:	782a      	ldrb	r2, [r5, #0]
   b61c4:	781b      	ldrb	r3, [r3, #0]
   b61c6:	429a      	cmp	r2, r3
   b61c8:	d001      	beq.n	b61ce <loop+0x596>
   b61ca:	f7ff f9cb 	bl	b5564 <_Z22publishStateTransitionv>
   b61ce:	f006 fcc9 	bl	bcb64 <HAL_Timer_Get_Milli_Seconds>
			if (millis() - resetTimeout > 30000L) {
   b61d2:	6833      	ldr	r3, [r6, #0]
   b61d4:	1ac0      	subs	r0, r0, r3
   b61d6:	f247 5330 	movw	r3, #30000	; 0x7530
   b61da:	4298      	cmp	r0, r3
   b61dc:	f67f ad52 	bls.w	b5c84 <loop+0x4c>
				Log.info("Deep power down device");
   b61e0:	490d      	ldr	r1, [pc, #52]	; (b6218 <loop+0x5e0>)
   b61e2:	480e      	ldr	r0, [pc, #56]	; (b621c <loop+0x5e4>)
   b61e4:	f7fd ffab 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
				delay(2000);
   b61e8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b61ec:	f007 f8d6 	bl	bd39c <delay>
				ab1805.deepPowerDown(); 
   b61f0:	211e      	movs	r1, #30
   b61f2:	480b      	ldr	r0, [pc, #44]	; (b6220 <loop+0x5e8>)
   b61f4:	f001 fe3e 	bl	b7e74 <_ZN6AB180513deepPowerDownEi>
   b61f8:	e544      	b.n	b5c84 <loop+0x4c>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   b61fa:	f8c3 800c 	str.w	r8, [r3, #12]
                return *this;
   b61fe:	e5e5      	b.n	b5dcc <loop+0x194>
                valid_ = false;
   b6200:	7526      	strb	r6, [r4, #20]
                return *this;
   b6202:	e5e3      	b.n	b5dcc <loop+0x194>
}
   b6204:	b013      	add	sp, #76	; 0x4c
   b6206:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b620a:	bf00      	nop
   b620c:	2003e318 	.word	0x2003e318
   b6210:	2003e320 	.word	0x2003e320
   b6214:	2003e461 	.word	0x2003e461
   b6218:	000c40ed 	.word	0x000c40ed
   b621c:	2003e650 	.word	0x2003e650
   b6220:	2003e334 	.word	0x2003e334

000b6224 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   b6224:	b510      	push	{r4, lr}
   b6226:	4b03      	ldr	r3, [pc, #12]	; (b6234 <_ZN8MB85RC64D1Ev+0x10>)
   b6228:	6003      	str	r3, [r0, #0]
   b622a:	4604      	mov	r4, r0
   b622c:	f003 fe16 	bl	b9e5c <_ZN6MB85RCD1Ev>
   b6230:	4620      	mov	r0, r4
   b6232:	bd10      	pop	{r4, pc}
   b6234:	000c42b4 	.word	0x000c42b4

000b6238 <_ZN8MB85RC64D0Ev>:
   b6238:	b510      	push	{r4, lr}
   b623a:	4604      	mov	r4, r0
   b623c:	f7ff fff2 	bl	b6224 <_ZN8MB85RC64D1Ev>
   b6240:	4620      	mov	r0, r4
   b6242:	2110      	movs	r1, #16
   b6244:	f7fd ff2b 	bl	b409e <_ZdlPvj>
   b6248:	4620      	mov	r0, r4
   b624a:	bd10      	pop	{r4, pc}

000b624c <_ZN10nodeIDData8validateEj>:
    nodeDatabase.set_nodeIDJson(blank);
    nodeDatabase.flush(true);
    Log.info("NodeID data is now %s", nodeDatabase.get_nodeIDJson().c_str());
}

bool nodeIDData::validate(size_t dataSize) {
   b624c:	b510      	push	{r4, lr}
    bool valid = PersistentDataFRAM::validate(dataSize);
   b624e:	f006 fb7d 	bl	bc94c <_ZN15StorageHelperRK18PersistentDataBase8validateEj>
    if (!valid) Log.info("nodeID data is %s",(valid) ? "valid": "not valid");
   b6252:	4604      	mov	r4, r0
   b6254:	b920      	cbnz	r0, b6260 <_ZN10nodeIDData8validateEj+0x14>
   b6256:	4a03      	ldr	r2, [pc, #12]	; (b6264 <_ZN10nodeIDData8validateEj+0x18>)
   b6258:	4903      	ldr	r1, [pc, #12]	; (b6268 <_ZN10nodeIDData8validateEj+0x1c>)
   b625a:	4804      	ldr	r0, [pc, #16]	; (b626c <_ZN10nodeIDData8validateEj+0x20>)
   b625c:	f7fd ff6f 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    return valid;
}
   b6260:	4620      	mov	r0, r4
   b6262:	bd10      	pop	{r4, pc}
   b6264:	000c4120 	.word	0x000c4120
   b6268:	000c412a 	.word	0x000c412a
   b626c:	2003e650 	.word	0x2003e650

000b6270 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>:
         * 
         * Blocks if another thread has obtained the mutex, continues when the other thread releases it.
         * 
         * Never call lock from a SINGLE_THREADED_BLOCK since deadlock can occur.
         */
        void lock() const { 
   b6270:	b510      	push	{r4, lr}
            if (!handle_) {
   b6272:	6803      	ldr	r3, [r0, #0]
        void lock() const { 
   b6274:	4604      	mov	r4, r0
            if (!handle_) {
   b6276:	b90b      	cbnz	r3, b627c <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv+0xc>
                os_mutex_recursive_create(&handle_);
   b6278:	f006 fc24 	bl	bcac4 <os_mutex_recursive_create>
            }
            os_mutex_recursive_lock(handle_); 
   b627c:	6820      	ldr	r0, [r4, #0]
        }
   b627e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            os_mutex_recursive_lock(handle_); 
   b6282:	f006 bc2f 	b.w	bcae4 <os_mutex_recursive_lock>

000b6286 <_ZN15StorageHelperRK18PersistentDataFRAM4saveEv>:
        }

        /**
         * @brief Save the persistent data file. You normally do not need to call this; it will be saved automatically.
         */
        virtual void save() {
   b6286:	b538      	push	{r3, r4, r5, lr}
   b6288:	4604      	mov	r4, r0
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   b628a:	3004      	adds	r0, #4
   b628c:	f7ff fff0 	bl	b6270 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
            WITH_LOCK(*this) {
                fram.writeData(framOffset, (const uint8_t*)savedDataHeader, savedDataSize);
   b6290:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6292:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   b6294:	6803      	ldr	r3, [r0, #0]
   b6296:	68dd      	ldr	r5, [r3, #12]
   b6298:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b629c:	47a8      	blx	r5
            os_mutex_recursive_unlock(handle_); 
   b629e:	6860      	ldr	r0, [r4, #4]
   b62a0:	f006 fc28 	bl	bcaf4 <os_mutex_recursive_unlock>
            }
            PersistentDataBase::save();
   b62a4:	4620      	mov	r0, r4
        } 
   b62a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            PersistentDataBase::save();
   b62aa:	f006 ba6b 	b.w	bc784 <_ZN15StorageHelperRK18PersistentDataBase4saveEv>

000b62ae <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv>:
        virtual bool load() {
   b62ae:	b538      	push	{r3, r4, r5, lr}
   b62b0:	4604      	mov	r4, r0
   b62b2:	3004      	adds	r0, #4
   b62b4:	f7ff ffdc 	bl	b6270 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                fram.readData(framOffset, (uint8_t*)savedDataHeader, savedDataSize);
   b62b8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b62ba:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   b62bc:	6803      	ldr	r3, [r0, #0]
   b62be:	689d      	ldr	r5, [r3, #8]
   b62c0:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   b62c4:	47a8      	blx	r5
                if (!validate(savedDataHeader->size)) {
   b62c6:	68a2      	ldr	r2, [r4, #8]
   b62c8:	6823      	ldr	r3, [r4, #0]
   b62ca:	88d1      	ldrh	r1, [r2, #6]
   b62cc:	695b      	ldr	r3, [r3, #20]
   b62ce:	4620      	mov	r0, r4
   b62d0:	4798      	blx	r3
   b62d2:	b918      	cbnz	r0, b62dc <_ZN15StorageHelperRK18PersistentDataFRAM4loadEv+0x2e>
                    initialize();
   b62d4:	6823      	ldr	r3, [r4, #0]
   b62d6:	4620      	mov	r0, r4
   b62d8:	699b      	ldr	r3, [r3, #24]
   b62da:	4798      	blx	r3
            os_mutex_recursive_unlock(handle_); 
   b62dc:	6860      	ldr	r0, [r4, #4]
   b62de:	f006 fc09 	bl	bcaf4 <os_mutex_recursive_unlock>
        }
   b62e2:	2001      	movs	r0, #1
   b62e4:	bd38      	pop	{r3, r4, r5, pc}
	...

000b62e8 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>:
    class PersistentDataFRAM : public PersistentDataBase {
   b62e8:	b510      	push	{r4, lr}
    class PersistentDataBase : public CustomRecursiveMutex {
   b62ea:	4b04      	ldr	r3, [pc, #16]	; (b62fc <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev+0x14>)
   b62ec:	6003      	str	r3, [r0, #0]
    class PersistentDataFRAM : public PersistentDataBase {
   b62ee:	4604      	mov	r4, r0
            if (handle_) {
   b62f0:	6840      	ldr	r0, [r0, #4]
   b62f2:	b108      	cbz	r0, b62f8 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev+0x10>
                os_mutex_recursive_destroy(handle_);
   b62f4:	f006 fbee 	bl	bcad4 <os_mutex_recursive_destroy>
    class PersistentDataFRAM : public PersistentDataBase {
   b62f8:	4620      	mov	r0, r4
   b62fa:	bd10      	pop	{r4, pc}
   b62fc:	000c52cc 	.word	0x000c52cc

000b6300 <_ZN13sysStatusDataD1Ev>:
sysStatusData::~sysStatusData() {
   b6300:	b510      	push	{r4, lr}
   b6302:	4b03      	ldr	r3, [pc, #12]	; (b6310 <_ZN13sysStatusDataD1Ev+0x10>)
   b6304:	6003      	str	r3, [r0, #0]
   b6306:	4604      	mov	r4, r0
   b6308:	f7ff ffee 	bl	b62e8 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>
}
   b630c:	4620      	mov	r0, r4
   b630e:	bd10      	pop	{r4, pc}
   b6310:	000c42fc 	.word	0x000c42fc

000b6314 <_ZN13sysStatusDataD0Ev>:
sysStatusData::~sysStatusData() {
   b6314:	b510      	push	{r4, lr}
   b6316:	4604      	mov	r4, r0
}
   b6318:	f7ff fff2 	bl	b6300 <_ZN13sysStatusDataD1Ev>
   b631c:	4620      	mov	r0, r4
   b631e:	2170      	movs	r1, #112	; 0x70
   b6320:	f7fd febd 	bl	b409e <_ZdlPvj>
   b6324:	4620      	mov	r0, r4
   b6326:	bd10      	pop	{r4, pc}

000b6328 <_ZN17currentStatusDataD1Ev>:
currentStatusData::~currentStatusData() {
   b6328:	b510      	push	{r4, lr}
   b632a:	4b03      	ldr	r3, [pc, #12]	; (b6338 <_ZN17currentStatusDataD1Ev+0x10>)
   b632c:	6003      	str	r3, [r0, #0]
   b632e:	4604      	mov	r4, r0
   b6330:	f7ff ffda 	bl	b62e8 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>
}
   b6334:	4620      	mov	r0, r4
   b6336:	bd10      	pop	{r4, pc}
   b6338:	000c4328 	.word	0x000c4328

000b633c <_ZN17currentStatusDataD0Ev>:
currentStatusData::~currentStatusData() {
   b633c:	b510      	push	{r4, lr}
   b633e:	4604      	mov	r4, r0
}
   b6340:	f7ff fff2 	bl	b6328 <_ZN17currentStatusDataD1Ev>
   b6344:	4620      	mov	r0, r4
   b6346:	2178      	movs	r1, #120	; 0x78
   b6348:	f7fd fea9 	bl	b409e <_ZdlPvj>
   b634c:	4620      	mov	r0, r4
   b634e:	bd10      	pop	{r4, pc}

000b6350 <_ZN10nodeIDDataD1Ev>:
nodeIDData::~nodeIDData() {
   b6350:	b510      	push	{r4, lr}
   b6352:	4b03      	ldr	r3, [pc, #12]	; (b6360 <_ZN10nodeIDDataD1Ev+0x10>)
   b6354:	6003      	str	r3, [r0, #0]
   b6356:	4604      	mov	r4, r0
   b6358:	f7ff ffc6 	bl	b62e8 <_ZN15StorageHelperRK18PersistentDataFRAMD1Ev>
}
   b635c:	4620      	mov	r0, r4
   b635e:	bd10      	pop	{r4, pc}
   b6360:	000c42d0 	.word	0x000c42d0

000b6364 <_ZN10nodeIDDataD0Ev>:
nodeIDData::~nodeIDData() {
   b6364:	b510      	push	{r4, lr}
   b6366:	4604      	mov	r4, r0
}
   b6368:	f7ff fff2 	bl	b6350 <_ZN10nodeIDDataD1Ev>
   b636c:	4620      	mov	r0, r4
   b636e:	f240 413c 	movw	r1, #1084	; 0x43c
   b6372:	f7fd fe94 	bl	b409e <_ZdlPvj>
   b6376:	4620      	mov	r0, r4
   b6378:	bd10      	pop	{r4, pc}
	...

000b637c <_ZN13sysStatusDataC1Ev>:
sysStatusData::sysStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 0, &sysData.sysHeader, sizeof(SysData), SYS_DATA_MAGIC, SYS_DATA_VERSION) {
   b637c:	f100 0130 	add.w	r1, r0, #48	; 0x30
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b6380:	6081      	str	r1, [r0, #8]
   b6382:	490a      	ldr	r1, [pc, #40]	; (b63ac <_ZN13sysStatusDataC1Ev+0x30>)
   b6384:	f04f 0c40 	mov.w	ip, #64	; 0x40
   b6388:	e9c0 c103 	strd	ip, r1, [r0, #12]
   b638c:	2101      	movs	r1, #1
   b638e:	8281      	strh	r1, [r0, #20]
   b6390:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b6394:	61c1      	str	r1, [r0, #28]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b6396:	4906      	ldr	r1, [pc, #24]	; (b63b0 <_ZN13sysStatusDataC1Ev+0x34>)
        CustomRecursiveMutex() : handle_(nullptr) {
   b6398:	2200      	movs	r2, #0
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b639a:	e9c0 1209 	strd	r1, r2, [r0, #36]	; 0x24
        CustomRecursiveMutex() : handle_(nullptr) {
   b639e:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b63a0:	6182      	str	r2, [r0, #24]
   b63a2:	f880 2020 	strb.w	r2, [r0, #32]
   b63a6:	4a03      	ldr	r2, [pc, #12]	; (b63b4 <_ZN13sysStatusDataC1Ev+0x38>)
   b63a8:	6002      	str	r2, [r0, #0]
};
   b63aa:	4770      	bx	lr
   b63ac:	20a99e76 	.word	0x20a99e76
   b63b0:	2003e470 	.word	0x2003e470
   b63b4:	000c42fc 	.word	0x000c42fc

000b63b8 <_ZN13sysStatusData8instanceEv>:
sysStatusData &sysStatusData::instance() {
   b63b8:	b510      	push	{r4, lr}
    if (!_instance) {
   b63ba:	4c06      	ldr	r4, [pc, #24]	; (b63d4 <_ZN13sysStatusData8instanceEv+0x1c>)
   b63bc:	6823      	ldr	r3, [r4, #0]
   b63be:	b93b      	cbnz	r3, b63d0 <_ZN13sysStatusData8instanceEv+0x18>
        _instance = new sysStatusData();
   b63c0:	2070      	movs	r0, #112	; 0x70
   b63c2:	f7fd fe68 	bl	b4096 <_Znwj>
   b63c6:	4603      	mov	r3, r0
   b63c8:	b108      	cbz	r0, b63ce <_ZN13sysStatusData8instanceEv+0x16>
   b63ca:	f7ff ffd7 	bl	b637c <_ZN13sysStatusDataC1Ev>
   b63ce:	6023      	str	r3, [r4, #0]
}
   b63d0:	6820      	ldr	r0, [r4, #0]
   b63d2:	bd10      	pop	{r4, pc}
   b63d4:	2003e468 	.word	0x2003e468

000b63d8 <_ZN13sysStatusData5setupEv>:
void sysStatusData::setup() {
   b63d8:	b510      	push	{r4, lr}
    fram.begin();
   b63da:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b63dc:	f003 fd54 	bl	b9e88 <_ZN6MB85RC5beginEv>
    sysStatus
   b63e0:	f7ff ffea 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
            saveDelayMs = value;
   b63e4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
        .load();
   b63e8:	6803      	ldr	r3, [r0, #0]
   b63ea:	61c2      	str	r2, [r0, #28]
}
   b63ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        .load();
   b63f0:	685b      	ldr	r3, [r3, #4]
   b63f2:	4718      	bx	r3

000b63f4 <_ZN13sysStatusData4loopEv>:
void sysStatusData::loop() {
   b63f4:	b510      	push	{r4, lr}
    sysStatus.flush(false);
   b63f6:	f7ff ffdf 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b63fa:	6803      	ldr	r3, [r0, #0]
}
   b63fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sysStatus.flush(false);
   b6400:	68db      	ldr	r3, [r3, #12]
   b6402:	2100      	movs	r1, #0
   b6404:	4718      	bx	r3
	...

000b6408 <_ZN17currentStatusDataC1Ev>:
currentStatusData::currentStatusData() : StorageHelperRK::PersistentDataFRAM(::fram, 100, &currentData.currentHeader, sizeof(CurrentData), CURRENT_DATA_MAGIC, CURRENT_DATA_VERSION) {
   b6408:	f100 0130 	add.w	r1, r0, #48	; 0x30
        CustomRecursiveMutex() : handle_(nullptr) {
   b640c:	2200      	movs	r2, #0
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b640e:	6081      	str	r1, [r0, #8]
   b6410:	490a      	ldr	r1, [pc, #40]	; (b643c <_ZN17currentStatusDataC1Ev+0x34>)
        CustomRecursiveMutex() : handle_(nullptr) {
   b6412:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b6414:	f04f 0c48 	mov.w	ip, #72	; 0x48
   b6418:	6182      	str	r2, [r0, #24]
   b641a:	f880 2020 	strb.w	r2, [r0, #32]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b641e:	4a08      	ldr	r2, [pc, #32]	; (b6440 <_ZN17currentStatusDataC1Ev+0x38>)
   b6420:	6242      	str	r2, [r0, #36]	; 0x24
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b6422:	e9c0 c103 	strd	ip, r1, [r0, #12]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b6426:	2264      	movs	r2, #100	; 0x64
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b6428:	2101      	movs	r1, #1
   b642a:	8281      	strh	r1, [r0, #20]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b642c:	6282      	str	r2, [r0, #40]	; 0x28
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b642e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b6432:	4a04      	ldr	r2, [pc, #16]	; (b6444 <_ZN17currentStatusDataC1Ev+0x3c>)
   b6434:	61c1      	str	r1, [r0, #28]
   b6436:	6002      	str	r2, [r0, #0]
};
   b6438:	4770      	bx	lr
   b643a:	bf00      	nop
   b643c:	20a99e76 	.word	0x20a99e76
   b6440:	2003e470 	.word	0x2003e470
   b6444:	000c4328 	.word	0x000c4328

000b6448 <_ZN17currentStatusData8instanceEv>:
currentStatusData &currentStatusData::instance() {
   b6448:	b510      	push	{r4, lr}
    if (!_instance) {
   b644a:	4c06      	ldr	r4, [pc, #24]	; (b6464 <_ZN17currentStatusData8instanceEv+0x1c>)
   b644c:	6823      	ldr	r3, [r4, #0]
   b644e:	b93b      	cbnz	r3, b6460 <_ZN17currentStatusData8instanceEv+0x18>
        _instance = new currentStatusData();
   b6450:	2078      	movs	r0, #120	; 0x78
   b6452:	f7fd fe20 	bl	b4096 <_Znwj>
   b6456:	4603      	mov	r3, r0
   b6458:	b108      	cbz	r0, b645e <_ZN17currentStatusData8instanceEv+0x16>
   b645a:	f7ff ffd5 	bl	b6408 <_ZN17currentStatusDataC1Ev>
   b645e:	6023      	str	r3, [r4, #0]
}
   b6460:	6820      	ldr	r0, [r4, #0]
   b6462:	bd10      	pop	{r4, pc}
   b6464:	2003e46c 	.word	0x2003e46c

000b6468 <_ZN17currentStatusData5setupEv>:
void currentStatusData::setup() {
   b6468:	b510      	push	{r4, lr}
    fram.begin();
   b646a:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b646c:	f003 fd0c 	bl	b9e88 <_ZN6MB85RC5beginEv>
    current
   b6470:	f7ff ffea 	bl	b6448 <_ZN17currentStatusData8instanceEv>
            saveDelayMs = value;
   b6474:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
        .load();
   b6478:	6803      	ldr	r3, [r0, #0]
   b647a:	61c2      	str	r2, [r0, #28]
}
   b647c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        .load();
   b6480:	685b      	ldr	r3, [r3, #4]
   b6482:	4718      	bx	r3

000b6484 <_ZN17currentStatusData4loopEv>:
void currentStatusData::loop() {
   b6484:	b510      	push	{r4, lr}
    current.flush(false);
   b6486:	f7ff ffdf 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b648a:	6803      	ldr	r3, [r0, #0]
}
   b648c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    current.flush(false);
   b6490:	68db      	ldr	r3, [r3, #12]
   b6492:	2100      	movs	r1, #0
   b6494:	4718      	bx	r3
	...

000b6498 <_ZNK17currentStatusData17get_stateOfChargeEv>:
double currentStatusData::get_stateOfCharge() const {
   b6498:	b510      	push	{r4, lr}
   b649a:	4604      	mov	r4, r0
   b649c:	ed2d 8b02 	vpush	{d8}
   b64a0:	3004      	adds	r0, #4
   b64a2:	f7ff fee5 	bl	b6270 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b64a6:	68e3      	ldr	r3, [r4, #12]
   b64a8:	3b08      	subs	r3, #8
   b64aa:	2b17      	cmp	r3, #23
   b64ac:	d90c      	bls.n	b64c8 <_ZNK17currentStatusData17get_stateOfChargeEv+0x30>
                    result = *(const T *)p;
   b64ae:	68a3      	ldr	r3, [r4, #8]
   b64b0:	ed93 8b06 	vldr	d8, [r3, #24]
            os_mutex_recursive_unlock(handle_); 
   b64b4:	6860      	ldr	r0, [r4, #4]
   b64b6:	f006 fb1d 	bl	bcaf4 <os_mutex_recursive_unlock>
}
   b64ba:	eeb0 0a48 	vmov.f32	s0, s16
   b64be:	eef0 0a68 	vmov.f32	s1, s17
   b64c2:	ecbd 8b02 	vpop	{d8}
   b64c6:	bd10      	pop	{r4, pc}
            T result = 0;
   b64c8:	ed9f 8b01 	vldr	d8, [pc, #4]	; b64d0 <_ZNK17currentStatusData17get_stateOfChargeEv+0x38>
   b64cc:	e7f2      	b.n	b64b4 <_ZNK17currentStatusData17get_stateOfChargeEv+0x1c>
   b64ce:	bf00      	nop
	...

000b64d8 <_ZN17currentStatusData17set_stateOfChargeEd>:
void currentStatusData::set_stateOfCharge(double value) {
   b64d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b64da:	4604      	mov	r4, r0
   b64dc:	3004      	adds	r0, #4
   b64de:	ec57 6b10 	vmov	r6, r7, d0
   b64e2:	f7ff fec5 	bl	b6270 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b64e6:	68e3      	ldr	r3, [r4, #12]
   b64e8:	3b08      	subs	r3, #8
   b64ea:	2b17      	cmp	r3, #23
   b64ec:	d90c      	bls.n	b6508 <_ZN17currentStatusData17set_stateOfChargeEd+0x30>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b64ee:	68a5      	ldr	r5, [r4, #8]
                    if (oldValue != value) {
   b64f0:	4630      	mov	r0, r6
   b64f2:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   b64f6:	4639      	mov	r1, r7
   b64f8:	f00a fd36 	bl	c0f68 <__aeabi_dcmpeq>
   b64fc:	b920      	cbnz	r0, b6508 <_ZN17currentStatusData17set_stateOfChargeEd+0x30>
                        *(T *)p = value;
   b64fe:	e9c5 6706 	strd	r6, r7, [r5, #24]
                        updateHash();
   b6502:	4620      	mov	r0, r4
   b6504:	f006 f9e6 	bl	bc8d4 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b6508:	6860      	ldr	r0, [r4, #4]
}
   b650a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   b650e:	f006 baf1 	b.w	bcaf4 <os_mutex_recursive_unlock>
	...

000b6514 <_ZN10nodeIDDataC1Ev>:
nodeIDData::nodeIDData() : StorageHelperRK::PersistentDataFRAM(::fram, 200, &nodeData.nodeHeader, sizeof(NodeData), NODEID_DATA_MAGIC, NODEID_DATA_VERSION) {
   b6514:	f100 012c 	add.w	r1, r0, #44	; 0x2c
        CustomRecursiveMutex() : handle_(nullptr) {
   b6518:	2200      	movs	r2, #0
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b651a:	6081      	str	r1, [r0, #8]
   b651c:	490a      	ldr	r1, [pc, #40]	; (b6548 <_ZN10nodeIDDataC1Ev+0x34>)
        CustomRecursiveMutex() : handle_(nullptr) {
   b651e:	6042      	str	r2, [r0, #4]
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b6520:	f44f 6c82 	mov.w	ip, #1040	; 0x410
   b6524:	6182      	str	r2, [r0, #24]
   b6526:	f880 2020 	strb.w	r2, [r0, #32]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b652a:	4a08      	ldr	r2, [pc, #32]	; (b654c <_ZN10nodeIDDataC1Ev+0x38>)
   b652c:	6242      	str	r2, [r0, #36]	; 0x24
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b652e:	e9c0 c103 	strd	ip, r1, [r0, #12]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b6532:	22c8      	movs	r2, #200	; 0xc8
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b6534:	2102      	movs	r1, #2
   b6536:	8281      	strh	r1, [r0, #20]
            PersistentDataBase(savedDataHeader, savedDataSize, savedDataMagic, savedDataVersion), fram(fram), framOffset(framOffset) {
   b6538:	6282      	str	r2, [r0, #40]	; 0x28
            savedDataHeader(savedDataHeader), savedDataSize(savedDataSize), savedDataMagic(savedDataMagic), savedDataVersion(savedDataVersion)  {
   b653a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b653e:	4a04      	ldr	r2, [pc, #16]	; (b6550 <_ZN10nodeIDDataC1Ev+0x3c>)
   b6540:	61c1      	str	r1, [r0, #28]
   b6542:	6002      	str	r2, [r0, #0]
};
   b6544:	4770      	bx	lr
   b6546:	bf00      	nop
   b6548:	20a99e60 	.word	0x20a99e60
   b654c:	2003e470 	.word	0x2003e470
   b6550:	000c42d0 	.word	0x000c42d0

000b6554 <_ZN10nodeIDData8instanceEv>:
nodeIDData &nodeIDData::instance() {
   b6554:	b510      	push	{r4, lr}
    if (!_instance) {
   b6556:	4c07      	ldr	r4, [pc, #28]	; (b6574 <_ZN10nodeIDData8instanceEv+0x20>)
   b6558:	6823      	ldr	r3, [r4, #0]
   b655a:	b943      	cbnz	r3, b656e <_ZN10nodeIDData8instanceEv+0x1a>
        _instance = new nodeIDData();
   b655c:	f240 403c 	movw	r0, #1084	; 0x43c
   b6560:	f7fd fd99 	bl	b4096 <_Znwj>
   b6564:	4603      	mov	r3, r0
   b6566:	b108      	cbz	r0, b656c <_ZN10nodeIDData8instanceEv+0x18>
   b6568:	f7ff ffd4 	bl	b6514 <_ZN10nodeIDDataC1Ev>
   b656c:	6023      	str	r3, [r4, #0]
}
   b656e:	6820      	ldr	r0, [r4, #0]
   b6570:	bd10      	pop	{r4, pc}
   b6572:	bf00      	nop
   b6574:	2003e464 	.word	0x2003e464

000b6578 <_ZN10nodeIDData5setupEv>:
void nodeIDData::setup() {
   b6578:	b510      	push	{r4, lr}
    fram.begin();
   b657a:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b657c:	f003 fc84 	bl	b9e88 <_ZN6MB85RC5beginEv>
    nodeDatabase
   b6580:	f7ff ffe8 	bl	b6554 <_ZN10nodeIDData8instanceEv>
            saveDelayMs = value;
   b6584:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
        .load();
   b6588:	6803      	ldr	r3, [r0, #0]
   b658a:	61c2      	str	r2, [r0, #28]
}
   b658c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        .load();
   b6590:	685b      	ldr	r3, [r3, #4]
   b6592:	4718      	bx	r3

000b6594 <_ZN10nodeIDData4loopEv>:
void nodeIDData::loop() {
   b6594:	b510      	push	{r4, lr}
    nodeDatabase.flush(false);
   b6596:	f7ff ffdd 	bl	b6554 <_ZN10nodeIDData8instanceEv>
   b659a:	6803      	ldr	r3, [r0, #0]
}
   b659c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nodeDatabase.flush(false);
   b65a0:	68db      	ldr	r3, [r3, #12]
   b65a2:	2100      	movs	r1, #0
   b65a4:	4718      	bx	r3
	...

000b65a8 <_ZNK10nodeIDData14get_nodeIDJsonEv>:
    nodeIDData::resetNodeIDs();
    updateHash();                                       // If you manually update fields here, be sure to update the hash
}


String nodeIDData::get_nodeIDJson() const {
   b65a8:	b538      	push	{r3, r4, r5, lr}
   b65aa:	4604      	mov	r4, r0
   b65ac:	460d      	mov	r5, r1
	String result;
   b65ae:	4906      	ldr	r1, [pc, #24]	; (b65c8 <_ZNK10nodeIDData14get_nodeIDJsonEv+0x20>)
   b65b0:	f009 fa19 	bl	bf9e6 <_ZN6StringC1EPK19__FlashStringHelper>
	getValueString(offsetof(NodeData, nodeIDJson), sizeof(NodeData::nodeIDJson), result);
   b65b4:	4623      	mov	r3, r4
   b65b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b65ba:	2110      	movs	r1, #16
   b65bc:	4628      	mov	r0, r5
   b65be:	f006 f917 	bl	bc7f0 <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String>
	return result;
}
   b65c2:	4620      	mov	r0, r4
   b65c4:	bd38      	pop	{r3, r4, r5, pc}
   b65c6:	bf00      	nop
   b65c8:	000c5454 	.word	0x000c5454

000b65cc <_ZN10nodeIDData14set_nodeIDJsonEPKc>:

bool nodeIDData::set_nodeIDJson(const char *str) {
   b65cc:	460b      	mov	r3, r1
	return setValueString(offsetof(NodeData, nodeIDJson), sizeof(NodeData::nodeIDJson), str);
   b65ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b65d2:	2110      	movs	r1, #16
   b65d4:	f006 b98a 	b.w	bc8ec <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc>

000b65d8 <_ZN10nodeIDData12resetNodeIDsEv>:
void nodeIDData::resetNodeIDs() {
   b65d8:	b510      	push	{r4, lr}
    Log.info("Resettig NodeID config to: %s", blank.c_str());
   b65da:	4c14      	ldr	r4, [pc, #80]	; (b662c <_ZN10nodeIDData12resetNodeIDsEv+0x54>)
    String blank = "{\"nodes\":[]}";
   b65dc:	4914      	ldr	r1, [pc, #80]	; (b6630 <_ZN10nodeIDData12resetNodeIDsEv+0x58>)
void nodeIDData::resetNodeIDs() {
   b65de:	b088      	sub	sp, #32
    String blank = "{\"nodes\":[]}";
   b65e0:	4668      	mov	r0, sp
   b65e2:	f009 fa00 	bl	bf9e6 <_ZN6StringC1EPK19__FlashStringHelper>
    Log.info("Resettig NodeID config to: %s", blank.c_str());
   b65e6:	9a00      	ldr	r2, [sp, #0]
   b65e8:	4912      	ldr	r1, [pc, #72]	; (b6634 <_ZN10nodeIDData12resetNodeIDsEv+0x5c>)
   b65ea:	4620      	mov	r0, r4
   b65ec:	f7fd fda7 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    nodeDatabase.set_nodeIDJson(blank);
   b65f0:	f7ff ffb0 	bl	b6554 <_ZN10nodeIDData8instanceEv>
   b65f4:	9900      	ldr	r1, [sp, #0]
   b65f6:	f7ff ffe9 	bl	b65cc <_ZN10nodeIDData14set_nodeIDJsonEPKc>
    nodeDatabase.flush(true);
   b65fa:	f7ff ffab 	bl	b6554 <_ZN10nodeIDData8instanceEv>
   b65fe:	6803      	ldr	r3, [r0, #0]
   b6600:	2101      	movs	r1, #1
   b6602:	68db      	ldr	r3, [r3, #12]
   b6604:	4798      	blx	r3
    Log.info("NodeID data is now %s", nodeDatabase.get_nodeIDJson().c_str());
   b6606:	f7ff ffa5 	bl	b6554 <_ZN10nodeIDData8instanceEv>
   b660a:	4601      	mov	r1, r0
   b660c:	a804      	add	r0, sp, #16
   b660e:	f7ff ffcb 	bl	b65a8 <_ZNK10nodeIDData14get_nodeIDJsonEv>
   b6612:	9a04      	ldr	r2, [sp, #16]
   b6614:	4908      	ldr	r1, [pc, #32]	; (b6638 <_ZN10nodeIDData12resetNodeIDsEv+0x60>)
   b6616:	4620      	mov	r0, r4
   b6618:	f7fd fd91 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b661c:	a804      	add	r0, sp, #16
   b661e:	f009 f997 	bl	bf950 <_ZN6StringD1Ev>
    String blank = "{\"nodes\":[]}";
   b6622:	4668      	mov	r0, sp
   b6624:	f009 f994 	bl	bf950 <_ZN6StringD1Ev>
}
   b6628:	b008      	add	sp, #32
   b662a:	bd10      	pop	{r4, pc}
   b662c:	2003e650 	.word	0x2003e650
   b6630:	000c413c 	.word	0x000c413c
   b6634:	000c4149 	.word	0x000c4149
   b6638:	000c4167 	.word	0x000c4167

000b663c <_ZN10nodeIDData10initializeEv>:
void nodeIDData::initialize() {
   b663c:	b570      	push	{r4, r5, r6, lr}
    Log.info("Erasing FRAM region");
   b663e:	4910      	ldr	r1, [pc, #64]	; (b6680 <_ZN10nodeIDData10initializeEv+0x44>)
void nodeIDData::initialize() {
   b6640:	4604      	mov	r4, r0
    Log.info("Erasing FRAM region");
   b6642:	4810      	ldr	r0, [pc, #64]	; (b6684 <_ZN10nodeIDData10initializeEv+0x48>)
   b6644:	f7fd fd7b 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b6648:	25c8      	movs	r5, #200	; 0xc8
        fram.writeData(i+200,(uint8_t *)0xFF,2);
   b664a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b664c:	6803      	ldr	r3, [r0, #0]
   b664e:	4629      	mov	r1, r5
   b6650:	68de      	ldr	r6, [r3, #12]
   b6652:	22ff      	movs	r2, #255	; 0xff
   b6654:	2302      	movs	r3, #2
    for (unsigned int i=0; i < sizeof(NodeData); i++) {
   b6656:	3501      	adds	r5, #1
        fram.writeData(i+200,(uint8_t *)0xFF,2);
   b6658:	47b0      	blx	r6
    for (unsigned int i=0; i < sizeof(NodeData); i++) {
   b665a:	f5b5 6f9b 	cmp.w	r5, #1240	; 0x4d8
   b665e:	d1f4      	bne.n	b664a <_ZN10nodeIDData10initializeEv+0xe>
    Log.info("Initializing data");
   b6660:	4909      	ldr	r1, [pc, #36]	; (b6688 <_ZN10nodeIDData10initializeEv+0x4c>)
   b6662:	4808      	ldr	r0, [pc, #32]	; (b6684 <_ZN10nodeIDData10initializeEv+0x48>)
   b6664:	f7fd fd6b 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    PersistentDataFRAM::initialize();
   b6668:	4620      	mov	r0, r4
   b666a:	f006 f9d5 	bl	bca18 <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>
    nodeIDData::resetNodeIDs();
   b666e:	4620      	mov	r0, r4
   b6670:	f7ff ffb2 	bl	b65d8 <_ZN10nodeIDData12resetNodeIDsEv>
    updateHash();                                       // If you manually update fields here, be sure to update the hash
   b6674:	4620      	mov	r0, r4
}
   b6676:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    updateHash();                                       // If you manually update fields here, be sure to update the hash
   b667a:	f006 b92b 	b.w	bc8d4 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
   b667e:	bf00      	nop
   b6680:	000c417d 	.word	0x000c417d
   b6684:	2003e650 	.word	0x2003e650
   b6688:	000c4191 	.word	0x000c4191

000b668c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>:
        T getValue(size_t offset) const {
   b668c:	b538      	push	{r3, r4, r5, lr}
   b668e:	4604      	mov	r4, r0
   b6690:	3004      	adds	r0, #4
   b6692:	460d      	mov	r5, r1
   b6694:	f7ff fdec 	bl	b6270 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6698:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b669a:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b669c:	3b01      	subs	r3, #1
   b669e:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b66a0:	bf26      	itte	cs
   b66a2:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b66a4:	5d5d      	ldrbcs	r5, [r3, r5]
            T result = 0;
   b66a6:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b66a8:	f006 fa24 	bl	bcaf4 <os_mutex_recursive_unlock>
        }
   b66ac:	4628      	mov	r0, r5
   b66ae:	bd38      	pop	{r3, r4, r5, pc}

000b66b0 <_ZNK13sysStatusData14get_nodeNumberEv>:
uint8_t sysStatusData::get_nodeNumber() const {
   b66b0:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, nodeNumber));
   b66b2:	2110      	movs	r1, #16
   b66b4:	f7ff ffea 	bl	b668c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b66b8:	bd08      	pop	{r3, pc}

000b66ba <_ZNK13sysStatusData20get_connectivityModeEv>:
uint8_t sysStatusData::get_connectivityMode() const {
   b66ba:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, connectivityMode));
   b66bc:	2114      	movs	r1, #20
   b66be:	f7ff ffe5 	bl	b668c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b66c2:	bd08      	pop	{r3, pc}

000b66c4 <_ZNK13sysStatusData14get_resetCountEv>:
uint8_t sysStatusData::get_resetCount() const {
   b66c4:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, resetCount));
   b66c6:	2115      	movs	r1, #21
   b66c8:	f7ff ffe0 	bl	b668c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b66cc:	bd08      	pop	{r3, pc}

000b66ce <_ZNK13sysStatusData16get_messageCountEv>:
uint8_t sysStatusData::get_messageCount() const {
   b66ce:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, messageCount));
   b66d0:	2116      	movs	r1, #22
   b66d2:	f7ff ffdb 	bl	b668c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b66d6:	bd08      	pop	{r3, pc}

000b66d8 <_ZNK13sysStatusData12get_openTimeEv>:
uint8_t sysStatusData::get_openTime() const {
   b66d8:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, openTime));
   b66da:	2138      	movs	r1, #56	; 0x38
   b66dc:	f7ff ffd6 	bl	b668c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b66e0:	bd08      	pop	{r3, pc}

000b66e2 <_ZNK13sysStatusData13get_closeTimeEv>:
uint8_t sysStatusData::get_closeTime() const {
   b66e2:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, closeTime));
   b66e4:	2139      	movs	r1, #57	; 0x39
   b66e6:	f7ff ffd1 	bl	b668c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b66ea:	bd08      	pop	{r3, pc}

000b66ec <_ZNK13sysStatusData14get_sensorTypeEv>:
uint8_t sysStatusData::get_sensorType() const {
   b66ec:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(SysData, sensorType));
   b66ee:	213b      	movs	r1, #59	; 0x3b
   b66f0:	f7ff ffcc 	bl	b668c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b66f4:	bd08      	pop	{r3, pc}

000b66f6 <_ZNK17currentStatusData14get_nodeNumberEv>:
uint8_t currentStatusData::get_nodeNumber() const {
   b66f6:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, nodeNumber));
   b66f8:	2110      	movs	r1, #16
   b66fa:	f7ff ffc7 	bl	b668c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b66fe:	bd08      	pop	{r3, pc}

000b6700 <_ZNK17currentStatusData18get_tempNodeNumberEv>:
uint8_t currentStatusData::get_tempNodeNumber() const {
   b6700:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, tempNodeNumber));
   b6702:	2111      	movs	r1, #17
   b6704:	f7ff ffc2 	bl	b668c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b6708:	bd08      	pop	{r3, pc}

000b670a <_ZNK17currentStatusData17get_internalTempCEv>:
uint8_t currentStatusData::get_internalTempC() const {
   b670a:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, internalTempC));
   b670c:	2114      	movs	r1, #20
   b670e:	f7ff ffbd 	bl	b668c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b6712:	bd08      	pop	{r3, pc}

000b6714 <_ZNK17currentStatusData16get_batteryStateEv>:
uint8_t currentStatusData::get_batteryState() const {
   b6714:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, batteryState));
   b6716:	2120      	movs	r1, #32
   b6718:	f7ff ffb8 	bl	b668c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b671c:	bd08      	pop	{r3, pc}

000b671e <_ZNK17currentStatusData14get_resetCountEv>:
uint8_t currentStatusData::get_resetCount() const {
   b671e:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, resetCount));
   b6720:	2121      	movs	r1, #33	; 0x21
   b6722:	f7ff ffb3 	bl	b668c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b6726:	bd08      	pop	{r3, pc}

000b6728 <_ZNK17currentStatusData16get_messageCountEv>:
uint8_t currentStatusData::get_messageCount() const {
   b6728:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, messageCount));
   b672a:	2124      	movs	r1, #36	; 0x24
   b672c:	f7ff ffae 	bl	b668c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b6730:	bd08      	pop	{r3, pc}

000b6732 <_ZNK17currentStatusData16get_successCountEv>:
uint8_t currentStatusData::get_successCount() const {
   b6732:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, successCount));
   b6734:	2125      	movs	r1, #37	; 0x25
   b6736:	f7ff ffa9 	bl	b668c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b673a:	bd08      	pop	{r3, pc}

000b673c <_ZNK17currentStatusData17get_alertCodeNodeEv>:
uint8_t currentStatusData::get_alertCodeNode() const {
   b673c:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, alertCodeNode));
   b673e:	2134      	movs	r1, #52	; 0x34
   b6740:	f7ff ffa4 	bl	b668c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b6744:	bd08      	pop	{r3, pc}

000b6746 <_ZNK17currentStatusData14get_sensorTypeEv>:
uint8_t currentStatusData::get_sensorType() const {
   b6746:	b508      	push	{r3, lr}
    return getValue<uint8_t>(offsetof(CurrentData, sensorType));
   b6748:	2141      	movs	r1, #65	; 0x41
   b674a:	f7ff ff9f 	bl	b668c <_ZNK15StorageHelperRK18PersistentDataBase8getValueIhEET_j>
}
   b674e:	bd08      	pop	{r3, pc}

000b6750 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>:
        void setValue(size_t offset, T value)  {
   b6750:	b570      	push	{r4, r5, r6, lr}
   b6752:	4604      	mov	r4, r0
   b6754:	3004      	adds	r0, #4
   b6756:	460d      	mov	r5, r1
   b6758:	4616      	mov	r6, r2
   b675a:	f7ff fd89 	bl	b6270 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b675e:	68e3      	ldr	r3, [r4, #12]
   b6760:	3b01      	subs	r3, #1
   b6762:	42ab      	cmp	r3, r5
   b6764:	d307      	bcc.n	b6776 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_+0x26>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b6766:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b6768:	5d5a      	ldrb	r2, [r3, r5]
   b676a:	42b2      	cmp	r2, r6
   b676c:	d003      	beq.n	b6776 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_+0x26>
                        *(T *)p = value;
   b676e:	555e      	strb	r6, [r3, r5]
                        updateHash();
   b6770:	4620      	mov	r0, r4
   b6772:	f006 f8af 	bl	bc8d4 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b6776:	6860      	ldr	r0, [r4, #4]
        }
   b6778:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b677c:	f006 b9ba 	b.w	bcaf4 <os_mutex_recursive_unlock>

000b6780 <_ZN13sysStatusData14set_nodeNumberEh>:
void sysStatusData::set_nodeNumber(uint8_t value) {
   b6780:	b508      	push	{r3, lr}
   b6782:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, nodeNumber), value);
   b6784:	2110      	movs	r1, #16
   b6786:	f7ff ffe3 	bl	b6750 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b678a:	bd08      	pop	{r3, pc}

000b678c <_ZN13sysStatusData21set_structuresVersionEh>:
void sysStatusData::set_structuresVersion(uint8_t value) {
   b678c:	b508      	push	{r3, lr}
   b678e:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, structuresVersion), value);
   b6790:	2111      	movs	r1, #17
   b6792:	f7ff ffdd 	bl	b6750 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b6796:	bd08      	pop	{r3, pc}

000b6798 <_ZN13sysStatusData20set_connectivityModeEh>:
void sysStatusData::set_connectivityMode(uint8_t value) {
   b6798:	b508      	push	{r3, lr}
   b679a:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, connectivityMode), value);
   b679c:	2114      	movs	r1, #20
   b679e:	f7ff ffd7 	bl	b6750 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b67a2:	bd08      	pop	{r3, pc}

000b67a4 <_ZN13sysStatusData14set_resetCountEh>:
void sysStatusData::set_resetCount(uint8_t value) {
   b67a4:	b508      	push	{r3, lr}
   b67a6:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, resetCount), value);
   b67a8:	2115      	movs	r1, #21
   b67aa:	f7ff ffd1 	bl	b6750 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b67ae:	bd08      	pop	{r3, pc}

000b67b0 <_ZN13sysStatusData16set_messageCountEh>:
void sysStatusData::set_messageCount(uint8_t value) {
   b67b0:	b508      	push	{r3, lr}
   b67b2:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, messageCount), value);
   b67b4:	2116      	movs	r1, #22
   b67b6:	f7ff ffcb 	bl	b6750 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b67ba:	bd08      	pop	{r3, pc}

000b67bc <_ZN13sysStatusData20set_alertCodeGatewayEh>:
void sysStatusData::set_alertCodeGateway(uint8_t value) {
   b67bc:	b508      	push	{r3, lr}
   b67be:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, alertCodeGateway), value);
   b67c0:	212e      	movs	r1, #46	; 0x2e
   b67c2:	f7ff ffc5 	bl	b6750 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b67c6:	bd08      	pop	{r3, pc}

000b67c8 <_ZN13sysStatusData12set_openTimeEh>:
void sysStatusData::set_openTime(uint8_t value) {
   b67c8:	b508      	push	{r3, lr}
   b67ca:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, openTime), value);
   b67cc:	2138      	movs	r1, #56	; 0x38
   b67ce:	f7ff ffbf 	bl	b6750 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b67d2:	bd08      	pop	{r3, pc}

000b67d4 <_ZN13sysStatusData13set_closeTimeEh>:
void sysStatusData::set_closeTime(uint8_t value) {
   b67d4:	b508      	push	{r3, lr}
   b67d6:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(SysData, closeTime), value);
   b67d8:	2139      	movs	r1, #57	; 0x39
   b67da:	f7ff ffb9 	bl	b6750 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b67de:	bd08      	pop	{r3, pc}

000b67e0 <_ZN17currentStatusData14set_nodeNumberEh>:
void currentStatusData::set_nodeNumber(uint8_t value) {
   b67e0:	b508      	push	{r3, lr}
   b67e2:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, nodeNumber), value);
   b67e4:	2110      	movs	r1, #16
   b67e6:	f7ff ffb3 	bl	b6750 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b67ea:	bd08      	pop	{r3, pc}

000b67ec <_ZN17currentStatusData18set_tempNodeNumberEh>:
void currentStatusData::set_tempNodeNumber(uint8_t value) {
   b67ec:	b508      	push	{r3, lr}
   b67ee:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, tempNodeNumber), value);
   b67f0:	2111      	movs	r1, #17
   b67f2:	f7ff ffad 	bl	b6750 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b67f6:	bd08      	pop	{r3, pc}

000b67f8 <_ZN17currentStatusData17set_internalTempCEh>:
void currentStatusData::set_internalTempC(uint8_t value) {
   b67f8:	b508      	push	{r3, lr}
   b67fa:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, internalTempC), value);
   b67fc:	2114      	movs	r1, #20
   b67fe:	f7ff ffa7 	bl	b6750 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b6802:	bd08      	pop	{r3, pc}

000b6804 <_ZN17currentStatusData16set_batteryStateEh>:
void currentStatusData::set_batteryState(uint8_t value) {
   b6804:	b508      	push	{r3, lr}
   b6806:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, batteryState), value);
   b6808:	2120      	movs	r1, #32
   b680a:	f7ff ffa1 	bl	b6750 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b680e:	bd08      	pop	{r3, pc}

000b6810 <_ZN17currentStatusData14set_resetCountEh>:
void currentStatusData::set_resetCount(uint8_t value) {
   b6810:	b508      	push	{r3, lr}
   b6812:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, resetCount), value);
   b6814:	2121      	movs	r1, #33	; 0x21
   b6816:	f7ff ff9b 	bl	b6750 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b681a:	bd08      	pop	{r3, pc}

000b681c <_ZN17currentStatusData16set_messageCountEh>:
void currentStatusData::set_messageCount(uint8_t value) {
   b681c:	b508      	push	{r3, lr}
   b681e:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, messageCount), value);
   b6820:	2124      	movs	r1, #36	; 0x24
   b6822:	f7ff ff95 	bl	b6750 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b6826:	bd08      	pop	{r3, pc}

000b6828 <_ZN17currentStatusData16set_successCountEh>:
void currentStatusData::set_successCount(uint8_t value) {
   b6828:	b508      	push	{r3, lr}
   b682a:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, successCount), value);
   b682c:	2125      	movs	r1, #37	; 0x25
   b682e:	f7ff ff8f 	bl	b6750 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b6832:	bd08      	pop	{r3, pc}

000b6834 <_ZN17currentStatusData17set_alertCodeNodeEh>:
void currentStatusData::set_alertCodeNode(uint8_t value) {
   b6834:	b508      	push	{r3, lr}
   b6836:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, alertCodeNode), value);
   b6838:	2134      	movs	r1, #52	; 0x34
   b683a:	f7ff ff89 	bl	b6750 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b683e:	bd08      	pop	{r3, pc}

000b6840 <_ZN17currentStatusData14set_sensorTypeEh>:
void currentStatusData::set_sensorType(uint8_t value) {
   b6840:	b508      	push	{r3, lr}
   b6842:	460a      	mov	r2, r1
    setValue<uint8_t>(offsetof(CurrentData, sensorType), value);
   b6844:	2141      	movs	r1, #65	; 0x41
   b6846:	f7ff ff83 	bl	b6750 <_ZN15StorageHelperRK18PersistentDataBase8setValueIhEEvjT_>
}
   b684a:	bd08      	pop	{r3, pc}

000b684c <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>:
        T getValue(size_t offset) const {
   b684c:	b538      	push	{r3, r4, r5, lr}
   b684e:	4604      	mov	r4, r0
   b6850:	3004      	adds	r0, #4
   b6852:	460d      	mov	r5, r1
   b6854:	f7ff fd0c 	bl	b6270 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6858:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b685a:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b685c:	3b02      	subs	r3, #2
   b685e:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b6860:	bf26      	itte	cs
   b6862:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b6864:	5b5d      	ldrhcs	r5, [r3, r5]
            T result = 0;
   b6866:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b6868:	f006 f944 	bl	bcaf4 <os_mutex_recursive_unlock>
        }
   b686c:	4628      	mov	r0, r5
   b686e:	bd38      	pop	{r3, r4, r5, pc}

000b6870 <_ZNK13sysStatusData15get_magicNumberEv>:
uint16_t sysStatusData::get_magicNumber() const {
   b6870:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData, magicNumber));
   b6872:	2112      	movs	r1, #18
   b6874:	f7ff ffea 	bl	b684c <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b6878:	bd08      	pop	{r3, pc}

000b687a <_ZNK13sysStatusData20get_frequencyMinutesEv>:
uint16_t sysStatusData::get_frequencyMinutes() const {
   b687a:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData,frequencyMinutes));
   b687c:	212a      	movs	r1, #42	; 0x2a
   b687e:	f7ff ffe5 	bl	b684c <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b6882:	bd08      	pop	{r3, pc}

000b6884 <_ZN13sysStatusData8validateEj>:
bool sysStatusData::validate(size_t dataSize) {
   b6884:	b513      	push	{r0, r1, r4, lr}
    bool valid = PersistentDataFRAM::validate(dataSize);
   b6886:	f006 f861 	bl	bc94c <_ZN15StorageHelperRK18PersistentDataBase8validateEj>
    if (valid) {
   b688a:	4604      	mov	r4, r0
   b688c:	b1a0      	cbz	r0, b68b8 <_ZN13sysStatusData8validateEj+0x34>
        if (sysStatus.get_openTime() > 12 || sysStatus.get_closeTime() <12) {
   b688e:	f7ff fd93 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b6892:	f7ff ff21 	bl	b66d8 <_ZNK13sysStatusData12get_openTimeEv>
   b6896:	280c      	cmp	r0, #12
   b6898:	d917      	bls.n	b68ca <_ZN13sysStatusData8validateEj+0x46>
            Log.info("data not valid openTime=%d and closeTime=%d", sysStatus.get_openTime(), sysStatus.get_closeTime());
   b689a:	f7ff fd8d 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b689e:	f7ff ff1b 	bl	b66d8 <_ZNK13sysStatusData12get_openTimeEv>
   b68a2:	9001      	str	r0, [sp, #4]
   b68a4:	f7ff fd88 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b68a8:	f7ff ff1b 	bl	b66e2 <_ZNK13sysStatusData13get_closeTimeEv>
   b68ac:	9a01      	ldr	r2, [sp, #4]
   b68ae:	491b      	ldr	r1, [pc, #108]	; (b691c <_ZN13sysStatusData8validateEj+0x98>)
   b68b0:	4603      	mov	r3, r0
   b68b2:	481b      	ldr	r0, [pc, #108]	; (b6920 <_ZN13sysStatusData8validateEj+0x9c>)
   b68b4:	f7fd fc43 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    if (!valid) Log.info("sysStatus data is %s",(valid) ? "valid": "not valid");
   b68b8:	4a1a      	ldr	r2, [pc, #104]	; (b6924 <_ZN13sysStatusData8validateEj+0xa0>)
   b68ba:	491b      	ldr	r1, [pc, #108]	; (b6928 <_ZN13sysStatusData8validateEj+0xa4>)
   b68bc:	4818      	ldr	r0, [pc, #96]	; (b6920 <_ZN13sysStatusData8validateEj+0x9c>)
   b68be:	f7fd fc3e 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b68c2:	2400      	movs	r4, #0
}
   b68c4:	4620      	mov	r0, r4
   b68c6:	b002      	add	sp, #8
   b68c8:	bd10      	pop	{r4, pc}
        if (sysStatus.get_openTime() > 12 || sysStatus.get_closeTime() <12) {
   b68ca:	f7ff fd75 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b68ce:	f7ff ff08 	bl	b66e2 <_ZNK13sysStatusData13get_closeTimeEv>
   b68d2:	280b      	cmp	r0, #11
   b68d4:	d9e1      	bls.n	b689a <_ZN13sysStatusData8validateEj+0x16>
        else if (sysStatus.get_frequencyMinutes() <=0 || sysStatus.get_frequencyMinutes() > 60) {
   b68d6:	f7ff fd6f 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b68da:	f7ff ffce 	bl	b687a <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b68de:	b190      	cbz	r0, b6906 <_ZN13sysStatusData8validateEj+0x82>
   b68e0:	f7ff fd6a 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b68e4:	f7ff ffc9 	bl	b687a <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b68e8:	283c      	cmp	r0, #60	; 0x3c
   b68ea:	d80c      	bhi.n	b6906 <_ZN13sysStatusData8validateEj+0x82>
        else if (sysStatus.get_nodeNumber() != 0) {
   b68ec:	f7ff fd64 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b68f0:	f7ff fede 	bl	b66b0 <_ZNK13sysStatusData14get_nodeNumberEv>
   b68f4:	2800      	cmp	r0, #0
   b68f6:	d0e5      	beq.n	b68c4 <_ZN13sysStatusData8validateEj+0x40>
            Log.info("data not valid node number =%d", sysStatus.get_nodeNumber());
   b68f8:	f7ff fd5e 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b68fc:	f7ff fed8 	bl	b66b0 <_ZNK13sysStatusData14get_nodeNumberEv>
   b6900:	490a      	ldr	r1, [pc, #40]	; (b692c <_ZN13sysStatusData8validateEj+0xa8>)
   b6902:	4602      	mov	r2, r0
   b6904:	e005      	b.n	b6912 <_ZN13sysStatusData8validateEj+0x8e>
            Log.info("data not valid frequency minutes =%d", sysStatus.get_frequencyMinutes());
   b6906:	f7ff fd57 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b690a:	f7ff ffb6 	bl	b687a <_ZNK13sysStatusData20get_frequencyMinutesEv>
   b690e:	4908      	ldr	r1, [pc, #32]	; (b6930 <_ZN13sysStatusData8validateEj+0xac>)
   b6910:	4602      	mov	r2, r0
            Log.info("data not valid node number =%d", sysStatus.get_nodeNumber());
   b6912:	4803      	ldr	r0, [pc, #12]	; (b6920 <_ZN13sysStatusData8validateEj+0x9c>)
   b6914:	f7fd fc13 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    if (!valid) Log.info("sysStatus data is %s",(valid) ? "valid": "not valid");
   b6918:	e7ce      	b.n	b68b8 <_ZN13sysStatusData8validateEj+0x34>
   b691a:	bf00      	nop
   b691c:	000c41a3 	.word	0x000c41a3
   b6920:	2003e650 	.word	0x2003e650
   b6924:	000c4120 	.word	0x000c4120
   b6928:	000c4213 	.word	0x000c4213
   b692c:	000c41f4 	.word	0x000c41f4
   b6930:	000c41cf 	.word	0x000c41cf

000b6934 <_ZNK13sysStatusData27get_updatedFrequencyMinutesEv>:
uint16_t sysStatusData::get_updatedFrequencyMinutes() const {
   b6934:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(SysData,updatedFrequencyMinutes));
   b6936:	212c      	movs	r1, #44	; 0x2c
   b6938:	f7ff ff88 	bl	b684c <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b693c:	bd08      	pop	{r3, pc}

000b693e <_ZNK17currentStatusData10get_nodeIDEv>:
uint16_t currentStatusData::get_nodeID() const {
   b693e:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, nodeID));
   b6940:	2112      	movs	r1, #18
   b6942:	f7ff ff83 	bl	b684c <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b6946:	bd08      	pop	{r3, pc}

000b6948 <_ZNK17currentStatusData15get_hourlyCountEv>:
uint16_t currentStatusData::get_hourlyCount() const {
   b6948:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, hourlyCount));
   b694a:	2130      	movs	r1, #48	; 0x30
   b694c:	f7ff ff7e 	bl	b684c <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b6950:	bd08      	pop	{r3, pc}
	...

000b6954 <_ZN17currentStatusData8validateEj>:
bool currentStatusData::validate(size_t dataSize) {
   b6954:	b510      	push	{r4, lr}
    bool valid = PersistentDataFRAM::validate(dataSize);
   b6956:	f005 fff9 	bl	bc94c <_ZN15StorageHelperRK18PersistentDataBase8validateEj>
    if (valid) {
   b695a:	4604      	mov	r4, r0
   b695c:	b198      	cbz	r0, b6986 <_ZN17currentStatusData8validateEj+0x32>
        if (current.get_hourlyCount() < 0 || current.get_hourlyCount() > 1024) {
   b695e:	f7ff fd73 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b6962:	f7ff fff1 	bl	b6948 <_ZNK17currentStatusData15get_hourlyCountEv>
   b6966:	f7ff fd6f 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b696a:	f7ff ffed 	bl	b6948 <_ZNK17currentStatusData15get_hourlyCountEv>
   b696e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   b6972:	d90e      	bls.n	b6992 <_ZN17currentStatusData8validateEj+0x3e>
            Log.info("current data not valid hourlyCount=%d" , current.get_hourlyCount());
   b6974:	f7ff fd68 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b6978:	f7ff ffe6 	bl	b6948 <_ZNK17currentStatusData15get_hourlyCountEv>
   b697c:	4906      	ldr	r1, [pc, #24]	; (b6998 <_ZN17currentStatusData8validateEj+0x44>)
   b697e:	4602      	mov	r2, r0
   b6980:	4806      	ldr	r0, [pc, #24]	; (b699c <_ZN17currentStatusData8validateEj+0x48>)
   b6982:	f7fd fbdc 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    if (!valid) Log.info("current data is %s",(valid) ? "valid": "not valid");
   b6986:	4a06      	ldr	r2, [pc, #24]	; (b69a0 <_ZN17currentStatusData8validateEj+0x4c>)
   b6988:	4906      	ldr	r1, [pc, #24]	; (b69a4 <_ZN17currentStatusData8validateEj+0x50>)
   b698a:	4804      	ldr	r0, [pc, #16]	; (b699c <_ZN17currentStatusData8validateEj+0x48>)
   b698c:	f7fd fbd7 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b6990:	2400      	movs	r4, #0
}
   b6992:	4620      	mov	r0, r4
   b6994:	bd10      	pop	{r4, pc}
   b6996:	bf00      	nop
   b6998:	000c4228 	.word	0x000c4228
   b699c:	2003e650 	.word	0x2003e650
   b69a0:	000c4120 	.word	0x000c4120
   b69a4:	000c424e 	.word	0x000c424e

000b69a8 <_ZNK17currentStatusData14get_dailyCountEv>:
uint16_t currentStatusData::get_dailyCount() const {
   b69a8:	b508      	push	{r3, lr}
    return getValue<uint16_t>(offsetof(CurrentData, dailyCount));
   b69aa:	2132      	movs	r1, #50	; 0x32
   b69ac:	f7ff ff4e 	bl	b684c <_ZNK15StorageHelperRK18PersistentDataBase8getValueItEET_j>
}
   b69b0:	bd08      	pop	{r3, pc}

000b69b2 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>:
        void setValue(size_t offset, T value)  {
   b69b2:	b570      	push	{r4, r5, r6, lr}
   b69b4:	4604      	mov	r4, r0
   b69b6:	3004      	adds	r0, #4
   b69b8:	460d      	mov	r5, r1
   b69ba:	4616      	mov	r6, r2
   b69bc:	f7ff fc58 	bl	b6270 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b69c0:	68e3      	ldr	r3, [r4, #12]
   b69c2:	3b02      	subs	r3, #2
   b69c4:	42ab      	cmp	r3, r5
   b69c6:	d307      	bcc.n	b69d8 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_+0x26>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b69c8:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b69ca:	5b5a      	ldrh	r2, [r3, r5]
   b69cc:	42b2      	cmp	r2, r6
   b69ce:	d003      	beq.n	b69d8 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_+0x26>
                        *(T *)p = value;
   b69d0:	535e      	strh	r6, [r3, r5]
                        updateHash();
   b69d2:	4620      	mov	r0, r4
   b69d4:	f005 ff7e 	bl	bc8d4 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b69d8:	6860      	ldr	r0, [r4, #4]
        }
   b69da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b69de:	f006 b889 	b.w	bcaf4 <os_mutex_recursive_unlock>

000b69e2 <_ZN13sysStatusData15set_magicNumberEt>:
void sysStatusData::set_magicNumber(uint16_t value) {
   b69e2:	b508      	push	{r3, lr}
   b69e4:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, magicNumber), value);
   b69e6:	2112      	movs	r1, #18
   b69e8:	f7ff ffe3 	bl	b69b2 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b69ec:	bd08      	pop	{r3, pc}

000b69ee <_ZN13sysStatusData26set_lastConnectionDurationEt>:
void sysStatusData::set_lastConnectionDuration(uint16_t value) {
   b69ee:	b508      	push	{r3, lr}
   b69f0:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData,lastConnectionDuration), value);
   b69f2:	2128      	movs	r1, #40	; 0x28
   b69f4:	f7ff ffdd 	bl	b69b2 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b69f8:	bd08      	pop	{r3, pc}

000b69fa <_ZN13sysStatusData20set_frequencyMinutesEt>:
void sysStatusData::set_frequencyMinutes(uint16_t value) {
   b69fa:	b508      	push	{r3, lr}
   b69fc:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, frequencyMinutes), value);
   b69fe:	212a      	movs	r1, #42	; 0x2a
   b6a00:	f7ff ffd7 	bl	b69b2 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b6a04:	bd08      	pop	{r3, pc}

000b6a06 <_ZN13sysStatusData27set_updatedFrequencyMinutesEt>:
void sysStatusData::set_updatedFrequencyMinutes(uint16_t value) {
   b6a06:	b508      	push	{r3, lr}
   b6a08:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(SysData, updatedFrequencyMinutes), value);
   b6a0a:	212c      	movs	r1, #44	; 0x2c
   b6a0c:	f7ff ffd1 	bl	b69b2 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b6a10:	bd08      	pop	{r3, pc}

000b6a12 <_ZN17currentStatusData10set_nodeIDEt>:
void currentStatusData::set_nodeID(uint16_t value) {
   b6a12:	b508      	push	{r3, lr}
   b6a14:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, nodeID), value);
   b6a16:	2112      	movs	r1, #18
   b6a18:	f7ff ffcb 	bl	b69b2 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b6a1c:	bd08      	pop	{r3, pc}

000b6a1e <_ZN17currentStatusData15set_hourlyCountEt>:
void currentStatusData::set_hourlyCount(uint16_t value) {
   b6a1e:	b508      	push	{r3, lr}
   b6a20:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, hourlyCount), value);
   b6a22:	2130      	movs	r1, #48	; 0x30
   b6a24:	f7ff ffc5 	bl	b69b2 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b6a28:	bd08      	pop	{r3, pc}

000b6a2a <_ZN17currentStatusData14set_dailyCountEt>:
void currentStatusData::set_dailyCount(uint16_t value) {
   b6a2a:	b508      	push	{r3, lr}
   b6a2c:	460a      	mov	r2, r1
    setValue<uint16_t>(offsetof(CurrentData, dailyCount), value);
   b6a2e:	2132      	movs	r1, #50	; 0x32
   b6a30:	f7ff ffbf 	bl	b69b2 <_ZN15StorageHelperRK18PersistentDataBase8setValueItEEvjT_>
}
   b6a34:	bd08      	pop	{r3, pc}

000b6a36 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>:
        T getValue(size_t offset) const {
   b6a36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6a38:	4604      	mov	r4, r0
   b6a3a:	3004      	adds	r0, #4
   b6a3c:	460d      	mov	r5, r1
   b6a3e:	f7ff fc17 	bl	b6270 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6a42:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b6a44:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b6a46:	3b08      	subs	r3, #8
   b6a48:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b6a4a:	bf23      	ittte	cs
   b6a4c:	68a1      	ldrcs	r1, [r4, #8]
                    result = *(const T *)p;
   b6a4e:	1949      	addcs	r1, r1, r5
   b6a50:	e9d1 6700 	ldrdcs	r6, r7, [r1]
            T result = 0;
   b6a54:	2600      	movcc	r6, #0
   b6a56:	bf38      	it	cc
   b6a58:	2700      	movcc	r7, #0
            os_mutex_recursive_unlock(handle_); 
   b6a5a:	f006 f84b 	bl	bcaf4 <os_mutex_recursive_unlock>
        }
   b6a5e:	4630      	mov	r0, r6
   b6a60:	4639      	mov	r1, r7
   b6a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6a64 <_ZNK13sysStatusData18get_lastConnectionEv>:
time_t sysStatusData::get_lastConnection() const {
   b6a64:	b508      	push	{r3, lr}
    return getValue<time_t>(offsetof(SysData, lastConnection));
   b6a66:	2120      	movs	r1, #32
   b6a68:	f7ff ffe5 	bl	b6a36 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIxEET_j>
}
   b6a6c:	bd08      	pop	{r3, pc}

000b6a6e <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>:
        void setValue(size_t offset, T value)  {
   b6a6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6a70:	4604      	mov	r4, r0
   b6a72:	3004      	adds	r0, #4
   b6a74:	460d      	mov	r5, r1
   b6a76:	461e      	mov	r6, r3
   b6a78:	4617      	mov	r7, r2
   b6a7a:	f7ff fbf9 	bl	b6270 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6a7e:	68e3      	ldr	r3, [r4, #12]
   b6a80:	3b08      	subs	r3, #8
   b6a82:	42ab      	cmp	r3, r5
   b6a84:	d30c      	bcc.n	b6aa0 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_+0x32>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b6a86:	68a3      	ldr	r3, [r4, #8]
                    p += offset;
   b6a88:	195a      	adds	r2, r3, r5
                    if (oldValue != value) {
   b6a8a:	5958      	ldr	r0, [r3, r5]
   b6a8c:	6851      	ldr	r1, [r2, #4]
   b6a8e:	42b1      	cmp	r1, r6
   b6a90:	bf08      	it	eq
   b6a92:	42b8      	cmpeq	r0, r7
   b6a94:	d004      	beq.n	b6aa0 <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_+0x32>
                        *(T *)p = value;
   b6a96:	515f      	str	r7, [r3, r5]
                        updateHash();
   b6a98:	4620      	mov	r0, r4
                        *(T *)p = value;
   b6a9a:	6056      	str	r6, [r2, #4]
                        updateHash();
   b6a9c:	f005 ff1a 	bl	bc8d4 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b6aa0:	6860      	ldr	r0, [r4, #4]
        }
   b6aa2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            os_mutex_recursive_unlock(handle_); 
   b6aa6:	f006 b825 	b.w	bcaf4 <os_mutex_recursive_unlock>

000b6aaa <_ZN13sysStatusData20set_lastHookResponseEx>:
void sysStatusData::set_lastHookResponse(time_t value) {
   b6aaa:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(SysData, lastHookResponse), value);
   b6aac:	2118      	movs	r1, #24
   b6aae:	f7ff ffde 	bl	b6a6e <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b6ab2:	bd08      	pop	{r3, pc}

000b6ab4 <_ZN13sysStatusData18set_lastConnectionEx>:
void sysStatusData::set_lastConnection(time_t value) {
   b6ab4:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(SysData, lastConnection), value);
   b6ab6:	2120      	movs	r1, #32
   b6ab8:	f7ff ffd9 	bl	b6a6e <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b6abc:	bd08      	pop	{r3, pc}

000b6abe <_ZN13sysStatusData25set_alertTimestampGatewayEx>:
void sysStatusData::set_alertTimestampGateway(time_t value) {
   b6abe:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(SysData, alertTimestampGateway), value);
   b6ac0:	2130      	movs	r1, #48	; 0x30
   b6ac2:	f7ff ffd4 	bl	b6a6e <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b6ac6:	bd08      	pop	{r3, pc}

000b6ac8 <_ZN17currentStatusData17set_lastCountTimeEx>:
void currentStatusData::set_lastCountTime(time_t value) {
   b6ac8:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(CurrentData, lastCountTime), value);
   b6aca:	2128      	movs	r1, #40	; 0x28
   b6acc:	f7ff ffcf 	bl	b6a6e <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b6ad0:	bd08      	pop	{r3, pc}

000b6ad2 <_ZN17currentStatusData22set_alertTimestampNodeEx>:
void currentStatusData::set_alertTimestampNode(time_t value) {
   b6ad2:	b508      	push	{r3, lr}
    setValue<time_t>(offsetof(CurrentData, alertTimestampNode), value);
   b6ad4:	2138      	movs	r1, #56	; 0x38
   b6ad6:	f7ff ffca 	bl	b6a6e <_ZN15StorageHelperRK18PersistentDataBase8setValueIxEEvjT_>
}
   b6ada:	bd08      	pop	{r3, pc}

000b6adc <_ZN17currentStatusData15resetEverythingEv>:
void currentStatusData::resetEverything() {                             // The device is waking up in a new day or is a new install
   b6adc:	b510      	push	{r4, lr}
  Log.info("A new day - resetting everything");
   b6ade:	4924      	ldr	r1, [pc, #144]	; (b6b70 <_ZN17currentStatusData15resetEverythingEv+0x94>)
   b6ae0:	4824      	ldr	r0, [pc, #144]	; (b6b74 <_ZN17currentStatusData15resetEverythingEv+0x98>)
   b6ae2:	f7fd fb2c 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
  current.set_nodeNumber(11);
   b6ae6:	f7ff fcaf 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b6aea:	210b      	movs	r1, #11
   b6aec:	f7ff fe78 	bl	b67e0 <_ZN17currentStatusData14set_nodeNumberEh>
  current.set_tempNodeNumber(0);
   b6af0:	f7ff fcaa 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b6af4:	2100      	movs	r1, #0
   b6af6:	f7ff fe79 	bl	b67ec <_ZN17currentStatusData18set_tempNodeNumberEh>
  current.set_nodeID(0);
   b6afa:	f7ff fca5 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b6afe:	2100      	movs	r1, #0
   b6b00:	f7ff ff87 	bl	b6a12 <_ZN17currentStatusData10set_nodeIDEt>
  current.set_alertCodeNode(0);
   b6b04:	f7ff fca0 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b6b08:	2100      	movs	r1, #0
   b6b0a:	f7ff fe93 	bl	b6834 <_ZN17currentStatusData17set_alertCodeNodeEh>
  current.set_alertTimestampNode(0);
   b6b0e:	f7ff fc9b 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b6b12:	2200      	movs	r2, #0
   b6b14:	2300      	movs	r3, #0
   b6b16:	f7ff ffdc 	bl	b6ad2 <_ZN17currentStatusData22set_alertTimestampNodeEx>
  current.set_dailyCount(0);                                            // Reset the counts in FRAM as well
   b6b1a:	f7ff fc95 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b6b1e:	2100      	movs	r1, #0
   b6b20:	f7ff ff83 	bl	b6a2a <_ZN17currentStatusData14set_dailyCountEt>
  current.set_hourlyCount(0);
   b6b24:	f7ff fc90 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b6b28:	2100      	movs	r1, #0
   b6b2a:	f7ff ff78 	bl	b6a1e <_ZN17currentStatusData15set_hourlyCountEt>
  current.set_messageCount(0);
   b6b2e:	f7ff fc8b 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b6b32:	2100      	movs	r1, #0
   b6b34:	f7ff fe72 	bl	b681c <_ZN17currentStatusData16set_messageCountEh>
  current.set_successCount(0);
   b6b38:	f7ff fc86 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b6b3c:	2100      	movs	r1, #0
   b6b3e:	f7ff fe73 	bl	b6828 <_ZN17currentStatusData16set_successCountEh>
  current.set_lastCountTime(Time.now());
   b6b42:	f7ff fc81 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b6b46:	4604      	mov	r4, r0
   b6b48:	f009 fac3 	bl	c00d2 <_ZN9TimeClass3nowEv>
   b6b4c:	4602      	mov	r2, r0
   b6b4e:	17c3      	asrs	r3, r0, #31
   b6b50:	4620      	mov	r0, r4
   b6b52:	f7ff ffb9 	bl	b6ac8 <_ZN17currentStatusData17set_lastCountTimeEx>
  sysStatus.set_resetCount(0);                                          // Reset the reset count as well
   b6b56:	f7ff fc2f 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b6b5a:	2100      	movs	r1, #0
   b6b5c:	f7ff fe22 	bl	b67a4 <_ZN13sysStatusData14set_resetCountEh>
  sysStatus.set_messageCount(0);
   b6b60:	f7ff fc2a 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
}
   b6b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sysStatus.set_messageCount(0);
   b6b68:	2100      	movs	r1, #0
   b6b6a:	f7ff be21 	b.w	b67b0 <_ZN13sysStatusData16set_messageCountEh>
   b6b6e:	bf00      	nop
   b6b70:	000c4261 	.word	0x000c4261
   b6b74:	2003e650 	.word	0x2003e650

000b6b78 <_ZN17currentStatusData10initializeEv>:
void currentStatusData::initialize() {
   b6b78:	b510      	push	{r4, lr}
   b6b7a:	4604      	mov	r4, r0
    PersistentDataFRAM::initialize();
   b6b7c:	f005 ff4c 	bl	bca18 <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>
    Log.info("Current Data Initialized");
   b6b80:	4905      	ldr	r1, [pc, #20]	; (b6b98 <_ZN17currentStatusData10initializeEv+0x20>)
   b6b82:	4806      	ldr	r0, [pc, #24]	; (b6b9c <_ZN17currentStatusData10initializeEv+0x24>)
   b6b84:	f7fd fadb 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    currentStatusData::resetEverything();
   b6b88:	4620      	mov	r0, r4
   b6b8a:	f7ff ffa7 	bl	b6adc <_ZN17currentStatusData15resetEverythingEv>
    updateHash();
   b6b8e:	4620      	mov	r0, r4
}
   b6b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    updateHash();
   b6b94:	f005 be9e 	b.w	bc8d4 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
   b6b98:	000c4282 	.word	0x000c4282
   b6b9c:	2003e650 	.word	0x2003e650

000b6ba0 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>:
        T getValue(size_t offset) const {
   b6ba0:	b538      	push	{r3, r4, r5, lr}
   b6ba2:	4604      	mov	r4, r0
   b6ba4:	3004      	adds	r0, #4
   b6ba6:	460d      	mov	r5, r1
   b6ba8:	f7ff fb62 	bl	b6270 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6bac:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b6bae:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b6bb0:	3b01      	subs	r3, #1
   b6bb2:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b6bb4:	bf26      	itte	cs
   b6bb6:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b6bb8:	5d5d      	ldrbcs	r5, [r3, r5]
            T result = 0;
   b6bba:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b6bbc:	f005 ff9a 	bl	bcaf4 <os_mutex_recursive_unlock>
        }
   b6bc0:	4628      	mov	r0, r5
   b6bc2:	bd38      	pop	{r3, r4, r5, pc}

000b6bc4 <_ZNK17currentStatusData13get_openHoursEv>:
bool currentStatusData::get_openHours() const {
   b6bc4:	b508      	push	{r3, lr}
    return getValue<bool>(offsetof(CurrentData, openHours));
   b6bc6:	2140      	movs	r1, #64	; 0x40
   b6bc8:	f7ff ffea 	bl	b6ba0 <_ZNK15StorageHelperRK18PersistentDataBase8getValueIbEET_j>
}
   b6bcc:	bd08      	pop	{r3, pc}

000b6bce <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>:
        void setValue(size_t offset, T value)  {
   b6bce:	b570      	push	{r4, r5, r6, lr}
   b6bd0:	4604      	mov	r4, r0
   b6bd2:	3004      	adds	r0, #4
   b6bd4:	460d      	mov	r5, r1
   b6bd6:	4616      	mov	r6, r2
   b6bd8:	f7ff fb4a 	bl	b6270 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6bdc:	68e3      	ldr	r3, [r4, #12]
   b6bde:	3b01      	subs	r3, #1
   b6be0:	42ab      	cmp	r3, r5
   b6be2:	d307      	bcc.n	b6bf4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_+0x26>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b6be4:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b6be6:	5d5a      	ldrb	r2, [r3, r5]
   b6be8:	42b2      	cmp	r2, r6
   b6bea:	d003      	beq.n	b6bf4 <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_+0x26>
                        *(T *)p = value;
   b6bec:	555e      	strb	r6, [r3, r5]
                        updateHash();
   b6bee:	4620      	mov	r0, r4
   b6bf0:	f005 fe70 	bl	bc8d4 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b6bf4:	6860      	ldr	r0, [r4, #4]
        }
   b6bf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b6bfa:	f005 bf7b 	b.w	bcaf4 <os_mutex_recursive_unlock>

000b6bfe <_ZN13sysStatusData14set_verizonSIMEb>:
void sysStatusData::set_verizonSIM(bool value) {
   b6bfe:	b508      	push	{r3, lr}
   b6c00:	460a      	mov	r2, r1
    setValue<bool>(offsetof(SysData, verizonSIM), value);
   b6c02:	213a      	movs	r1, #58	; 0x3a
   b6c04:	f7ff ffe3 	bl	b6bce <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>
}
   b6c08:	bd08      	pop	{r3, pc}
	...

000b6c0c <_ZN13sysStatusData10initializeEv>:
void sysStatusData::initialize() {
   b6c0c:	b510      	push	{r4, lr}
   b6c0e:	4604      	mov	r4, r0
    PersistentDataFRAM::initialize();
   b6c10:	f005 ff02 	bl	bca18 <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>
    Log.info("data initialized");
   b6c14:	4928      	ldr	r1, [pc, #160]	; (b6cb8 <_ZN13sysStatusData10initializeEv+0xac>)
   b6c16:	4829      	ldr	r0, [pc, #164]	; (b6cbc <_ZN13sysStatusData10initializeEv+0xb0>)
   b6c18:	f7fd fa91 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    sysStatus.set_nodeNumber(0);                     // Default for a Gateway
   b6c1c:	f7ff fbcc 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b6c20:	2100      	movs	r1, #0
   b6c22:	f7ff fdad 	bl	b6780 <_ZN13sysStatusData14set_nodeNumberEh>
    sysStatus.set_structuresVersion(1);
   b6c26:	f7ff fbc7 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b6c2a:	2101      	movs	r1, #1
   b6c2c:	f7ff fdae 	bl	b678c <_ZN13sysStatusData21set_structuresVersionEh>
    sysStatus.set_magicNumber(27617);
   b6c30:	f7ff fbc2 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b6c34:	f646 31e1 	movw	r1, #27617	; 0x6be1
   b6c38:	f7ff fed3 	bl	b69e2 <_ZN13sysStatusData15set_magicNumberEt>
    sysStatus.set_connectivityMode(0);
   b6c3c:	f7ff fbbc 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b6c40:	2100      	movs	r1, #0
   b6c42:	f7ff fda9 	bl	b6798 <_ZN13sysStatusData20set_connectivityModeEh>
    sysStatus.set_resetCount(0);
   b6c46:	f7ff fbb7 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b6c4a:	2100      	movs	r1, #0
   b6c4c:	f7ff fdaa 	bl	b67a4 <_ZN13sysStatusData14set_resetCountEh>
    sysStatus.set_messageCount(0);
   b6c50:	f7ff fbb2 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b6c54:	2100      	movs	r1, #0
   b6c56:	f7ff fdab 	bl	b67b0 <_ZN13sysStatusData16set_messageCountEh>
    sysStatus.set_lastHookResponse(0);
   b6c5a:	f7ff fbad 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b6c5e:	2200      	movs	r2, #0
   b6c60:	2300      	movs	r3, #0
   b6c62:	f7ff ff22 	bl	b6aaa <_ZN13sysStatusData20set_lastHookResponseEx>
    sysStatus.set_frequencyMinutes(60);
   b6c66:	f7ff fba7 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b6c6a:	213c      	movs	r1, #60	; 0x3c
   b6c6c:	f7ff fec5 	bl	b69fa <_ZN13sysStatusData20set_frequencyMinutesEt>
    sysStatus.set_updatedFrequencyMinutes(0);
   b6c70:	f7ff fba2 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b6c74:	2100      	movs	r1, #0
   b6c76:	f7ff fec6 	bl	b6a06 <_ZN13sysStatusData27set_updatedFrequencyMinutesEt>
    sysStatus.set_alertCodeGateway(0);
   b6c7a:	f7ff fb9d 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b6c7e:	2100      	movs	r1, #0
   b6c80:	f7ff fd9c 	bl	b67bc <_ZN13sysStatusData20set_alertCodeGatewayEh>
    sysStatus.set_alertTimestampGateway(0);
   b6c84:	f7ff fb98 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b6c88:	2200      	movs	r2, #0
   b6c8a:	2300      	movs	r3, #0
   b6c8c:	f7ff ff17 	bl	b6abe <_ZN13sysStatusData25set_alertTimestampGatewayEx>
    sysStatus.set_openTime(6);
   b6c90:	f7ff fb92 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b6c94:	2106      	movs	r1, #6
   b6c96:	f7ff fd97 	bl	b67c8 <_ZN13sysStatusData12set_openTimeEh>
    sysStatus.set_closeTime(22);
   b6c9a:	f7ff fb8d 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b6c9e:	2116      	movs	r1, #22
   b6ca0:	f7ff fd98 	bl	b67d4 <_ZN13sysStatusData13set_closeTimeEh>
    sysStatus.set_verizonSIM(false);
   b6ca4:	f7ff fb88 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b6ca8:	2100      	movs	r1, #0
   b6caa:	f7ff ffa8 	bl	b6bfe <_ZN13sysStatusData14set_verizonSIMEb>
    updateHash();
   b6cae:	4620      	mov	r0, r4
}
   b6cb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    updateHash();
   b6cb4:	f005 be0e 	b.w	bc8d4 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
   b6cb8:	000c429b 	.word	0x000c429b
   b6cbc:	2003e650 	.word	0x2003e650

000b6cc0 <_ZN17currentStatusData13set_openHoursEb>:
void currentStatusData::set_openHours(bool value) {
   b6cc0:	b508      	push	{r3, lr}
   b6cc2:	460a      	mov	r2, r1
    setValue<bool>(offsetof(CurrentData, openHours), value);
   b6cc4:	2140      	movs	r1, #64	; 0x40
   b6cc6:	f7ff ff82 	bl	b6bce <_ZN15StorageHelperRK18PersistentDataBase8setValueIbEEvjT_>
}
   b6cca:	bd08      	pop	{r3, pc}

000b6ccc <_ZNK15StorageHelperRK18PersistentDataBase8getValueIsEET_j>:
        T getValue(size_t offset) const {
   b6ccc:	b538      	push	{r3, r4, r5, lr}
   b6cce:	4604      	mov	r4, r0
   b6cd0:	3004      	adds	r0, #4
   b6cd2:	460d      	mov	r5, r1
   b6cd4:	f7ff facc 	bl	b6270 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6cd8:	68e3      	ldr	r3, [r4, #12]
            os_mutex_recursive_unlock(handle_); 
   b6cda:	6860      	ldr	r0, [r4, #4]
                if (offset <= (savedDataSize - sizeof(T))) {
   b6cdc:	3b02      	subs	r3, #2
   b6cde:	42ab      	cmp	r3, r5
                    const uint8_t *p = (uint8_t *)savedDataHeader;
   b6ce0:	bf26      	itte	cs
   b6ce2:	68a3      	ldrcs	r3, [r4, #8]
                    result = *(const T *)p;
   b6ce4:	5f5d      	ldrshcs	r5, [r3, r5]
            T result = 0;
   b6ce6:	2500      	movcc	r5, #0
            os_mutex_recursive_unlock(handle_); 
   b6ce8:	f005 ff04 	bl	bcaf4 <os_mutex_recursive_unlock>
        }
   b6cec:	4628      	mov	r0, r5
   b6cee:	bd38      	pop	{r3, r4, r5, pc}

000b6cf0 <_ZNK17currentStatusData8get_RSSIEv>:
int16_t currentStatusData::get_RSSI() const {
   b6cf0:	b508      	push	{r3, lr}
    return getValue<int16_t>(offsetof(CurrentData, RSSI));
   b6cf2:	2122      	movs	r1, #34	; 0x22
   b6cf4:	f7ff ffea 	bl	b6ccc <_ZNK15StorageHelperRK18PersistentDataBase8getValueIsEET_j>
}
   b6cf8:	bd08      	pop	{r3, pc}

000b6cfa <_ZNK17currentStatusData7get_SNREv>:
int16_t currentStatusData::get_SNR() const {
   b6cfa:	b508      	push	{r3, lr}
    return getValue<int16_t>(offsetof(CurrentData, SNR));
   b6cfc:	2142      	movs	r1, #66	; 0x42
   b6cfe:	f7ff ffe5 	bl	b6ccc <_ZNK15StorageHelperRK18PersistentDataBase8getValueIsEET_j>
}
   b6d02:	bd08      	pop	{r3, pc}

000b6d04 <_ZN15StorageHelperRK18PersistentDataBase8setValueIsEEvjT_>:
        void setValue(size_t offset, T value)  {
   b6d04:	b570      	push	{r4, r5, r6, lr}
   b6d06:	4604      	mov	r4, r0
   b6d08:	3004      	adds	r0, #4
   b6d0a:	460d      	mov	r5, r1
   b6d0c:	4616      	mov	r6, r2
   b6d0e:	f7ff faaf 	bl	b6270 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
                if (offset <= (savedDataSize - sizeof(T))) {
   b6d12:	68e3      	ldr	r3, [r4, #12]
   b6d14:	3b02      	subs	r3, #2
   b6d16:	42ab      	cmp	r3, r5
   b6d18:	d307      	bcc.n	b6d2a <_ZN15StorageHelperRK18PersistentDataBase8setValueIsEEvjT_+0x26>
                    uint8_t *p = (uint8_t *)savedDataHeader;
   b6d1a:	68a3      	ldr	r3, [r4, #8]
                    if (oldValue != value) {
   b6d1c:	5f5a      	ldrsh	r2, [r3, r5]
   b6d1e:	42b2      	cmp	r2, r6
   b6d20:	d003      	beq.n	b6d2a <_ZN15StorageHelperRK18PersistentDataBase8setValueIsEEvjT_+0x26>
                        *(T *)p = value;
   b6d22:	535e      	strh	r6, [r3, r5]
                        updateHash();
   b6d24:	4620      	mov	r0, r4
   b6d26:	f005 fdd5 	bl	bc8d4 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            os_mutex_recursive_unlock(handle_); 
   b6d2a:	6860      	ldr	r0, [r4, #4]
        }
   b6d2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(handle_); 
   b6d30:	f005 bee0 	b.w	bcaf4 <os_mutex_recursive_unlock>

000b6d34 <_ZN17currentStatusData8set_RSSIEs>:
void currentStatusData::set_RSSI(int16_t value) {
   b6d34:	b508      	push	{r3, lr}
   b6d36:	460a      	mov	r2, r1
    setValue<int16_t>(offsetof(CurrentData, RSSI), value);
   b6d38:	2122      	movs	r1, #34	; 0x22
   b6d3a:	f7ff ffe3 	bl	b6d04 <_ZN15StorageHelperRK18PersistentDataBase8setValueIsEEvjT_>
}
   b6d3e:	bd08      	pop	{r3, pc}

000b6d40 <_ZN17currentStatusData7set_SNREs>:
void currentStatusData::set_SNR(int16_t value) {
   b6d40:	b508      	push	{r3, lr}
   b6d42:	460a      	mov	r2, r1
    setValue<int16_t>(offsetof(CurrentData, SNR), value);
   b6d44:	2142      	movs	r1, #66	; 0x42
   b6d46:	f7ff ffdd 	bl	b6d04 <_ZN15StorageHelperRK18PersistentDataBase8setValueIsEEvjT_>
}
   b6d4a:	bd08      	pop	{r3, pc}

000b6d4c <_GLOBAL__sub_I_fram>:
}
   b6d4c:	b510      	push	{r4, lr}
MB85RC64 fram(Wire, 0);
   b6d4e:	f009 fc49 	bl	c05e4 <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   b6d52:	4c05      	ldr	r4, [pc, #20]	; (b6d68 <_GLOBAL__sub_I_fram+0x1c>)
   b6d54:	4601      	mov	r1, r0
   b6d56:	2300      	movs	r3, #0
   b6d58:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   b6d5c:	4620      	mov	r0, r4
   b6d5e:	f003 f889 	bl	b9e74 <_ZN6MB85RCC1ER7TwoWireji>
   b6d62:	4b02      	ldr	r3, [pc, #8]	; (b6d6c <_GLOBAL__sub_I_fram+0x20>)
   b6d64:	6023      	str	r3, [r4, #0]
}
   b6d66:	bd10      	pop	{r4, pc}
   b6d68:	2003e470 	.word	0x2003e470
   b6d6c:	000c42b4 	.word	0x000c42b4

000b6d70 <_ZN5spark10LogHandler5writeEPKcj>:
}
   b6d70:	4770      	bx	lr

000b6d72 <_ZN5spark16StreamLogHandler5writeEPKcj>:
    stream_->write((const uint8_t*)data, size);
   b6d72:	6a00      	ldr	r0, [r0, #32]
   b6d74:	6803      	ldr	r3, [r0, #0]
   b6d76:	68db      	ldr	r3, [r3, #12]
   b6d78:	4718      	bx	r3

000b6d7a <_ZN18Particle_FunctionsD1Ev>:

Particle_Functions::Particle_Functions() {
}

Particle_Functions::~Particle_Functions() {
}
   b6d7a:	4770      	bx	lr

000b6d7c <_ZN18Particle_FunctionsD0Ev>:
Particle_Functions::~Particle_Functions() {
   b6d7c:	b510      	push	{r4, lr}
}
   b6d7e:	2104      	movs	r1, #4
Particle_Functions::~Particle_Functions() {
   b6d80:	4604      	mov	r4, r0
}
   b6d82:	f7fd f98c 	bl	b409e <_ZdlPvj>
   b6d86:	4620      	mov	r0, r4
   b6d88:	bd10      	pop	{r4, pc}
	...

000b6d8c <_ZN16JsonParserStaticILj1024ELj80EED1Ev>:
class JsonParserStatic : public JsonParser {
   b6d8c:	b510      	push	{r4, lr}
   b6d8e:	4b03      	ldr	r3, [pc, #12]	; (b6d9c <_ZN16JsonParserStaticILj1024ELj80EED1Ev+0x10>)
   b6d90:	6003      	str	r3, [r0, #0]
   b6d92:	4604      	mov	r4, r0
   b6d94:	f001 fdba 	bl	b890c <_ZN10JsonParserD1Ev>
   b6d98:	4620      	mov	r0, r4
   b6d9a:	bd10      	pop	{r4, pc}
   b6d9c:	000c47ac 	.word	0x000c47ac

000b6da0 <_ZN16JsonParserStaticILj1024ELj80EED0Ev>:
   b6da0:	b510      	push	{r4, lr}
   b6da2:	4604      	mov	r4, r0
   b6da4:	f7ff fff2 	bl	b6d8c <_ZN16JsonParserStaticILj1024ELj80EED1Ev>
   b6da8:	4620      	mov	r0, r4
   b6daa:	f640 112c 	movw	r1, #2348	; 0x92c
   b6dae:	f7fd f976 	bl	b409e <_ZdlPvj>
   b6db2:	4620      	mov	r0, r4
   b6db4:	bd10      	pop	{r4, pc}

000b6db6 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE9_M_invokeERKSt9_Any_dataOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b6db6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	    return __source._M_access<_Functor*>();
   b6db8:	6802      	ldr	r2, [r0, #0]
  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    {
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
   b6dba:	6853      	ldr	r3, [r2, #4]
   b6dbc:	6890      	ldr	r0, [r2, #8]
   b6dbe:	6814      	ldr	r4, [r2, #0]
   b6dc0:	105e      	asrs	r6, r3, #1
   b6dc2:	eb00 0563 	add.w	r5, r0, r3, asr #1
   b6dc6:	07db      	lsls	r3, r3, #31
   b6dc8:	bf48      	it	mi
   b6dca:	5983      	ldrmi	r3, [r0, r6]
   b6dcc:	4668      	mov	r0, sp
   b6dce:	bf48      	it	mi
   b6dd0:	591c      	ldrmi	r4, [r3, r4]
   b6dd2:	f008 fe39 	bl	bfa48 <_ZN6StringC1EOS_>
   b6dd6:	4669      	mov	r1, sp
   b6dd8:	4628      	mov	r0, r5
   b6dda:	47a0      	blx	r4
   b6ddc:	4604      	mov	r4, r0
   b6dde:	4668      	mov	r0, sp
   b6de0:	f008 fdb6 	bl	bf950 <_ZN6StringD1Ev>
      }
   b6de4:	4620      	mov	r0, r4
   b6de6:	b004      	add	sp, #16
   b6de8:	bd70      	pop	{r4, r5, r6, pc}

000b6dea <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b6dea:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b6dec:	b538      	push	{r3, r4, r5, lr}
   b6dee:	4604      	mov	r4, r0
	switch (__op)
   b6df0:	d102      	bne.n	b6df8 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b6df2:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b6df4:	6023      	str	r3, [r4, #0]
	}
   b6df6:	e003      	b.n	b6e00 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
	  switch (__op)
   b6df8:	2a02      	cmp	r2, #2
   b6dfa:	d003      	beq.n	b6e04 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x1a>
   b6dfc:	2a03      	cmp	r2, #3
   b6dfe:	d00d      	beq.n	b6e1c <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x32>
      }
   b6e00:	2000      	movs	r0, #0
   b6e02:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b6e04:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
   b6e06:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b6e08:	f7fd f945 	bl	b4096 <_Znwj>
   b6e0c:	4603      	mov	r3, r0
   b6e0e:	2800      	cmp	r0, #0
   b6e10:	d0f0      	beq.n	b6df4 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xa>
   b6e12:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b6e16:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b6e1a:	e7eb      	b.n	b6df4 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b6e1c:	6800      	ldr	r0, [r0, #0]
   b6e1e:	2800      	cmp	r0, #0
   b6e20:	d0ee      	beq.n	b6e00 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   b6e22:	210c      	movs	r1, #12
   b6e24:	f7fd f93b 	bl	b409e <_ZdlPvj>
   b6e28:	e7ea      	b.n	b6e00 <_ZNSt17_Function_handlerIFi6StringESt5_BindIFM18Particle_FunctionsFiS0_EPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>

000b6e2a <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>:
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b6e2a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6e2c:	461d      	mov	r5, r3
		if (getValueTokenByKey(container, name, value)) {
   b6e2e:	ab01      	add	r3, sp, #4
	bool getValueByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, T &result) const {
   b6e30:	4604      	mov	r4, r0
		if (getValueTokenByKey(container, name, value)) {
   b6e32:	f001 ff4d 	bl	b8cd0 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b6e36:	b120      	cbz	r0, b6e42 <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0+0x18>
			return getTokenValue(value, result);
   b6e38:	9901      	ldr	r1, [sp, #4]
   b6e3a:	462a      	mov	r2, r5
   b6e3c:	4620      	mov	r0, r4
   b6e3e:	f001 ff29 	bl	b8c94 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
	}
   b6e42:	b003      	add	sp, #12
   b6e44:	bd30      	pop	{r4, r5, pc}
	...

000b6e48 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b6e48:	4b0a      	ldr	r3, [pc, #40]	; (b6e74 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b6e4a:	b510      	push	{r4, lr}
   b6e4c:	4604      	mov	r4, r0
   b6e4e:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b6e50:	f007 fbf2 	bl	be638 <_ZN5spark10LogManager8instanceEv>
   b6e54:	4621      	mov	r1, r4
   b6e56:	f007 fdf6 	bl	bea46 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b6e5a:	f009 fa21 	bl	c02a0 <_Z16_fetch_usbserialv>
   b6e5e:	f009 fa11 	bl	c0284 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b6e62:	4620      	mov	r0, r4
   b6e64:	4b04      	ldr	r3, [pc, #16]	; (b6e78 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b6e66:	f840 3b04 	str.w	r3, [r0], #4
   b6e6a:	f007 fc87 	bl	be77c <_ZN5spark6detail9LogFilterD1Ev>
    }
   b6e6e:	4620      	mov	r0, r4
   b6e70:	bd10      	pop	{r4, pc}
   b6e72:	bf00      	nop
   b6e74:	000c4794 	.word	0x000c4794
   b6e78:	000c477c 	.word	0x000c477c

000b6e7c <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b6e7c:	b510      	push	{r4, lr}
   b6e7e:	4604      	mov	r4, r0
    }
   b6e80:	f7ff ffe2 	bl	b6e48 <_ZN5spark16SerialLogHandlerD1Ev>
   b6e84:	4620      	mov	r0, r4
   b6e86:	2124      	movs	r1, #36	; 0x24
   b6e88:	f7fd f909 	bl	b409e <_ZdlPvj>
   b6e8c:	4620      	mov	r0, r4
   b6e8e:	bd10      	pop	{r4, pc}

000b6e90 <_ZN18Particle_Functions8instanceEv>:
Particle_Functions &Particle_Functions::instance() {
   b6e90:	b510      	push	{r4, lr}
    if (!_instance) {
   b6e92:	4c06      	ldr	r4, [pc, #24]	; (b6eac <_ZN18Particle_Functions8instanceEv+0x1c>)
   b6e94:	6823      	ldr	r3, [r4, #0]
   b6e96:	b933      	cbnz	r3, b6ea6 <_ZN18Particle_Functions8instanceEv+0x16>
        _instance = new Particle_Functions();
   b6e98:	2004      	movs	r0, #4
   b6e9a:	f7fd f8fc 	bl	b4096 <_Znwj>
   b6e9e:	b108      	cbz	r0, b6ea4 <_ZN18Particle_Functions8instanceEv+0x14>
Particle_Functions::Particle_Functions() {
   b6ea0:	4b03      	ldr	r3, [pc, #12]	; (b6eb0 <_ZN18Particle_Functions8instanceEv+0x20>)
   b6ea2:	6003      	str	r3, [r0, #0]
        _instance = new Particle_Functions();
   b6ea4:	6020      	str	r0, [r4, #0]
}
   b6ea6:	6820      	ldr	r0, [r4, #0]
   b6ea8:	bd10      	pop	{r4, pc}
   b6eaa:	bf00      	nop
   b6eac:	2003e490 	.word	0x2003e490
   b6eb0:	000c47bc 	.word	0x000c47bc

000b6eb4 <_ZN18Particle_Functions5setupEv>:

void Particle_Functions::setup() {
   b6eb4:	b530      	push	{r4, r5, lr}
    Log.info("Initializing Particle functions and variables");     // Note: Don't have to be connected but these functions need to in first 30 seconds
   b6eb6:	4919      	ldr	r1, [pc, #100]	; (b6f1c <_ZN18Particle_Functions5setupEv+0x68>)
void Particle_Functions::setup() {
   b6eb8:	b085      	sub	sp, #20
   b6eba:	4604      	mov	r4, r0
    Log.info("Initializing Particle functions and variables");     // Note: Don't have to be connected but these functions need to in first 30 seconds
   b6ebc:	4818      	ldr	r0, [pc, #96]	; (b6f20 <_ZN18Particle_Functions5setupEv+0x6c>)
   b6ebe:	f7fd f93e 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    _Function_base() : _M_manager(nullptr) { }
   b6ec2:	2500      	movs	r5, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6ec4:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
   b6ec6:	9502      	str	r5, [sp, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6ec8:	f7fd f8e5 	bl	b4096 <_Znwj>
   b6ecc:	b118      	cbz	r0, b6ed6 <_ZN18Particle_Functions5setupEv+0x22>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b6ece:	4b15      	ldr	r3, [pc, #84]	; (b6f24 <_ZN18Particle_Functions5setupEv+0x70>)
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b6ed0:	6084      	str	r4, [r0, #8]
   b6ed2:	e9c0 3500 	strd	r3, r5, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
   b6ed6:	4b14      	ldr	r3, [pc, #80]	; (b6f28 <_ZN18Particle_Functions5setupEv+0x74>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b6ed8:	9000      	str	r0, [sp, #0]
	    _M_invoker = &_My_handler::_M_invoke;
   b6eda:	9303      	str	r3, [sp, #12]
            auto wrapper = new user_std_function_int_str_t(func);
   b6edc:	2010      	movs	r0, #16
	    _M_manager = &_My_handler::_M_manager;
   b6ede:	4b13      	ldr	r3, [pc, #76]	; (b6f2c <_ZN18Particle_Functions5setupEv+0x78>)
   b6ee0:	9302      	str	r3, [sp, #8]
   b6ee2:	f7fd f8d8 	bl	b4096 <_Znwj>
   b6ee6:	4604      	mov	r4, r0
   b6ee8:	b178      	cbz	r0, b6f0a <_ZN18Particle_Functions5setupEv+0x56>
    _Function_base() : _M_manager(nullptr) { }
   b6eea:	2300      	movs	r3, #0
   b6eec:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b6eee:	9b02      	ldr	r3, [sp, #8]
      if (static_cast<bool>(__x))
   b6ef0:	b133      	cbz	r3, b6f00 <_ZN18Particle_Functions5setupEv+0x4c>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b6ef2:	2202      	movs	r2, #2
   b6ef4:	4669      	mov	r1, sp
   b6ef6:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b6ef8:	9b03      	ldr	r3, [sp, #12]
   b6efa:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b6efc:	9b02      	ldr	r3, [sp, #8]
   b6efe:	60a3      	str	r3, [r4, #8]
                success = register_function(call_std_user_function, wrapper, funcKey);
   b6f00:	4a0b      	ldr	r2, [pc, #44]	; (b6f30 <_ZN18Particle_Functions5setupEv+0x7c>)
   b6f02:	480c      	ldr	r0, [pc, #48]	; (b6f34 <_ZN18Particle_Functions5setupEv+0x80>)
   b6f04:	4621      	mov	r1, r4
   b6f06:	f006 fc04 	bl	bd712 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
      if (_M_manager)
   b6f0a:	9b02      	ldr	r3, [sp, #8]
   b6f0c:	b11b      	cbz	r3, b6f16 <_ZN18Particle_Functions5setupEv+0x62>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b6f0e:	4669      	mov	r1, sp
   b6f10:	2203      	movs	r2, #3
   b6f12:	4608      	mov	r0, r1
   b6f14:	4798      	blx	r3
    Particle.function("Commands", &Particle_Functions::jsonFunctionParser, this);
}
   b6f16:	b005      	add	sp, #20
   b6f18:	bd30      	pop	{r4, r5, pc}
   b6f1a:	bf00      	nop
   b6f1c:	000c434c 	.word	0x000c434c
   b6f20:	2003e650 	.word	0x2003e650
   b6f24:	000b6f39 	.word	0x000b6f39
   b6f28:	000b6db7 	.word	0x000b6db7
   b6f2c:	000b6deb 	.word	0x000b6deb
   b6f30:	000c437a 	.word	0x000c437a
   b6f34:	000bd6eb 	.word	0x000bd6eb

000b6f38 <_ZN18Particle_Functions18jsonFunctionParserE6String>:

void Particle_Functions::loop() {
    // Put your code to run during the application thread loop here
}

int Particle_Functions::jsonFunctionParser(String command) {
   b6f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6f3c:	f6ad 1db4 	subw	sp, sp, #2484	; 0x9b4
   b6f40:	460c      	mov	r4, r1
    // const char * const commandString = "{\"cmd\":[{\"node\":1,\"var\":\"hourly\",\"fn\":\"reset\"},{\"node\":0,\"var\":1,\"fn\":\"lowpowermode\"},{\"node\":2,\"var\":\"daily\",\"fn\":\"report\"}]}";
    // String to put into Uber command window {"cmd":[{"node":1,"var":"hourly","fn":"reset"},{"node":0,"var":1,"fn":"lowpowermode"},{"node":2,"var":"daily","fn":"report"}]}

	int nodeNumber;
	String variable;
   b6f42:	a809      	add	r0, sp, #36	; 0x24
   b6f44:	49a7      	ldr	r1, [pc, #668]	; (b71e4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2ac>)
   b6f46:	f008 fd4e 	bl	bf9e6 <_ZN6StringC1EPK19__FlashStringHelper>
	String function;
   b6f4a:	49a6      	ldr	r1, [pc, #664]	; (b71e4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2ac>)
   b6f4c:	a80d      	add	r0, sp, #52	; 0x34
   b6f4e:	f008 fd4a 	bl	bf9e6 <_ZN6StringC1EPK19__FlashStringHelper>
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
   b6f52:	2350      	movs	r3, #80	; 0x50
   b6f54:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b6f58:	9300      	str	r3, [sp, #0]
   b6f5a:	a92c      	add	r1, sp, #176	; 0xb0
   b6f5c:	f50d 6396 	add.w	r3, sp, #1200	; 0x4b0
   b6f60:	a821      	add	r0, sp, #132	; 0x84
   b6f62:	f001 fd35 	bl	b89d0 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
   b6f66:	4ba0      	ldr	r3, [pc, #640]	; (b71e8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2b0>)
  char messaging[64];
  bool success = true;

	JsonParserStatic<1024, 80> jp;	// Global parser that supports up to 256 bytes of data and 20 tokens

  Log.info(command.c_str());
   b6f68:	6821      	ldr	r1, [r4, #0]
   b6f6a:	48a0      	ldr	r0, [pc, #640]	; (b71ec <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2b4>)
   b6f6c:	9321      	str	r3, [sp, #132]	; 0x84
   b6f6e:	f7fd f8e6 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>

	jp.clear();
   b6f72:	a821      	add	r0, sp, #132	; 0x84
   b6f74:	f001 fd22 	bl	b89bc <_ZN10JsonBuffer5clearEv>
   b6f78:	6821      	ldr	r1, [r4, #0]
	bool addString(const char *data) { return addData(data, strlen(data)); }
   b6f7a:	9103      	str	r1, [sp, #12]
   b6f7c:	4608      	mov	r0, r1
   b6f7e:	f00a fa36 	bl	c13ee <strlen>
   b6f82:	9903      	ldr	r1, [sp, #12]
   b6f84:	4602      	mov	r2, r0
   b6f86:	a821      	add	r0, sp, #132	; 0x84
   b6f88:	f001 fcfb 	bl	b8982 <_ZN10JsonBuffer7addDataEPKcj>
	jp.addString(command);
	if (!jp.parse()) {
   b6f8c:	a821      	add	r0, sp, #132	; 0x84
   b6f8e:	f002 fa51 	bl	b9434 <_ZN10JsonParser5parseEv>
   b6f92:	4604      	mov	r4, r0
   b6f94:	b990      	cbnz	r0, b6fbc <_ZN18Particle_Functions18jsonFunctionParserE6String+0x84>
		Log.info("Parsing failed - check syntax");
   b6f96:	4996      	ldr	r1, [pc, #600]	; (b71f0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2b8>)
   b6f98:	4894      	ldr	r0, [pc, #592]	; (b71ec <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2b4>)
   b6f9a:	f7fd f8d0 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b6f9e:	4b95      	ldr	r3, [pc, #596]	; (b71f4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2bc>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b6fa0:	4a93      	ldr	r2, [pc, #588]	; (b71f0 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2b8>)
   b6fa2:	781b      	ldrb	r3, [r3, #0]
   b6fa4:	f88d 3000 	strb.w	r3, [sp]
   b6fa8:	a811      	add	r0, sp, #68	; 0x44
   b6faa:	4993      	ldr	r1, [pc, #588]	; (b71f8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2c0>)
   b6fac:	233c      	movs	r3, #60	; 0x3c
   b6fae:	f006 fcc1 	bl	bd934 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b6fb2:	a812      	add	r0, sp, #72	; 0x48
   b6fb4:	f7fd fb74 	bl	b46a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }

    Log.info(messaging);
    if (Particle.connected()) Particle.publish("cmd",messaging,PRIVATE);
	}
	return success;
   b6fb8:	4625      	mov	r5, r4
   b6fba:	e017      	b.n	b6fec <_ZN18Particle_Functions18jsonFunctionParserE6String+0xb4>
	jp.getValueTokenByKey(jp.getOuterObject(), "cmd", cmdArrayContainer);
   b6fbc:	a821      	add	r0, sp, #132	; 0x84
   b6fbe:	f001 fd22 	bl	b8a06 <_ZNK10JsonParser14getOuterObjectEv>
   b6fc2:	4a8d      	ldr	r2, [pc, #564]	; (b71f8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2c0>)
		if (getValueTokenByKey(container, name, value)) {
   b6fc4:	4f8d      	ldr	r7, [pc, #564]	; (b71fc <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2c4>)
		jp.getValueByKey(cmdObjectContainer, "var", variable);
   b6fc6:	f8df 8288 	ldr.w	r8, [pc, #648]	; b7250 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x318>
		jp.getValueByKey(cmdObjectContainer, "fn", function);
   b6fca:	f8df 9288 	ldr.w	r9, [pc, #648]	; b7254 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x31c>
	jp.getValueTokenByKey(jp.getOuterObject(), "cmd", cmdArrayContainer);
   b6fce:	4601      	mov	r1, r0
   b6fd0:	ab06      	add	r3, sp, #24
   b6fd2:	a821      	add	r0, sp, #132	; 0x84
   b6fd4:	f001 fe7c 	bl	b8cd0 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b6fd8:	2500      	movs	r5, #0
		cmdObjectContainer = jp.getTokenByIndex(cmdArrayContainer, i);
   b6fda:	9906      	ldr	r1, [sp, #24]
   b6fdc:	462a      	mov	r2, r5
   b6fde:	a821      	add	r0, sp, #132	; 0x84
   b6fe0:	f001 fd33 	bl	b8a4a <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>
		if(cmdObjectContainer == NULL) {
   b6fe4:	4606      	mov	r6, r0
   b6fe6:	b978      	cbnz	r0, b7008 <_ZN18Particle_Functions18jsonFunctionParserE6String+0xd0>
      if (i == 0) return 0;                                       // No valid entries
   b6fe8:	2d00      	cmp	r5, #0
   b6fea:	d1e5      	bne.n	b6fb8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x80>
	JsonParserStatic<1024, 80> jp;	// Global parser that supports up to 256 bytes of data and 20 tokens
   b6fec:	a821      	add	r0, sp, #132	; 0x84
   b6fee:	f7ff fecd 	bl	b6d8c <_ZN16JsonParserStaticILj1024ELj80EED1Ev>
	String function;
   b6ff2:	a80d      	add	r0, sp, #52	; 0x34
   b6ff4:	f008 fcac 	bl	bf950 <_ZN6StringD1Ev>
	String variable;
   b6ff8:	a809      	add	r0, sp, #36	; 0x24
   b6ffa:	f008 fca9 	bl	bf950 <_ZN6StringD1Ev>
}
   b6ffe:	4628      	mov	r0, r5
   b7000:	f60d 1db4 	addw	sp, sp, #2484	; 0x9b4
   b7004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7008:	4601      	mov	r1, r0
   b700a:	ab07      	add	r3, sp, #28
   b700c:	463a      	mov	r2, r7
   b700e:	a821      	add	r0, sp, #132	; 0x84
   b7010:	f001 fe5e 	bl	b8cd0 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
   b7014:	b120      	cbz	r0, b7020 <_ZN18Particle_Functions18jsonFunctionParserE6String+0xe8>
			return getTokenValue(value, result);
   b7016:	9907      	ldr	r1, [sp, #28]
   b7018:	aa04      	add	r2, sp, #16
   b701a:	a821      	add	r0, sp, #132	; 0x84
   b701c:	f001 fd6e 	bl	b8afc <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>
		jp.getValueByKey(cmdObjectContainer, "var", variable);
   b7020:	ab09      	add	r3, sp, #36	; 0x24
   b7022:	4642      	mov	r2, r8
   b7024:	4631      	mov	r1, r6
   b7026:	a821      	add	r0, sp, #132	; 0x84
   b7028:	f7ff feff 	bl	b6e2a <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
		jp.getValueByKey(cmdObjectContainer, "fn", function);
   b702c:	4631      	mov	r1, r6
   b702e:	a821      	add	r0, sp, #132	; 0x84
   b7030:	ab0d      	add	r3, sp, #52	; 0x34
   b7032:	464a      	mov	r2, r9
   b7034:	f7ff fef9 	bl	b6e2a <_ZNK10JsonParser13getValueByKeyI6StringEEbPKN21JsonParserGeneratorRK9jsmntok_tEPKcRT_.isra.0>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   b7038:	4971      	ldr	r1, [pc, #452]	; (b7200 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2c8>)
   b703a:	a80d      	add	r0, sp, #52	; 0x34
   b703c:	f008 fd99 	bl	bfb72 <_ZNK6String6equalsEPKc>
		if (function == "reset") {
   b7040:	2800      	cmp	r0, #0
   b7042:	d07b      	beq.n	b713c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x204>
      if (nodeNumber == 0) {
   b7044:	9b04      	ldr	r3, [sp, #16]
   b7046:	2b00      	cmp	r3, #0
   b7048:	d15d      	bne.n	b7106 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x1ce>
   b704a:	496e      	ldr	r1, [pc, #440]	; (b7204 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2cc>)
   b704c:	a809      	add	r0, sp, #36	; 0x24
   b704e:	f008 fd90 	bl	bfb72 <_ZNK6String6equalsEPKc>
        if (variable == "nodeData") {
   b7052:	2800      	cmp	r0, #0
   b7054:	d03a      	beq.n	b70cc <_ZN18Particle_Functions18jsonFunctionParserE6String+0x194>
          snprintf(messaging,sizeof(messaging),"Resetting the gateway's node Data");
   b7056:	496c      	ldr	r1, [pc, #432]	; (b7208 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2d0>)
   b7058:	a811      	add	r0, sp, #68	; 0x44
   b705a:	f00a f9a2 	bl	c13a2 <strcpy>
          nodeDatabase.resetNodeIDs();
   b705e:	f7ff fa79 	bl	b6554 <_ZN10nodeIDData8instanceEv>
   b7062:	f7ff fab9 	bl	b65d8 <_ZN10nodeIDData12resetNodeIDsEv>
          Log.info("Resetting the Gateway node so new database is in effect");
   b7066:	4969      	ldr	r1, [pc, #420]	; (b720c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2d4>)
   b7068:	4860      	ldr	r0, [pc, #384]	; (b71ec <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2b4>)
   b706a:	f7fd f868 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b706e:	4b61      	ldr	r3, [pc, #388]	; (b71f4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2bc>)
   b7070:	4a67      	ldr	r2, [pc, #412]	; (b7210 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2d8>)
   b7072:	781b      	ldrb	r3, [r3, #0]
   b7074:	4967      	ldr	r1, [pc, #412]	; (b7214 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2dc>)
   b7076:	f88d 3000 	strb.w	r3, [sp]
   b707a:	a807      	add	r0, sp, #28
   b707c:	233c      	movs	r3, #60	; 0x3c
   b707e:	f006 fc59 	bl	bd934 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b7082:	a808      	add	r0, sp, #32
   b7084:	f7fd fb0c 	bl	b46a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
          delay(2000);
   b7088:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   b708c:	f006 f986 	bl	bd39c <delay>
          System.reset();
   b7090:	f008 fe2b 	bl	bfcea <_ZN11SystemClass5resetEv>
        current.resetEverything();
   b7094:	f7ff f9d8 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b7098:	f7ff fd20 	bl	b6adc <_ZN17currentStatusData15resetEverythingEv>
    Log.info(messaging);
   b709c:	4853      	ldr	r0, [pc, #332]	; (b71ec <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2b4>)
   b709e:	a911      	add	r1, sp, #68	; 0x44
   b70a0:	f7fd f84d 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b70a4:	f006 f85a 	bl	bd15c <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("cmd",messaging,PRIVATE);
   b70a8:	b160      	cbz	r0, b70c4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x18c>
   b70aa:	4b52      	ldr	r3, [pc, #328]	; (b71f4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2bc>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b70ac:	4952      	ldr	r1, [pc, #328]	; (b71f8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2c0>)
   b70ae:	781b      	ldrb	r3, [r3, #0]
   b70b0:	f88d 3000 	strb.w	r3, [sp]
   b70b4:	a807      	add	r0, sp, #28
   b70b6:	233c      	movs	r3, #60	; 0x3c
   b70b8:	aa11      	add	r2, sp, #68	; 0x44
   b70ba:	f006 fc3b 	bl	bd934 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b70be:	a808      	add	r0, sp, #32
   b70c0:	f7fd faee 	bl	b46a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	for (int i=0; i<10; i++) {												// Iterate through the array looking for a match
   b70c4:	3501      	adds	r5, #1
   b70c6:	2d0a      	cmp	r5, #10
   b70c8:	d187      	bne.n	b6fda <_ZN18Particle_Functions18jsonFunctionParserE6String+0xa2>
   b70ca:	e775      	b.n	b6fb8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x80>
   b70cc:	4952      	ldr	r1, [pc, #328]	; (b7218 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2e0>)
   b70ce:	a809      	add	r0, sp, #36	; 0x24
   b70d0:	f008 fd4f 	bl	bfb72 <_ZNK6String6equalsEPKc>
        else if (variable == "all") {
   b70d4:	b190      	cbz	r0, b70fc <_ZN18Particle_Functions18jsonFunctionParserE6String+0x1c4>
            snprintf(messaging,sizeof(messaging),"Resetting the gateway's system and current data");
   b70d6:	4951      	ldr	r1, [pc, #324]	; (b721c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2e4>)
   b70d8:	a811      	add	r0, sp, #68	; 0x44
   b70da:	f00a f962 	bl	c13a2 <strcpy>
            sysStatus.initialize();                     // All will reset system values as well
   b70de:	f7ff f96b 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b70e2:	6803      	ldr	r3, [r0, #0]
   b70e4:	699b      	ldr	r3, [r3, #24]
   b70e6:	4798      	blx	r3
            current.resetEverything();
   b70e8:	f7ff f9ae 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b70ec:	f7ff fcf6 	bl	b6adc <_ZN17currentStatusData15resetEverythingEv>
            nodeDatabase.initialize();
   b70f0:	f7ff fa30 	bl	b6554 <_ZN10nodeIDData8instanceEv>
   b70f4:	6803      	ldr	r3, [r0, #0]
   b70f6:	699b      	ldr	r3, [r3, #24]
   b70f8:	4798      	blx	r3
   b70fa:	e7cb      	b.n	b7094 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x15c>
        else snprintf(messaging,sizeof(messaging),"Resetting the gateway's current data");
   b70fc:	4948      	ldr	r1, [pc, #288]	; (b7220 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2e8>)
   b70fe:	a811      	add	r0, sp, #68	; 0x44
   b7100:	f00a f94f 	bl	c13a2 <strcpy>
   b7104:	e7c6      	b.n	b7094 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x15c>
   b7106:	4944      	ldr	r1, [pc, #272]	; (b7218 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2e0>)
   b7108:	a809      	add	r0, sp, #36	; 0x24
   b710a:	f008 fd32 	bl	bfb72 <_ZNK6String6equalsEPKc>
          snprintf(messaging,sizeof(messaging),"Resetting node %d's system and current data", nodeNumber);
   b710e:	9b04      	ldr	r3, [sp, #16]
        if (variable == "all") {
   b7110:	b158      	cbz	r0, b712a <_ZN18Particle_Functions18jsonFunctionParserE6String+0x1f2>
          snprintf(messaging,sizeof(messaging),"Resetting node %d's system and current data", nodeNumber);
   b7112:	4a44      	ldr	r2, [pc, #272]	; (b7224 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2ec>)
   b7114:	2140      	movs	r1, #64	; 0x40
   b7116:	a811      	add	r0, sp, #68	; 0x44
   b7118:	f006 f8e8 	bl	bd2ec <snprintf>
          LoRA_Functions::instance().changeAlert(nodeNumber,5);    // Alertcode 5 will reset all data on the node
   b711c:	f7fd f828 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b7120:	2205      	movs	r2, #5
        else LoRA_Functions::instance().changeAlert(nodeNumber,7);         // Forces the node to update its sensor Type (on Join, node sets the Gateway)
   b7122:	9904      	ldr	r1, [sp, #16]
   b7124:	f7fd fee4 	bl	b4ef0 <_ZN14LoRA_Functions11changeAlertEii>
   b7128:	e7b8      	b.n	b709c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x164>
          snprintf(messaging,sizeof(messaging),"Resetting node %d's current data", nodeNumber);
   b712a:	4a3f      	ldr	r2, [pc, #252]	; (b7228 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2f0>)
   b712c:	2140      	movs	r1, #64	; 0x40
   b712e:	a811      	add	r0, sp, #68	; 0x44
   b7130:	f006 f8dc 	bl	bd2ec <snprintf>
          LoRA_Functions::instance().changeAlert(nodeNumber,6);                    // Alertcode 6 will only reset all the current data on the node
   b7134:	f7fd f81c 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b7138:	2206      	movs	r2, #6
   b713a:	e7f2      	b.n	b7122 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x1ea>
   b713c:	493b      	ldr	r1, [pc, #236]	; (b722c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2f4>)
   b713e:	a80d      	add	r0, sp, #52	; 0x34
   b7140:	f008 fd17 	bl	bfb72 <_ZNK6String6equalsEPKc>
    else if (function == "freq") {   
   b7144:	b300      	cbz	r0, b7188 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x250>
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b7146:	9809      	ldr	r0, [sp, #36]	; 0x24
   b7148:	220a      	movs	r2, #10
   b714a:	a905      	add	r1, sp, #20
   b714c:	f00b f8c0 	bl	c22d0 <strtol>
      if ((tempValue > 0) && (tempValue <= 60) && 60 % tempValue == 0) {
   b7150:	1e43      	subs	r3, r0, #1
   b7152:	2b3b      	cmp	r3, #59	; 0x3b
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b7154:	4606      	mov	r6, r0
      if ((tempValue > 0) && (tempValue <= 60) && 60 % tempValue == 0) {
   b7156:	d811      	bhi.n	b717c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x244>
   b7158:	233c      	movs	r3, #60	; 0x3c
   b715a:	fb93 f3f0 	sdiv	r3, r3, r0
   b715e:	4343      	muls	r3, r0
   b7160:	2b3c      	cmp	r3, #60	; 0x3c
   b7162:	d10b      	bne.n	b717c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x244>
        snprintf(messaging,sizeof(messaging),"Setting reporting frequency to %d minutes", tempValue);
   b7164:	4603      	mov	r3, r0
   b7166:	4a32      	ldr	r2, [pc, #200]	; (b7230 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2f8>)
   b7168:	2140      	movs	r1, #64	; 0x40
   b716a:	a811      	add	r0, sp, #68	; 0x44
   b716c:	f006 f8be 	bl	bd2ec <snprintf>
        sysStatus.set_updatedFrequencyMinutes(tempValue);
   b7170:	f7ff f922 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b7174:	b2b1      	uxth	r1, r6
   b7176:	f7ff fc46 	bl	b6a06 <_ZN13sysStatusData27set_updatedFrequencyMinutesEt>
   b717a:	e78f      	b.n	b709c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x164>
        snprintf(messaging,sizeof(messaging),"Not a valid reporting frequency");
   b717c:	492d      	ldr	r1, [pc, #180]	; (b7234 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x2fc>)
   b717e:	a811      	add	r0, sp, #68	; 0x44
   b7180:	f00a f90f 	bl	c13a2 <strcpy>
        success = false;                                                       // Make sure it falls in a valid range or send a "fail" result
   b7184:	2400      	movs	r4, #0
   b7186:	e789      	b.n	b709c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x164>
   b7188:	492b      	ldr	r1, [pc, #172]	; (b7238 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x300>)
   b718a:	a80d      	add	r0, sp, #52	; 0x34
   b718c:	f008 fcf1 	bl	bfb72 <_ZNK6String6equalsEPKc>
    else if (function == "stay") {
   b7190:	b1b8      	cbz	r0, b71c2 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x28a>
   b7192:	492a      	ldr	r1, [pc, #168]	; (b723c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x304>)
   b7194:	a809      	add	r0, sp, #36	; 0x24
   b7196:	f008 fcec 	bl	bfb72 <_ZNK6String6equalsEPKc>
      if (variable == "true") {
   b719a:	4606      	mov	r6, r0
   b719c:	b148      	cbz	r0, b71b2 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x27a>
        snprintf(messaging,sizeof(messaging),"Going to keep Gateway on Particle and LoRA networks");
   b719e:	4928      	ldr	r1, [pc, #160]	; (b7240 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x308>)
   b71a0:	a811      	add	r0, sp, #68	; 0x44
   b71a2:	f00a f8fe 	bl	c13a2 <strcpy>
        sysStatus.set_connectivityMode(3);
   b71a6:	f7ff f907 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b71aa:	2103      	movs	r1, #3
        sysStatus.set_connectivityMode(0);
   b71ac:	f7ff faf4 	bl	b6798 <_ZN13sysStatusData20set_connectivityModeEh>
   b71b0:	e774      	b.n	b709c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x164>
        snprintf(messaging,sizeof(messaging),"Going back to normal connectivity");
   b71b2:	4924      	ldr	r1, [pc, #144]	; (b7244 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x30c>)
   b71b4:	a811      	add	r0, sp, #68	; 0x44
   b71b6:	f00a f8f4 	bl	c13a2 <strcpy>
        sysStatus.set_connectivityMode(0);
   b71ba:	f7ff f8fd 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b71be:	4631      	mov	r1, r6
   b71c0:	e7f4      	b.n	b71ac <_ZN18Particle_Functions18jsonFunctionParserE6String+0x274>
   b71c2:	4921      	ldr	r1, [pc, #132]	; (b7248 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x310>)
   b71c4:	a80d      	add	r0, sp, #52	; 0x34
   b71c6:	f008 fcd4 	bl	bfb72 <_ZNK6String6equalsEPKc>
    else if (function == "rpt") {
   b71ca:	2800      	cmp	r0, #0
   b71cc:	d044      	beq.n	b7258 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x320>
      snprintf(messaging,sizeof(messaging),"Printing nodeID Data");
   b71ce:	491f      	ldr	r1, [pc, #124]	; (b724c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x314>)
   b71d0:	a811      	add	r0, sp, #68	; 0x44
   b71d2:	f00a f8e6 	bl	c13a2 <strcpy>
      LoRA_Functions::instance().printNodeData(true);
   b71d6:	f7fc ffcb 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b71da:	2101      	movs	r1, #1
   b71dc:	f7fd fb4e 	bl	b487c <_ZN14LoRA_Functions13printNodeDataEb>
   b71e0:	e75c      	b.n	b709c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x164>
   b71e2:	bf00      	nop
   b71e4:	000c5454 	.word	0x000c5454
   b71e8:	000c47ac 	.word	0x000c47ac
   b71ec:	2003e650 	.word	0x2003e650
   b71f0:	000c438b 	.word	0x000c438b
   b71f4:	2003e48c 	.word	0x2003e48c
   b71f8:	000c43a9 	.word	0x000c43a9
   b71fc:	000c392a 	.word	0x000c392a
   b7200:	000c43b4 	.word	0x000c43b4
   b7204:	000c3998 	.word	0x000c3998
   b7208:	000c43ba 	.word	0x000c43ba
   b720c:	000c43dc 	.word	0x000c43dc
   b7210:	000c4414 	.word	0x000c4414
   b7214:	000c4426 	.word	0x000c4426
   b7218:	000c442c 	.word	0x000c442c
   b721c:	000c4430 	.word	0x000c4430
   b7220:	000c4460 	.word	0x000c4460
   b7224:	000c4485 	.word	0x000c4485
   b7228:	000c44b1 	.word	0x000c44b1
   b722c:	000c44d2 	.word	0x000c44d2
   b7230:	000c44d7 	.word	0x000c44d7
   b7234:	000c4501 	.word	0x000c4501
   b7238:	000c4521 	.word	0x000c4521
   b723c:	000c4526 	.word	0x000c4526
   b7240:	000c452b 	.word	0x000c452b
   b7244:	000c455f 	.word	0x000c455f
   b7248:	000c4581 	.word	0x000c4581
   b724c:	000c4585 	.word	0x000c4585
   b7250:	000c43ad 	.word	0x000c43ad
   b7254:	000c43b1 	.word	0x000c43b1
   b7258:	493e      	ldr	r1, [pc, #248]	; (b7354 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x41c>)
   b725a:	a80d      	add	r0, sp, #52	; 0x34
   b725c:	f008 fc89 	bl	bfb72 <_ZNK6String6equalsEPKc>
    else if (function == "open") {
   b7260:	b1a8      	cbz	r0, b728e <_ZN18Particle_Functions18jsonFunctionParserE6String+0x356>
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b7262:	9809      	ldr	r0, [sp, #36]	; 0x24
   b7264:	220a      	movs	r2, #10
   b7266:	a905      	add	r1, sp, #20
   b7268:	f00b f832 	bl	c22d0 <strtol>
      if ((tempValue >= 0) && (tempValue <= 12)) {
   b726c:	280c      	cmp	r0, #12
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b726e:	4606      	mov	r6, r0
      if ((tempValue >= 0) && (tempValue <= 12)) {
   b7270:	d80b      	bhi.n	b728a <_ZN18Particle_Functions18jsonFunctionParserE6String+0x352>
        snprintf(messaging,sizeof(messaging),"Setting opening hour to %d:00", tempValue);
   b7272:	4603      	mov	r3, r0
   b7274:	4a38      	ldr	r2, [pc, #224]	; (b7358 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x420>)
   b7276:	2140      	movs	r1, #64	; 0x40
   b7278:	a811      	add	r0, sp, #68	; 0x44
   b727a:	f006 f837 	bl	bd2ec <snprintf>
        sysStatus.set_openTime(tempValue);
   b727e:	f7ff f89b 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b7282:	b2f1      	uxtb	r1, r6
   b7284:	f7ff faa0 	bl	b67c8 <_ZN13sysStatusData12set_openTimeEh>
   b7288:	e708      	b.n	b709c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x164>
        snprintf(messaging,sizeof(messaging),"Open hour - must be 0-12");
   b728a:	4934      	ldr	r1, [pc, #208]	; (b735c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x424>)
   b728c:	e777      	b.n	b717e <_ZN18Particle_Functions18jsonFunctionParserE6String+0x246>
   b728e:	4934      	ldr	r1, [pc, #208]	; (b7360 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x428>)
   b7290:	a80d      	add	r0, sp, #52	; 0x34
   b7292:	f008 fc6e 	bl	bfb72 <_ZNK6String6equalsEPKc>
    else if (function == "close") {
   b7296:	b1b8      	cbz	r0, b72c8 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x390>
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b7298:	9809      	ldr	r0, [sp, #36]	; 0x24
   b729a:	220a      	movs	r2, #10
   b729c:	a905      	add	r1, sp, #20
   b729e:	f00b f817 	bl	c22d0 <strtol>
      if ((tempValue >= 13 ) && (tempValue <= 24)) {
   b72a2:	f1a0 030d 	sub.w	r3, r0, #13
   b72a6:	2b0b      	cmp	r3, #11
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b72a8:	4606      	mov	r6, r0
      if ((tempValue >= 13 ) && (tempValue <= 24)) {
   b72aa:	d80b      	bhi.n	b72c4 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x38c>
        snprintf(messaging,sizeof(messaging),"Setting closing hour to %d:00", tempValue);
   b72ac:	4603      	mov	r3, r0
   b72ae:	4a2d      	ldr	r2, [pc, #180]	; (b7364 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x42c>)
   b72b0:	2140      	movs	r1, #64	; 0x40
   b72b2:	a811      	add	r0, sp, #68	; 0x44
   b72b4:	f006 f81a 	bl	bd2ec <snprintf>
        sysStatus.set_closeTime(tempValue);
   b72b8:	f7ff f87e 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b72bc:	b2f1      	uxtb	r1, r6
   b72be:	f7ff fa89 	bl	b67d4 <_ZN13sysStatusData13set_closeTimeEh>
   b72c2:	e6eb      	b.n	b709c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x164>
        snprintf(messaging,sizeof(messaging),"Close hour - must be 13-24");
   b72c4:	4928      	ldr	r1, [pc, #160]	; (b7368 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x430>)
   b72c6:	e75a      	b.n	b717e <_ZN18Particle_Functions18jsonFunctionParserE6String+0x246>
   b72c8:	4928      	ldr	r1, [pc, #160]	; (b736c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x434>)
   b72ca:	a80d      	add	r0, sp, #52	; 0x34
   b72cc:	f008 fc51 	bl	bfb72 <_ZNK6String6equalsEPKc>
    else if (function == "type") {
   b72d0:	b1e0      	cbz	r0, b730c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x3d4>
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b72d2:	9809      	ldr	r0, [sp, #36]	; 0x24
   b72d4:	220a      	movs	r2, #10
   b72d6:	a905      	add	r1, sp, #20
   b72d8:	f00a fffa 	bl	c22d0 <strtol>
      if ((tempValue >= 0 ) && (tempValue <= 2)) {
   b72dc:	2802      	cmp	r0, #2
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b72de:	4606      	mov	r6, r0
      if ((tempValue >= 0 ) && (tempValue <= 2)) {
   b72e0:	d812      	bhi.n	b7308 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x3d0>
        snprintf(messaging,sizeof(messaging),"Setting sensor type to %d for node %d", tempValue, nodeNumber);
   b72e2:	9b04      	ldr	r3, [sp, #16]
   b72e4:	4a22      	ldr	r2, [pc, #136]	; (b7370 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x438>)
   b72e6:	9300      	str	r3, [sp, #0]
   b72e8:	2140      	movs	r1, #64	; 0x40
   b72ea:	4603      	mov	r3, r0
   b72ec:	a811      	add	r0, sp, #68	; 0x44
   b72ee:	f005 fffd 	bl	bd2ec <snprintf>
        if (!LoRA_Functions::instance().changeType(nodeNumber,tempValue)) success = false;  // Make a new entry in the nodeID database
   b72f2:	f7fc ff3d 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b72f6:	9904      	ldr	r1, [sp, #16]
   b72f8:	4632      	mov	r2, r6
   b72fa:	f7fd fd09 	bl	b4d10 <_ZN14LoRA_Functions10changeTypeEii>
   b72fe:	b338      	cbz	r0, b7350 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x418>
        else LoRA_Functions::instance().changeAlert(nodeNumber,7);         // Forces the node to update its sensor Type (on Join, node sets the Gateway)
   b7300:	f7fc ff36 	bl	b4170 <_ZN14LoRA_Functions8instanceEv>
   b7304:	2207      	movs	r2, #7
   b7306:	e70c      	b.n	b7122 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x1ea>
        snprintf(messaging,sizeof(messaging),"Sensor Type  - must be 0-2");
   b7308:	491a      	ldr	r1, [pc, #104]	; (b7374 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x43c>)
   b730a:	e738      	b.n	b717e <_ZN18Particle_Functions18jsonFunctionParserE6String+0x246>
   b730c:	491a      	ldr	r1, [pc, #104]	; (b7378 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x440>)
   b730e:	a80d      	add	r0, sp, #52	; 0x34
   b7310:	f008 fc2f 	bl	bfb72 <_ZNK6String6equalsEPKc>
    else if (function == "sim") {
   b7314:	b1d0      	cbz	r0, b734c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x414>
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b7316:	9809      	ldr	r0, [sp, #36]	; 0x24
   b7318:	220a      	movs	r2, #10
   b731a:	a905      	add	r1, sp, #20
   b731c:	f00a ffd8 	bl	c22d0 <strtol>
      if ((tempValue >= 0 ) && (tempValue <= 1)) {
   b7320:	2801      	cmp	r0, #1
      int tempValue = strtol(variable,&pEND,10);                       // Looks for the first integer and interprets it
   b7322:	4606      	mov	r6, r0
      if ((tempValue >= 0 ) && (tempValue <= 1)) {
   b7324:	d810      	bhi.n	b7348 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x410>
        snprintf(messaging,sizeof(messaging),"Setting SIM to %s", (tempValue == 0)? "Particle":"Verizon");
   b7326:	4a15      	ldr	r2, [pc, #84]	; (b737c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x444>)
   b7328:	4b15      	ldr	r3, [pc, #84]	; (b7380 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x448>)
   b732a:	2140      	movs	r1, #64	; 0x40
   b732c:	2800      	cmp	r0, #0
   b732e:	bf08      	it	eq
   b7330:	4613      	moveq	r3, r2
   b7332:	4a14      	ldr	r2, [pc, #80]	; (b7384 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x44c>)
   b7334:	a811      	add	r0, sp, #68	; 0x44
   b7336:	f005 ffd9 	bl	bd2ec <snprintf>
        sysStatus.set_verizonSIM(tempValue);
   b733a:	f7ff f83d 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b733e:	f006 0101 	and.w	r1, r6, #1
   b7342:	f7ff fc5c 	bl	b6bfe <_ZN13sysStatusData14set_verizonSIMEb>
   b7346:	e6a9      	b.n	b709c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x164>
        snprintf(messaging,sizeof(messaging),"SIM Type  - must be 0 (Particle) or 1 (Verizon)");
   b7348:	490f      	ldr	r1, [pc, #60]	; (b7388 <_ZN18Particle_Functions18jsonFunctionParserE6String+0x450>)
   b734a:	e718      	b.n	b717e <_ZN18Particle_Functions18jsonFunctionParserE6String+0x246>
      snprintf(messaging,sizeof(messaging),"Not a valid command");
   b734c:	490f      	ldr	r1, [pc, #60]	; (b738c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x454>)
   b734e:	e716      	b.n	b717e <_ZN18Particle_Functions18jsonFunctionParserE6String+0x246>
        if (!LoRA_Functions::instance().changeType(nodeNumber,tempValue)) success = false;  // Make a new entry in the nodeID database
   b7350:	4604      	mov	r4, r0
   b7352:	e6a3      	b.n	b709c <_ZN18Particle_Functions18jsonFunctionParserE6String+0x164>
   b7354:	000c4001 	.word	0x000c4001
   b7358:	000c459a 	.word	0x000c459a
   b735c:	000c45b8 	.word	0x000c45b8
   b7360:	000c45d1 	.word	0x000c45d1
   b7364:	000c45d7 	.word	0x000c45d7
   b7368:	000c45f5 	.word	0x000c45f5
   b736c:	000c37bb 	.word	0x000c37bb
   b7370:	000c4610 	.word	0x000c4610
   b7374:	000c4636 	.word	0x000c4636
   b7378:	000c4651 	.word	0x000c4651
   b737c:	000c46ee 	.word	0x000c46ee
   b7380:	000c4383 	.word	0x000c4383
   b7384:	000c4655 	.word	0x000c4655
   b7388:	000c4667 	.word	0x000c4667
   b738c:	000c4697 	.word	0x000c4697

000b7390 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7390:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b7392:	e9d0 5300 	ldrd	r5, r3, [r0]
   b7396:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7398:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b739a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b739e:	42ae      	cmp	r6, r5
   b73a0:	d004      	beq.n	b73ac <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b73a2:	4628      	mov	r0, r5
   b73a4:	f008 fad4 	bl	bf950 <_ZN6StringD1Ev>
   b73a8:	3514      	adds	r5, #20
   b73aa:	e7f8      	b.n	b739e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b73ac:	6820      	ldr	r0, [r4, #0]
   b73ae:	f005 ff7d 	bl	bd2ac <free>
    AllocatorT::free(data_);
}
   b73b2:	4620      	mov	r0, r4
   b73b4:	bd70      	pop	{r4, r5, r6, pc}

000b73b6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b73b6:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b73b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b73ba:	4604      	mov	r4, r0
   b73bc:	460d      	mov	r5, r1
   b73be:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b73c0:	d916      	bls.n	b73f0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b73c2:	4290      	cmp	r0, r2
   b73c4:	d215      	bcs.n	b73f2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b73c6:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b73ca:	1a75      	subs	r5, r6, r1
   b73cc:	f1a1 0714 	sub.w	r7, r1, #20
   b73d0:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b73d2:	42b7      	cmp	r7, r6
   b73d4:	d01c      	beq.n	b7410 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b73d6:	b12c      	cbz	r4, b73e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b73d8:	4631      	mov	r1, r6
   b73da:	4620      	mov	r0, r4
   b73dc:	f008 fb34 	bl	bfa48 <_ZN6StringC1EOS_>
   b73e0:	7c33      	ldrb	r3, [r6, #16]
   b73e2:	7423      	strb	r3, [r4, #16]
   b73e4:	4630      	mov	r0, r6
   b73e6:	f008 fab3 	bl	bf950 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b73ea:	3e14      	subs	r6, #20
   b73ec:	3c14      	subs	r4, #20
   b73ee:	e7f0      	b.n	b73d2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b73f0:	d00e      	beq.n	b7410 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b73f2:	42b5      	cmp	r5, r6
   b73f4:	d00c      	beq.n	b7410 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b73f6:	b12c      	cbz	r4, b7404 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b73f8:	4629      	mov	r1, r5
   b73fa:	4620      	mov	r0, r4
   b73fc:	f008 fb24 	bl	bfa48 <_ZN6StringC1EOS_>
   b7400:	7c2b      	ldrb	r3, [r5, #16]
   b7402:	7423      	strb	r3, [r4, #16]
   b7404:	4628      	mov	r0, r5
   b7406:	f008 faa3 	bl	bf950 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b740a:	3514      	adds	r5, #20
   b740c:	3414      	adds	r4, #20
   b740e:	e7f0      	b.n	b73f2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b7410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7412 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b7412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b7416:	2300      	movs	r3, #0
   b7418:	e9c0 3300 	strd	r3, r3, [r0]
   b741c:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b741e:	684f      	ldr	r7, [r1, #4]
   b7420:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b7422:	4604      	mov	r4, r0
   b7424:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b7426:	dd23      	ble.n	b7470 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b7428:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b742c:	fb08 f007 	mul.w	r0, r8, r7
   b7430:	f005 ff34 	bl	bd29c <malloc>
            if (!d) {
   b7434:	4605      	mov	r5, r0
   b7436:	b1d8      	cbz	r0, b7470 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b7438:	e9d4 1200 	ldrd	r1, r2, [r4]
   b743c:	fb08 1202 	mla	r2, r8, r2, r1
   b7440:	f7ff ffb9 	bl	b73b6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b7444:	6820      	ldr	r0, [r4, #0]
   b7446:	f005 ff31 	bl	bd2ac <free>
        data_ = d;
   b744a:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b744c:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b744e:	e9d6 7300 	ldrd	r7, r3, [r6]
   b7452:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b7456:	45b8      	cmp	r8, r7
   b7458:	d008      	beq.n	b746c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b745a:	4639      	mov	r1, r7
   b745c:	4628      	mov	r0, r5
   b745e:	f008 fb0d 	bl	bfa7c <_ZN6StringC1ERKS_>
   b7462:	7c3b      	ldrb	r3, [r7, #16]
   b7464:	742b      	strb	r3, [r5, #16]
   b7466:	3714      	adds	r7, #20
   b7468:	3514      	adds	r5, #20
   b746a:	e7f4      	b.n	b7456 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b746c:	6873      	ldr	r3, [r6, #4]
   b746e:	6063      	str	r3, [r4, #4]
}
   b7470:	4620      	mov	r0, r4
   b7472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b7478 <_GLOBAL__sub_I_openTimeStr>:
  }
  else {
    Log.info("Turned off the cellular modem in %i seconds", (int)(Time.now() - startTime));
    return true;
  }
   b7478:	b570      	push	{r4, r5, r6, lr}
        val_(val) {
   b747a:	4b27      	ldr	r3, [pc, #156]	; (b7518 <_GLOBAL__sub_I_openTimeStr+0xa0>)
    SleepResult() {}
   b747c:	4a27      	ldr	r2, [pc, #156]	; (b751c <_GLOBAL__sub_I_openTimeStr+0xa4>)
   b747e:	2501      	movs	r5, #1
   b7480:	701d      	strb	r5, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   b7482:	4b27      	ldr	r3, [pc, #156]	; (b7520 <_GLOBAL__sub_I_openTimeStr+0xa8>)
   b7484:	2400      	movs	r4, #0
   b7486:	b08c      	sub	sp, #48	; 0x30
    SleepResult() {}
   b7488:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b748a:	e9c3 4400 	strd	r4, r4, [r3]
        set_system_mode(mode);
   b748e:	2002      	movs	r0, #2
   b7490:	f005 fdda 	bl	bd048 <set_system_mode>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   b7494:	4621      	mov	r1, r4
   b7496:	4628      	mov	r0, r5
   b7498:	f005 fdee 	bl	bd078 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   b749c:	4629      	mov	r1, r5
   b749e:	2004      	movs	r0, #4
   b74a0:	f005 fb40 	bl	bcb24 <HAL_Feature_Set>
        capacity_(0) {
   b74a4:	e9cd 4400 	strd	r4, r4, [sp]
   b74a8:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   b74aa:	f008 fef9 	bl	c02a0 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   b74ae:	4c1d      	ldr	r4, [pc, #116]	; (b7524 <_GLOBAL__sub_I_openTimeStr+0xac>)
   b74b0:	4605      	mov	r5, r0
   b74b2:	4669      	mov	r1, sp
   b74b4:	a803      	add	r0, sp, #12
   b74b6:	f7ff ffac 	bl	b7412 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b74ba:	4626      	mov	r6, r4
        stream_(&stream) {
   b74bc:	a903      	add	r1, sp, #12
   b74be:	a806      	add	r0, sp, #24
   b74c0:	f7ff ffa7 	bl	b7412 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b74c4:	4b18      	ldr	r3, [pc, #96]	; (b7528 <_GLOBAL__sub_I_openTimeStr+0xb0>)
   b74c6:	f846 3b04 	str.w	r3, [r6], #4
   b74ca:	a906      	add	r1, sp, #24
   b74cc:	a809      	add	r0, sp, #36	; 0x24
   b74ce:	f7ff ffa0 	bl	b7412 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b74d2:	aa09      	add	r2, sp, #36	; 0x24
   b74d4:	211e      	movs	r1, #30
   b74d6:	4630      	mov	r0, r6
   b74d8:	f007 fb98 	bl	bec0c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b74dc:	a809      	add	r0, sp, #36	; 0x24
   b74de:	f7ff ff57 	bl	b7390 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b74e2:	a806      	add	r0, sp, #24
   b74e4:	f7ff ff54 	bl	b7390 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b74e8:	4b10      	ldr	r3, [pc, #64]	; (b752c <_GLOBAL__sub_I_openTimeStr+0xb4>)
   b74ea:	6023      	str	r3, [r4, #0]
   b74ec:	6225      	str	r5, [r4, #32]
   b74ee:	a803      	add	r0, sp, #12
   b74f0:	f7ff ff4e 	bl	b7390 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b74f4:	4b0e      	ldr	r3, [pc, #56]	; (b7530 <_GLOBAL__sub_I_openTimeStr+0xb8>)
   b74f6:	6023      	str	r3, [r4, #0]
        Serial.begin();
   b74f8:	f008 fed2 	bl	c02a0 <_Z16_fetch_usbserialv>
   b74fc:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b7500:	f008 febc 	bl	c027c <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b7504:	f007 f898 	bl	be638 <_ZN5spark10LogManager8instanceEv>
   b7508:	4621      	mov	r1, r4
   b750a:	f007 fa55 	bl	be9b8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);     // Easier to see the program flow
   b750e:	4668      	mov	r0, sp
   b7510:	f7ff ff3e 	bl	b7390 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b7514:	b00c      	add	sp, #48	; 0x30
   b7516:	bd70      	pop	{r4, r5, r6, pc}
   b7518:	2003e48c 	.word	0x2003e48c
   b751c:	ffff0000 	.word	0xffff0000
   b7520:	2003e480 	.word	0x2003e480
   b7524:	2003e494 	.word	0x2003e494
   b7528:	000c477c 	.word	0x000c477c
   b752c:	000c5484 	.word	0x000c5484
   b7530:	000c4794 	.word	0x000c4794

000b7534 <_ZN18Particle_Functions22disconnectFromParticleEv>:
{
   b7534:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7538:	b085      	sub	sp, #20
  time_t startTime = Time.now();
   b753a:	f008 fdca 	bl	c00d2 <_ZN9TimeClass3nowEv>
  Log.info("In the disconnect from Particle function");
   b753e:	4941      	ldr	r1, [pc, #260]	; (b7644 <_ZN18Particle_Functions22disconnectFromParticleEv+0x110>)
  time_t startTime = Time.now();
   b7540:	4605      	mov	r5, r0
  Log.info("In the disconnect from Particle function");
   b7542:	4841      	ldr	r0, [pc, #260]	; (b7648 <_ZN18Particle_Functions22disconnectFromParticleEv+0x114>)
   b7544:	f7fc fdfb 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
   b7548:	2400      	movs	r4, #0
  Particle.disconnect();                                               // Disconnect from Particle
   b754a:	a801      	add	r0, sp, #4
   b754c:	e9cd 4401 	strd	r4, r4, [sp, #4]
        bool clearSession) :
   b7550:	f8ad 400c 	strh.w	r4, [sp, #12]
   b7554:	f006 f8ee 	bl	bd734 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        return hal_timer_millis(nullptr);
   b7558:	4620      	mov	r0, r4
   b755a:	f005 fb13 	bl	bcb84 <hal_timer_millis>
        while (_while() && !_condition()) {
   b755e:	f643 2698 	movw	r6, #15000	; 0x3a98
        return hal_timer_millis(nullptr);
   b7562:	4604      	mov	r4, r0
   b7564:	2000      	movs	r0, #0
   b7566:	f005 fb0d 	bl	bcb84 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b756a:	1b03      	subs	r3, r0, r4
   b756c:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b7570:	42b3      	cmp	r3, r6
   b7572:	f171 0300 	sbcs.w	r3, r1, #0
   b7576:	d205      	bcs.n	b7584 <_ZN18Particle_Functions22disconnectFromParticleEv+0x50>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b7578:	f005 fdf0 	bl	bd15c <spark_cloud_flag_connected>
   b757c:	b110      	cbz	r0, b7584 <_ZN18Particle_Functions22disconnectFromParticleEv+0x50>
            spark_process();
   b757e:	f005 fddd 	bl	bd13c <spark_process>
        while (_while() && !_condition()) {
   b7582:	e7ef      	b.n	b7564 <_ZN18Particle_Functions22disconnectFromParticleEv+0x30>
   b7584:	f005 fdea 	bl	bd15c <spark_cloud_flag_connected>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b7588:	f005 faec 	bl	bcb64 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b758c:	4f2f      	ldr	r7, [pc, #188]	; (b764c <_ZN18Particle_Functions22disconnectFromParticleEv+0x118>)
   b758e:	6038      	str	r0, [r7, #0]
    		spark_process();
   b7590:	f005 fdd4 	bl	bd13c <spark_process>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b7594:	f005 fde2 	bl	bd15c <spark_cloud_flag_connected>
  if (Particle.connected()) {                      // As this disconnect from Particle thing can be a·syn·chro·nous, we need to take an extra step to wait, 
   b7598:	4604      	mov	r4, r0
   b759a:	b140      	cbz	r0, b75ae <_ZN18Particle_Functions22disconnectFromParticleEv+0x7a>
    Log.info("Failed to disconnect from Particle");
   b759c:	492c      	ldr	r1, [pc, #176]	; (b7650 <_ZN18Particle_Functions22disconnectFromParticleEv+0x11c>)
   b759e:	482a      	ldr	r0, [pc, #168]	; (b7648 <_ZN18Particle_Functions22disconnectFromParticleEv+0x114>)
   b75a0:	f7fc fdcd 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    return(false);
   b75a4:	2400      	movs	r4, #0
   b75a6:	4620      	mov	r0, r4
   b75a8:	b005      	add	sp, #20
   b75aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else Log.info("Disconnected from Particle in %i seconds", (int)(Time.now() - startTime));
   b75ae:	f008 fd90 	bl	c00d2 <_ZN9TimeClass3nowEv>
   b75b2:	4928      	ldr	r1, [pc, #160]	; (b7654 <_ZN18Particle_Functions22disconnectFromParticleEv+0x120>)
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b75b4:	f8df 80a0 	ldr.w	r8, [pc, #160]	; b7658 <_ZN18Particle_Functions22disconnectFromParticleEv+0x124>
   b75b8:	1b42      	subs	r2, r0, r5
   b75ba:	4823      	ldr	r0, [pc, #140]	; (b7648 <_ZN18Particle_Functions22disconnectFromParticleEv+0x114>)
   b75bc:	f7fc fdbf 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
  startTime = Time.now();
   b75c0:	f008 fd87 	bl	c00d2 <_ZN9TimeClass3nowEv>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b75c4:	4622      	mov	r2, r4
   b75c6:	2102      	movs	r1, #2
   b75c8:	4606      	mov	r6, r0
   b75ca:	f8d8 0004 	ldr.w	r0, [r8, #4]
   b75ce:	f005 fe15 	bl	bd1fc <network_disconnect>
        network_off(*this, 0, 0, NULL);
   b75d2:	f8d8 0004 	ldr.w	r0, [r8, #4]
   b75d6:	4623      	mov	r3, r4
   b75d8:	4622      	mov	r2, r4
   b75da:	4621      	mov	r1, r4
   b75dc:	f005 fe26 	bl	bd22c <network_off>
        return hal_timer_millis(nullptr);
   b75e0:	4620      	mov	r0, r4
   b75e2:	f005 facf 	bl	bcb84 <hal_timer_millis>
        while (_while() && !_condition()) {
   b75e6:	f247 5930 	movw	r9, #30000	; 0x7530
        return hal_timer_millis(nullptr);
   b75ea:	4605      	mov	r5, r0
   b75ec:	2000      	movs	r0, #0
   b75ee:	f005 fac9 	bl	bcb84 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b75f2:	1b43      	subs	r3, r0, r5
   b75f4:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b75f8:	454b      	cmp	r3, r9
   b75fa:	f171 0300 	sbcs.w	r3, r1, #0
   b75fe:	d206      	bcs.n	b760e <_ZN18Particle_Functions22disconnectFromParticleEv+0xda>
  waitFor(Cellular.isOff, 30000);                                      // As per TAN004: https://support.particle.io/hc/en-us/articles/1260802113569-TAN004-Power-off-Recommendations-for-SARA-R410M-Equipped-Devices
   b7600:	4640      	mov	r0, r8
   b7602:	f007 fe21 	bl	bf248 <_ZN5spark12NetworkClass5isOffEv>
   b7606:	b910      	cbnz	r0, b760e <_ZN18Particle_Functions22disconnectFromParticleEv+0xda>
            spark_process();
   b7608:	f005 fd98 	bl	bd13c <spark_process>
        while (_while() && !_condition()) {
   b760c:	e7ee      	b.n	b75ec <_ZN18Particle_Functions22disconnectFromParticleEv+0xb8>
   b760e:	4812      	ldr	r0, [pc, #72]	; (b7658 <_ZN18Particle_Functions22disconnectFromParticleEv+0x124>)
   b7610:	f007 fe1a 	bl	bf248 <_ZN5spark12NetworkClass5isOffEv>
		return HAL_Timer_Get_Milli_Seconds();
   b7614:	f005 faa6 	bl	bcb64 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   b7618:	6038      	str	r0, [r7, #0]
    		spark_process();
   b761a:	f005 fd8f 	bl	bd13c <spark_process>
  if (Cellular.isOn()) {                                               // At this point, if cellular is not off, we have a problem
   b761e:	480e      	ldr	r0, [pc, #56]	; (b7658 <_ZN18Particle_Functions22disconnectFromParticleEv+0x124>)
   b7620:	f007 fe0e 	bl	bf240 <_ZN5spark12NetworkClass4isOnEv>
   b7624:	b120      	cbz	r0, b7630 <_ZN18Particle_Functions22disconnectFromParticleEv+0xfc>
    Log.info("Failed to turn off the Cellular modem");
   b7626:	490d      	ldr	r1, [pc, #52]	; (b765c <_ZN18Particle_Functions22disconnectFromParticleEv+0x128>)
   b7628:	4807      	ldr	r0, [pc, #28]	; (b7648 <_ZN18Particle_Functions22disconnectFromParticleEv+0x114>)
   b762a:	f7fc fd88 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    return(false);                                                     // Let the calling function know that we were not able to turn off the cellular modem
   b762e:	e7ba      	b.n	b75a6 <_ZN18Particle_Functions22disconnectFromParticleEv+0x72>
    Log.info("Turned off the cellular modem in %i seconds", (int)(Time.now() - startTime));
   b7630:	f008 fd4f 	bl	c00d2 <_ZN9TimeClass3nowEv>
   b7634:	490a      	ldr	r1, [pc, #40]	; (b7660 <_ZN18Particle_Functions22disconnectFromParticleEv+0x12c>)
   b7636:	1b82      	subs	r2, r0, r6
   b7638:	4803      	ldr	r0, [pc, #12]	; (b7648 <_ZN18Particle_Functions22disconnectFromParticleEv+0x114>)
   b763a:	f7fc fd80 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    return true;
   b763e:	2401      	movs	r4, #1
   b7640:	e7b1      	b.n	b75a6 <_ZN18Particle_Functions22disconnectFromParticleEv+0x72>
   b7642:	bf00      	nop
   b7644:	000c46ab 	.word	0x000c46ab
   b7648:	2003e650 	.word	0x2003e650
   b764c:	2003e710 	.word	0x2003e710
   b7650:	000c46d4 	.word	0x000c46d4
   b7654:	000c46f7 	.word	0x000c46f7
   b7658:	2003e60c 	.word	0x2003e60c
   b765c:	000c4720 	.word	0x000c4720
   b7660:	000c4746 	.word	0x000c4746

000b7664 <_Z18initializePinModesv>:
// Specific to the sensor
extern const pin_t INT_PIN = A1;                   // May need to change this
extern const pin_t MODULE_POWER_PIN = A2;          // Make sure we document this above
const pin_t LED_POWER_PIN = A3;

bool initializePinModes() {
   b7664:	b508      	push	{r3, lr}
    Log.info("Initalizing the pinModes");
   b7666:	4917      	ldr	r1, [pc, #92]	; (b76c4 <_Z18initializePinModesv+0x60>)
   b7668:	4817      	ldr	r0, [pc, #92]	; (b76c8 <_Z18initializePinModesv+0x64>)
   b766a:	f7fc fd68 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    // Define as inputs or outputs
    pinMode(BUTTON_PIN,INPUT_PULLUP);               // User button on the carrier board - active LOW
   b766e:	2102      	movs	r1, #2
   b7670:	2004      	movs	r0, #4
   b7672:	f008 ff2d 	bl	c04d0 <pinMode>
    pinMode(WAKEUP_PIN,INPUT);                      // This pin is active HIGH
   b7676:	2100      	movs	r1, #0
   b7678:	2008      	movs	r0, #8
   b767a:	f008 ff29 	bl	c04d0 <pinMode>
    pinMode(BLUE_LED,OUTPUT);                       // On the Boron itself
   b767e:	2101      	movs	r1, #1
   b7680:	2007      	movs	r0, #7
   b7682:	f008 ff25 	bl	c04d0 <pinMode>
    pinMode(INT_PIN, INPUT);
   b7686:	2100      	movs	r1, #0
   b7688:	2012      	movs	r0, #18
   b768a:	f008 ff21 	bl	c04d0 <pinMode>
    pinMode(MODULE_POWER_PIN, OUTPUT);
   b768e:	2101      	movs	r1, #1
   b7690:	2011      	movs	r0, #17
   b7692:	f008 ff1d 	bl	c04d0 <pinMode>
    pinMode(LED_POWER_PIN,OUTPUT);
   b7696:	2101      	movs	r1, #1
   b7698:	2010      	movs	r0, #16
   b769a:	f008 ff19 	bl	c04d0 <pinMode>
    digitalWrite(LED_POWER_PIN,LOW);                // Turns on the LEd on the PIR sensor
   b769e:	2100      	movs	r1, #0
   b76a0:	2010      	movs	r0, #16
   b76a2:	f008 ff26 	bl	c04f2 <digitalWrite>
    digitalWrite(MODULE_POWER_PIN,LOW);             // Enable (LOW) or disable (HIGH) the sensor
   b76a6:	2100      	movs	r1, #0
   b76a8:	2011      	movs	r0, #17
   b76aa:	f008 ff22 	bl	c04f2 <digitalWrite>
    pinMode(RFM95_RST,OUTPUT);
   b76ae:	2101      	movs	r1, #1
   b76b0:	2006      	movs	r0, #6
   b76b2:	f008 ff0d 	bl	c04d0 <pinMode>
    digitalWrite(RFM95_RST,HIGH);
   b76b6:	2101      	movs	r1, #1
   b76b8:	2006      	movs	r0, #6
   b76ba:	f008 ff1a 	bl	c04f2 <digitalWrite>
    return true;
}
   b76be:	2001      	movs	r0, #1
   b76c0:	bd08      	pop	{r3, pc}
   b76c2:	bf00      	nop
   b76c4:	000c47c4 	.word	0x000c47c4
   b76c8:	2003e650 	.word	0x2003e650

000b76cc <_Z18initializePowerCfgv>:


bool initializePowerCfg() {
   b76cc:	b510      	push	{r4, lr}
    Log.info("Initializing Power Config");
   b76ce:	4918      	ldr	r1, [pc, #96]	; (b7730 <_Z18initializePowerCfgv+0x64>)
   b76d0:	4818      	ldr	r0, [pc, #96]	; (b7734 <_Z18initializePowerCfgv+0x68>)
bool initializePowerCfg() {
   b76d2:	b090      	sub	sp, #64	; 0x40

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   b76d4:	2420      	movs	r4, #32
    Log.info("Initializing Power Config");
   b76d6:	f7fc fd32 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b76da:	4622      	mov	r2, r4
   b76dc:	2100      	movs	r1, #0
   b76de:	4668      	mov	r0, sp
   b76e0:	f009 fdba 	bl	c1258 <memset>
   b76e4:	4622      	mov	r2, r4
   b76e6:	2100      	movs	r1, #0
   b76e8:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   b76ec:	f88d 4005 	strb.w	r4, [sp, #5]
            : conf_{} {
   b76f0:	f009 fdb2 	bl	c1258 <memset>
        return system_power_management_set_config(conf.config(), nullptr);
   b76f4:	2100      	movs	r1, #0
   b76f6:	eb0d 0004 	add.w	r0, sp, r4
        conf_.size = sizeof(conf_);
   b76fa:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
   b76fe:	f005 fcf7 	bl	bd0f0 <system_power_management_set_config>
    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration(const hal_power_config& conf) : conf_(conf) {}
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   b7702:	f241 33d8 	movw	r3, #5080	; 0x13d8
   b7706:	f8ad 3006 	strh.w	r3, [sp, #6]
    uint16_t powerSourceMinVoltage() const {
        return conf_.vin_min_voltage;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   b770a:	4b0b      	ldr	r3, [pc, #44]	; (b7738 <_Z18initializePowerCfgv+0x6c>)
   b770c:	9302      	str	r3, [sp, #8]
    uint16_t powerSourceMaxCurrent() const {
        return conf_.vin_max_current;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   b770e:	f241 0370 	movw	r3, #4208	; 0x1070
   b7712:	f8ad 300c 	strh.w	r3, [sp, #12]
    uint16_t batteryChargeCurrent() const {
        return conf_.charge_current;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   b7716:	9b00      	ldr	r3, [sp, #0]
   b7718:	2100      	movs	r1, #0
   b771a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   b771e:	4668      	mov	r0, sp
   b7720:	9300      	str	r3, [sp, #0]
   b7722:	f005 fce5 	bl	bd0f0 <system_power_management_set_config>
                                                                     // but the USB cable is connected to a USB host, this feature flag
                                                                     // enforces the voltage/current limits specified in the configuration
                                                                     // (where by default the device would be thinking that it's powered by the USB Host)
    int res = System.setPowerConfiguration(conf); // returns SYSTEM_ERROR_NONE (0) in case of success
    return res;
}
   b7726:	3800      	subs	r0, #0
   b7728:	bf18      	it	ne
   b772a:	2001      	movne	r0, #1
   b772c:	b010      	add	sp, #64	; 0x40
   b772e:	bd10      	pop	{r4, pc}
   b7730:	000c47dd 	.word	0x000c47dd
   b7734:	2003e650 	.word	0x2003e650
   b7738:	03840384 	.word	0x03840384

000b773c <_Z17tmp36TemperatureCi>:

float tmp36TemperatureC (int adcValue) { 
    // Analog inputs have values from 0-4095, or
    // 12-bit precision. 0 = 0V, 4095 = 3.3V, 0.0008 volts (0.8 mV) per unit
    // The temperature sensor docs use millivolts (mV), so use 3300 as the factor instead of 3.3.
    float mV = ((float)adcValue) * 3300 / 4095;
   b773c:	ee07 0a90 	vmov	s15, r0
   b7740:	ed9f 7a09 	vldr	s14, [pc, #36]	; b7768 <_Z17tmp36TemperatureCi+0x2c>
   b7744:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b7748:	ee67 7a87 	vmul.f32	s15, s15, s14
   b774c:	ed9f 7a07 	vldr	s14, [pc, #28]	; b776c <_Z17tmp36TemperatureCi+0x30>
   b7750:	ee87 0a87 	vdiv.f32	s0, s15, s14

    // With the TMP36, with the flat side facing you, the pins are:
    // Vcc | Analog Out | Ground
    // You must put a 0.1 uF capacitor between the analog output and ground or you'll get crazy
    // inaccurate values!
    return (mV - 500) / 10;
   b7754:	eddf 7a06 	vldr	s15, [pc, #24]	; b7770 <_Z17tmp36TemperatureCi+0x34>
   b7758:	ee70 7a67 	vsub.f32	s15, s0, s15
}
   b775c:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
   b7760:	ee87 0a80 	vdiv.f32	s0, s15, s0
   b7764:	4770      	bx	lr
   b7766:	bf00      	nop
   b7768:	454e4000 	.word	0x454e4000
   b776c:	457ff000 	.word	0x457ff000
   b7770:	43fa0000 	.word	0x43fa0000

000b7774 <_Z16isItSafeToChargev>:
  else return false;
}


bool isItSafeToCharge()                             // Returns a true or false if the battery is in a safe charging range.
{
   b7774:	b513      	push	{r0, r1, r4, lr}
  PMIC pmic(true);
   b7776:	2101      	movs	r1, #1
   b7778:	a801      	add	r0, sp, #4
   b777a:	f007 fdfa 	bl	bf372 <_ZN4PMICC1Eb>
  if (current.get_internalTempC() < 0 || current.get_internalTempC() > 37 )  {  // Reference: (32 to 113 but with safety)
   b777e:	f7fe fe63 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b7782:	f7fe ffc2 	bl	b670a <_ZNK17currentStatusData17get_internalTempCEv>
   b7786:	f7fe fe5f 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b778a:	f7fe ffbe 	bl	b670a <_ZNK17currentStatusData17get_internalTempCEv>
   b778e:	2825      	cmp	r0, #37	; 0x25
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   b7790:	a801      	add	r0, sp, #4
  if (current.get_internalTempC() < 0 || current.get_internalTempC() > 37 )  {  // Reference: (32 to 113 but with safety)
   b7792:	d90d      	bls.n	b77b0 <_Z16isItSafeToChargev+0x3c>
    pmic.disableCharging();                         // It is too cold or too hot to safely charge the battery
   b7794:	f007 fe80 	bl	bf498 <_ZN4PMIC15disableChargingEv>
    current.set_batteryState(1);                       // Overwrites the values from the batteryState API to reflect that we are "Not Charging"
   b7798:	f7fe fe56 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b779c:	2101      	movs	r1, #1
   b779e:	f7ff f831 	bl	b6804 <_ZN17currentStatusData16set_batteryStateEh>
    return false;
   b77a2:	2400      	movs	r4, #0
  PMIC pmic(true);
   b77a4:	a801      	add	r0, sp, #4
   b77a6:	f007 fdf3 	bl	bf390 <_ZN4PMICD1Ev>
  }
  else {
    pmic.enableCharging();                          // It is safe to charge the battery
    return true;
  }
}
   b77aa:	4620      	mov	r0, r4
   b77ac:	b002      	add	sp, #8
   b77ae:	bd10      	pop	{r4, pc}
    pmic.enableCharging();                          // It is safe to charge the battery
   b77b0:	f007 fe57 	bl	bf462 <_ZN4PMIC14enableChargingEv>
    return true;
   b77b4:	2401      	movs	r4, #1
   b77b6:	e7f5      	b.n	b77a4 <_Z16isItSafeToChargev+0x30>

000b77b8 <_Z17getSignalStrengthv>:


void getSignalStrength() {
   b77b8:	b530      	push	{r4, r5, lr}
  char signalStr[16];
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b77ba:	4d1b      	ldr	r5, [pc, #108]	; (b7828 <_Z17getSignalStrengthv+0x70>)
   b77bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getSignalStrength() {
   b77be:	b09b      	sub	sp, #108	; 0x6c
  const char* radioTech[10] = {"Unknown","None","WiFi","GSM","UMTS","CDMA","LTE","IEEE802154","LTE_CAT_M1","LTE_CAT_NB1"};
   b77c0:	ac10      	add	r4, sp, #64	; 0x40
   b77c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b77c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b77c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b77c8:	e895 0003 	ldmia.w	r5, {r0, r1}
   b77cc:	e884 0003 	stmia.w	r4, {r0, r1}
  // New Signal Strength capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
   b77d0:	4916      	ldr	r1, [pc, #88]	; (b782c <_Z17getSignalStrengthv+0x74>)
   b77d2:	a808      	add	r0, sp, #32
   b77d4:	f005 fe5c 	bl	bd490 <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
   b77d8:	a808      	add	r0, sp, #32
   b77da:	f005 fe9c 	bl	bd516 <_ZNK14CellularSignal19getAccessTechnologyEv>
   b77de:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
   b77e0:	a808      	add	r0, sp, #32
   b77e2:	f005 fed1 	bl	bd588 <_ZNK14CellularSignal11getStrengthEv>

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
   b77e6:	a808      	add	r0, sp, #32
  float strengthPercentage = sig.getStrength();
   b77e8:	ee10 5a10 	vmov	r5, s0
  float qualityPercentage = sig.getQuality();
   b77ec:	f005 fefc 	bl	bd5e8 <_ZNK14CellularSignal10getQualityEv>

  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b77f0:	ab1a      	add	r3, sp, #104	; 0x68
  float qualityPercentage = sig.getQuality();
   b77f2:	ee10 0a10 	vmov	r0, s0
  snprintf(signalStr,sizeof(signalStr), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
   b77f6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   b77fa:	f009 f8f5 	bl	c09e8 <__aeabi_f2d>
   b77fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
   b7802:	4628      	mov	r0, r5
   b7804:	f009 f8f0 	bl	c09e8 <__aeabi_f2d>
   b7808:	e9cd 0100 	strd	r0, r1, [sp]
   b780c:	2110      	movs	r1, #16
   b780e:	f854 3c28 	ldr.w	r3, [r4, #-40]
   b7812:	4a07      	ldr	r2, [pc, #28]	; (b7830 <_Z17getSignalStrengthv+0x78>)
   b7814:	eb0d 0001 	add.w	r0, sp, r1
   b7818:	f005 fd68 	bl	bd2ec <snprintf>
  Log.info(signalStr);
   b781c:	4805      	ldr	r0, [pc, #20]	; (b7834 <_Z17getSignalStrengthv+0x7c>)
   b781e:	a904      	add	r1, sp, #16
   b7820:	f7fc fc8d 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
}
   b7824:	b01b      	add	sp, #108	; 0x6c
   b7826:	bd30      	pop	{r4, r5, pc}
   b7828:	000c4884 	.word	0x000c4884
   b782c:	2003e60c 	.word	0x2003e60c
   b7830:	000c4842 	.word	0x000c4842
   b7834:	2003e650 	.word	0x2003e650

000b7838 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   b7838:	b530      	push	{r4, r5, lr}
   b783a:	b085      	sub	sp, #20
   b783c:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   b783e:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   b7840:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   b7842:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   b7844:	f005 fbee 	bl	bd024 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   b7848:	b990      	cbnz	r0, b7870 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x38>
        return ret;
    }
    return get(src, val);
   b784a:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   b784c:	b10c      	cbz	r4, b7852 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   b784e:	6923      	ldr	r3, [r4, #16]
   b7850:	b923      	cbnz	r3, b785c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   b7852:	4a08      	ldr	r2, [pc, #32]	; (b7874 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x3c>)
   b7854:	4908      	ldr	r1, [pc, #32]	; (b7878 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>)
   b7856:	200a      	movs	r0, #10
   b7858:	f005 fbac 	bl	bcfb4 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   b785c:	230c      	movs	r3, #12
   b785e:	e9cd 3501 	strd	r3, r5, [sp, #4]
   b7862:	2304      	movs	r3, #4
   b7864:	9303      	str	r3, [sp, #12]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   b7866:	aa01      	add	r2, sp, #4
   b7868:	6923      	ldr	r3, [r4, #16]
   b786a:	2101      	movs	r1, #1
   b786c:	4620      	mov	r0, r4
   b786e:	4798      	blx	r3
}
   b7870:	b005      	add	sp, #20
   b7872:	bd30      	pop	{r4, r5, pc}
   b7874:	000bcb55 	.word	0x000bcb55
   b7878:	000c485b 	.word	0x000c485b

000b787c <_Z12batteryStatev>:
bool batteryState() {
   b787c:	b513      	push	{r0, r1, r4, lr}
    current.set_batteryState(System.batteryState());                      // Call before isItSafeToCharge() as it may overwrite the context
   b787e:	f7fe fde3 	bl	b6448 <_ZN17currentStatusData8instanceEv>
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   b7882:	a901      	add	r1, sp, #4
   b7884:	4604      	mov	r4, r0
   b7886:	2007      	movs	r0, #7
   b7888:	f7ff ffd6 	bl	b7838 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r < 0) {
   b788c:	1e01      	subs	r1, r0, #0
        return val;
   b788e:	bfa8      	it	ge
   b7890:	9901      	ldrge	r1, [sp, #4]
   b7892:	4620      	mov	r0, r4
   b7894:	b2c9      	uxtb	r1, r1
   b7896:	f7fe ffb5 	bl	b6804 <_ZN17currentStatusData16set_batteryStateEh>
    fuelGauge.quickStart();                                            // May help us re-establish a baseline for SoC
   b789a:	4818      	ldr	r0, [pc, #96]	; (b78fc <_Z12batteryStatev+0x80>)
   b789c:	f006 fa44 	bl	bdd28 <_ZN9FuelGauge10quickStartEv>
    delay(500);
   b78a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b78a4:	f005 fd7a 	bl	bd39c <delay>
  current.set_stateOfCharge(System.batteryCharge());                   // Assign to system value
   b78a8:	f7fe fdce 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b78ac:	a901      	add	r1, sp, #4
   b78ae:	4604      	mov	r4, r0
   b78b0:	2003      	movs	r0, #3
   b78b2:	f7ff ffc1 	bl	b7838 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r) {
   b78b6:	b9e8      	cbnz	r0, b78f4 <_Z12batteryStatev+0x78>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   b78b8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   b78bc:	ee07 3a90 	vmov	s15, r3
   b78c0:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
   b78c4:	ee17 0a90 	vmov	r0, s15
   b78c8:	f009 f88e 	bl	c09e8 <__aeabi_f2d>
   b78cc:	ec41 0b10 	vmov	d0, r0, r1
   b78d0:	4620      	mov	r0, r4
   b78d2:	f7fe fe01 	bl	b64d8 <_ZN17currentStatusData17set_stateOfChargeEd>
  if (current.get_stateOfCharge() > 60) return true;
   b78d6:	f7fe fdb7 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b78da:	f7fe fddd 	bl	b6498 <_ZNK17currentStatusData17get_stateOfChargeEv>
   b78de:	4b08      	ldr	r3, [pc, #32]	; (b7900 <_Z12batteryStatev+0x84>)
   b78e0:	ec51 0b10 	vmov	r0, r1, d0
   b78e4:	2200      	movs	r2, #0
   b78e6:	f009 fb67 	bl	c0fb8 <__aeabi_dcmpgt>
}
   b78ea:	3800      	subs	r0, #0
   b78ec:	bf18      	it	ne
   b78ee:	2001      	movne	r0, #1
   b78f0:	b002      	add	sp, #8
   b78f2:	bd10      	pop	{r4, pc}
            return -1.0f;
   b78f4:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   b78f8:	e7e4      	b.n	b78c4 <_Z12batteryStatev+0x48>
   b78fa:	bf00      	nop
   b78fc:	2003e4b8 	.word	0x2003e4b8
   b7900:	404e0000 	.word	0x404e0000

000b7904 <_Z16takeMeasurementsv>:
bool takeMeasurements() { 
   b7904:	b513      	push	{r0, r1, r4, lr}
    current.set_internalTempC((int)tmp36TemperatureC(analogRead(TMP36_SENSE_PIN)));
   b7906:	f7fe fd9f 	bl	b6448 <_ZN17currentStatusData8instanceEv>
   b790a:	4b0f      	ldr	r3, [pc, #60]	; (b7948 <_Z16takeMeasurementsv+0x44>)
   b790c:	4604      	mov	r4, r0
   b790e:	8818      	ldrh	r0, [r3, #0]
   b7910:	f008 fe1b 	bl	c054a <analogRead>
   b7914:	f7ff ff12 	bl	b773c <_Z17tmp36TemperatureCi>
   b7918:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   b791c:	4620      	mov	r0, r4
   b791e:	edcd 7a01 	vstr	s15, [sp, #4]
   b7922:	f89d 1004 	ldrb.w	r1, [sp, #4]
   b7926:	f7fe ff67 	bl	b67f8 <_ZN17currentStatusData17set_internalTempCEh>
    batteryState();
   b792a:	f7ff ffa7 	bl	b787c <_Z12batteryStatev>
    isItSafeToCharge();
   b792e:	f7ff ff21 	bl	b7774 <_Z16isItSafeToChargev>
    if (sysStatus.get_nodeNumber() == 0 ) getSignalStrength();
   b7932:	f7fe fd41 	bl	b63b8 <_ZN13sysStatusData8instanceEv>
   b7936:	f7fe febb 	bl	b66b0 <_ZNK13sysStatusData14get_nodeNumberEv>
   b793a:	b908      	cbnz	r0, b7940 <_Z16takeMeasurementsv+0x3c>
   b793c:	f7ff ff3c 	bl	b77b8 <_Z17getSignalStrengthv>
}
   b7940:	2001      	movs	r0, #1
   b7942:	b002      	add	sp, #8
   b7944:	bd10      	pop	{r4, pc}
   b7946:	bf00      	nop
   b7948:	000c4802 	.word	0x000c4802

000b794c <_GLOBAL__sub_I_batteryContext>:
FuelGauge fuelGauge;                                // Needed to address issue with updates in low battery state 
   b794c:	4801      	ldr	r0, [pc, #4]	; (b7954 <_GLOBAL__sub_I_batteryContext+0x8>)
   b794e:	2100      	movs	r1, #0
   b7950:	f006 b9a6 	b.w	bdca0 <_ZN9FuelGaugeC1Eb>
   b7954:	2003e4b8 	.word	0x2003e4b8

000b7958 <_ZN6AB1805D1Ev>:
    instance = this;
}

AB1805::~AB1805() {

}
   b7958:	4770      	bx	lr

000b795a <_ZN6AB1805D0Ev>:
AB1805::~AB1805() {
   b795a:	b510      	push	{r4, lr}
}
   b795c:	2120      	movs	r1, #32
AB1805::~AB1805() {
   b795e:	4604      	mov	r4, r0
}
   b7960:	f7fc fb9d 	bl	b409e <_ZdlPvj>
   b7964:	4620      	mov	r0, r4
   b7966:	bd10      	pop	{r4, pc}

000b7968 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>:
inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
   b7968:	b510      	push	{r4, lr}
   b796a:	4604      	mov	r4, r0
   b796c:	b08a      	sub	sp, #40	; 0x28
   b796e:	4608      	mov	r0, r1
    attr.flags = 0;
   b7970:	f04f 0c20 	mov.w	ip, #32
   b7974:	2100      	movs	r1, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b7976:	e9cd 2300 	strd	r2, r3, [sp]
    attr.flags = 0;
   b797a:	e9cd c102 	strd	ip, r1, [sp, #8]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b797e:	460b      	mov	r3, r1
   b7980:	aa02      	add	r2, sp, #8
   b7982:	6821      	ldr	r1, [r4, #0]
   b7984:	f005 fb26 	bl	bcfd4 <log_message_v>
}
   b7988:	b00a      	add	sp, #40	; 0x28
   b798a:	bd10      	pop	{r4, pc}

000b798c <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
   b798c:	b40e      	push	{r1, r2, r3}
   b798e:	b503      	push	{r0, r1, lr}
   b7990:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_ERROR, fmt, args);
   b7992:	2132      	movs	r1, #50	; 0x32
inline void spark::Logger::error(const char *fmt, ...) const {
   b7994:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b7998:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_ERROR, fmt, args);
   b799a:	f7ff ffe5 	bl	b7968 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b799e:	b002      	add	sp, #8
   b79a0:	f85d eb04 	ldr.w	lr, [sp], #4
   b79a4:	b003      	add	sp, #12
   b79a6:	4770      	bx	lr

000b79a8 <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   b79a8:	b40e      	push	{r1, r2, r3}
   b79aa:	b503      	push	{r0, r1, lr}
   b79ac:	ab03      	add	r3, sp, #12
    log(LOG_LEVEL_TRACE, fmt, args);
   b79ae:	2101      	movs	r1, #1
inline void spark::Logger::trace(const char *fmt, ...) const {
   b79b0:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, fmt);
   b79b4:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_TRACE, fmt, args);
   b79b6:	f7ff ffd7 	bl	b7968 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
}
   b79ba:	b002      	add	sp, #8
   b79bc:	f85d eb04 	ldr.w	lr, [sp], #4
   b79c0:	b003      	add	sp, #12
   b79c2:	4770      	bx	lr

000b79c4 <_ZN6AB1805C1ER7TwoWireh>:
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b79c4:	b510      	push	{r4, lr}
   b79c6:	7202      	strb	r2, [r0, #8]
   b79c8:	22ff      	movs	r2, #255	; 0xff
   b79ca:	8142      	strh	r2, [r0, #10]
   b79cc:	2200      	movs	r2, #0
   b79ce:	e9c0 2203 	strd	r2, r2, [r0, #12]
   b79d2:	6142      	str	r2, [r0, #20]
   b79d4:	7602      	strb	r2, [r0, #24]
   b79d6:	61c2      	str	r2, [r0, #28]
    instance = this;
   b79d8:	4a02      	ldr	r2, [pc, #8]	; (b79e4 <_ZN6AB1805C1ER7TwoWireh+0x20>)
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b79da:	4c03      	ldr	r4, [pc, #12]	; (b79e8 <_ZN6AB1805C1ER7TwoWireh+0x24>)
    instance = this;
   b79dc:	6010      	str	r0, [r2, #0]
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   b79de:	e9c0 4100 	strd	r4, r1, [r0]
}
   b79e2:	bd10      	pop	{r4, pc}
   b79e4:	2003e4c4 	.word	0x2003e4c4
   b79e8:	000c4afc 	.word	0x000c4afc

000b79ec <_ZN6AB180513readRegistersEhPhjb>:

bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
    return readRegisters(regAddr, &value, 1, lock);
}

bool AB1805::readRegisters(uint8_t regAddr, uint8_t *array, size_t num, bool lock) {
   b79ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b79f0:	f89d 8020 	ldrb.w	r8, [sp, #32]
   b79f4:	4604      	mov	r4, r0
   b79f6:	4689      	mov	r9, r1
   b79f8:	4616      	mov	r6, r2
   b79fa:	461f      	mov	r7, r3
    bool bResult = false;

    if (lock) {
   b79fc:	f1b8 0f00 	cmp.w	r8, #0
   b7a00:	d002      	beq.n	b7a08 <_ZN6AB180513readRegistersEhPhjb+0x1c>
        wire.lock();
   b7a02:	6840      	ldr	r0, [r0, #4]
   b7a04:	f006 fa36 	bl	bde74 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b7a08:	7a21      	ldrb	r1, [r4, #8]
   b7a0a:	6860      	ldr	r0, [r4, #4]
   b7a0c:	f006 fa0f 	bl	bde2e <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b7a10:	6860      	ldr	r0, [r4, #4]
   b7a12:	6803      	ldr	r3, [r0, #0]
   b7a14:	4649      	mov	r1, r9
   b7a16:	689b      	ldr	r3, [r3, #8]
   b7a18:	4798      	blx	r3
    int stat = wire.endTransmission(false);
   b7a1a:	6860      	ldr	r0, [r4, #4]
   b7a1c:	2100      	movs	r1, #0
   b7a1e:	f006 fa25 	bl	bde6c <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b7a22:	4605      	mov	r5, r0
   b7a24:	bb00      	cbnz	r0, b7a68 <_ZN6AB180513readRegistersEhPhjb+0x7c>
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b7a26:	2301      	movs	r3, #1
   b7a28:	7a21      	ldrb	r1, [r4, #8]
   b7a2a:	6860      	ldr	r0, [r4, #4]
   b7a2c:	463a      	mov	r2, r7
   b7a2e:	f006 f9ec 	bl	bde0a <_ZN7TwoWire11requestFromEhjh>
        if (count == num) {
   b7a32:	4287      	cmp	r7, r0
        size_t count = wire.requestFrom(i2cAddr, num, true);
   b7a34:	4603      	mov	r3, r0
        if (count == num) {
   b7a36:	d109      	bne.n	b7a4c <_ZN6AB180513readRegistersEhPhjb+0x60>
   b7a38:	4437      	add	r7, r6
            for(size_t ii = 0; ii < num; ii++) {
   b7a3a:	42be      	cmp	r6, r7
   b7a3c:	d01c      	beq.n	b7a78 <_ZN6AB180513readRegistersEhPhjb+0x8c>
                array[ii] = wire.read();
   b7a3e:	6860      	ldr	r0, [r4, #4]
   b7a40:	6803      	ldr	r3, [r0, #0]
   b7a42:	695b      	ldr	r3, [r3, #20]
   b7a44:	4798      	blx	r3
   b7a46:	f806 0b01 	strb.w	r0, [r6], #1
            for(size_t ii = 0; ii < num; ii++) {
   b7a4a:	e7f6      	b.n	b7a3a <_ZN6AB180513readRegistersEhPhjb+0x4e>
            // _log.print("\n");

            bResult = true;
        }
        else {
            _log.error("failed to read regAddr=%02x count=%u", regAddr, count);
   b7a4c:	490b      	ldr	r1, [pc, #44]	; (b7a7c <_ZN6AB180513readRegistersEhPhjb+0x90>)
   b7a4e:	480c      	ldr	r0, [pc, #48]	; (b7a80 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b7a50:	464a      	mov	r2, r9
   b7a52:	f7ff ff9b 	bl	b798c <_ZNK5spark6Logger5errorEPKcz>
    }
    else {
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
    }

    if (lock) {
   b7a56:	f1b8 0f00 	cmp.w	r8, #0
   b7a5a:	d002      	beq.n	b7a62 <_ZN6AB180513readRegistersEhPhjb+0x76>
        wire.unlock();
   b7a5c:	6860      	ldr	r0, [r4, #4]
   b7a5e:	f006 fa12 	bl	bde86 <_ZN7TwoWire6unlockEv>
    }
    return bResult;    
}
   b7a62:	4628      	mov	r0, r5
   b7a64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
   b7a68:	4603      	mov	r3, r0
   b7a6a:	4906      	ldr	r1, [pc, #24]	; (b7a84 <_ZN6AB180513readRegistersEhPhjb+0x98>)
   b7a6c:	4804      	ldr	r0, [pc, #16]	; (b7a80 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   b7a6e:	464a      	mov	r2, r9
   b7a70:	f7ff ff8c 	bl	b798c <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b7a74:	2500      	movs	r5, #0
   b7a76:	e7ee      	b.n	b7a56 <_ZN6AB180513readRegistersEhPhjb+0x6a>
            bResult = true;
   b7a78:	2501      	movs	r5, #1
   b7a7a:	e7ec      	b.n	b7a56 <_ZN6AB180513readRegistersEhPhjb+0x6a>
   b7a7c:	000c48ac 	.word	0x000c48ac
   b7a80:	2003e4c0 	.word	0x2003e4c0
   b7a84:	000c48d1 	.word	0x000c48d1

000b7a88 <_ZN6AB180512readRegisterEhRhb>:
bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
   b7a88:	b507      	push	{r0, r1, r2, lr}
    return readRegisters(regAddr, &value, 1, lock);
   b7a8a:	9300      	str	r3, [sp, #0]
   b7a8c:	2301      	movs	r3, #1
   b7a8e:	f7ff ffad 	bl	b79ec <_ZN6AB180513readRegistersEhPhjb>
}
   b7a92:	b003      	add	sp, #12
   b7a94:	f85d fb04 	ldr.w	pc, [sp], #4

000b7a98 <_ZN6AB180510detectChipEv>:
bool AB1805::detectChip() {
   b7a98:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (foutPin != PIN_INVALID) {
   b7a9a:	8943      	ldrh	r3, [r0, #10]
   b7a9c:	2bff      	cmp	r3, #255	; 0xff
bool AB1805::detectChip() {
   b7a9e:	4604      	mov	r4, r0
    if (foutPin != PIN_INVALID) {
   b7aa0:	d010      	beq.n	b7ac4 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   b7aa2:	4e19      	ldr	r6, [pc, #100]	; (b7b08 <_ZN6AB180510detectChipEv+0x70>)
   b7aa4:	4d19      	ldr	r5, [pc, #100]	; (b7b0c <_ZN6AB180510detectChipEv+0x74>)
   b7aa6:	f005 f85d 	bl	bcb64 <HAL_Timer_Get_Milli_Seconds>
        while(millis() - start < 1000) {
   b7aaa:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   b7aae:	d209      	bcs.n	b7ac4 <_ZN6AB180510detectChipEv+0x2c>
            if (digitalRead(foutPin) == HIGH) {
   b7ab0:	8960      	ldrh	r0, [r4, #10]
   b7ab2:	f008 fd37 	bl	c0524 <digitalRead>
   b7ab6:	2801      	cmp	r0, #1
   b7ab8:	d004      	beq.n	b7ac4 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   b7aba:	4631      	mov	r1, r6
   b7abc:	4628      	mov	r0, r5
   b7abe:	f7fc fb3e 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b7ac2:	e7f0      	b.n	b7aa6 <_ZN6AB180510detectChipEv+0xe>
    bResult = readRegister(REG_ID0, value);
   b7ac4:	2301      	movs	r3, #1
   b7ac6:	f10d 0207 	add.w	r2, sp, #7
   b7aca:	2128      	movs	r1, #40	; 0x28
   b7acc:	4620      	mov	r0, r4
   b7ace:	f7ff ffdb 	bl	b7a88 <_ZN6AB180512readRegisterEhRhb>
    if (bResult && value == REG_ID0_AB18XX) {
   b7ad2:	b930      	cbnz	r0, b7ae2 <_ZN6AB180510detectChipEv+0x4a>
        _log.info("not detected");
   b7ad4:	480d      	ldr	r0, [pc, #52]	; (b7b0c <_ZN6AB180510detectChipEv+0x74>)
   b7ad6:	490e      	ldr	r1, [pc, #56]	; (b7b10 <_ZN6AB180510detectChipEv+0x78>)
   b7ad8:	f7fc fb31 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b7adc:	2000      	movs	r0, #0
}
   b7ade:	b002      	add	sp, #8
   b7ae0:	bd70      	pop	{r4, r5, r6, pc}
    if (bResult && value == REG_ID0_AB18XX) {
   b7ae2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b7ae6:	2b18      	cmp	r3, #24
   b7ae8:	d1f4      	bne.n	b7ad4 <_ZN6AB180510detectChipEv+0x3c>
        bResult = readRegister(REG_ID1, value);
   b7aea:	2301      	movs	r3, #1
   b7aec:	f10d 0207 	add.w	r2, sp, #7
   b7af0:	2129      	movs	r1, #41	; 0x29
   b7af2:	4620      	mov	r0, r4
   b7af4:	f7ff ffc8 	bl	b7a88 <_ZN6AB180512readRegisterEhRhb>
        if (bResult && value == REG_ID1_ABXX05) {
   b7af8:	2800      	cmp	r0, #0
   b7afa:	d0eb      	beq.n	b7ad4 <_ZN6AB180510detectChipEv+0x3c>
   b7afc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b7b00:	2b05      	cmp	r3, #5
   b7b02:	d1e7      	bne.n	b7ad4 <_ZN6AB180510detectChipEv+0x3c>
   b7b04:	e7eb      	b.n	b7ade <_ZN6AB180510detectChipEv+0x46>
   b7b06:	bf00      	nop
   b7b08:	000c48f5 	.word	0x000c48f5
   b7b0c:	2003e4c0 	.word	0x2003e4c0
   b7b10:	000c490a 	.word	0x000c490a

000b7b14 <_ZN6AB180512readRegisterEhb>:


uint8_t AB1805::readRegister(uint8_t regAddr, bool lock) {
   b7b14:	b507      	push	{r0, r1, r2, lr}
   b7b16:	4613      	mov	r3, r2
    uint8_t value = 0;
   b7b18:	2200      	movs	r2, #0
   b7b1a:	f88d 2007 	strb.w	r2, [sp, #7]

    (void) readRegister(regAddr, value, lock);
   b7b1e:	f10d 0207 	add.w	r2, sp, #7
   b7b22:	f7ff ffb1 	bl	b7a88 <_ZN6AB180512readRegisterEhRhb>
    
    return value;
}
   b7b26:	f89d 0007 	ldrb.w	r0, [sp, #7]
   b7b2a:	b003      	add	sp, #12
   b7b2c:	f85d fb04 	ldr.w	pc, [sp], #4

000b7b30 <_ZN6AB180514writeRegistersEhPKhjb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
    return writeRegisters(regAddr, &value, 1, lock);
}


bool AB1805::writeRegisters(uint8_t regAddr, const uint8_t *array, size_t num, bool lock) {
   b7b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7b34:	f89d 8018 	ldrb.w	r8, [sp, #24]
   b7b38:	4604      	mov	r4, r0
   b7b3a:	460f      	mov	r7, r1
   b7b3c:	4615      	mov	r5, r2
   b7b3e:	461e      	mov	r6, r3
    bool bResult = false;

    if (lock) {
   b7b40:	f1b8 0f00 	cmp.w	r8, #0
   b7b44:	d002      	beq.n	b7b4c <_ZN6AB180514writeRegistersEhPKhjb+0x1c>
        wire.lock();
   b7b46:	6840      	ldr	r0, [r0, #4]
   b7b48:	f006 f994 	bl	bde74 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   b7b4c:	7a21      	ldrb	r1, [r4, #8]
   b7b4e:	6860      	ldr	r0, [r4, #4]
   b7b50:	f006 f96d 	bl	bde2e <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   b7b54:	6860      	ldr	r0, [r4, #4]
   b7b56:	6803      	ldr	r3, [r0, #0]
   b7b58:	4639      	mov	r1, r7
   b7b5a:	689b      	ldr	r3, [r3, #8]
   b7b5c:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b7b5e:	442e      	add	r6, r5
   b7b60:	42b5      	cmp	r5, r6
        wire.write(array[ii]);
   b7b62:	6860      	ldr	r0, [r4, #4]
    for(size_t ii = 0; ii < num; ii++) {
   b7b64:	d005      	beq.n	b7b72 <_ZN6AB180514writeRegistersEhPKhjb+0x42>
        wire.write(array[ii]);
   b7b66:	6803      	ldr	r3, [r0, #0]
   b7b68:	f815 1b01 	ldrb.w	r1, [r5], #1
   b7b6c:	689b      	ldr	r3, [r3, #8]
   b7b6e:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   b7b70:	e7f6      	b.n	b7b60 <_ZN6AB180514writeRegistersEhPKhjb+0x30>
    }
    int stat = wire.endTransmission(true);
   b7b72:	2101      	movs	r1, #1
   b7b74:	f006 f97a 	bl	bde6c <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   b7b78:	4603      	mov	r3, r0
   b7b7a:	b170      	cbz	r0, b7b9a <_ZN6AB180514writeRegistersEhPKhjb+0x6a>
        // _log.dump(array, num);
        // _log.print("\n");
        bResult = true;
    }
    else {
        _log.error("failed to write regAddr=%02x stat=%d", regAddr, stat);
   b7b7c:	4908      	ldr	r1, [pc, #32]	; (b7ba0 <_ZN6AB180514writeRegistersEhPKhjb+0x70>)
   b7b7e:	4809      	ldr	r0, [pc, #36]	; (b7ba4 <_ZN6AB180514writeRegistersEhPKhjb+0x74>)
   b7b80:	463a      	mov	r2, r7
   b7b82:	f7ff ff03 	bl	b798c <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   b7b86:	2500      	movs	r5, #0
    }

    if (lock) {
   b7b88:	f1b8 0f00 	cmp.w	r8, #0
   b7b8c:	d002      	beq.n	b7b94 <_ZN6AB180514writeRegistersEhPKhjb+0x64>
        wire.unlock();
   b7b8e:	6860      	ldr	r0, [r4, #4]
   b7b90:	f006 f979 	bl	bde86 <_ZN7TwoWire6unlockEv>
    }
    return bResult;
}
   b7b94:	4628      	mov	r0, r5
   b7b96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bResult = true;
   b7b9a:	2501      	movs	r5, #1
   b7b9c:	e7f4      	b.n	b7b88 <_ZN6AB180514writeRegistersEhPKhjb+0x58>
   b7b9e:	bf00      	nop
   b7ba0:	000c4917 	.word	0x000c4917
   b7ba4:	2003e4c0 	.word	0x2003e4c0

000b7ba8 <_ZN6AB180513writeRegisterEhhb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
   b7ba8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b7baa:	f88d 200f 	strb.w	r2, [sp, #15]
    return writeRegisters(regAddr, &value, 1, lock);
   b7bae:	9300      	str	r3, [sp, #0]
   b7bb0:	f10d 020f 	add.w	r2, sp, #15
   b7bb4:	2301      	movs	r3, #1
   b7bb6:	f7ff ffbb 	bl	b7b30 <_ZN6AB180514writeRegistersEhPKhjb>
}
   b7bba:	b005      	add	sp, #20
   b7bbc:	f85d fb04 	ldr.w	pc, [sp], #4

000b7bc0 <_ZN6AB18056setWDTEi>:
bool AB1805::setWDT(int seconds) {
   b7bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _log.info("setWDT %d", seconds);
   b7bc2:	460a      	mov	r2, r1
bool AB1805::setWDT(int seconds) {
   b7bc4:	460c      	mov	r4, r1
   b7bc6:	4605      	mov	r5, r0
    _log.info("setWDT %d", seconds);
   b7bc8:	491a      	ldr	r1, [pc, #104]	; (b7c34 <_ZN6AB18056setWDTEi+0x74>)
   b7bca:	481b      	ldr	r0, [pc, #108]	; (b7c38 <_ZN6AB18056setWDTEi+0x78>)
   b7bcc:	f7fc fab7 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    if (seconds < 0) {
   b7bd0:	2c00      	cmp	r4, #0
        seconds = watchdogSecs;
   b7bd2:	bfb8      	it	lt
   b7bd4:	68ec      	ldrlt	r4, [r5, #12]
    if (seconds == 0) {
   b7bd6:	b97c      	cbnz	r4, b7bf8 <_ZN6AB18056setWDTEi+0x38>
        bResult = writeRegister(REG_WDT, 0x00);
   b7bd8:	2301      	movs	r3, #1
   b7bda:	4622      	mov	r2, r4
   b7bdc:	211b      	movs	r1, #27
   b7bde:	4628      	mov	r0, r5
   b7be0:	f7ff ffe2 	bl	b7ba8 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog cleared bResult=%d", bResult);
   b7be4:	4915      	ldr	r1, [pc, #84]	; (b7c3c <_ZN6AB18056setWDTEi+0x7c>)
   b7be6:	4602      	mov	r2, r0
        bResult = writeRegister(REG_WDT, 0x00);
   b7be8:	4606      	mov	r6, r0
        _log.trace("watchdog cleared bResult=%d", bResult);
   b7bea:	4813      	ldr	r0, [pc, #76]	; (b7c38 <_ZN6AB18056setWDTEi+0x78>)
   b7bec:	f7ff fedc 	bl	b79a8 <_ZNK5spark6Logger5traceEPKcz>
        watchdogSecs = 0;
   b7bf0:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = 0;
   b7bf2:	616c      	str	r4, [r5, #20]
}
   b7bf4:	4630      	mov	r0, r6
   b7bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (fourSecs < 1) {
   b7bf8:	2c03      	cmp	r4, #3
   b7bfa:	dd19      	ble.n	b7c30 <_ZN6AB18056setWDTEi+0x70>
        int fourSecs = seconds / 4;
   b7bfc:	10a7      	asrs	r7, r4, #2
   b7bfe:	2f1f      	cmp	r7, #31
   b7c00:	bfa8      	it	ge
   b7c02:	271f      	movge	r7, #31
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b7c04:	00ba      	lsls	r2, r7, #2
   b7c06:	f062 027c 	orn	r2, r2, #124	; 0x7c
   b7c0a:	2301      	movs	r3, #1
   b7c0c:	b2d2      	uxtb	r2, r2
   b7c0e:	211b      	movs	r1, #27
   b7c10:	4628      	mov	r0, r5
   b7c12:	f7ff ffc9 	bl	b7ba8 <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b7c16:	463a      	mov	r2, r7
   b7c18:	4603      	mov	r3, r0
   b7c1a:	4909      	ldr	r1, [pc, #36]	; (b7c40 <_ZN6AB18056setWDTEi+0x80>)
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   b7c1c:	4606      	mov	r6, r0
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   b7c1e:	4806      	ldr	r0, [pc, #24]	; (b7c38 <_ZN6AB18056setWDTEi+0x78>)
   b7c20:	f7ff fec2 	bl	b79a8 <_ZNK5spark6Logger5traceEPKcz>
        watchdogUpdatePeriod = (fourSecs * 2000);
   b7c24:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   b7c28:	435f      	muls	r7, r3
        watchdogSecs = seconds;
   b7c2a:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = (fourSecs * 2000);
   b7c2c:	616f      	str	r7, [r5, #20]
   b7c2e:	e7e1      	b.n	b7bf4 <_ZN6AB18056setWDTEi+0x34>
            fourSecs = 1;
   b7c30:	2701      	movs	r7, #1
   b7c32:	e7e7      	b.n	b7c04 <_ZN6AB18056setWDTEi+0x44>
   b7c34:	000c493c 	.word	0x000c493c
   b7c38:	2003e4c0 	.word	0x2003e4c0
   b7c3c:	000c4946 	.word	0x000c4946
   b7c40:	000c4962 	.word	0x000c4962

000b7c44 <_ZN6AB180517systemEventStaticEyi>:
    }
}

// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
    if (instance) {
   b7c44:	4b06      	ldr	r3, [pc, #24]	; (b7c60 <_ZN6AB180517systemEventStaticEyi+0x1c>)
   b7c46:	681a      	ldr	r2, [r3, #0]
   b7c48:	b14a      	cbz	r2, b7c5e <_ZN6AB180517systemEventStaticEyi+0x1a>
    if (event == reset) {
   b7c4a:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
   b7c4e:	430b      	orrs	r3, r1
   b7c50:	d105      	bne.n	b7c5e <_ZN6AB180517systemEventStaticEyi+0x1a>
        if (watchdogSecs != 0) {
   b7c52:	68d3      	ldr	r3, [r2, #12]
   b7c54:	b11b      	cbz	r3, b7c5e <_ZN6AB180517systemEventStaticEyi+0x1a>
            setWDT(0);
   b7c56:	2100      	movs	r1, #0
   b7c58:	4610      	mov	r0, r2
   b7c5a:	f7ff bfb1 	b.w	b7bc0 <_ZN6AB18056setWDTEi>
        instance->systemEvent(event, param);
    }
}
   b7c5e:	4770      	bx	lr
   b7c60:	2003e4c4 	.word	0x2003e4c4

000b7c64 <_ZN6AB180512maskRegisterEhhhb>:
bool AB1805::maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock) {
   b7c64:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b7c68:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b7c6c:	4605      	mov	r5, r0
   b7c6e:	4616      	mov	r6, r2
   b7c70:	461f      	mov	r7, r3
    if (lock) {
   b7c72:	f1b8 0f00 	cmp.w	r8, #0
   b7c76:	d004      	beq.n	b7c82 <_ZN6AB180512maskRegisterEhhhb+0x1e>
        wire.lock();
   b7c78:	6840      	ldr	r0, [r0, #4]
   b7c7a:	9101      	str	r1, [sp, #4]
   b7c7c:	f006 f8fa 	bl	bde74 <_ZN7TwoWire4lockEv>
   b7c80:	9901      	ldr	r1, [sp, #4]
    bResult = readRegister(regAddr, value, false);
   b7c82:	9101      	str	r1, [sp, #4]
   b7c84:	2300      	movs	r3, #0
   b7c86:	f10d 020f 	add.w	r2, sp, #15
   b7c8a:	4628      	mov	r0, r5
   b7c8c:	f7ff fefc 	bl	b7a88 <_ZN6AB180512readRegisterEhRhb>
    if (bResult) {
   b7c90:	4604      	mov	r4, r0
   b7c92:	b160      	cbz	r0, b7cae <_ZN6AB180512maskRegisterEhhhb+0x4a>
        uint8_t newValue = (value & andValue) | orValue;
   b7c94:	f89d 300f 	ldrb.w	r3, [sp, #15]
   b7c98:	ea03 0206 	and.w	r2, r3, r6
   b7c9c:	433a      	orrs	r2, r7
        if (newValue != value) {
   b7c9e:	4293      	cmp	r3, r2
   b7ca0:	d005      	beq.n	b7cae <_ZN6AB180512maskRegisterEhhhb+0x4a>
            bResult = writeRegister(regAddr, newValue, false);
   b7ca2:	9901      	ldr	r1, [sp, #4]
   b7ca4:	2300      	movs	r3, #0
   b7ca6:	4628      	mov	r0, r5
   b7ca8:	f7ff ff7e 	bl	b7ba8 <_ZN6AB180513writeRegisterEhhb>
   b7cac:	4604      	mov	r4, r0
    if (lock) {
   b7cae:	f1b8 0f00 	cmp.w	r8, #0
   b7cb2:	d002      	beq.n	b7cba <_ZN6AB180512maskRegisterEhhhb+0x56>
        wire.unlock();
   b7cb4:	6868      	ldr	r0, [r5, #4]
   b7cb6:	f006 f8e6 	bl	bde86 <_ZN7TwoWire6unlockEv>
}
   b7cba:	4620      	mov	r0, r4
   b7cbc:	b004      	add	sp, #16
   b7cbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7cc2 <_ZN6AB180510isBitClearEhhb>:
bool AB1805::isBitClear(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b7cc2:	b513      	push	{r0, r1, r4, lr}
   b7cc4:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b7cc6:	f10d 0207 	add.w	r2, sp, #7
   b7cca:	f7ff fedd 	bl	b7a88 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) == 0);
   b7cce:	b128      	cbz	r0, b7cdc <_ZN6AB180510isBitClearEhhb+0x1a>
   b7cd0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b7cd4:	421c      	tst	r4, r3
   b7cd6:	bf0c      	ite	eq
   b7cd8:	2001      	moveq	r0, #1
   b7cda:	2000      	movne	r0, #0
}
   b7cdc:	b002      	add	sp, #8
   b7cde:	bd10      	pop	{r4, pc}

000b7ce0 <_ZN6AB18058isBitSetEhhb>:
bool AB1805::isBitSet(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b7ce0:	b513      	push	{r0, r1, r4, lr}
   b7ce2:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   b7ce4:	f10d 0207 	add.w	r2, sp, #7
   b7ce8:	f7ff fece 	bl	b7a88 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) != 0);
   b7cec:	b128      	cbz	r0, b7cfa <_ZN6AB18058isBitSetEhhb+0x1a>
   b7cee:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b7cf2:	421c      	tst	r4, r3
   b7cf4:	bf14      	ite	ne
   b7cf6:	2001      	movne	r0, #1
   b7cf8:	2000      	moveq	r0, #0
}
   b7cfa:	b002      	add	sp, #8
   b7cfc:	bd10      	pop	{r4, pc}

000b7cfe <_ZN6AB180516clearRegisterBitEhhb>:
bool AB1805::clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b7cfe:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
   b7d00:	43d2      	mvns	r2, r2
   b7d02:	9300      	str	r3, [sp, #0]
   b7d04:	b2d2      	uxtb	r2, r2
   b7d06:	2300      	movs	r3, #0
   b7d08:	f7ff ffac 	bl	b7c64 <_ZN6AB180512maskRegisterEhhhb>
}
   b7d0c:	b003      	add	sp, #12
   b7d0e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7d14 <_ZN6AB180516updateWakeReasonEv>:
bool AB1805::updateWakeReason() {
   b7d14:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool bResult = readRegister(REG_STATUS, status);
   b7d16:	2301      	movs	r3, #1
   b7d18:	f10d 0207 	add.w	r2, sp, #7
   b7d1c:	210f      	movs	r1, #15
bool AB1805::updateWakeReason() {
   b7d1e:	4604      	mov	r4, r0
    bool bResult = readRegister(REG_STATUS, status);
   b7d20:	f7ff feb2 	bl	b7a88 <_ZN6AB180512readRegisterEhRhb>
    if (!bResult) {
   b7d24:	4605      	mov	r5, r0
   b7d26:	b938      	cbnz	r0, b7d38 <_ZN6AB180516updateWakeReasonEv+0x24>
        _log.error(errorMsg, __LINE__);
   b7d28:	491e      	ldr	r1, [pc, #120]	; (b7da4 <_ZN6AB180516updateWakeReasonEv+0x90>)
   b7d2a:	481f      	ldr	r0, [pc, #124]	; (b7da8 <_ZN6AB180516updateWakeReasonEv+0x94>)
   b7d2c:	22ad      	movs	r2, #173	; 0xad
   b7d2e:	f7ff fe2d 	bl	b798c <_ZNK5spark6Logger5errorEPKcz>
}
   b7d32:	4628      	mov	r0, r5
   b7d34:	b003      	add	sp, #12
   b7d36:	bd30      	pop	{r4, r5, pc}
    if ((status & REG_STATUS_WDT) != 0) {
   b7d38:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b7d3c:	f013 0f20 	tst.w	r3, #32
        wakeReason = WakeReason::WATCHDOG;
   b7d40:	f04f 0301 	mov.w	r3, #1
    if ((status & REG_STATUS_WDT) != 0) {
   b7d44:	d00b      	beq.n	b7d5e <_ZN6AB180516updateWakeReasonEv+0x4a>
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b7d46:	2220      	movs	r2, #32
        wakeReason = WakeReason::WATCHDOG;
   b7d48:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   b7d4a:	210f      	movs	r1, #15
   b7d4c:	4620      	mov	r0, r4
   b7d4e:	f7ff ffd6 	bl	b7cfe <_ZN6AB180516clearRegisterBitEhhb>
        reason = "WATCHDOG";
   b7d52:	4a16      	ldr	r2, [pc, #88]	; (b7dac <_ZN6AB180516updateWakeReasonEv+0x98>)
        _log.info("wake reason = %s", reason);
   b7d54:	4916      	ldr	r1, [pc, #88]	; (b7db0 <_ZN6AB180516updateWakeReasonEv+0x9c>)
   b7d56:	4814      	ldr	r0, [pc, #80]	; (b7da8 <_ZN6AB180516updateWakeReasonEv+0x94>)
   b7d58:	f7fc f9f1 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b7d5c:	e7e9      	b.n	b7d32 <_ZN6AB180516updateWakeReasonEv+0x1e>
    else if (isBitSet(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLST)) {
   b7d5e:	2208      	movs	r2, #8
   b7d60:	2117      	movs	r1, #23
   b7d62:	4620      	mov	r0, r4
   b7d64:	f7ff ffbc 	bl	b7ce0 <_ZN6AB18058isBitSetEhhb>
   b7d68:	b118      	cbz	r0, b7d72 <_ZN6AB180516updateWakeReasonEv+0x5e>
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b7d6a:	2302      	movs	r3, #2
        reason = "DEEP_POWER_DOWN";
   b7d6c:	4a11      	ldr	r2, [pc, #68]	; (b7db4 <_ZN6AB180516updateWakeReasonEv+0xa0>)
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   b7d6e:	61e3      	str	r3, [r4, #28]
   b7d70:	e7f0      	b.n	b7d54 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_TIM) != 0) {
   b7d72:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b7d76:	071a      	lsls	r2, r3, #28
   b7d78:	d509      	bpl.n	b7d8e <_ZN6AB180516updateWakeReasonEv+0x7a>
        wakeReason = WakeReason::COUNTDOWN_TIMER;
   b7d7a:	2303      	movs	r3, #3
   b7d7c:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_TIM);            
   b7d7e:	2208      	movs	r2, #8
   b7d80:	2301      	movs	r3, #1
   b7d82:	210f      	movs	r1, #15
   b7d84:	4620      	mov	r0, r4
   b7d86:	f7ff ffba 	bl	b7cfe <_ZN6AB180516clearRegisterBitEhhb>
        reason = "COUNTDOWN_TIMER";
   b7d8a:	4a0b      	ldr	r2, [pc, #44]	; (b7db8 <_ZN6AB180516updateWakeReasonEv+0xa4>)
   b7d8c:	e7e2      	b.n	b7d54 <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_ALM) != 0) {
   b7d8e:	075b      	lsls	r3, r3, #29
   b7d90:	d5cf      	bpl.n	b7d32 <_ZN6AB180516updateWakeReasonEv+0x1e>
        wakeReason = WakeReason::ALARM;
   b7d92:	2204      	movs	r2, #4
   b7d94:	61e2      	str	r2, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_ALM);            
   b7d96:	2301      	movs	r3, #1
   b7d98:	210f      	movs	r1, #15
   b7d9a:	4620      	mov	r0, r4
   b7d9c:	f7ff ffaf 	bl	b7cfe <_ZN6AB180516clearRegisterBitEhhb>
        reason = "ALARM";
   b7da0:	4a06      	ldr	r2, [pc, #24]	; (b7dbc <_ZN6AB180516updateWakeReasonEv+0xa8>)
   b7da2:	e7d7      	b.n	b7d54 <_ZN6AB180516updateWakeReasonEv+0x40>
   b7da4:	000c49b5 	.word	0x000c49b5
   b7da8:	2003e4c0 	.word	0x2003e4c0
   b7dac:	000c4986 	.word	0x000c4986
   b7db0:	000c49d4 	.word	0x000c49d4
   b7db4:	000c498f 	.word	0x000c498f
   b7db8:	000c499f 	.word	0x000c499f
   b7dbc:	000c49af 	.word	0x000c49af

000b7dc0 <_ZN6AB180514setRegisterBitEhhb>:
bool AB1805::setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   b7dc0:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, 0xff, bitMask, lock);
   b7dc2:	9300      	str	r3, [sp, #0]
   b7dc4:	4613      	mov	r3, r2
   b7dc6:	22ff      	movs	r2, #255	; 0xff
   b7dc8:	f7ff ff4c 	bl	b7c64 <_ZN6AB180512maskRegisterEhhhb>
}
   b7dcc:	b003      	add	sp, #12
   b7dce:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7dd4 <_ZN6AB180517setCountdownTimerEib>:
bool AB1805::setCountdownTimer(int value, bool minutes) {
   b7dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7dd6:	460f      	mov	r7, r1
   b7dd8:	4616      	mov	r6, r2
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   b7dda:	2301      	movs	r3, #1
   b7ddc:	2200      	movs	r2, #0
   b7dde:	210f      	movs	r1, #15
bool AB1805::setCountdownTimer(int value, bool minutes) {
   b7de0:	4605      	mov	r5, r0
    bResult = writeRegister(REG_STATUS, REG_STATUS_DEFAULT);
   b7de2:	f7ff fee1 	bl	b7ba8 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b7de6:	4604      	mov	r4, r0
   b7de8:	b938      	cbnz	r0, b7dfa <_ZN6AB180517setCountdownTimerEib+0x26>
        _log.error(errorMsg, __LINE__);
   b7dea:	f44f 7225 	mov.w	r2, #660	; 0x294
        _log.error(errorMsg, __LINE__);
   b7dee:	491f      	ldr	r1, [pc, #124]	; (b7e6c <_ZN6AB180517setCountdownTimerEib+0x98>)
   b7df0:	481f      	ldr	r0, [pc, #124]	; (b7e70 <_ZN6AB180517setCountdownTimerEib+0x9c>)
   b7df2:	f7ff fdcb 	bl	b798c <_ZNK5spark6Logger5errorEPKcz>
}
   b7df6:	4620      	mov	r0, r4
   b7df8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_DEFAULT);
   b7dfa:	2301      	movs	r3, #1
   b7dfc:	2223      	movs	r2, #35	; 0x23
   b7dfe:	2118      	movs	r1, #24
   b7e00:	4628      	mov	r0, r5
   b7e02:	f7ff fed1 	bl	b7ba8 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b7e06:	4604      	mov	r4, r0
   b7e08:	b910      	cbnz	r0, b7e10 <_ZN6AB180517setCountdownTimerEib+0x3c>
        _log.error(errorMsg, __LINE__);
   b7e0a:	f240 229b 	movw	r2, #667	; 0x29b
   b7e0e:	e7ee      	b.n	b7dee <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = writeRegister(REG_TIMER, (uint8_t)value);
   b7e10:	2fff      	cmp	r7, #255	; 0xff
   b7e12:	bfa8      	it	ge
   b7e14:	27ff      	movge	r7, #255	; 0xff
   b7e16:	2f01      	cmp	r7, #1
   b7e18:	bfb8      	it	lt
   b7e1a:	2701      	movlt	r7, #1
   b7e1c:	2301      	movs	r3, #1
   b7e1e:	b2fa      	uxtb	r2, r7
   b7e20:	2119      	movs	r1, #25
   b7e22:	4628      	mov	r0, r5
   b7e24:	f7ff fec0 	bl	b7ba8 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b7e28:	4604      	mov	r4, r0
   b7e2a:	b910      	cbnz	r0, b7e32 <_ZN6AB180517setCountdownTimerEib+0x5e>
        _log.error(errorMsg, __LINE__);
   b7e2c:	f44f 722a 	mov.w	r2, #680	; 0x2a8
   b7e30:	e7dd      	b.n	b7dee <_ZN6AB180517setCountdownTimerEib+0x1a>
    bResult = setRegisterBit(REG_INT_MASK, REG_INT_MASK_TIE);
   b7e32:	2301      	movs	r3, #1
   b7e34:	2208      	movs	r2, #8
   b7e36:	2112      	movs	r1, #18
   b7e38:	4628      	mov	r0, r5
   b7e3a:	f7ff ffc1 	bl	b7dc0 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b7e3e:	4604      	mov	r4, r0
   b7e40:	b910      	cbnz	r0, b7e48 <_ZN6AB180517setCountdownTimerEib+0x74>
        _log.error(errorMsg, __LINE__);
   b7e42:	f240 22af 	movw	r2, #687	; 0x2af
   b7e46:	e7d2      	b.n	b7dee <_ZN6AB180517setCountdownTimerEib+0x1a>
    uint8_t tfs = (minutes ? REG_TIMER_CTRL_TFS_1_60 : REG_TIMER_CTRL_TFS_1);
   b7e48:	2e00      	cmp	r6, #0
   b7e4a:	bf14      	ite	ne
   b7e4c:	2203      	movne	r2, #3
   b7e4e:	2202      	moveq	r2, #2
    bResult = writeRegister(REG_TIMER_CTRL, REG_TIMER_CTRL_TE | tfs);
   b7e50:	2301      	movs	r3, #1
   b7e52:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   b7e56:	2118      	movs	r1, #24
   b7e58:	4628      	mov	r0, r5
   b7e5a:	f7ff fea5 	bl	b7ba8 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b7e5e:	4604      	mov	r4, r0
   b7e60:	2800      	cmp	r0, #0
   b7e62:	d1c8      	bne.n	b7df6 <_ZN6AB180517setCountdownTimerEib+0x22>
        _log.error(errorMsg, __LINE__);
   b7e64:	f240 22b9 	movw	r2, #697	; 0x2b9
   b7e68:	e7c1      	b.n	b7dee <_ZN6AB180517setCountdownTimerEib+0x1a>
   b7e6a:	bf00      	nop
   b7e6c:	000c49e5 	.word	0x000c49e5
   b7e70:	2003e4c0 	.word	0x2003e4c0

000b7e74 <_ZN6AB180513deepPowerDownEi>:
bool AB1805::deepPowerDown(int seconds) {
   b7e74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    _log.info("deepPowerDown %d", seconds);
   b7e78:	460a      	mov	r2, r1
bool AB1805::deepPowerDown(int seconds) {
   b7e7a:	4605      	mov	r5, r0
   b7e7c:	460f      	mov	r7, r1
    _log.info("deepPowerDown %d", seconds);
   b7e7e:	484f      	ldr	r0, [pc, #316]	; (b7fbc <_ZN6AB180513deepPowerDownEi+0x148>)
   b7e80:	494f      	ldr	r1, [pc, #316]	; (b7fc0 <_ZN6AB180513deepPowerDownEi+0x14c>)
   b7e82:	f7fc f95c 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
    bResult = setWDT(0);
   b7e86:	2100      	movs	r1, #0
   b7e88:	4628      	mov	r0, r5
   b7e8a:	f7ff fe99 	bl	b7bc0 <_ZN6AB18056setWDTEi>
    if (!bResult) {
   b7e8e:	4604      	mov	r4, r0
   b7e90:	b948      	cbnz	r0, b7ea6 <_ZN6AB180513deepPowerDownEi+0x32>
        _log.error(errorMsg, __LINE__);
   b7e92:	f240 12f7 	movw	r2, #503	; 0x1f7
        _log.error(errorMsg, __LINE__);
   b7e96:	494b      	ldr	r1, [pc, #300]	; (b7fc4 <_ZN6AB180513deepPowerDownEi+0x150>)
   b7e98:	4848      	ldr	r0, [pc, #288]	; (b7fbc <_ZN6AB180513deepPowerDownEi+0x148>)
   b7e9a:	f7ff fd77 	bl	b798c <_ZNK5spark6Logger5errorEPKcz>
}
   b7e9e:	4620      	mov	r0, r4
   b7ea0:	b003      	add	sp, #12
   b7ea2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bResult = setRegisterBit(REG_OCTRL, REG_OCTRL_O1EN);
   b7ea6:	2301      	movs	r3, #1
   b7ea8:	461a      	mov	r2, r3
   b7eaa:	2130      	movs	r1, #48	; 0x30
   b7eac:	4628      	mov	r0, r5
   b7eae:	f7ff ff87 	bl	b7dc0 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b7eb2:	4604      	mov	r4, r0
   b7eb4:	b910      	cbnz	r0, b7ebc <_ZN6AB180513deepPowerDownEi+0x48>
        _log.error(errorMsg, __LINE__);
   b7eb6:	f240 2205 	movw	r2, #517	; 0x205
   b7eba:	e7ec      	b.n	b7e96 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = clearRegisterBit(REG_CTRL_1, REG_CTRL_1_OUT);
   b7ebc:	2210      	movs	r2, #16
   b7ebe:	2301      	movs	r3, #1
   b7ec0:	4611      	mov	r1, r2
   b7ec2:	4628      	mov	r0, r5
   b7ec4:	f7ff ff1b 	bl	b7cfe <_ZN6AB180516clearRegisterBitEhhb>
    if (!bResult) {
   b7ec8:	4604      	mov	r4, r0
   b7eca:	b910      	cbnz	r0, b7ed2 <_ZN6AB180513deepPowerDownEi+0x5e>
        _log.error(errorMsg, __LINE__);
   b7ecc:	f44f 7203 	mov.w	r2, #524	; 0x20c
   b7ed0:	e7e1      	b.n	b7e96 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SQW, REG_SQW_DEFAULT);
   b7ed2:	2301      	movs	r3, #1
   b7ed4:	2226      	movs	r2, #38	; 0x26
   b7ed6:	2113      	movs	r1, #19
   b7ed8:	4628      	mov	r0, r5
   b7eda:	f7ff fe65 	bl	b7ba8 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b7ede:	4604      	mov	r4, r0
   b7ee0:	b910      	cbnz	r0, b7ee8 <_ZN6AB180513deepPowerDownEi+0x74>
        _log.error(errorMsg, __LINE__);
   b7ee2:	f240 2213 	movw	r2, #531	; 0x213
   b7ee6:	e7d6      	b.n	b7e96 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, ~REG_CTRL_2_OUT1S_MASK, REG_CTRL_2_OUT1S_SQW);
   b7ee8:	2601      	movs	r6, #1
   b7eea:	9600      	str	r6, [sp, #0]
   b7eec:	4633      	mov	r3, r6
   b7eee:	22fc      	movs	r2, #252	; 0xfc
   b7ef0:	2111      	movs	r1, #17
   b7ef2:	4628      	mov	r0, r5
   b7ef4:	f7ff feb6 	bl	b7c64 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b7ef8:	4604      	mov	r4, r0
   b7efa:	b910      	cbnz	r0, b7f02 <_ZN6AB180513deepPowerDownEi+0x8e>
        _log.error(errorMsg, __LINE__);
   b7efc:	f240 221b 	movw	r2, #539	; 0x21b
   b7f00:	e7c9      	b.n	b7e96 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setCountdownTimer(seconds, false);
   b7f02:	2200      	movs	r2, #0
   b7f04:	4639      	mov	r1, r7
   b7f06:	4628      	mov	r0, r5
   b7f08:	f7ff ff64 	bl	b7dd4 <_ZN6AB180517setCountdownTimerEib>
    if (!bResult) {
   b7f0c:	4604      	mov	r4, r0
   b7f0e:	b910      	cbnz	r0, b7f16 <_ZN6AB180513deepPowerDownEi+0xa2>
        _log.error(errorMsg, __LINE__);
   b7f10:	f240 2222 	movw	r2, #546	; 0x222
   b7f14:	e7bf      	b.n	b7e96 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_1, (uint8_t)~(REG_CTRL_1_STOP | REG_CTRL_1_RSP), REG_CTRL_1_PWR2);
   b7f16:	9600      	str	r6, [sp, #0]
   b7f18:	2302      	movs	r3, #2
   b7f1a:	2277      	movs	r2, #119	; 0x77
   b7f1c:	2110      	movs	r1, #16
   b7f1e:	4628      	mov	r0, r5
   b7f20:	f7ff fea0 	bl	b7c64 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b7f24:	4604      	mov	r4, r0
   b7f26:	b910      	cbnz	r0, b7f2e <_ZN6AB180513deepPowerDownEi+0xba>
        _log.error(errorMsg, __LINE__);
   b7f28:	f240 222b 	movw	r2, #555	; 0x22b
   b7f2c:	e7b3      	b.n	b7e96 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = setRegisterBit(REG_OSC_CTRL, REG_OSC_CTRL_PWGT);
   b7f2e:	4633      	mov	r3, r6
   b7f30:	2204      	movs	r2, #4
   b7f32:	211c      	movs	r1, #28
   b7f34:	4628      	mov	r0, r5
   b7f36:	f7ff ff43 	bl	b7dc0 <_ZN6AB180514setRegisterBitEhhb>
    if (!bResult) {
   b7f3a:	4604      	mov	r4, r0
   b7f3c:	b910      	cbnz	r0, b7f44 <_ZN6AB180513deepPowerDownEi+0xd0>
        _log.error(errorMsg, __LINE__);
   b7f3e:	f240 2232 	movw	r2, #562	; 0x232
   b7f42:	e7a8      	b.n	b7e96 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = maskRegister(REG_CTRL_2, (uint8_t)~REG_CTRL_2_OUT2S_MASK, REG_CTRL_2_OUT2S_SLEEP);
   b7f44:	9600      	str	r6, [sp, #0]
   b7f46:	2318      	movs	r3, #24
   b7f48:	22e3      	movs	r2, #227	; 0xe3
   b7f4a:	2111      	movs	r1, #17
   b7f4c:	4628      	mov	r0, r5
   b7f4e:	f7ff fe89 	bl	b7c64 <_ZN6AB180512maskRegisterEhhhb>
    if (!bResult) {
   b7f52:	4604      	mov	r4, r0
   b7f54:	b910      	cbnz	r0, b7f5c <_ZN6AB180513deepPowerDownEi+0xe8>
        _log.error(errorMsg, __LINE__);
   b7f56:	f240 2239 	movw	r2, #569	; 0x239
   b7f5a:	e79c      	b.n	b7e96 <_ZN6AB180513deepPowerDownEi+0x22>
    bResult = writeRegister(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLP | REG_SLEEP_CTRL_SLRES);
   b7f5c:	4633      	mov	r3, r6
   b7f5e:	22c0      	movs	r2, #192	; 0xc0
   b7f60:	2117      	movs	r1, #23
   b7f62:	4628      	mov	r0, r5
   b7f64:	f7ff fe20 	bl	b7ba8 <_ZN6AB180513writeRegisterEhhb>
    if (!bResult) {
   b7f68:	4604      	mov	r4, r0
   b7f6a:	b910      	cbnz	r0, b7f72 <_ZN6AB180513deepPowerDownEi+0xfe>
        _log.error(errorMsg, __LINE__);
   b7f6c:	f44f 7210 	mov.w	r2, #576	; 0x240
   b7f70:	e791      	b.n	b7e96 <_ZN6AB180513deepPowerDownEi+0x22>
   b7f72:	f004 fdf7 	bl	bcb64 <HAL_Timer_Get_Milli_Seconds>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   b7f76:	f8df 9054 	ldr.w	r9, [pc, #84]	; b7fcc <_ZN6AB180513deepPowerDownEi+0x158>
   b7f7a:	f8df 8040 	ldr.w	r8, [pc, #64]	; b7fbc <_ZN6AB180513deepPowerDownEi+0x148>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   b7f7e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b7f82:	4606      	mov	r6, r0
   b7f84:	434f      	muls	r7, r1
   b7f86:	f004 fded 	bl	bcb64 <HAL_Timer_Get_Milli_Seconds>
   b7f8a:	1b80      	subs	r0, r0, r6
   b7f8c:	42b8      	cmp	r0, r7
   b7f8e:	d20e      	bcs.n	b7fae <_ZN6AB180513deepPowerDownEi+0x13a>
        _log.info("REG_SLEEP_CTRL=0x%2x", readRegister(REG_SLEEP_CTRL));
   b7f90:	2201      	movs	r2, #1
   b7f92:	2117      	movs	r1, #23
   b7f94:	4628      	mov	r0, r5
   b7f96:	f7ff fdbd 	bl	b7b14 <_ZN6AB180512readRegisterEhb>
   b7f9a:	4649      	mov	r1, r9
   b7f9c:	4602      	mov	r2, r0
   b7f9e:	4640      	mov	r0, r8
   b7fa0:	f7fc f8cd 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
        delay(1000);
   b7fa4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b7fa8:	f005 f9f8 	bl	bd39c <delay>
    while(millis() - start < (unsigned long) (seconds * 1000)) {
   b7fac:	e7eb      	b.n	b7f86 <_ZN6AB180513deepPowerDownEi+0x112>
    _log.error("didn't power down");
   b7fae:	4906      	ldr	r1, [pc, #24]	; (b7fc8 <_ZN6AB180513deepPowerDownEi+0x154>)
   b7fb0:	4802      	ldr	r0, [pc, #8]	; (b7fbc <_ZN6AB180513deepPowerDownEi+0x148>)
   b7fb2:	f7ff fceb 	bl	b798c <_ZNK5spark6Logger5errorEPKcz>
    System.reset();
   b7fb6:	f007 fe98 	bl	bfcea <_ZN11SystemClass5resetEv>
    return true;
   b7fba:	e770      	b.n	b7e9e <_ZN6AB180513deepPowerDownEi+0x2a>
   b7fbc:	2003e4c0 	.word	0x2003e4c0
   b7fc0:	000c4a10 	.word	0x000c4a10
   b7fc4:	000c4a05 	.word	0x000c4a05
   b7fc8:	000c4a36 	.word	0x000c4a36
   b7fcc:	000c4a21 	.word	0x000c4a21

000b7fd0 <_ZN6AB18057readRamEjPhjb>:
bool AB1805::readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) {
   b7fd0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b7fd4:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b7fd8:	4605      	mov	r5, r0
   b7fda:	460c      	mov	r4, r1
   b7fdc:	4691      	mov	r9, r2
   b7fde:	461f      	mov	r7, r3
    if (lock) {
   b7fe0:	f1ba 0f00 	cmp.w	sl, #0
   b7fe4:	d002      	beq.n	b7fec <_ZN6AB18057readRamEjPhjb+0x1c>
        wire.lock();
   b7fe6:	6840      	ldr	r0, [r0, #4]
   b7fe8:	f005 ff44 	bl	bde74 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b7fec:	b307      	cbz	r7, b8030 <_ZN6AB18057readRamEjPhjb+0x60>
        if (count > 32) {
   b7fee:	2f20      	cmp	r7, #32
   b7ff0:	463e      	mov	r6, r7
   b7ff2:	bf28      	it	cs
   b7ff4:	2620      	movcs	r6, #32
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b7ff6:	2c7f      	cmp	r4, #127	; 0x7f
   b7ff8:	d826      	bhi.n	b8048 <_ZN6AB18057readRamEjPhjb+0x78>
   b7ffa:	1933      	adds	r3, r6, r4
   b7ffc:	2b80      	cmp	r3, #128	; 0x80
   b7ffe:	d901      	bls.n	b8004 <_ZN6AB18057readRamEjPhjb+0x34>
            count = 128 - ramAddr;
   b8000:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b8004:	2301      	movs	r3, #1
   b8006:	2204      	movs	r2, #4
   b8008:	213f      	movs	r1, #63	; 0x3f
   b800a:	4628      	mov	r0, r5
   b800c:	f7ff fe77 	bl	b7cfe <_ZN6AB180516clearRegisterBitEhhb>
        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b8010:	2300      	movs	r3, #0
   b8012:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b8016:	9300      	str	r3, [sp, #0]
   b8018:	464a      	mov	r2, r9
   b801a:	4633      	mov	r3, r6
   b801c:	b2c9      	uxtb	r1, r1
   b801e:	4628      	mov	r0, r5
   b8020:	f7ff fce4 	bl	b79ec <_ZN6AB180513readRegistersEhPhjb>
        if (!bResult) {
   b8024:	4680      	mov	r8, r0
   b8026:	b128      	cbz	r0, b8034 <_ZN6AB18057readRamEjPhjb+0x64>
        ramAddr += count;
   b8028:	4434      	add	r4, r6
        dataLen -= count;
   b802a:	1bbf      	subs	r7, r7, r6
        data += count;
   b802c:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b802e:	e7dd      	b.n	b7fec <_ZN6AB18057readRamEjPhjb+0x1c>
   b8030:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b8034:	f1ba 0f00 	cmp.w	sl, #0
   b8038:	d002      	beq.n	b8040 <_ZN6AB18057readRamEjPhjb+0x70>
        wire.unlock();
   b803a:	6868      	ldr	r0, [r5, #4]
   b803c:	f005 ff23 	bl	bde86 <_ZN7TwoWire6unlockEv>
}
   b8040:	4640      	mov	r0, r8
   b8042:	b002      	add	sp, #8
   b8044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b8048:	2301      	movs	r3, #1
   b804a:	2204      	movs	r2, #4
   b804c:	213f      	movs	r1, #63	; 0x3f
   b804e:	4628      	mov	r0, r5
   b8050:	f7ff feb6 	bl	b7dc0 <_ZN6AB180514setRegisterBitEhhb>
   b8054:	e7dc      	b.n	b8010 <_ZN6AB18057readRamEjPhjb+0x40>

000b8056 <_ZN6AB18058writeRamEjPKhjb>:
bool AB1805::writeRam(size_t ramAddr, const uint8_t *data, size_t dataLen, bool lock) {
   b8056:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b805a:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   b805e:	4605      	mov	r5, r0
   b8060:	460c      	mov	r4, r1
   b8062:	4691      	mov	r9, r2
   b8064:	461f      	mov	r7, r3
    if (lock) {
   b8066:	f1ba 0f00 	cmp.w	sl, #0
   b806a:	d002      	beq.n	b8072 <_ZN6AB18058writeRamEjPKhjb+0x1c>
        wire.lock();
   b806c:	6840      	ldr	r0, [r0, #4]
   b806e:	f005 ff01 	bl	bde74 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   b8072:	b307      	cbz	r7, b80b6 <_ZN6AB18058writeRamEjPKhjb+0x60>
        if (count > 31) {
   b8074:	2f1f      	cmp	r7, #31
   b8076:	463e      	mov	r6, r7
   b8078:	bf28      	it	cs
   b807a:	261f      	movcs	r6, #31
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   b807c:	2c7f      	cmp	r4, #127	; 0x7f
   b807e:	d826      	bhi.n	b80ce <_ZN6AB18058writeRamEjPKhjb+0x78>
   b8080:	1933      	adds	r3, r6, r4
   b8082:	2b80      	cmp	r3, #128	; 0x80
   b8084:	d901      	bls.n	b808a <_ZN6AB18058writeRamEjPKhjb+0x34>
            count = 128 - ramAddr;
   b8086:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b808a:	2301      	movs	r3, #1
   b808c:	2204      	movs	r2, #4
   b808e:	213f      	movs	r1, #63	; 0x3f
   b8090:	4628      	mov	r0, r5
   b8092:	f7ff fe34 	bl	b7cfe <_ZN6AB180516clearRegisterBitEhhb>
        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   b8096:	2300      	movs	r3, #0
   b8098:	f064 017f 	orn	r1, r4, #127	; 0x7f
   b809c:	9300      	str	r3, [sp, #0]
   b809e:	464a      	mov	r2, r9
   b80a0:	4633      	mov	r3, r6
   b80a2:	b2c9      	uxtb	r1, r1
   b80a4:	4628      	mov	r0, r5
   b80a6:	f7ff fd43 	bl	b7b30 <_ZN6AB180514writeRegistersEhPKhjb>
        if (!bResult) {
   b80aa:	4680      	mov	r8, r0
   b80ac:	b128      	cbz	r0, b80ba <_ZN6AB18058writeRamEjPKhjb+0x64>
        ramAddr += count;
   b80ae:	4434      	add	r4, r6
        dataLen -= count;
   b80b0:	1bbf      	subs	r7, r7, r6
        data += count;
   b80b2:	44b1      	add	r9, r6
    while(dataLen > 0) {
   b80b4:	e7dd      	b.n	b8072 <_ZN6AB18058writeRamEjPKhjb+0x1c>
   b80b6:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   b80ba:	f1ba 0f00 	cmp.w	sl, #0
   b80be:	d002      	beq.n	b80c6 <_ZN6AB18058writeRamEjPKhjb+0x70>
        wire.unlock();
   b80c0:	6868      	ldr	r0, [r5, #4]
   b80c2:	f005 fee0 	bl	bde86 <_ZN7TwoWire6unlockEv>
}
   b80c6:	4640      	mov	r0, r8
   b80c8:	b002      	add	sp, #8
   b80ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   b80ce:	2301      	movs	r3, #1
   b80d0:	2204      	movs	r2, #4
   b80d2:	213f      	movs	r1, #63	; 0x3f
   b80d4:	4628      	mov	r0, r5
   b80d6:	f7ff fe73 	bl	b7dc0 <_ZN6AB180514setRegisterBitEhhb>
   b80da:	e7dc      	b.n	b8096 <_ZN6AB18058writeRamEjPKhjb+0x40>

000b80dc <_ZN6AB180510tmToStringEPK2tm>:
String AB1805::tmToString(const struct tm *timeptr) {
   b80dc:	b530      	push	{r4, r5, lr}
   b80de:	b085      	sub	sp, #20
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b80e0:	680d      	ldr	r5, [r1, #0]
   b80e2:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
   b80e6:	9503      	str	r5, [sp, #12]
   b80e8:	684d      	ldr	r5, [r1, #4]
   b80ea:	9502      	str	r5, [sp, #8]
   b80ec:	688d      	ldr	r5, [r1, #8]
   b80ee:	9501      	str	r5, [sp, #4]
   b80f0:	68c9      	ldr	r1, [r1, #12]
   b80f2:	9100      	str	r1, [sp, #0]
   b80f4:	3301      	adds	r3, #1
   b80f6:	4904      	ldr	r1, [pc, #16]	; (b8108 <_ZN6AB180510tmToStringEPK2tm+0x2c>)
   b80f8:	f202 726c 	addw	r2, r2, #1900	; 0x76c
String AB1805::tmToString(const struct tm *timeptr) {
   b80fc:	4604      	mov	r4, r0
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   b80fe:	f007 fd8d 	bl	bfc1c <_ZN6String6formatEPKcz>
}
   b8102:	4620      	mov	r0, r4
   b8104:	b005      	add	sp, #20
   b8106:	bd30      	pop	{r4, r5, pc}
   b8108:	000c4a48 	.word	0x000c4a48

000b810c <_ZN6AB180510bcdToValueEh>:
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b810c:	0903      	lsrs	r3, r0, #4
}
   b810e:	220a      	movs	r2, #10
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   b8110:	f000 000f 	and.w	r0, r0, #15
}
   b8114:	fb02 0003 	mla	r0, r2, r3, r0
   b8118:	4770      	bx	lr

000b811a <_ZN6AB180513registersToTmEPKhP2tmb>:
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b811a:	b538      	push	{r3, r4, r5, lr}
   b811c:	4604      	mov	r4, r0
    timeptr->tm_sec = bcdToValue(*p++);
   b811e:	7800      	ldrb	r0, [r0, #0]
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   b8120:	4615      	mov	r5, r2
    timeptr->tm_sec = bcdToValue(*p++);
   b8122:	f7ff fff3 	bl	b810c <_ZN6AB180510bcdToValueEh>
   b8126:	6008      	str	r0, [r1, #0]
    timeptr->tm_min = bcdToValue(*p++);
   b8128:	7860      	ldrb	r0, [r4, #1]
   b812a:	f7ff ffef 	bl	b810c <_ZN6AB180510bcdToValueEh>
   b812e:	6048      	str	r0, [r1, #4]
    timeptr->tm_hour = bcdToValue(*p++);
   b8130:	78a0      	ldrb	r0, [r4, #2]
   b8132:	f7ff ffeb 	bl	b810c <_ZN6AB180510bcdToValueEh>
   b8136:	6088      	str	r0, [r1, #8]
    timeptr->tm_mday = bcdToValue(*p++);
   b8138:	78e0      	ldrb	r0, [r4, #3]
   b813a:	f7ff ffe7 	bl	b810c <_ZN6AB180510bcdToValueEh>
   b813e:	60c8      	str	r0, [r1, #12]
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b8140:	7920      	ldrb	r0, [r4, #4]
   b8142:	f7ff ffe3 	bl	b810c <_ZN6AB180510bcdToValueEh>
   b8146:	3801      	subs	r0, #1
   b8148:	6108      	str	r0, [r1, #16]
    if (includeYear) {
   b814a:	b92d      	cbnz	r5, b8158 <_ZN6AB180513registersToTmEPKhP2tmb+0x3e>
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   b814c:	1d65      	adds	r5, r4, #5
    timeptr->tm_wday = bcdToValue(*p++);
   b814e:	7828      	ldrb	r0, [r5, #0]
   b8150:	f7ff ffdc 	bl	b810c <_ZN6AB180510bcdToValueEh>
   b8154:	6188      	str	r0, [r1, #24]
}
   b8156:	bd38      	pop	{r3, r4, r5, pc}
        timeptr->tm_year = bcdToValue(*p++) + 100;
   b8158:	7960      	ldrb	r0, [r4, #5]
   b815a:	f7ff ffd7 	bl	b810c <_ZN6AB180510bcdToValueEh>
   b815e:	3064      	adds	r0, #100	; 0x64
   b8160:	1da5      	adds	r5, r4, #6
   b8162:	6148      	str	r0, [r1, #20]
   b8164:	e7f3      	b.n	b814e <_ZN6AB180513registersToTmEPKhP2tmb+0x34>
	...

000b8168 <_ZN6AB180510getRtcAsTmEP2tm>:
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b8168:	b570      	push	{r4, r5, r6, lr}
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b816a:	2301      	movs	r3, #1
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b816c:	b088      	sub	sp, #32
   b816e:	460d      	mov	r5, r1
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b8170:	461a      	mov	r2, r3
   b8172:	2110      	movs	r1, #16
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   b8174:	4604      	mov	r4, r0
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   b8176:	f7ff fda4 	bl	b7cc2 <_ZN6AB180510isBitClearEhhb>
   b817a:	b1f0      	cbz	r0, b81ba <_ZN6AB180510getRtcAsTmEP2tm+0x52>
        bResult = readRegisters(REG_HUNDREDTH, array, sizeof(array));
   b817c:	2308      	movs	r3, #8
   b817e:	2601      	movs	r6, #1
   b8180:	4620      	mov	r0, r4
   b8182:	9600      	str	r6, [sp, #0]
   b8184:	eb0d 0203 	add.w	r2, sp, r3
   b8188:	2100      	movs	r1, #0
   b818a:	f7ff fc2f 	bl	b79ec <_ZN6AB180513readRegistersEhPhjb>
        if (bResult) {
   b818e:	4604      	mov	r4, r0
   b8190:	b198      	cbz	r0, b81ba <_ZN6AB180510getRtcAsTmEP2tm+0x52>
            registersToTm(&array[1], timeptr, true);
   b8192:	4632      	mov	r2, r6
   b8194:	4629      	mov	r1, r5
   b8196:	f10d 0009 	add.w	r0, sp, #9
   b819a:	f7ff ffbe 	bl	b811a <_ZN6AB180513registersToTmEPKhP2tmb>
            _log.info("getRtcAsTm %s", tmToString(timeptr).c_str());
   b819e:	a804      	add	r0, sp, #16
   b81a0:	f7ff ff9c 	bl	b80dc <_ZN6AB180510tmToStringEPK2tm>
   b81a4:	4808      	ldr	r0, [pc, #32]	; (b81c8 <_ZN6AB180510getRtcAsTmEP2tm+0x60>)
   b81a6:	9a04      	ldr	r2, [sp, #16]
   b81a8:	4908      	ldr	r1, [pc, #32]	; (b81cc <_ZN6AB180510getRtcAsTmEP2tm+0x64>)
   b81aa:	f7fb ffc8 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b81ae:	a804      	add	r0, sp, #16
   b81b0:	f007 fbce 	bl	bf950 <_ZN6StringD1Ev>
}
   b81b4:	4620      	mov	r0, r4
   b81b6:	b008      	add	sp, #32
   b81b8:	bd70      	pop	{r4, r5, r6, pc}
        memset(timeptr, 0, sizeof(*timeptr));
   b81ba:	2224      	movs	r2, #36	; 0x24
   b81bc:	2100      	movs	r1, #0
   b81be:	4628      	mov	r0, r5
   b81c0:	f009 f84a 	bl	c1258 <memset>
   b81c4:	2400      	movs	r4, #0
   b81c6:	e7f5      	b.n	b81b4 <_ZN6AB180510getRtcAsTmEP2tm+0x4c>
   b81c8:	2003e4c0 	.word	0x2003e4c0
   b81cc:	000c4a66 	.word	0x000c4a66

000b81d0 <_ZN6AB180512getRtcAsTimeERx>:
bool AB1805::getRtcAsTime(time_t &time) {
   b81d0:	b530      	push	{r4, r5, lr}
   b81d2:	b08b      	sub	sp, #44	; 0x2c
   b81d4:	460d      	mov	r5, r1
    bool bResult = getRtcAsTm(&tmstruct);
   b81d6:	a901      	add	r1, sp, #4
   b81d8:	f7ff ffc6 	bl	b8168 <_ZN6AB180510getRtcAsTmEP2tm>
    if (bResult) {
   b81dc:	4604      	mov	r4, r0
   b81de:	b120      	cbz	r0, b81ea <_ZN6AB180512getRtcAsTimeERx+0x1a>
        time = mktime(&tmstruct);
   b81e0:	a801      	add	r0, sp, #4
   b81e2:	f005 f8d3 	bl	bd38c <mktime>
   b81e6:	e9c5 0100 	strd	r0, r1, [r5]
}
   b81ea:	4620      	mov	r0, r4
   b81ec:	b00b      	add	sp, #44	; 0x2c
   b81ee:	bd30      	pop	{r4, r5, pc}

000b81f0 <_ZN6AB180510valueToBcdEi>:
    int tens = (value / 10) % 10;
   b81f0:	230a      	movs	r3, #10
   b81f2:	fb90 f1f3 	sdiv	r1, r0, r3
    int ones = value % 10;
   b81f6:	fb03 0011 	mls	r0, r3, r1, r0
    int tens = (value / 10) % 10;
   b81fa:	fb91 f2f3 	sdiv	r2, r1, r3
   b81fe:	fb03 1212 	mls	r2, r3, r2, r1
    return (uint8_t) ((tens << 4) | ones);
   b8202:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
}
   b8206:	b2c0      	uxtb	r0, r0
   b8208:	4770      	bx	lr

000b820a <_ZN6AB180513tmToRegistersEPK2tmPhb>:
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b820a:	b570      	push	{r4, r5, r6, lr}
   b820c:	4605      	mov	r5, r0
    *p++ = valueToBcd(timeptr->tm_sec);
   b820e:	6800      	ldr	r0, [r0, #0]
void AB1805::tmToRegisters(const struct tm *timeptr, uint8_t *array, bool includeYear) {
   b8210:	460c      	mov	r4, r1
   b8212:	4616      	mov	r6, r2
    *p++ = valueToBcd(timeptr->tm_sec);
   b8214:	f7ff ffec 	bl	b81f0 <_ZN6AB180510valueToBcdEi>
   b8218:	7020      	strb	r0, [r4, #0]
    *p++ = valueToBcd(timeptr->tm_min);
   b821a:	6868      	ldr	r0, [r5, #4]
   b821c:	f7ff ffe8 	bl	b81f0 <_ZN6AB180510valueToBcdEi>
   b8220:	7060      	strb	r0, [r4, #1]
    *p++ = valueToBcd(timeptr->tm_hour);
   b8222:	68a8      	ldr	r0, [r5, #8]
   b8224:	f7ff ffe4 	bl	b81f0 <_ZN6AB180510valueToBcdEi>
   b8228:	70a0      	strb	r0, [r4, #2]
    *p++ = valueToBcd(timeptr->tm_mday);
   b822a:	68e8      	ldr	r0, [r5, #12]
   b822c:	f7ff ffe0 	bl	b81f0 <_ZN6AB180510valueToBcdEi>
   b8230:	70e0      	strb	r0, [r4, #3]
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b8232:	6928      	ldr	r0, [r5, #16]
   b8234:	3001      	adds	r0, #1
   b8236:	f7ff ffdb 	bl	b81f0 <_ZN6AB180510valueToBcdEi>
   b823a:	7120      	strb	r0, [r4, #4]
    if (includeYear) {
   b823c:	b92e      	cbnz	r6, b824a <_ZN6AB180513tmToRegistersEPK2tmPhb+0x40>
    *p++ = valueToBcd(timeptr->tm_mon + 1); // struct tm is 0-11, not 1-12!
   b823e:	1d66      	adds	r6, r4, #5
    *p++ = valueToBcd(timeptr->tm_wday);
   b8240:	69a8      	ldr	r0, [r5, #24]
   b8242:	f7ff ffd5 	bl	b81f0 <_ZN6AB180510valueToBcdEi>
   b8246:	7030      	strb	r0, [r6, #0]
}
   b8248:	bd70      	pop	{r4, r5, r6, pc}
        *p++ = valueToBcd(timeptr->tm_year % 100);
   b824a:	696a      	ldr	r2, [r5, #20]
   b824c:	2364      	movs	r3, #100	; 0x64
   b824e:	fb92 f0f3 	sdiv	r0, r2, r3
   b8252:	fb03 2010 	mls	r0, r3, r0, r2
   b8256:	f7ff ffcb 	bl	b81f0 <_ZN6AB180510valueToBcdEi>
   b825a:	1da6      	adds	r6, r4, #6
   b825c:	7160      	strb	r0, [r4, #5]
   b825e:	e7ef      	b.n	b8240 <_ZN6AB180513tmToRegistersEPK2tmPhb+0x36>

000b8260 <_ZN6AB180512setRtcFromTmEPK2tmb>:
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   b8260:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8262:	b087      	sub	sp, #28
   b8264:	4605      	mov	r5, r0
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   b8266:	a802      	add	r0, sp, #8
bool AB1805::setRtcFromTm(const struct tm *timeptr, bool lock) {
   b8268:	4616      	mov	r6, r2
   b826a:	460c      	mov	r4, r1
    _log.info("setRtcAsTm %s", tmToString(timeptr).c_str());
   b826c:	f7ff ff36 	bl	b80dc <_ZN6AB180510tmToStringEPK2tm>
   b8270:	481e      	ldr	r0, [pc, #120]	; (b82ec <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   b8272:	9a02      	ldr	r2, [sp, #8]
   b8274:	491e      	ldr	r1, [pc, #120]	; (b82f0 <_ZN6AB180512setRtcFromTmEPK2tmb+0x90>)
   b8276:	f7fb ff62 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b827a:	a802      	add	r0, sp, #8
   b827c:	f007 fb68 	bl	bf950 <_ZN6StringD1Ev>
    if (lock) {
   b8280:	b116      	cbz	r6, b8288 <_ZN6AB180512setRtcFromTmEPK2tmb+0x28>
        wire.lock();
   b8282:	6868      	ldr	r0, [r5, #4]
   b8284:	f005 fdf6 	bl	bde74 <_ZN7TwoWire4lockEv>
    tmToRegisters(timeptr, &array[1], true);
   b8288:	4620      	mov	r0, r4
   b828a:	2201      	movs	r2, #1
   b828c:	f10d 0109 	add.w	r1, sp, #9
    array[0] = 0x00; // hundredths
   b8290:	2700      	movs	r7, #0
   b8292:	f88d 7008 	strb.w	r7, [sp, #8]
    tmToRegisters(timeptr, &array[1], true);
   b8296:	f7ff ffb8 	bl	b820a <_ZN6AB180513tmToRegistersEPK2tmPhb>
    bool bResult = setRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b829a:	2301      	movs	r3, #1
   b829c:	461a      	mov	r2, r3
   b829e:	2110      	movs	r1, #16
   b82a0:	4628      	mov	r0, r5
   b82a2:	f7ff fd8d 	bl	b7dc0 <_ZN6AB180514setRegisterBitEhhb>
    if (bResult) {
   b82a6:	4604      	mov	r4, r0
   b82a8:	b1e8      	cbz	r0, b82e6 <_ZN6AB180512setRtcFromTmEPK2tmb+0x86>
        bResult = writeRegisters(REG_HUNDREDTH, array, sizeof(array), false);
   b82aa:	2308      	movs	r3, #8
   b82ac:	9700      	str	r7, [sp, #0]
   b82ae:	eb0d 0203 	add.w	r2, sp, r3
   b82b2:	4639      	mov	r1, r7
   b82b4:	4628      	mov	r0, r5
   b82b6:	f7ff fc3b 	bl	b7b30 <_ZN6AB180514writeRegistersEhPKhjb>
        if (bResult) {
   b82ba:	4604      	mov	r4, r0
   b82bc:	b160      	cbz	r0, b82d8 <_ZN6AB180512setRtcFromTmEPK2tmb+0x78>
            clearRegisterBit(REG_CTRL_1, REG_CTRL_1_WRTC);
   b82be:	2301      	movs	r3, #1
   b82c0:	461a      	mov	r2, r3
   b82c2:	2110      	movs	r1, #16
   b82c4:	4628      	mov	r0, r5
   b82c6:	f7ff fd1a 	bl	b7cfe <_ZN6AB180516clearRegisterBitEhhb>
    if (lock) {
   b82ca:	b116      	cbz	r6, b82d2 <_ZN6AB180512setRtcFromTmEPK2tmb+0x72>
        wire.unlock();
   b82cc:	6868      	ldr	r0, [r5, #4]
   b82ce:	f005 fdda 	bl	bde86 <_ZN7TwoWire6unlockEv>
}
   b82d2:	4620      	mov	r0, r4
   b82d4:	b007      	add	sp, #28
   b82d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            _log.error(errorMsg, __LINE__);
   b82d8:	f44f 728d 	mov.w	r2, #282	; 0x11a
        _log.error(errorMsg, __LINE__);
   b82dc:	4905      	ldr	r1, [pc, #20]	; (b82f4 <_ZN6AB180512setRtcFromTmEPK2tmb+0x94>)
   b82de:	4803      	ldr	r0, [pc, #12]	; (b82ec <_ZN6AB180512setRtcFromTmEPK2tmb+0x8c>)
   b82e0:	f7ff fb54 	bl	b798c <_ZNK5spark6Logger5errorEPKcz>
   b82e4:	e7f1      	b.n	b82ca <_ZN6AB180512setRtcFromTmEPK2tmb+0x6a>
   b82e6:	f44f 728f 	mov.w	r2, #286	; 0x11e
   b82ea:	e7f7      	b.n	b82dc <_ZN6AB180512setRtcFromTmEPK2tmb+0x7c>
   b82ec:	2003e4c0 	.word	0x2003e4c0
   b82f0:	000c4a74 	.word	0x000c4a74
   b82f4:	000c4a82 	.word	0x000c4a82

000b82f8 <_ZN6AB180514setRtcFromTimeExb>:
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   b82f8:	b513      	push	{r0, r1, r4, lr}
   b82fa:	4604      	mov	r4, r0
    struct tm *tm = gmtime(&time);
   b82fc:	4668      	mov	r0, sp
bool AB1805::setRtcFromTime(time_t time, bool lock) {
   b82fe:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm *tm = gmtime(&time);
   b8302:	f008 ff5b 	bl	c11bc <gmtime>
    return setRtcFromTm(tm, lock);
   b8306:	f89d 2010 	ldrb.w	r2, [sp, #16]
    struct tm *tm = gmtime(&time);
   b830a:	4601      	mov	r1, r0
    return setRtcFromTm(tm, lock);
   b830c:	4620      	mov	r0, r4
   b830e:	f7ff ffa7 	bl	b8260 <_ZN6AB180512setRtcFromTmEPK2tmb>
}
   b8312:	b002      	add	sp, #8
   b8314:	bd10      	pop	{r4, pc}
	...

000b8318 <_ZN6AB18054loopEv>:
void AB1805::loop() {
   b8318:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b831a:	7e05      	ldrb	r5, [r0, #24]
void AB1805::loop() {
   b831c:	b089      	sub	sp, #36	; 0x24
   b831e:	4604      	mov	r4, r0
    if (!timeSet && Time.isValid() && Particle.timeSyncedLast() != 0) {
   b8320:	bb75      	cbnz	r5, b8380 <_ZN6AB18054loopEv+0x68>
   b8322:	f007 feb9 	bl	c0098 <_ZN9TimeClass7isValidEv>
   b8326:	b358      	cbz	r0, b8380 <_ZN6AB18054loopEv+0x68>
        tm = 0;
   b8328:	2600      	movs	r6, #0
   b832a:	2700      	movs	r7, #0
        return spark_sync_time_last(nullptr, &tm);
   b832c:	a904      	add	r1, sp, #16
   b832e:	4628      	mov	r0, r5
        tm = 0;
   b8330:	e9cd 6704 	strd	r6, r7, [sp, #16]
        return spark_sync_time_last(nullptr, &tm);
   b8334:	f004 ff3a 	bl	bd1ac <spark_sync_time_last>
   b8338:	b310      	cbz	r0, b8380 <_ZN6AB18054loopEv+0x68>
        timeSet = true;
   b833a:	2501      	movs	r5, #1
   b833c:	7625      	strb	r5, [r4, #24]
        time_t time = Time.now();
   b833e:	f007 fec8 	bl	c00d2 <_ZN9TimeClass3nowEv>
   b8342:	17c3      	asrs	r3, r0, #31
   b8344:	e9cd 0302 	strd	r0, r3, [sp, #8]
   b8348:	4602      	mov	r2, r0
        setRtcFromTime(time);
   b834a:	9500      	str	r5, [sp, #0]
   b834c:	4620      	mov	r0, r4
   b834e:	f7ff ffd3 	bl	b82f8 <_ZN6AB180514setRtcFromTimeExb>
        getRtcAsTime(time);
   b8352:	a902      	add	r1, sp, #8
   b8354:	4620      	mov	r0, r4
        time = 0;
   b8356:	e9cd 6702 	strd	r6, r7, [sp, #8]
        getRtcAsTime(time);
   b835a:	f7ff ff39 	bl	b81d0 <_ZN6AB180512getRtcAsTimeERx>
        _log.info("set RTC from cloud %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b835e:	4b13      	ldr	r3, [pc, #76]	; (b83ac <_ZN6AB18054loopEv+0x94>)
   b8360:	4913      	ldr	r1, [pc, #76]	; (b83b0 <_ZN6AB18054loopEv+0x98>)
   b8362:	681b      	ldr	r3, [r3, #0]
   b8364:	9300      	str	r3, [sp, #0]
   b8366:	a804      	add	r0, sp, #16
   b8368:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b836c:	f007 fe52 	bl	c0014 <_ZN9TimeClass6formatExPKc>
   b8370:	4810      	ldr	r0, [pc, #64]	; (b83b4 <_ZN6AB18054loopEv+0x9c>)
   b8372:	9a04      	ldr	r2, [sp, #16]
   b8374:	4910      	ldr	r1, [pc, #64]	; (b83b8 <_ZN6AB18054loopEv+0xa0>)
   b8376:	f7fb fee2 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b837a:	a804      	add	r0, sp, #16
   b837c:	f007 fae8 	bl	bf950 <_ZN6StringD1Ev>
    if (watchdogUpdatePeriod) {
   b8380:	6963      	ldr	r3, [r4, #20]
   b8382:	b18b      	cbz	r3, b83a8 <_ZN6AB18054loopEv+0x90>
   b8384:	f004 fbee 	bl	bcb64 <HAL_Timer_Get_Milli_Seconds>
        if (millis() - lastWatchdogMillis >= watchdogUpdatePeriod) {
   b8388:	6923      	ldr	r3, [r4, #16]
   b838a:	1ac0      	subs	r0, r0, r3
   b838c:	6963      	ldr	r3, [r4, #20]
   b838e:	4298      	cmp	r0, r3
   b8390:	d30a      	bcc.n	b83a8 <_ZN6AB18054loopEv+0x90>
   b8392:	f004 fbe7 	bl	bcb64 <HAL_Timer_Get_Milli_Seconds>
            setWDT();
   b8396:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
            lastWatchdogMillis = millis();
   b839a:	6120      	str	r0, [r4, #16]
            setWDT();
   b839c:	4620      	mov	r0, r4
}
   b839e:	b009      	add	sp, #36	; 0x24
   b83a0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            setWDT();
   b83a4:	f7ff bc0c 	b.w	b7bc0 <_ZN6AB18056setWDTEi>
}
   b83a8:	b009      	add	sp, #36	; 0x24
   b83aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b83ac:	2003d688 	.word	0x2003d688
   b83b0:	2003e6a8 	.word	0x2003e6a8
   b83b4:	2003e4c0 	.word	0x2003e4c0
   b83b8:	000c4a9d 	.word	0x000c4a9d

000b83bc <_ZN6AB18055setupEb>:
void AB1805::setup(bool callBegin) {
   b83bc:	b530      	push	{r4, r5, lr}
   b83be:	4604      	mov	r4, r0
   b83c0:	b08b      	sub	sp, #44	; 0x2c
    if (callBegin) {
   b83c2:	b111      	cbz	r1, b83ca <_ZN6AB18055setupEb+0xe>
        wire.begin();
   b83c4:	6840      	ldr	r0, [r0, #4]
   b83c6:	f005 fd03 	bl	bddd0 <_ZN7TwoWire5beginEv>
    if (detectChip()) {
   b83ca:	4620      	mov	r0, r4
   b83cc:	f7ff fb64 	bl	b7a98 <_ZN6AB180510detectChipEv>
   b83d0:	ad06      	add	r5, sp, #24
   b83d2:	2800      	cmp	r0, #0
   b83d4:	d037      	beq.n	b8446 <_ZN6AB18055setupEb+0x8a>
        updateWakeReason();
   b83d6:	4620      	mov	r0, r4
   b83d8:	f7ff fc9c 	bl	b7d14 <_ZN6AB180516updateWakeReasonEv>
        if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC) && !Time.isValid()) {
   b83dc:	2301      	movs	r3, #1
   b83de:	461a      	mov	r2, r3
   b83e0:	2110      	movs	r1, #16
   b83e2:	4620      	mov	r0, r4
   b83e4:	f7ff fc6d 	bl	b7cc2 <_ZN6AB180510isBitClearEhhb>
   b83e8:	b1d8      	cbz	r0, b8422 <_ZN6AB18055setupEb+0x66>
   b83ea:	f007 fe55 	bl	c0098 <_ZN9TimeClass7isValidEv>
   b83ee:	b9c0      	cbnz	r0, b8422 <_ZN6AB18055setupEb+0x66>
            getRtcAsTime(time);
   b83f0:	a902      	add	r1, sp, #8
   b83f2:	4620      	mov	r0, r4
   b83f4:	f7ff feec 	bl	b81d0 <_ZN6AB180512getRtcAsTimeERx>
            Time.setTime(time);
   b83f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   b83fc:	f007 fd50 	bl	bfea0 <_ZN9TimeClass7setTimeEx>
            _log.info("set system clock from RTC %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   b8400:	4b13      	ldr	r3, [pc, #76]	; (b8450 <_ZN6AB18055setupEb+0x94>)
   b8402:	4914      	ldr	r1, [pc, #80]	; (b8454 <_ZN6AB18055setupEb+0x98>)
   b8404:	681b      	ldr	r3, [r3, #0]
   b8406:	9300      	str	r3, [sp, #0]
   b8408:	4628      	mov	r0, r5
   b840a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b840e:	f007 fe01 	bl	c0014 <_ZN9TimeClass6formatExPKc>
   b8412:	4811      	ldr	r0, [pc, #68]	; (b8458 <_ZN6AB18055setupEb+0x9c>)
   b8414:	9a06      	ldr	r2, [sp, #24]
   b8416:	4911      	ldr	r1, [pc, #68]	; (b845c <_ZN6AB18055setupEb+0xa0>)
   b8418:	f7fb fe91 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   b841c:	4628      	mov	r0, r5
   b841e:	f007 fa97 	bl	bf950 <_ZN6StringD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b8422:	4b0f      	ldr	r3, [pc, #60]	; (b8460 <_ZN6AB18055setupEb+0xa4>)
   b8424:	9306      	str	r3, [sp, #24]
	    _M_invoker = &_My_handler::_M_invoke;
   b8426:	4b0f      	ldr	r3, [pc, #60]	; (b8464 <_ZN6AB18055setupEb+0xa8>)
   b8428:	9309      	str	r3, [sp, #36]	; 0x24
	    _M_manager = &_My_handler::_M_manager;
   b842a:	4b0f      	ldr	r3, [pc, #60]	; (b8468 <_ZN6AB18055setupEb+0xac>)
   b842c:	9308      	str	r3, [sp, #32]
    System.on(reset, systemEventStatic);
   b842e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   b8432:	2300      	movs	r3, #0
   b8434:	a802      	add	r0, sp, #8
   b8436:	9500      	str	r5, [sp, #0]
   b8438:	f7fd fa30 	bl	b589c <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
   b843c:	4628      	mov	r0, r5
   b843e:	f7fd f87c 	bl	b553a <_ZNSt14_Function_baseD1Ev>
}
   b8442:	b00b      	add	sp, #44	; 0x2c
   b8444:	bd30      	pop	{r4, r5, pc}
        _log.error("failed to detect AB1805");
   b8446:	4909      	ldr	r1, [pc, #36]	; (b846c <_ZN6AB18055setupEb+0xb0>)
   b8448:	4803      	ldr	r0, [pc, #12]	; (b8458 <_ZN6AB18055setupEb+0x9c>)
   b844a:	f7ff fa9f 	bl	b798c <_ZNK5spark6Logger5errorEPKcz>
   b844e:	e7e8      	b.n	b8422 <_ZN6AB18055setupEb+0x66>
   b8450:	2003d688 	.word	0x2003d688
   b8454:	2003e6a8 	.word	0x2003e6a8
   b8458:	2003e4c0 	.word	0x2003e4c0
   b845c:	000c4ab3 	.word	0x000c4ab3
   b8460:	000b7c45 	.word	0x000b7c45
   b8464:	000b5517 	.word	0x000b5517
   b8468:	000b5503 	.word	0x000b5503
   b846c:	000c4ad0 	.word	0x000c4ad0

000b8470 <_GLOBAL__sub_I__ZN6AB18058instanceE>:
        name_(name) {
   b8470:	4b01      	ldr	r3, [pc, #4]	; (b8478 <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
   b8472:	4a02      	ldr	r2, [pc, #8]	; (b847c <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
   b8474:	601a      	str	r2, [r3, #0]
}
   b8476:	4770      	bx	lr
   b8478:	2003e4c0 	.word	0x2003e4c0
   b847c:	000c4ae8 	.word	0x000c4ae8

000b8480 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   b8480:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   b8482:	2301      	movs	r3, #1
   b8484:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   b8486:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   b8488:	4604      	mov	r4, r0
        if (th->func) {
   b848a:	b143      	cbz	r3, b849e <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   b848c:	68c0      	ldr	r0, [r0, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b848e:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   b8490:	2301      	movs	r3, #1
   b8492:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   b8494:	2000      	movs	r0, #0
    }
   b8496:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   b849a:	f004 bb33 	b.w	bcb04 <os_thread_exit>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
	return *this;
      }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b849e:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   b84a0:	2800      	cmp	r0, #0
   b84a2:	d0f5      	beq.n	b8490 <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   b84a4:	6883      	ldr	r3, [r0, #8]
   b84a6:	b90b      	cbnz	r3, b84ac <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   b84a8:	f008 f92e 	bl	c0708 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b84ac:	68c3      	ldr	r3, [r0, #12]
   b84ae:	e7ee      	b.n	b848e <_ZN6Thread3runEPv+0xe>

000b84b0 <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	switch (__op)
   b84b0:	2a01      	cmp	r2, #1
   b84b2:	d102      	bne.n	b84ba <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b84b4:	6001      	str	r1, [r0, #0]
      }
   b84b6:	2000      	movs	r0, #0
   b84b8:	4770      	bx	lr
	  switch (__op)
   b84ba:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b84bc:	bf04      	itt	eq
   b84be:	680b      	ldreq	r3, [r1, #0]
   b84c0:	6003      	streq	r3, [r0, #0]
	      break;
   b84c2:	e7f8      	b.n	b84b6 <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x6>

000b84c4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>:
      operator()(_Tp* __ptr) const
   b84c4:	b538      	push	{r3, r4, r5, lr}
      ~unique_ptr() noexcept
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
   b84c6:	6805      	ldr	r5, [r0, #0]
      operator()(_Tp* __ptr) const
   b84c8:	4604      	mov	r4, r0
	if (__ptr != nullptr)
   b84ca:	b135      	cbz	r5, b84da <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0+0x16>
    class function<_Res(_ArgTypes...)>
   b84cc:	4628      	mov	r0, r5
   b84ce:	f7fd f834 	bl	b553a <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   b84d2:	2110      	movs	r1, #16
   b84d4:	4628      	mov	r0, r5
   b84d6:	f7fb fde2 	bl	b409e <_ZdlPvj>
   b84da:	4620      	mov	r0, r4
   b84dc:	2114      	movs	r1, #20
      }
   b84de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	delete __ptr;
   b84e2:	f7fb bddc 	b.w	b409e <_ZdlPvj>

000b84e6 <_ZN6Thread7disposeEv>:
    void dispose()
   b84e6:	b510      	push	{r4, lr}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b84e8:	6803      	ldr	r3, [r0, #0]
   b84ea:	4604      	mov	r4, r0
        if (!isValid())
   b84ec:	b1ab      	cbz	r3, b851a <_ZN6Thread7disposeEv+0x34>
        return isValid() && os_thread_is_current(d_->handle);
   b84ee:	6858      	ldr	r0, [r3, #4]
   b84f0:	f004 fab8 	bl	bca64 <os_thread_is_current>
   b84f4:	b988      	cbnz	r0, b851a <_ZN6Thread7disposeEv+0x34>
   b84f6:	6823      	ldr	r3, [r4, #0]
        if (!d_->exited) {
   b84f8:	7c5a      	ldrb	r2, [r3, #17]
   b84fa:	b912      	cbnz	r2, b8502 <_ZN6Thread7disposeEv+0x1c>
        return isValid() && os_thread_join(d_->handle)==0;
   b84fc:	6858      	ldr	r0, [r3, #4]
   b84fe:	f004 fab9 	bl	bca74 <os_thread_join>
        os_thread_cleanup(d_->handle);
   b8502:	6823      	ldr	r3, [r4, #0]
   b8504:	6858      	ldr	r0, [r3, #4]
   b8506:	f004 fabd 	bl	bca84 <os_thread_cleanup>
	const pointer __old_p = _M_ptr();
   b850a:	6820      	ldr	r0, [r4, #0]
	_M_ptr() = __p;
   b850c:	2300      	movs	r3, #0
   b850e:	6023      	str	r3, [r4, #0]
	if (__old_p)
   b8510:	b118      	cbz	r0, b851a <_ZN6Thread7disposeEv+0x34>
    }
   b8512:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b8516:	f7ff bfd5 	b.w	b84c4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
   b851a:	bd10      	pop	{r4, pc}

000b851c <_ZN19BackgroundPublishRKC1Ev>:

#include "BackgroundPublishRK.h"

BackgroundPublishRK *BackgroundPublishRK::_instance;

BackgroundPublishRK::BackgroundPublishRK() {
   b851c:	4a05      	ldr	r2, [pc, #20]	; (b8534 <_ZN19BackgroundPublishRKC1Ev+0x18>)
   b851e:	6002      	str	r2, [r0, #0]
   b8520:	2200      	movs	r2, #0
   b8522:	6042      	str	r2, [r0, #4]
   b8524:	7302      	strb	r2, [r0, #12]
        val_(0) {
   b8526:	f880 244f 	strb.w	r2, [r0, #1103]	; 0x44f
    _Function_base() : _M_manager(nullptr) { }
   b852a:	f8c0 2458 	str.w	r2, [r0, #1112]	; 0x458
   b852e:	f8c0 2460 	str.w	r2, [r0, #1120]	; 0x460
}
   b8532:	4770      	bx	lr
   b8534:	000c4b28 	.word	0x000c4b28

000b8538 <_ZN19BackgroundPublishRK8instanceEv>:
BackgroundPublishRK::~BackgroundPublishRK()
{
    stop();
}

BackgroundPublishRK &BackgroundPublishRK::instance() {
   b8538:	b510      	push	{r4, lr}
    if (!_instance) {
   b853a:	4c07      	ldr	r4, [pc, #28]	; (b8558 <_ZN19BackgroundPublishRK8instanceEv+0x20>)
   b853c:	6823      	ldr	r3, [r4, #0]
   b853e:	b943      	cbnz	r3, b8552 <_ZN19BackgroundPublishRK8instanceEv+0x1a>
        _instance = new BackgroundPublishRK();
   b8540:	f240 4064 	movw	r0, #1124	; 0x464
   b8544:	f7fb fda7 	bl	b4096 <_Znwj>
   b8548:	4603      	mov	r3, r0
   b854a:	b108      	cbz	r0, b8550 <_ZN19BackgroundPublishRK8instanceEv+0x18>
   b854c:	f7ff ffe6 	bl	b851c <_ZN19BackgroundPublishRKC1Ev>
   b8550:	6023      	str	r3, [r4, #0]
    }
    return *_instance;
}
   b8552:	6820      	ldr	r0, [r4, #0]
   b8554:	bd10      	pop	{r4, pc}
   b8556:	bf00      	nop
   b8558:	2003e4c8 	.word	0x2003e4c8

000b855c <_ZN19BackgroundPublishRK4stopEv>:
            OS_THREAD_PRIORITY_DEFAULT);
    }
}

void BackgroundPublishRK::stop()
{
   b855c:	b538      	push	{r3, r4, r5, lr}
   b855e:	4604      	mov	r4, r0
    if(thread)
   b8560:	6840      	ldr	r0, [r0, #4]
   b8562:	b190      	cbz	r0, b858a <_ZN19BackgroundPublishRK4stopEv+0x2e>
    {
        state = BACKGROUND_PUBLISH_STOP;
   b8564:	2302      	movs	r3, #2
   b8566:	7323      	strb	r3, [r4, #12]
        thread->dispose();
   b8568:	f7ff ffbd 	bl	b84e6 <_ZN6Thread7disposeEv>
        delete thread;
   b856c:	6865      	ldr	r5, [r4, #4]
   b856e:	b155      	cbz	r5, b8586 <_ZN19BackgroundPublishRK4stopEv+0x2a>
        dispose();
   b8570:	4628      	mov	r0, r5
   b8572:	f7ff ffb8 	bl	b84e6 <_ZN6Thread7disposeEv>
	if (__ptr != nullptr)
   b8576:	6828      	ldr	r0, [r5, #0]
   b8578:	b108      	cbz	r0, b857e <_ZN19BackgroundPublishRK4stopEv+0x22>
      operator()(_Tp* __ptr) const
   b857a:	f7ff ffa3 	bl	b84c4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
   b857e:	2104      	movs	r1, #4
   b8580:	4628      	mov	r0, r5
   b8582:	f7fb fd8c 	bl	b409e <_ZdlPvj>
        thread = NULL;
   b8586:	2300      	movs	r3, #0
   b8588:	6063      	str	r3, [r4, #4]
    }
}
   b858a:	bd38      	pop	{r3, r4, r5, pc}

000b858c <_ZN19BackgroundPublishRKD1Ev>:
BackgroundPublishRK::~BackgroundPublishRK()
   b858c:	b510      	push	{r4, lr}
   b858e:	4b05      	ldr	r3, [pc, #20]	; (b85a4 <_ZN19BackgroundPublishRKD1Ev+0x18>)
   b8590:	6003      	str	r3, [r0, #0]
   b8592:	4604      	mov	r4, r0
    stop();
   b8594:	f7ff ffe2 	bl	b855c <_ZN19BackgroundPublishRK4stopEv>
    class function<_Res(_ArgTypes...)>
   b8598:	f504 608a 	add.w	r0, r4, #1104	; 0x450
   b859c:	f7fc ffcd 	bl	b553a <_ZNSt14_Function_baseD1Ev>
}
   b85a0:	4620      	mov	r0, r4
   b85a2:	bd10      	pop	{r4, pc}
   b85a4:	000c4b28 	.word	0x000c4b28

000b85a8 <_ZN19BackgroundPublishRKD0Ev>:
BackgroundPublishRK::~BackgroundPublishRK()
   b85a8:	b510      	push	{r4, lr}
   b85aa:	4604      	mov	r4, r0
}
   b85ac:	f7ff ffee 	bl	b858c <_ZN19BackgroundPublishRKD1Ev>
   b85b0:	4620      	mov	r0, r4
   b85b2:	f240 4164 	movw	r1, #1124	; 0x464
   b85b6:	f7fb fd72 	bl	b409e <_ZdlPvj>
   b85ba:	4620      	mov	r0, r4
   b85bc:	bd10      	pop	{r4, pc}

000b85be <_ZN19BackgroundPublishRK8thread_fEv>:

void BackgroundPublishRK::thread_f()
{
   b85be:	b5f0      	push	{r4, r5, r6, r7, lr}
   b85c0:	4604      	mov	r4, r0
   b85c2:	b089      	sub	sp, #36	; 0x24
        // kick off the publish
        // WITH_ACK does not work as expected from a background thread
        // use the Future<bool> object directly as its default wait
        // (used by WITH_ACK) short-circuits when not called from the
        // main application thread
        auto ok = Particle.publish(event_name, event_data, event_flags);
   b85c4:	f100 060d 	add.w	r6, r0, #13
   b85c8:	f100 074e 	add.w	r7, r0, #78	; 0x4e
        while(state == BACKGROUND_PUBLISH_IDLE)
   b85cc:	7b23      	ldrb	r3, [r4, #12]
   b85ce:	b91b      	cbnz	r3, b85d8 <_ZN19BackgroundPublishRK8thread_fEv+0x1a>
            delay(1);
   b85d0:	2001      	movs	r0, #1
   b85d2:	f004 fee3 	bl	bd39c <delay>
        while(state == BACKGROUND_PUBLISH_IDLE)
   b85d6:	e7f9      	b.n	b85cc <_ZN19BackgroundPublishRK8thread_fEv+0xe>
        if(state == BACKGROUND_PUBLISH_STOP)
   b85d8:	7b23      	ldrb	r3, [r4, #12]
   b85da:	2b02      	cmp	r3, #2
   b85dc:	d064      	beq.n	b86a8 <_ZN19BackgroundPublishRK8thread_fEv+0xea>
    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     *
     * You do not need to use this under normal circumstances as publish() handles this internally.
     */
    void lock() { os_mutex_lock(mutex); };
   b85de:	68a0      	ldr	r0, [r4, #8]
   b85e0:	f004 fa60 	bl	bcaa4 <os_mutex_lock>

    /**
     * @brief Used internally to mutex lock to safely access data structures from multiple threads
     */
    void unlock() { os_mutex_unlock(mutex); };
   b85e4:	68a0      	ldr	r0, [r4, #8]
   b85e6:	f004 fa65 	bl	bcab4 <os_mutex_unlock>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b85ea:	f894 344f 	ldrb.w	r3, [r4, #1103]	; 0x44f
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b85ee:	f88d 3000 	strb.w	r3, [sp]
   b85f2:	463a      	mov	r2, r7
   b85f4:	233c      	movs	r3, #60	; 0x3c
   b85f6:	4631      	mov	r1, r6
   b85f8:	a806      	add	r0, sp, #24
   b85fa:	f005 f99b 	bl	bd934 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   b85fe:	9d06      	ldr	r5, [sp, #24]
   b8600:	786b      	ldrb	r3, [r5, #1]

        // then wait for publish to complete
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   b8602:	b933      	cbnz	r3, b8612 <_ZN19BackgroundPublishRK8thread_fEv+0x54>
   b8604:	7b23      	ldrb	r3, [r4, #12]
   b8606:	2b02      	cmp	r3, #2
   b8608:	d003      	beq.n	b8612 <_ZN19BackgroundPublishRK8thread_fEv+0x54>
        {
            // yield to rest of system while we wait
            delay(1);
   b860a:	2001      	movs	r0, #1
   b860c:	f004 fec6 	bl	bd39c <delay>
        while(!ok.isDone() && state != BACKGROUND_PUBLISH_STOP)
   b8610:	e7f5      	b.n	b85fe <_ZN19BackgroundPublishRK8thread_fEv+0x40>
        }

        if(completed_cb)
   b8612:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
   b8616:	b31b      	cbz	r3, b8660 <_ZN19BackgroundPublishRK8thread_fEv+0xa2>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   b8618:	2000      	movs	r0, #0
   b861a:	f004 fd35 	bl	bd088 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b861e:	b120      	cbz	r0, b862a <_ZN19BackgroundPublishRK8thread_fEv+0x6c>
   b8620:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   b8622:	b913      	cbnz	r3, b862a <_ZN19BackgroundPublishRK8thread_fEv+0x6c>
        spark_process();
   b8624:	f004 fd8a 	bl	bd13c <spark_process>
    }
   b8628:	e7fa      	b.n	b8620 <_ZN19BackgroundPublishRK8thread_fEv+0x62>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b862a:	782b      	ldrb	r3, [r5, #0]
        {
            completed_cb(ok.isSucceeded(),
   b862c:	f8d4 2460 	ldr.w	r2, [r4, #1120]	; 0x460
   b8630:	9205      	str	r2, [sp, #20]
        return state() == State::SUCCEEDED;
   b8632:	1e59      	subs	r1, r3, #1
   b8634:	424b      	negs	r3, r1
   b8636:	414b      	adcs	r3, r1
   b8638:	f88d 300b 	strb.w	r3, [sp, #11]
      if (_M_empty())
   b863c:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
   b8640:	e9cd 6703 	strd	r6, r7, [sp, #12]
   b8644:	b90b      	cbnz	r3, b864a <_ZN19BackgroundPublishRK8thread_fEv+0x8c>
	__throw_bad_function_call();
   b8646:	f008 f85f 	bl	c0708 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b864a:	ab05      	add	r3, sp, #20
   b864c:	9300      	str	r3, [sp, #0]
   b864e:	f8d4 545c 	ldr.w	r5, [r4, #1116]	; 0x45c
   b8652:	ab04      	add	r3, sp, #16
   b8654:	aa03      	add	r2, sp, #12
   b8656:	f10d 010b 	add.w	r1, sp, #11
   b865a:	f504 608a 	add.w	r0, r4, #1104	; 0x450
   b865e:	47a8      	blx	r5
    void lock() { os_mutex_lock(mutex); };
   b8660:	68a0      	ldr	r0, [r4, #8]
   b8662:	f004 fa1f 	bl	bcaa4 <os_mutex_lock>
                event_context);
        }

        WITH_LOCK(*this)
        {
            if(state == BACKGROUND_PUBLISH_STOP)
   b8666:	7b23      	ldrb	r3, [r4, #12]
   b8668:	2b02      	cmp	r3, #2
   b866a:	d017      	beq.n	b869c <_ZN19BackgroundPublishRK8thread_fEv+0xde>
	if (_M_manager)
   b866c:	f8d4 3458 	ldr.w	r3, [r4, #1112]	; 0x458
            {
                return;
            }
            event_context = NULL;
   b8670:	2500      	movs	r5, #0
   b8672:	f8c4 5460 	str.w	r5, [r4, #1120]	; 0x460
   b8676:	b143      	cbz	r3, b868a <_ZN19BackgroundPublishRK8thread_fEv+0xcc>
            completed_cb = NULL;
   b8678:	f504 618a 	add.w	r1, r4, #1104	; 0x450
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b867c:	2203      	movs	r2, #3
   b867e:	4608      	mov	r0, r1
   b8680:	4798      	blx	r3
	    _M_manager = nullptr;
   b8682:	f8c4 5458 	str.w	r5, [r4, #1112]	; 0x458
	    _M_invoker = nullptr;
   b8686:	f8c4 545c 	str.w	r5, [r4, #1116]	; 0x45c
            state = BACKGROUND_PUBLISH_IDLE;
   b868a:	2300      	movs	r3, #0
    void unlock() { os_mutex_unlock(mutex); };
   b868c:	68a0      	ldr	r0, [r4, #8]
   b868e:	7323      	strb	r3, [r4, #12]
   b8690:	f004 fa10 	bl	bcab4 <os_mutex_unlock>
   b8694:	a807      	add	r0, sp, #28
   b8696:	f7fc f803 	bl	b46a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b869a:	e797      	b.n	b85cc <_ZN19BackgroundPublishRK8thread_fEv+0xe>
   b869c:	68a0      	ldr	r0, [r4, #8]
   b869e:	f004 fa09 	bl	bcab4 <os_mutex_unlock>
   b86a2:	a807      	add	r0, sp, #28
   b86a4:	f7fb fffc 	bl	b46a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   b86a8:	b009      	add	sp, #36	; 0x24
   b86aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b86ac <_ZNSt17_Function_handlerIFvvEZN19BackgroundPublishRK5startEvEUlvE_E9_M_invokeERKSt9_Any_data>:
            [this]() { thread_f(); },
   b86ac:	6800      	ldr	r0, [r0, #0]
   b86ae:	f7ff bf86 	b.w	b85be <_ZN19BackgroundPublishRK8thread_fEv>

000b86b2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b86b2:	b513      	push	{r0, r1, r4, lr}
   b86b4:	460b      	mov	r3, r1
   b86b6:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b86b8:	e9d0 0100 	ldrd	r0, r1, [r0]
   b86bc:	466c      	mov	r4, sp
   b86be:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b86c2:	e893 0003 	ldmia.w	r3, {r0, r1}
   b86c6:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b86ca:	e894 0003 	ldmia.w	r4, {r0, r1}
   b86ce:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b86d2:	b002      	add	sp, #8
   b86d4:	bd10      	pop	{r4, pc}
	...

000b86d8 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>:
    Thread(const char *name, wiring_thread_fn_t function,
   b86d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b86dc:	4606      	mov	r6, r0
   b86de:	4688      	mov	r8, r1
        : d_(new(std::nothrow) Data)
   b86e0:	2014      	movs	r0, #20
   b86e2:	4926      	ldr	r1, [pc, #152]	; (b877c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
    Thread(const char *name, wiring_thread_fn_t function,
   b86e4:	4617      	mov	r7, r2
   b86e6:	4699      	mov	r9, r3
        : d_(new(std::nothrow) Data)
   b86e8:	f008 f804 	bl	c06f4 <_ZnwjRKSt9nothrow_t>
   b86ec:	4604      	mov	r4, r0
   b86ee:	b130      	cbz	r0, b86fe <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x26>
      : _M_head_impl() { }
   b86f0:	2000      	movs	r0, #0
            exited(false) {
   b86f2:	e9c4 0000 	strd	r0, r0, [r4]
   b86f6:	e9c4 0002 	strd	r0, r0, [r4, #8]
   b86fa:	7420      	strb	r0, [r4, #16]
   b86fc:	7460      	strb	r0, [r4, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b86fe:	6034      	str	r4, [r6, #0]
        if (!d_) {
   b8700:	2c00      	cmp	r4, #0
   b8702:	d031      	beq.n	b8768 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        d_->wrapper.reset(new(std::nothrow) wiring_thread_fn_t(std::move(function)));
   b8704:	491d      	ldr	r1, [pc, #116]	; (b877c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa4>)
   b8706:	2010      	movs	r0, #16
   b8708:	f007 fff4 	bl	c06f4 <_ZnwjRKSt9nothrow_t>
   b870c:	4605      	mov	r5, r0
   b870e:	b168      	cbz	r0, b872c <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x54>
    _Function_base() : _M_manager(nullptr) { }
   b8710:	2300      	movs	r3, #0
   b8712:	6083      	str	r3, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b8714:	4601      	mov	r1, r0
   b8716:	4638      	mov	r0, r7
   b8718:	f7ff ffcb 	bl	b86b2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b871c:	68bb      	ldr	r3, [r7, #8]
      __a = _GLIBCXX_MOVE(__b);
   b871e:	68aa      	ldr	r2, [r5, #8]
   b8720:	60ba      	str	r2, [r7, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8722:	60ab      	str	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b8724:	68ea      	ldr	r2, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8726:	68fb      	ldr	r3, [r7, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b8728:	60eb      	str	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b872a:	60fa      	str	r2, [r7, #12]
	const pointer __old_p = _M_ptr();
   b872c:	6827      	ldr	r7, [r4, #0]
	_M_ptr() = __p;
   b872e:	6025      	str	r5, [r4, #0]
	if (__old_p)
   b8730:	b137      	cbz	r7, b8740 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x68>
    class function<_Res(_ArgTypes...)>
   b8732:	4638      	mov	r0, r7
   b8734:	f7fc ff01 	bl	b553a <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   b8738:	2110      	movs	r1, #16
   b873a:	4638      	mov	r0, r7
   b873c:	f7fb fcaf 	bl	b409e <_ZdlPvj>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b8740:	6830      	ldr	r0, [r6, #0]
        if (!d_->wrapper) {
   b8742:	6803      	ldr	r3, [r0, #0]
   b8744:	b183      	cbz	r3, b8768 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   b8746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b8748:	464a      	mov	r2, r9
   b874a:	e9cd 0300 	strd	r0, r3, [sp]
   b874e:	4641      	mov	r1, r8
   b8750:	4b0b      	ldr	r3, [pc, #44]	; (b8780 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0xa8>)
   b8752:	3004      	adds	r0, #4
   b8754:	f004 f97e 	bl	bca54 <os_thread_create>
   b8758:	b930      	cbnz	r0, b8768 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x90>
   b875a:	6833      	ldr	r3, [r6, #0]
        while (!d_->started) {
   b875c:	7c1b      	ldrb	r3, [r3, #16]
   b875e:	b94b      	cbnz	r3, b8774 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
            HAL_Delay_Milliseconds(1);
   b8760:	2001      	movs	r0, #1
   b8762:	f004 f9ef 	bl	bcb44 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   b8766:	e7f8      	b.n	b875a <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x82>
	const pointer __old_p = _M_ptr();
   b8768:	6830      	ldr	r0, [r6, #0]
	_M_ptr() = __p;
   b876a:	2300      	movs	r3, #0
   b876c:	6033      	str	r3, [r6, #0]
	if (__old_p)
   b876e:	b108      	cbz	r0, b8774 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj+0x9c>
      operator()(_Tp* __ptr) const
   b8770:	f7ff fea8 	bl	b84c4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.part.0>
    }
   b8774:	4630      	mov	r0, r6
   b8776:	b003      	add	sp, #12
   b8778:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b877c:	000c55d8 	.word	0x000c55d8
   b8780:	000b8481 	.word	0x000b8481

000b8784 <_ZN19BackgroundPublishRK5startEv>:
{
   b8784:	b530      	push	{r4, r5, lr}
    if(!thread)
   b8786:	6843      	ldr	r3, [r0, #4]
{
   b8788:	b087      	sub	sp, #28
   b878a:	4604      	mov	r4, r0
    if(!thread)
   b878c:	b9c3      	cbnz	r3, b87c0 <_ZN19BackgroundPublishRK5startEv+0x3c>
        os_mutex_create(&mutex);
   b878e:	3008      	adds	r0, #8
   b8790:	f004 f980 	bl	bca94 <os_mutex_create>
	    _M_invoker = &_My_handler::_M_invoke;
   b8794:	4b0b      	ldr	r3, [pc, #44]	; (b87c4 <_ZN19BackgroundPublishRK5startEv+0x40>)
   b8796:	9305      	str	r3, [sp, #20]
            OS_THREAD_PRIORITY_DEFAULT);
   b8798:	2004      	movs	r0, #4
	    _M_manager = &_My_handler::_M_manager;
   b879a:	4b0b      	ldr	r3, [pc, #44]	; (b87c8 <_ZN19BackgroundPublishRK5startEv+0x44>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b879c:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   b879e:	9304      	str	r3, [sp, #16]
   b87a0:	f7fb fc79 	bl	b4096 <_Znwj>
   b87a4:	4605      	mov	r5, r0
   b87a6:	b138      	cbz	r0, b87b8 <_ZN19BackgroundPublishRK5startEv+0x34>
   b87a8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   b87ac:	9300      	str	r3, [sp, #0]
   b87ae:	4907      	ldr	r1, [pc, #28]	; (b87cc <_ZN19BackgroundPublishRK5startEv+0x48>)
   b87b0:	2302      	movs	r3, #2
   b87b2:	aa02      	add	r2, sp, #8
   b87b4:	f7ff ff90 	bl	b86d8 <_ZN6ThreadC1EPKcSt8functionIFvvEEhj>
        thread = new Thread("BackgroundPublishRK",
   b87b8:	6065      	str	r5, [r4, #4]
    class function<_Res(_ArgTypes...)>
   b87ba:	a802      	add	r0, sp, #8
   b87bc:	f7fc febd 	bl	b553a <_ZNSt14_Function_baseD1Ev>
}
   b87c0:	b007      	add	sp, #28
   b87c2:	bd30      	pop	{r4, r5, pc}
   b87c4:	000b86ad 	.word	0x000b86ad
   b87c8:	000b84b1 	.word	0x000b84b1
   b87cc:	000c4b0c 	.word	0x000c4b0c

000b87d0 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>:

bool BackgroundPublishRK::publish(const char *name, const char *data, PublishFlags flags, PublishCompletedCallback cb, const void *context)
{
   b87d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b87d4:	4604      	mov	r4, r0
   b87d6:	b085      	sub	sp, #20
    void lock() { os_mutex_lock(mutex); };
   b87d8:	6880      	ldr	r0, [r0, #8]
   b87da:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   b87dc:	4698      	mov	r8, r3
   b87de:	460d      	mov	r5, r1
   b87e0:	4616      	mov	r6, r2
   b87e2:	f004 f95f 	bl	bcaa4 <os_mutex_lock>
    // protect against separate threads trying to publish at the same time
    WITH_LOCK(*this)

    // check currently in idle state and ready to accept publish request
    if(!thread || state != BACKGROUND_PUBLISH_IDLE)
   b87e6:	6863      	ldr	r3, [r4, #4]
   b87e8:	b11b      	cbz	r3, b87f2 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x22>
   b87ea:	7b23      	ldrb	r3, [r4, #12]
   b87ec:	f003 09ff 	and.w	r9, r3, #255	; 0xff
   b87f0:	b133      	cbz	r3, b8800 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x30>
    void unlock() { os_mutex_unlock(mutex); };
   b87f2:	68a0      	ldr	r0, [r4, #8]
   b87f4:	f004 f95e 	bl	bcab4 <os_mutex_unlock>
    {
        return false;
   b87f8:	2000      	movs	r0, #0
    event_context = context;
    event_flags = flags;
    state = BACKGROUND_PUBLISH_REQUESTED;

    return true;
}
   b87fa:	b005      	add	sp, #20
   b87fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b8800:	68a0      	ldr	r0, [r4, #8]
   b8802:	f004 f957 	bl	bcab4 <os_mutex_unlock>
    if(!name)
   b8806:	2d00      	cmp	r5, #0
   b8808:	d03d      	beq.n	b8886 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb6>
    strncpy(event_name, name, sizeof(event_name));
   b880a:	2240      	movs	r2, #64	; 0x40
   b880c:	4629      	mov	r1, r5
   b880e:	f104 000d 	add.w	r0, r4, #13
   b8812:	f008 fe08 	bl	c1426 <strncpy>
    event_name[sizeof(event_name)-1] = '\0'; // ensure null termination
   b8816:	f884 904d 	strb.w	r9, [r4, #77]	; 0x4d
    if(data)
   b881a:	b38e      	cbz	r6, b8880 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0xb0>
        strncpy(event_data, data, sizeof(event_data));
   b881c:	f240 4201 	movw	r2, #1025	; 0x401
   b8820:	4631      	mov	r1, r6
   b8822:	f104 004e 	add.w	r0, r4, #78	; 0x4e
   b8826:	f008 fdfe 	bl	c1426 <strncpy>
        event_data[sizeof(event_data)-1] = '\0'; // ensure null termination
   b882a:	f884 944e 	strb.w	r9, [r4, #1102]	; 0x44e
    _Function_base() : _M_manager(nullptr) { }
   b882e:	2300      	movs	r3, #0
   b8830:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
   b8832:	68bb      	ldr	r3, [r7, #8]
    completed_cb = cb;
   b8834:	f504 658a 	add.w	r5, r4, #1104	; 0x450
      if (static_cast<bool>(__x))
   b8838:	b13b      	cbz	r3, b884a <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x7a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b883a:	2202      	movs	r2, #2
   b883c:	4639      	mov	r1, r7
   b883e:	4668      	mov	r0, sp
   b8840:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b8842:	68fb      	ldr	r3, [r7, #12]
   b8844:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   b8846:	68bb      	ldr	r3, [r7, #8]
   b8848:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   b884a:	4629      	mov	r1, r5
   b884c:	4668      	mov	r0, sp
   b884e:	f7ff ff30 	bl	b86b2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8852:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   b8854:	f8d4 2458 	ldr.w	r2, [r4, #1112]	; 0x458
      __b = _GLIBCXX_MOVE(__tmp);
   b8858:	f8c4 3458 	str.w	r3, [r4, #1112]	; 0x458
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b885c:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   b885e:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   b8860:	4668      	mov	r0, sp
   b8862:	f8d4 245c 	ldr.w	r2, [r4, #1116]	; 0x45c
      __b = _GLIBCXX_MOVE(__tmp);
   b8866:	f8c4 345c 	str.w	r3, [r4, #1116]	; 0x45c
      __a = _GLIBCXX_MOVE(__b);
   b886a:	9203      	str	r2, [sp, #12]
   b886c:	f7fc fe65 	bl	b553a <_ZNSt14_Function_baseD1Ev>
    event_context = context;
   b8870:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b8872:	f8c4 3460 	str.w	r3, [r4, #1120]	; 0x460
    state = BACKGROUND_PUBLISH_REQUESTED;
   b8876:	2001      	movs	r0, #1
    event_flags = flags;
   b8878:	f884 844f 	strb.w	r8, [r4, #1103]	; 0x44f
    state = BACKGROUND_PUBLISH_REQUESTED;
   b887c:	7320      	strb	r0, [r4, #12]
    return true;
   b887e:	e7bc      	b.n	b87fa <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>
        event_data[0] = '\0'; // null terminate at start for no event data
   b8880:	f884 604e 	strb.w	r6, [r4, #78]	; 0x4e
   b8884:	e7d3      	b.n	b882e <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x5e>
        return false;
   b8886:	4628      	mov	r0, r5
   b8888:	e7b7      	b.n	b87fa <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_+0x2a>
	...

000b888c <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   b888c:	b510      	push	{r4, lr}
   b888e:	4b05      	ldr	r3, [pc, #20]	; (b88a4 <_ZN10JsonBufferD1Ev+0x18>)
   b8890:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   b8892:	7c03      	ldrb	r3, [r0, #16]
JsonBuffer::~JsonBuffer() {
   b8894:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   b8896:	b91b      	cbnz	r3, b88a0 <_ZN10JsonBufferD1Ev+0x14>
   b8898:	6840      	ldr	r0, [r0, #4]
   b889a:	b108      	cbz	r0, b88a0 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   b889c:	f004 fd06 	bl	bd2ac <free>
	}
}
   b88a0:	4620      	mov	r0, r4
   b88a2:	bd10      	pop	{r4, pc}
   b88a4:	000c4b48 	.word	0x000c4b48

000b88a8 <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
   b88a8:	b510      	push	{r4, lr}
   b88aa:	4604      	mov	r4, r0
}
   b88ac:	f7ff ffee 	bl	b888c <_ZN10JsonBufferD1Ev>
   b88b0:	4620      	mov	r0, r4
   b88b2:	2114      	movs	r1, #20
   b88b4:	f7fb fbf3 	bl	b409e <_ZdlPvj>
   b88b8:	4620      	mov	r0, r4
   b88ba:	bd10      	pop	{r4, pc}

000b88bc <_ZN10JsonWriterD1Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
   b88bc:	b510      	push	{r4, lr}
   b88be:	4b03      	ldr	r3, [pc, #12]	; (b88cc <_ZN10JsonWriterD1Ev+0x10>)
   b88c0:	6003      	str	r3, [r0, #0]
   b88c2:	4604      	mov	r4, r0
   b88c4:	f7ff ffe2 	bl	b888c <_ZN10JsonBufferD1Ev>

}
   b88c8:	4620      	mov	r0, r4
   b88ca:	bd10      	pop	{r4, pc}
   b88cc:	000c4b68 	.word	0x000c4b68

000b88d0 <_ZN10JsonWriterD0Ev>:
JsonWriter::~JsonWriter() {
   b88d0:	b510      	push	{r4, lr}
   b88d2:	4604      	mov	r4, r0
}
   b88d4:	f7ff fff2 	bl	b88bc <_ZN10JsonWriterD1Ev>
   b88d8:	4620      	mov	r0, r4
   b88da:	2130      	movs	r1, #48	; 0x30
   b88dc:	f7fb fbdf 	bl	b409e <_ZdlPvj>
   b88e0:	4620      	mov	r0, r4
   b88e2:	bd10      	pop	{r4, pc}

000b88e4 <_ZN12JsonModifierD1Ev>:

JsonModifier::JsonModifier(JsonParser &jp) : jp(jp) {

}

JsonModifier::~JsonModifier() {
   b88e4:	b510      	push	{r4, lr}
   b88e6:	4b03      	ldr	r3, [pc, #12]	; (b88f4 <_ZN12JsonModifierD1Ev+0x10>)
   b88e8:	6003      	str	r3, [r0, #0]
   b88ea:	4604      	mov	r4, r0
   b88ec:	f7ff ffe6 	bl	b88bc <_ZN10JsonWriterD1Ev>

}
   b88f0:	4620      	mov	r0, r4
   b88f2:	bd10      	pop	{r4, pc}
   b88f4:	000c4b78 	.word	0x000c4b78

000b88f8 <_ZN12JsonModifierD0Ev>:
JsonModifier::~JsonModifier() {
   b88f8:	b510      	push	{r4, lr}
   b88fa:	4604      	mov	r4, r0
}
   b88fc:	f7ff fff2 	bl	b88e4 <_ZN12JsonModifierD1Ev>
   b8900:	4620      	mov	r0, r4
   b8902:	2140      	movs	r1, #64	; 0x40
   b8904:	f7fb fbcb 	bl	b409e <_ZdlPvj>
   b8908:	4620      	mov	r0, r4
   b890a:	bd10      	pop	{r4, pc}

000b890c <_ZN10JsonParserD1Ev>:
JsonParser::~JsonParser() {
   b890c:	b510      	push	{r4, lr}
   b890e:	4b07      	ldr	r3, [pc, #28]	; (b892c <_ZN10JsonParserD1Ev+0x20>)
   b8910:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
   b8912:	7c03      	ldrb	r3, [r0, #16]
JsonParser::~JsonParser() {
   b8914:	4604      	mov	r4, r0
	if (!staticBuffers && tokens) {
   b8916:	b91b      	cbnz	r3, b8920 <_ZN10JsonParserD1Ev+0x14>
   b8918:	6940      	ldr	r0, [r0, #20]
   b891a:	b108      	cbz	r0, b8920 <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
   b891c:	f004 fcc6 	bl	bd2ac <free>
JsonParser::~JsonParser() {
   b8920:	4620      	mov	r0, r4
   b8922:	f7ff ffb3 	bl	b888c <_ZN10JsonBufferD1Ev>
}
   b8926:	4620      	mov	r0, r4
   b8928:	bd10      	pop	{r4, pc}
   b892a:	bf00      	nop
   b892c:	000c4b58 	.word	0x000c4b58

000b8930 <_ZN10JsonParserD0Ev>:
JsonParser::~JsonParser() {
   b8930:	b510      	push	{r4, lr}
   b8932:	4604      	mov	r4, r0
}
   b8934:	f7ff ffea 	bl	b890c <_ZN10JsonParserD1Ev>
   b8938:	4620      	mov	r0, r4
   b893a:	212c      	movs	r1, #44	; 0x2c
   b893c:	f7fb fbaf 	bl	b409e <_ZdlPvj>
   b8940:	4620      	mov	r0, r4
   b8942:	bd10      	pop	{r4, pc}

000b8944 <_ZN10JsonBufferC1Ev>:
JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {
   b8944:	4a03      	ldr	r2, [pc, #12]	; (b8954 <_ZN10JsonBufferC1Ev+0x10>)
   b8946:	6002      	str	r2, [r0, #0]
   b8948:	2200      	movs	r2, #0
   b894a:	e9c0 2201 	strd	r2, r2, [r0, #4]
   b894e:	60c2      	str	r2, [r0, #12]
   b8950:	7402      	strb	r2, [r0, #16]
}
   b8952:	4770      	bx	lr
   b8954:	000c4b48 	.word	0x000c4b48

000b8958 <_ZN10JsonBuffer8allocateEj>:
bool JsonBuffer::allocate(size_t len) {
   b8958:	b538      	push	{r3, r4, r5, lr}
	if (!staticBuffers) {
   b895a:	7c03      	ldrb	r3, [r0, #16]
bool JsonBuffer::allocate(size_t len) {
   b895c:	4604      	mov	r4, r0
   b895e:	460d      	mov	r5, r1
	if (!staticBuffers) {
   b8960:	b10b      	cbz	r3, b8966 <_ZN10JsonBuffer8allocateEj+0xe>
		return false;
   b8962:	2000      	movs	r0, #0
}
   b8964:	bd38      	pop	{r3, r4, r5, pc}
		if (buffer) {
   b8966:	6840      	ldr	r0, [r0, #4]
   b8968:	b138      	cbz	r0, b897a <_ZN10JsonBuffer8allocateEj+0x22>
			newBuffer = (char *) realloc(buffer, len);
   b896a:	f004 fca7 	bl	bd2bc <realloc>
		if (newBuffer) {
   b896e:	2800      	cmp	r0, #0
   b8970:	d0f7      	beq.n	b8962 <_ZN10JsonBuffer8allocateEj+0xa>
			bufferLen = len;
   b8972:	e9c4 0501 	strd	r0, r5, [r4, #4]
			return true;
   b8976:	2001      	movs	r0, #1
   b8978:	e7f4      	b.n	b8964 <_ZN10JsonBuffer8allocateEj+0xc>
			newBuffer = (char *) malloc(len);
   b897a:	4608      	mov	r0, r1
   b897c:	f004 fc8e 	bl	bd29c <malloc>
   b8980:	e7f5      	b.n	b896e <_ZN10JsonBuffer8allocateEj+0x16>

000b8982 <_ZN10JsonBuffer7addDataEPKcj>:
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b8982:	b570      	push	{r4, r5, r6, lr}
	if (!buffer || (offset + dataLen) > bufferLen) {
   b8984:	68c3      	ldr	r3, [r0, #12]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b8986:	460e      	mov	r6, r1
   b8988:	4615      	mov	r5, r2
	if (!buffer || (offset + dataLen) > bufferLen) {
   b898a:	18d1      	adds	r1, r2, r3
   b898c:	6842      	ldr	r2, [r0, #4]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
   b898e:	4604      	mov	r4, r0
	if (!buffer || (offset + dataLen) > bufferLen) {
   b8990:	b172      	cbz	r2, b89b0 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
   b8992:	6882      	ldr	r2, [r0, #8]
   b8994:	428a      	cmp	r2, r1
   b8996:	d30b      	bcc.n	b89b0 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
	memcpy(&buffer[offset], data, dataLen);
   b8998:	6860      	ldr	r0, [r4, #4]
   b899a:	68e3      	ldr	r3, [r4, #12]
   b899c:	462a      	mov	r2, r5
   b899e:	4631      	mov	r1, r6
   b89a0:	4418      	add	r0, r3
   b89a2:	f008 fc31 	bl	c1208 <memcpy>
	offset += dataLen;
   b89a6:	68e2      	ldr	r2, [r4, #12]
   b89a8:	442a      	add	r2, r5
   b89aa:	60e2      	str	r2, [r4, #12]
	return true;
   b89ac:	2001      	movs	r0, #1
}
   b89ae:	bd70      	pop	{r4, r5, r6, pc}
		if (!allocate(offset + dataLen)) {
   b89b0:	4620      	mov	r0, r4
   b89b2:	f7ff ffd1 	bl	b8958 <_ZN10JsonBuffer8allocateEj>
   b89b6:	2800      	cmp	r0, #0
   b89b8:	d1ee      	bne.n	b8998 <_ZN10JsonBuffer7addDataEPKcj+0x16>
   b89ba:	e7f8      	b.n	b89ae <_ZN10JsonBuffer7addDataEPKcj+0x2c>

000b89bc <_ZN10JsonBuffer5clearEv>:
	if (buffer && bufferLen) {
   b89bc:	6843      	ldr	r3, [r0, #4]
	offset = 0;
   b89be:	2100      	movs	r1, #0
   b89c0:	60c1      	str	r1, [r0, #12]
	if (buffer && bufferLen) {
   b89c2:	b123      	cbz	r3, b89ce <_ZN10JsonBuffer5clearEv+0x12>
   b89c4:	6882      	ldr	r2, [r0, #8]
   b89c6:	b112      	cbz	r2, b89ce <_ZN10JsonBuffer5clearEv+0x12>
		memset(buffer, 0, bufferLen);
   b89c8:	4618      	mov	r0, r3
   b89ca:	f008 bc45 	b.w	c1258 <memset>
}
   b89ce:	4770      	bx	lr

000b89d0 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>:
JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
   b89d0:	b510      	push	{r4, lr}
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   b89d2:	e9c0 1201 	strd	r1, r2, [r0, #4]
   b89d6:	2200      	movs	r2, #0
   b89d8:	60c2      	str	r2, [r0, #12]
   b89da:	2201      	movs	r2, #1
   b89dc:	7402      	strb	r2, [r0, #16]
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
   b89de:	6143      	str	r3, [r0, #20]
   b89e0:	4a02      	ldr	r2, [pc, #8]	; (b89ec <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj+0x1c>)
   b89e2:	9b02      	ldr	r3, [sp, #8]
   b89e4:	6002      	str	r2, [r0, #0]
   b89e6:	61c3      	str	r3, [r0, #28]
}
   b89e8:	bd10      	pop	{r4, pc}
   b89ea:	bf00      	nop
   b89ec:	000c4b58 	.word	0x000c4b58

000b89f0 <_ZNK10JsonParser13getOuterArrayEv>:
	for(const JsonParserGeneratorRK::jsmntok_t *token = tokens; token < tokensEnd; token++) {
   b89f0:	e9d0 0305 	ldrd	r0, r3, [r0, #20]
   b89f4:	4283      	cmp	r3, r0
   b89f6:	d904      	bls.n	b8a02 <_ZNK10JsonParser13getOuterArrayEv+0x12>
		if (token->type == JsonParserGeneratorRK::JSMN_ARRAY) {
   b89f8:	7802      	ldrb	r2, [r0, #0]
   b89fa:	2a02      	cmp	r2, #2
   b89fc:	d002      	beq.n	b8a04 <_ZNK10JsonParser13getOuterArrayEv+0x14>
	for(const JsonParserGeneratorRK::jsmntok_t *token = tokens; token < tokensEnd; token++) {
   b89fe:	3010      	adds	r0, #16
   b8a00:	e7f8      	b.n	b89f4 <_ZNK10JsonParser13getOuterArrayEv+0x4>
	return 0;
   b8a02:	2000      	movs	r0, #0
}
   b8a04:	4770      	bx	lr

000b8a06 <_ZNK10JsonParser14getOuterObjectEv>:
	if (tokens < tokensEnd && tokens[0].type == JsonParserGeneratorRK::JSMN_OBJECT) {
   b8a06:	e9d0 0305 	ldrd	r0, r3, [r0, #20]
   b8a0a:	4298      	cmp	r0, r3
   b8a0c:	d204      	bcs.n	b8a18 <_ZNK10JsonParser14getOuterObjectEv+0x12>
   b8a0e:	7803      	ldrb	r3, [r0, #0]
		return 0;
   b8a10:	2b01      	cmp	r3, #1
   b8a12:	bf18      	it	ne
   b8a14:	2000      	movne	r0, #0
   b8a16:	4770      	bx	lr
   b8a18:	2000      	movs	r0, #0
}
   b8a1a:	4770      	bx	lr

000b8a1c <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>:
bool JsonParser::skipObject(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&obj) const {
   b8a1c:	b570      	push	{r4, r5, r6, lr}
	int curObjectEnd = obj->end;
   b8a1e:	6813      	ldr	r3, [r2, #0]
   b8a20:	689d      	ldr	r5, [r3, #8]
	while(++obj < tokensEnd && obj->end < container->end && obj->end <= curObjectEnd) {
   b8a22:	6813      	ldr	r3, [r2, #0]
   b8a24:	f103 0410 	add.w	r4, r3, #16
   b8a28:	6014      	str	r4, [r2, #0]
   b8a2a:	6986      	ldr	r6, [r0, #24]
   b8a2c:	42b4      	cmp	r4, r6
   b8a2e:	d20a      	bcs.n	b8a46 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2a>
   b8a30:	699b      	ldr	r3, [r3, #24]
   b8a32:	688c      	ldr	r4, [r1, #8]
   b8a34:	42a3      	cmp	r3, r4
   b8a36:	da01      	bge.n	b8a3c <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x20>
   b8a38:	42ab      	cmp	r3, r5
   b8a3a:	ddf2      	ble.n	b8a22 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x6>
	if (obj >= tokensEnd || obj->end > container->end) {
   b8a3c:	42a3      	cmp	r3, r4
   b8a3e:	bfcc      	ite	gt
   b8a40:	2000      	movgt	r0, #0
   b8a42:	2001      	movle	r0, #1
   b8a44:	e000      	b.n	b8a48 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2c>
		return false;
   b8a46:	2000      	movs	r0, #0
}
   b8a48:	bd70      	pop	{r4, r5, r6, pc}

000b8a4a <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj>:
const JsonParserGeneratorRK::jsmntok_t *JsonParser::getTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex) const {
   b8a4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b8a4c:	f101 0310 	add.w	r3, r1, #16
const JsonParserGeneratorRK::jsmntok_t *JsonParser::getTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, size_t desiredIndex) const {
   b8a50:	4604      	mov	r4, r0
   b8a52:	4616      	mov	r6, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b8a54:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b8a56:	2500      	movs	r5, #0
	while(token < tokensEnd && token->end < container->end) {
   b8a58:	9801      	ldr	r0, [sp, #4]
   b8a5a:	69a3      	ldr	r3, [r4, #24]
   b8a5c:	4283      	cmp	r3, r0
   b8a5e:	d90b      	bls.n	b8a78 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0x2e>
   b8a60:	6882      	ldr	r2, [r0, #8]
   b8a62:	688b      	ldr	r3, [r1, #8]
   b8a64:	429a      	cmp	r2, r3
   b8a66:	da07      	bge.n	b8a78 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0x2e>
		if (desiredIndex == index) {
   b8a68:	42b5      	cmp	r5, r6
   b8a6a:	d006      	beq.n	b8a7a <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0x30>
		skipObject(container, token);
   b8a6c:	aa01      	add	r2, sp, #4
   b8a6e:	4620      	mov	r0, r4
		index++;
   b8a70:	3501      	adds	r5, #1
		skipObject(container, token);
   b8a72:	f7ff ffd3 	bl	b8a1c <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b8a76:	e7ef      	b.n	b8a58 <_ZNK10JsonParser15getTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tEj+0xe>
	return 0;
   b8a78:	2000      	movs	r0, #0
}
   b8a7a:	b002      	add	sp, #8
   b8a7c:	bd70      	pop	{r4, r5, r6, pc}

000b8a7e <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>:
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b8a7e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b8a82:	9d08      	ldr	r5, [sp, #32]
   b8a84:	4698      	mov	r8, r3
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b8a86:	f101 0310 	add.w	r3, r1, #16
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
   b8a8a:	4604      	mov	r4, r0
   b8a8c:	4617      	mov	r7, r2
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
   b8a8e:	9301      	str	r3, [sp, #4]
	size_t index = 0;
   b8a90:	2600      	movs	r6, #0
	while(token < tokensEnd && token->end < container->end) {
   b8a92:	9801      	ldr	r0, [sp, #4]
   b8a94:	69a3      	ldr	r3, [r4, #24]
   b8a96:	4283      	cmp	r3, r0
   b8a98:	d91a      	bls.n	b8ad0 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
   b8a9a:	6882      	ldr	r2, [r0, #8]
   b8a9c:	688b      	ldr	r3, [r1, #8]
   b8a9e:	429a      	cmp	r2, r3
   b8aa0:	da16      	bge.n	b8ad0 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x52>
		if (desiredIndex == index) {
   b8aa2:	42ae      	cmp	r6, r5
   b8aa4:	d10b      	bne.n	b8abe <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
			key = token;
   b8aa6:	6038      	str	r0, [r7, #0]
			if (skipObject(container, token)) {
   b8aa8:	aa01      	add	r2, sp, #4
   b8aaa:	4620      	mov	r0, r4
   b8aac:	f7ff ffb6 	bl	b8a1c <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
   b8ab0:	b128      	cbz	r0, b8abe <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
				value = token;
   b8ab2:	9b01      	ldr	r3, [sp, #4]
   b8ab4:	f8c8 3000 	str.w	r3, [r8]
}
   b8ab8:	b002      	add	sp, #8
   b8aba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		skipObject(container, token);
   b8abe:	aa01      	add	r2, sp, #4
   b8ac0:	4620      	mov	r0, r4
   b8ac2:	f7ff ffab 	bl	b8a1c <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
		skipObject(container, token);
   b8ac6:	4620      	mov	r0, r4
		index++;
   b8ac8:	3601      	adds	r6, #1
		skipObject(container, token);
   b8aca:	f7ff ffa7 	bl	b8a1c <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
   b8ace:	e7e0      	b.n	b8a92 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x14>
	return false;
   b8ad0:	2000      	movs	r0, #0
   b8ad2:	e7f1      	b.n	b8ab8 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x3a>

000b8ad4 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>:
void JsonParser::copyTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, char *dst, size_t dstLen) const {
   b8ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
   b8ad6:	3b01      	subs	r3, #1
   b8ad8:	2400      	movs	r4, #0
   b8ada:	e9d1 7601 	ldrd	r7, r6, [r1, #4]
   b8ade:	1bf6      	subs	r6, r6, r7
   b8ae0:	42a6      	cmp	r6, r4
   b8ae2:	dd08      	ble.n	b8af6 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
   b8ae4:	42a3      	cmp	r3, r4
   b8ae6:	dd06      	ble.n	b8af6 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
		dst[ii] = buffer[token->start + ii];
   b8ae8:	6845      	ldr	r5, [r0, #4]
   b8aea:	443d      	add	r5, r7
   b8aec:	5d2d      	ldrb	r5, [r5, r4]
   b8aee:	f802 5b01 	strb.w	r5, [r2], #1
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
   b8af2:	3401      	adds	r4, #1
   b8af4:	e7f1      	b.n	b8ada <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x6>
	dst[ii] = 0;
   b8af6:	2300      	movs	r3, #0
   b8af8:	7013      	strb	r3, [r2, #0]
}
   b8afa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8afc <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, int &result) const {
   b8afc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b8afe:	4614      	mov	r4, r2
	copyTokenValue(token, tmp, sizeof(tmp));
   b8b00:	2310      	movs	r3, #16
   b8b02:	466a      	mov	r2, sp
   b8b04:	f7ff ffe6 	bl	b8ad4 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>
	if (sscanf(tmp, "%d", &result) == 1) {
   b8b08:	4904      	ldr	r1, [pc, #16]	; (b8b1c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi+0x20>)
   b8b0a:	4622      	mov	r2, r4
   b8b0c:	4668      	mov	r0, sp
   b8b0e:	f004 fbe5 	bl	bd2dc <sscanf>
}
   b8b12:	1e43      	subs	r3, r0, #1
   b8b14:	4258      	negs	r0, r3
   b8b16:	4158      	adcs	r0, r3
   b8b18:	b004      	add	sp, #16
   b8b1a:	bd10      	pop	{r4, pc}
   b8b1c:	000c3bbf 	.word	0x000c3bbf

000b8b20 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERf>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, float &result) const {
   b8b20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b8b22:	4614      	mov	r4, r2
	copyTokenValue(token, tmp, sizeof(tmp));
   b8b24:	2310      	movs	r3, #16
   b8b26:	466a      	mov	r2, sp
   b8b28:	f7ff ffd4 	bl	b8ad4 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>
	result = strtof(tmp, 0);
   b8b2c:	4668      	mov	r0, sp
   b8b2e:	2100      	movs	r1, #0
   b8b30:	f009 fac4 	bl	c20bc <strtof>
}
   b8b34:	2001      	movs	r0, #1
	result = strtof(tmp, 0);
   b8b36:	ed84 0a00 	vstr	s0, [r4]
}
   b8b3a:	b004      	add	sp, #16
   b8b3c:	bd10      	pop	{r4, pc}

000b8b3e <_ZN16JsonParserString6appendEc>:
void JsonParserString::append(char ch) {
   b8b3e:	b510      	push	{r4, lr}
   b8b40:	4604      	mov	r4, r0
	if (str) {
   b8b42:	6800      	ldr	r0, [r0, #0]
void JsonParserString::append(char ch) {
   b8b44:	460b      	mov	r3, r1
	if (str) {
   b8b46:	b128      	cbz	r0, b8b54 <_ZN16JsonParserString6appendEc+0x16>
		str->concat(ch);
   b8b48:	f006 ffe5 	bl	bfb16 <_ZN6String6concatEc>
		length++;
   b8b4c:	68e3      	ldr	r3, [r4, #12]
   b8b4e:	3301      	adds	r3, #1
   b8b50:	60e3      	str	r3, [r4, #12]
}
   b8b52:	bd10      	pop	{r4, pc}
		if (buf && length < (bufLen - 1)) {
   b8b54:	6860      	ldr	r0, [r4, #4]
   b8b56:	2800      	cmp	r0, #0
   b8b58:	d0f8      	beq.n	b8b4c <_ZN16JsonParserString6appendEc+0xe>
   b8b5a:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
   b8b5e:	3a01      	subs	r2, #1
   b8b60:	428a      	cmp	r2, r1
			buf[length] = ch;
   b8b62:	bf88      	it	hi
   b8b64:	5443      	strbhi	r3, [r0, r1]
   b8b66:	e7f1      	b.n	b8b4c <_ZN16JsonParserString6appendEc+0xe>

000b8b68 <_ZN10JsonParser10appendUtf8EtR16JsonParserString>:
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b8b68:	4603      	mov	r3, r0
	if (unicode <= 0x007f) {
   b8b6a:	2b7f      	cmp	r3, #127	; 0x7f
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
   b8b6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8b6e:	4608      	mov	r0, r1
		str.append((char)unicode);
   b8b70:	b2d9      	uxtb	r1, r3
	if (unicode <= 0x007f) {
   b8b72:	d804      	bhi.n	b8b7e <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x16>
}
   b8b74:	b003      	add	sp, #12
   b8b76:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		str.append((char)value);
   b8b7a:	f7ff bfe0 	b.w	b8b3e <_ZN16JsonParserString6appendEc>
		value = (0b10000000 | (unicode & 0b111111));
   b8b7e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
	if (unicode <= 0x7ff) {
   b8b82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
		value = (0b11000000 | ((unicode >> 6) & 0b11111));
   b8b86:	f3c3 1587 	ubfx	r5, r3, #6, #8
		value = (0b10000000 | (unicode & 0b111111));
   b8b8a:	f041 0480 	orr.w	r4, r1, #128	; 0x80
	if (unicode <= 0x7ff) {
   b8b8e:	d207      	bcs.n	b8ba0 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x38>
		str.append((char)value);
   b8b90:	f045 01c0 	orr.w	r1, r5, #192	; 0xc0
   b8b94:	9001      	str	r0, [sp, #4]
		str.append((char)value);
   b8b96:	f7ff ffd2 	bl	b8b3e <_ZN16JsonParserString6appendEc>
		str.append((char)value);
   b8b9a:	9801      	ldr	r0, [sp, #4]
   b8b9c:	4621      	mov	r1, r4
   b8b9e:	e7e9      	b.n	b8b74 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0xc>
		value = 0b11100000 | ((unicode >> 12) & 0b1111);
   b8ba0:	0b1b      	lsrs	r3, r3, #12
		str.append((char)value);
   b8ba2:	f043 01e0 	orr.w	r1, r3, #224	; 0xe0
   b8ba6:	9001      	str	r0, [sp, #4]
   b8ba8:	f7ff ffc9 	bl	b8b3e <_ZN16JsonParserString6appendEc>
		value = 0b10000000 | ((unicode >> 6) & 0b111111);
   b8bac:	f005 013f 	and.w	r1, r5, #63	; 0x3f
		str.append((char)value);
   b8bb0:	9801      	ldr	r0, [sp, #4]
   b8bb2:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   b8bb6:	e7ee      	b.n	b8b96 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x2e>

000b8bb8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b8bb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	bool escape = false;
   b8bbc:	2400      	movs	r4, #0
	for(int ii = token->start; ii < token->end; ii++) {
   b8bbe:	684e      	ldr	r6, [r1, #4]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b8bc0:	f8df a0cc 	ldr.w	sl, [pc, #204]	; b8c90 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd8>
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
   b8bc4:	4680      	mov	r8, r0
   b8bc6:	460f      	mov	r7, r1
   b8bc8:	4615      	mov	r5, r2
			escape = false;
   b8bca:	46a1      	mov	r9, r4
	for(int ii = token->start; ii < token->end; ii++) {
   b8bcc:	68b8      	ldr	r0, [r7, #8]
   b8bce:	42b0      	cmp	r0, r6
   b8bd0:	dd5a      	ble.n	b8c88 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd0>
			switch(buffer[ii]) {
   b8bd2:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b8bd6:	5d99      	ldrb	r1, [r3, r6]
   b8bd8:	199a      	adds	r2, r3, r6
		if (escape) {
   b8bda:	2c00      	cmp	r4, #0
   b8bdc:	d04b      	beq.n	b8c76 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xbe>
			switch(buffer[ii]) {
   b8bde:	2975      	cmp	r1, #117	; 0x75
   b8be0:	d805      	bhi.n	b8bee <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b8be2:	296d      	cmp	r1, #109	; 0x6d
   b8be4:	d807      	bhi.n	b8bf6 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x3e>
   b8be6:	2962      	cmp	r1, #98	; 0x62
   b8be8:	d01e      	beq.n	b8c28 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x70>
   b8bea:	2966      	cmp	r1, #102	; 0x66
   b8bec:	d01e      	beq.n	b8c2c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x74>
				str.append(buffer[ii]);
   b8bee:	4628      	mov	r0, r5
   b8bf0:	f7ff ffa5 	bl	b8b3e <_ZN16JsonParserString6appendEc>
				break;
   b8bf4:	e03d      	b.n	b8c72 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b8bf6:	f1a1 046e 	sub.w	r4, r1, #110	; 0x6e
   b8bfa:	2c07      	cmp	r4, #7
   b8bfc:	d8f7      	bhi.n	b8bee <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
   b8bfe:	f20f 0c08 	addw	ip, pc, #8
   b8c02:	f85c f024 	ldr.w	pc, [ip, r4, lsl #2]
   b8c06:	bf00      	nop
   b8c08:	000b8c31 	.word	0x000b8c31
   b8c0c:	000b8bef 	.word	0x000b8bef
   b8c10:	000b8bef 	.word	0x000b8bef
   b8c14:	000b8bef 	.word	0x000b8bef
   b8c18:	000b8c35 	.word	0x000b8c35
   b8c1c:	000b8bef 	.word	0x000b8bef
   b8c20:	000b8c39 	.word	0x000b8c39
   b8c24:	000b8c3d 	.word	0x000b8c3d
				str.append('\b');
   b8c28:	2108      	movs	r1, #8
   b8c2a:	e7e0      	b.n	b8bee <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\f');
   b8c2c:	210c      	movs	r1, #12
   b8c2e:	e7de      	b.n	b8bee <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\n');
   b8c30:	210a      	movs	r1, #10
   b8c32:	e7dc      	b.n	b8bee <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\r');
   b8c34:	210d      	movs	r1, #13
   b8c36:	e7da      	b.n	b8bee <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\t');
   b8c38:	2109      	movs	r1, #9
   b8c3a:	e7d8      	b.n	b8bee <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				if ((ii + 4) < token->end) {
   b8c3c:	1d31      	adds	r1, r6, #4
   b8c3e:	4288      	cmp	r0, r1
   b8c40:	dd17      	ble.n	b8c72 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
   b8c42:	a902      	add	r1, sp, #8
   b8c44:	3304      	adds	r3, #4
   b8c46:	4433      	add	r3, r6
   b8c48:	4608      	mov	r0, r1
						tmp[jj] = buffer[ii + jj + 1];
   b8c4a:	f812 4f01 	ldrb.w	r4, [r2, #1]!
   b8c4e:	f801 4b01 	strb.w	r4, [r1], #1
					for(size_t jj = 0; jj < 4; jj++) {
   b8c52:	429a      	cmp	r2, r3
   b8c54:	d1f9      	bne.n	b8c4a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x92>
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b8c56:	aa01      	add	r2, sp, #4
   b8c58:	4651      	mov	r1, sl
					tmp[4] = 0;
   b8c5a:	f88d 900c 	strb.w	r9, [sp, #12]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
   b8c5e:	f004 fb3d 	bl	bd2dc <sscanf>
   b8c62:	2801      	cmp	r0, #1
   b8c64:	d105      	bne.n	b8c72 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
						appendUtf8((uint16_t)unicode, str);
   b8c66:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   b8c6a:	4629      	mov	r1, r5
   b8c6c:	f7ff ff7c 	bl	b8b68 <_ZN10JsonParser10appendUtf8EtR16JsonParserString>
						ii += 5; // also increments in loop
   b8c70:	3605      	adds	r6, #5
			escape = false;
   b8c72:	2400      	movs	r4, #0
   b8c74:	e004      	b.n	b8c80 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
		if (buffer[ii] == '\\') {
   b8c76:	295c      	cmp	r1, #92	; 0x5c
   b8c78:	d004      	beq.n	b8c84 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xcc>
			str.append(buffer[ii]);
   b8c7a:	4628      	mov	r0, r5
   b8c7c:	f7ff ff5f 	bl	b8b3e <_ZN16JsonParserString6appendEc>
	for(int ii = token->start; ii < token->end; ii++) {
   b8c80:	3601      	adds	r6, #1
   b8c82:	e7a3      	b.n	b8bcc <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x14>
			escape = true;
   b8c84:	2401      	movs	r4, #1
   b8c86:	e7fb      	b.n	b8c80 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
}
   b8c88:	2001      	movs	r0, #1
   b8c8a:	b004      	add	sp, #16
   b8c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b8c90:	000c53f5 	.word	0x000c53f5

000b8c94 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b8c94:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b8c96:	460c      	mov	r4, r1
   b8c98:	4606      	mov	r6, r0
	result = "";
   b8c9a:	490c      	ldr	r1, [pc, #48]	; (b8ccc <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String+0x38>)
   b8c9c:	4610      	mov	r0, r2
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
   b8c9e:	4615      	mov	r5, r2
	result = "";
   b8ca0:	f006 feff 	bl	bfaa2 <_ZN6StringaSEPKc>
	result.reserve(token->end - token->start + 1);
   b8ca4:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   b8ca8:	1ac9      	subs	r1, r1, r3
   b8caa:	3101      	adds	r1, #1
   b8cac:	4628      	mov	r0, r5
   b8cae:	f006 fe6d 	bl	bf98c <_ZN6String7reserveEj>
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b8cb2:	2300      	movs	r3, #0
	return getTokenValue(token, strWrapper);
   b8cb4:	466a      	mov	r2, sp
   b8cb6:	4621      	mov	r1, r4
   b8cb8:	4630      	mov	r0, r6
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
   b8cba:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b8cbe:	9500      	str	r5, [sp, #0]
   b8cc0:	9303      	str	r3, [sp, #12]
	return getTokenValue(token, strWrapper);
   b8cc2:	f7ff ff79 	bl	b8bb8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>
}
   b8cc6:	b004      	add	sp, #16
   b8cc8:	bd70      	pop	{r4, r5, r6, pc}
   b8cca:	bf00      	nop
   b8ccc:	000c5454 	.word	0x000c5454

000b8cd0 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>:
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b8cd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8cd4:	b089      	sub	sp, #36	; 0x24
   b8cd6:	4605      	mov	r5, r0
   b8cd8:	4688      	mov	r8, r1
	String keyName;
   b8cda:	a804      	add	r0, sp, #16
   b8cdc:	4912      	ldr	r1, [pc, #72]	; (b8d28 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x58>)
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
   b8cde:	4616      	mov	r6, r2
   b8ce0:	4699      	mov	r9, r3
	String keyName;
   b8ce2:	f006 fe80 	bl	bf9e6 <_ZN6StringC1EPK19__FlashStringHelper>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b8ce6:	2700      	movs	r7, #0
   b8ce8:	9700      	str	r7, [sp, #0]
   b8cea:	464b      	mov	r3, r9
   b8cec:	aa03      	add	r2, sp, #12
   b8cee:	4641      	mov	r1, r8
   b8cf0:	4628      	mov	r0, r5
   b8cf2:	f7ff fec4 	bl	b8a7e <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>
   b8cf6:	4604      	mov	r4, r0
   b8cf8:	b170      	cbz	r0, b8d18 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x48>
		if (getTokenValue(key, keyName) && keyName == name) {
   b8cfa:	9903      	ldr	r1, [sp, #12]
   b8cfc:	aa04      	add	r2, sp, #16
   b8cfe:	4628      	mov	r0, r5
   b8d00:	f7ff ffc8 	bl	b8c94 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
   b8d04:	4604      	mov	r4, r0
   b8d06:	b908      	cbnz	r0, b8d0c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x3c>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
   b8d08:	3701      	adds	r7, #1
   b8d0a:	e7ed      	b.n	b8ce8 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x18>
   b8d0c:	4631      	mov	r1, r6
   b8d0e:	a804      	add	r0, sp, #16
   b8d10:	f006 ff2f 	bl	bfb72 <_ZNK6String6equalsEPKc>
		if (getTokenValue(key, keyName) && keyName == name) {
   b8d14:	2800      	cmp	r0, #0
   b8d16:	d0f7      	beq.n	b8d08 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x38>
	String keyName;
   b8d18:	a804      	add	r0, sp, #16
   b8d1a:	f006 fe19 	bl	bf950 <_ZN6StringD1Ev>
}
   b8d1e:	4620      	mov	r0, r4
   b8d20:	b009      	add	sp, #36	; 0x24
   b8d22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b8d26:	bf00      	nop
   b8d28:	000c5454 	.word	0x000c5454

000b8d2c <_ZN10JsonWriter4initEv>:
	offset = 0;
   b8d2c:	2300      	movs	r3, #0
	context[contextIndex].isFirst = true;
   b8d2e:	2201      	movs	r2, #1
	offset = 0;
   b8d30:	60c3      	str	r3, [r0, #12]
	contextIndex = 0;
   b8d32:	6143      	str	r3, [r0, #20]
	context[contextIndex].isFirst = true;
   b8d34:	8302      	strh	r2, [r0, #24]
	truncated = false;
   b8d36:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
}
   b8d3a:	4770      	bx	lr

000b8d3c <_ZN10JsonWriterC1Ev>:
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
   b8d3c:	b508      	push	{r3, lr}
   b8d3e:	4603      	mov	r3, r0
   b8d40:	f7ff fe00 	bl	b8944 <_ZN10JsonBufferC1Ev>
   b8d44:	4a04      	ldr	r2, [pc, #16]	; (b8d58 <_ZN10JsonWriterC1Ev+0x1c>)
   b8d46:	601a      	str	r2, [r3, #0]
   b8d48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	init();
   b8d4c:	4618      	mov	r0, r3
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
   b8d4e:	62da      	str	r2, [r3, #44]	; 0x2c
	init();
   b8d50:	f7ff ffec 	bl	b8d2c <_ZN10JsonWriter4initEv>
}
   b8d54:	bd08      	pop	{r3, pc}
   b8d56:	bf00      	nop
   b8d58:	000c4b68 	.word	0x000c4b68

000b8d5c <_ZN10JsonWriter10insertCharEc>:
	if (offset < bufferLen) {
   b8d5c:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
void JsonWriter::insertChar(char ch) {
   b8d60:	b510      	push	{r4, lr}
	if (offset < bufferLen) {
   b8d62:	4293      	cmp	r3, r2
		buffer[offset++] = ch;
   b8d64:	bf3f      	itttt	cc
   b8d66:	6842      	ldrcc	r2, [r0, #4]
   b8d68:	1c5c      	addcc	r4, r3, #1
   b8d6a:	60c4      	strcc	r4, [r0, #12]
   b8d6c:	54d1      	strbcc	r1, [r2, r3]
		truncated = true;
   b8d6e:	bf24      	itt	cs
   b8d70:	2301      	movcs	r3, #1
   b8d72:	f880 302a 	strbcs.w	r3, [r0, #42]	; 0x2a
}
   b8d76:	bd10      	pop	{r4, pc}

000b8d78 <_ZN10JsonWriter19finishObjectOrArrayEv>:
void JsonWriter::finishObjectOrArray() {
   b8d78:	b510      	push	{r4, lr}
	if (contextIndex > 0) {
   b8d7a:	6943      	ldr	r3, [r0, #20]
void JsonWriter::finishObjectOrArray() {
   b8d7c:	4604      	mov	r4, r0
	if (contextIndex > 0) {
   b8d7e:	b143      	cbz	r3, b8d92 <_ZN10JsonWriter19finishObjectOrArrayEv+0x1a>
		if (context[contextIndex].terminator != 0) {
   b8d80:	eb00 0343 	add.w	r3, r0, r3, lsl #1
   b8d84:	7e59      	ldrb	r1, [r3, #25]
   b8d86:	b109      	cbz	r1, b8d8c <_ZN10JsonWriter19finishObjectOrArrayEv+0x14>
			insertChar(context[contextIndex].terminator);
   b8d88:	f7ff ffe8 	bl	b8d5c <_ZN10JsonWriter10insertCharEc>
		contextIndex--;
   b8d8c:	6963      	ldr	r3, [r4, #20]
   b8d8e:	3b01      	subs	r3, #1
   b8d90:	6163      	str	r3, [r4, #20]
	if (offset < bufferLen) {
   b8d92:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
		buffer[offset] = 0;
   b8d96:	6863      	ldr	r3, [r4, #4]
	if (offset < bufferLen) {
   b8d98:	4288      	cmp	r0, r1
   b8d9a:	f04f 0200 	mov.w	r2, #0
		buffer[bufferLen - 1] = 0;
   b8d9e:	bf2a      	itet	cs
   b8da0:	185b      	addcs	r3, r3, r1
		buffer[offset] = 0;
   b8da2:	541a      	strbcc	r2, [r3, r0]
		buffer[bufferLen - 1] = 0;
   b8da4:	f803 2c01 	strbcs.w	r2, [r3, #-1]
}
   b8da8:	bd10      	pop	{r4, pc}

000b8daa <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>:
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   b8daa:	b570      	push	{r4, r5, r6, lr}
   b8dac:	4604      	mov	r4, r0
	size_t spaceAvailable = bufferLen - offset;
   b8dae:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   b8db2:	6866      	ldr	r6, [r4, #4]
	size_t spaceAvailable = bufferLen - offset;
   b8db4:	1a2d      	subs	r5, r5, r0
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
   b8db6:	4613      	mov	r3, r2
	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
   b8db8:	4430      	add	r0, r6
   b8dba:	460a      	mov	r2, r1
   b8dbc:	4629      	mov	r1, r5
   b8dbe:	f004 fa9d 	bl	bd2fc <vsnprintf>
	if (count <= spaceAvailable) {
   b8dc2:	4285      	cmp	r5, r0
		offset += count;
   b8dc4:	bf2d      	iteet	cs
   b8dc6:	68e3      	ldrcs	r3, [r4, #12]
		offset = bufferLen;
   b8dc8:	68a3      	ldrcc	r3, [r4, #8]
   b8dca:	60e3      	strcc	r3, [r4, #12]
		offset += count;
   b8dcc:	18c0      	addcs	r0, r0, r3
		truncated = true;
   b8dce:	bf36      	itet	cc
   b8dd0:	2301      	movcc	r3, #1
		offset += count;
   b8dd2:	60e0      	strcs	r0, [r4, #12]
		truncated = true;
   b8dd4:	f884 302a 	strbcc.w	r3, [r4, #42]	; 0x2a
}
   b8dd8:	bd70      	pop	{r4, r5, r6, pc}

000b8dda <_ZN10JsonWriter13insertsprintfEPKcz>:
void JsonWriter::insertsprintf(const char *fmt, ...) {
   b8dda:	b40e      	push	{r1, r2, r3}
   b8ddc:	b503      	push	{r0, r1, lr}
   b8dde:	aa03      	add	r2, sp, #12
   b8de0:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, fmt);
   b8de4:	9201      	str	r2, [sp, #4]
	insertvsprintf(fmt, ap);
   b8de6:	f7ff ffe0 	bl	b8daa <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>
}
   b8dea:	b002      	add	sp, #8
   b8dec:	f85d eb04 	ldr.w	lr, [sp], #4
   b8df0:	b003      	add	sp, #12
   b8df2:	4770      	bx	lr

000b8df4 <_ZN10JsonWriter12insertStringEPKcb>:
void JsonWriter::insertString(const char *s, bool quoted) {
   b8df4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8df8:	4604      	mov	r4, r0
   b8dfa:	460e      	mov	r6, r1
	if (quoted) {
   b8dfc:	4617      	mov	r7, r2
   b8dfe:	b112      	cbz	r2, b8e06 <_ZN10JsonWriter12insertStringEPKcb+0x12>
		insertChar('"');
   b8e00:	2122      	movs	r1, #34	; 0x22
   b8e02:	f7ff ffab 	bl	b8d5c <_ZN10JsonWriter10insertCharEc>
				insertsprintf("\\u%04X", utf16);
   b8e06:	f8df 810c 	ldr.w	r8, [pc, #268]	; b8f14 <_ZN10JsonWriter12insertStringEPKcb+0x120>
void JsonWriter::insertString(const char *s, bool quoted) {
   b8e0a:	2500      	movs	r5, #0
	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   b8e0c:	5d71      	ldrb	r1, [r6, r5]
   b8e0e:	eb06 0905 	add.w	r9, r6, r5
   b8e12:	2900      	cmp	r1, #0
   b8e14:	d074      	beq.n	b8f00 <_ZN10JsonWriter12insertStringEPKcb+0x10c>
   b8e16:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   b8e1a:	429a      	cmp	r2, r3
   b8e1c:	d270      	bcs.n	b8f00 <_ZN10JsonWriter12insertStringEPKcb+0x10c>
		if (s[ii] & 0x80) {
   b8e1e:	060b      	lsls	r3, r1, #24
   b8e20:	d534      	bpl.n	b8e8c <_ZN10JsonWriter12insertStringEPKcb+0x98>
			if (((s[ii] & 0b11110000) == 0b11100000) && ((s[ii+1] & 0b11000000) == 0b10000000) && ((s[ii+2] & 0b11000000) == 0b10000000)) {
   b8e22:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
   b8e26:	2be0      	cmp	r3, #224	; 0xe0
   b8e28:	f105 0901 	add.w	r9, r5, #1
   b8e2c:	d11d      	bne.n	b8e6a <_ZN10JsonWriter12insertStringEPKcb+0x76>
   b8e2e:	f816 2009 	ldrb.w	r2, [r6, r9]
   b8e32:	f002 03c0 	and.w	r3, r2, #192	; 0xc0
   b8e36:	2b80      	cmp	r3, #128	; 0x80
   b8e38:	d139      	bne.n	b8eae <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b8e3a:	f105 0902 	add.w	r9, r5, #2
   b8e3e:	f816 3009 	ldrb.w	r3, [r6, r9]
   b8e42:	f003 00c0 	and.w	r0, r3, #192	; 0xc0
   b8e46:	2880      	cmp	r0, #128	; 0x80
   b8e48:	d131      	bne.n	b8eae <_ZN10JsonWriter12insertStringEPKcb+0xba>
				uint16_t utf16 = ((s[ii] & 0b1111) << 12) | ((s[ii+1] & 0b111111) << 6) | (s[ii+2] & 0b111111);
   b8e4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   b8e4e:	0192      	lsls	r2, r2, #6
   b8e50:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
   b8e54:	f402 627c 	and.w	r2, r2, #4032	; 0xfc0
   b8e58:	431a      	orrs	r2, r3
				insertsprintf("\\u%04X", utf16);
   b8e5a:	b292      	uxth	r2, r2
				insertsprintf("\\u%04X", utf16);
   b8e5c:	4641      	mov	r1, r8
   b8e5e:	4620      	mov	r0, r4
   b8e60:	f7ff ffbb 	bl	b8dda <_ZN10JsonWriter13insertsprintfEPKcz>
				ii++; // plus one more in loop increment
   b8e64:	464d      	mov	r5, r9
	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
   b8e66:	3501      	adds	r5, #1
   b8e68:	e7d0      	b.n	b8e0c <_ZN10JsonWriter12insertStringEPKcb+0x18>
			if (((s[ii] & 0b11100000) == 0b11000000) && ((s[ii+1] & 0b11000000) == 0b10000000)) {
   b8e6a:	f001 03e0 	and.w	r3, r1, #224	; 0xe0
   b8e6e:	2bc0      	cmp	r3, #192	; 0xc0
   b8e70:	d11d      	bne.n	b8eae <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b8e72:	f816 3009 	ldrb.w	r3, [r6, r9]
   b8e76:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
   b8e7a:	2a80      	cmp	r2, #128	; 0x80
   b8e7c:	d117      	bne.n	b8eae <_ZN10JsonWriter12insertStringEPKcb+0xba>
				uint16_t utf16 = ((s[ii] & 0b11111) << 6) | (s[ii+1] & 0b111111);
   b8e7e:	0189      	lsls	r1, r1, #6
   b8e80:	f401 62f8 	and.w	r2, r1, #1984	; 0x7c0
   b8e84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
				insertsprintf("\\u%04X", utf16);
   b8e88:	431a      	orrs	r2, r3
   b8e8a:	e7e7      	b.n	b8e5c <_ZN10JsonWriter12insertStringEPKcb+0x68>
			switch(s[ii]) {
   b8e8c:	290d      	cmp	r1, #13
   b8e8e:	d80a      	bhi.n	b8ea6 <_ZN10JsonWriter12insertStringEPKcb+0xb2>
   b8e90:	2907      	cmp	r1, #7
   b8e92:	d90c      	bls.n	b8eae <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b8e94:	f1a1 0308 	sub.w	r3, r1, #8
   b8e98:	2b05      	cmp	r3, #5
   b8e9a:	d808      	bhi.n	b8eae <_ZN10JsonWriter12insertStringEPKcb+0xba>
   b8e9c:	e8df f003 	tbb	[pc, r3]
   b8ea0:	07172309 	.word	0x07172309
   b8ea4:	1d11      	.short	0x1d11
   b8ea6:	2922      	cmp	r1, #34	; 0x22
   b8ea8:	d023      	beq.n	b8ef2 <_ZN10JsonWriter12insertStringEPKcb+0xfe>
   b8eaa:	295c      	cmp	r1, #92	; 0x5c
   b8eac:	d021      	beq.n	b8ef2 <_ZN10JsonWriter12insertStringEPKcb+0xfe>
				insertChar(s[ii]);
   b8eae:	4620      	mov	r0, r4
   b8eb0:	e004      	b.n	b8ebc <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b8eb2:	215c      	movs	r1, #92	; 0x5c
   b8eb4:	4620      	mov	r0, r4
   b8eb6:	f7ff ff51 	bl	b8d5c <_ZN10JsonWriter10insertCharEc>
				insertChar('b');
   b8eba:	2162      	movs	r1, #98	; 0x62
				insertChar(s[ii]);
   b8ebc:	f7ff ff4e 	bl	b8d5c <_ZN10JsonWriter10insertCharEc>
				break;
   b8ec0:	e7d1      	b.n	b8e66 <_ZN10JsonWriter12insertStringEPKcb+0x72>
				insertChar('\\');
   b8ec2:	215c      	movs	r1, #92	; 0x5c
   b8ec4:	4620      	mov	r0, r4
   b8ec6:	f7ff ff49 	bl	b8d5c <_ZN10JsonWriter10insertCharEc>
				insertChar('f');
   b8eca:	2166      	movs	r1, #102	; 0x66
   b8ecc:	e7f6      	b.n	b8ebc <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b8ece:	215c      	movs	r1, #92	; 0x5c
   b8ed0:	4620      	mov	r0, r4
   b8ed2:	f7ff ff43 	bl	b8d5c <_ZN10JsonWriter10insertCharEc>
				insertChar('n');
   b8ed6:	216e      	movs	r1, #110	; 0x6e
   b8ed8:	e7f0      	b.n	b8ebc <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b8eda:	215c      	movs	r1, #92	; 0x5c
   b8edc:	4620      	mov	r0, r4
   b8ede:	f7ff ff3d 	bl	b8d5c <_ZN10JsonWriter10insertCharEc>
				insertChar('r');
   b8ee2:	2172      	movs	r1, #114	; 0x72
   b8ee4:	e7ea      	b.n	b8ebc <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b8ee6:	215c      	movs	r1, #92	; 0x5c
   b8ee8:	4620      	mov	r0, r4
   b8eea:	f7ff ff37 	bl	b8d5c <_ZN10JsonWriter10insertCharEc>
				insertChar('t');
   b8eee:	2174      	movs	r1, #116	; 0x74
   b8ef0:	e7e4      	b.n	b8ebc <_ZN10JsonWriter12insertStringEPKcb+0xc8>
				insertChar('\\');
   b8ef2:	215c      	movs	r1, #92	; 0x5c
   b8ef4:	4620      	mov	r0, r4
   b8ef6:	f7ff ff31 	bl	b8d5c <_ZN10JsonWriter10insertCharEc>
				insertChar(s[ii]);
   b8efa:	f899 1000 	ldrb.w	r1, [r9]
   b8efe:	e7dd      	b.n	b8ebc <_ZN10JsonWriter12insertStringEPKcb+0xc8>
	if (quoted) {
   b8f00:	b12f      	cbz	r7, b8f0e <_ZN10JsonWriter12insertStringEPKcb+0x11a>
		insertChar('"');
   b8f02:	4620      	mov	r0, r4
   b8f04:	2122      	movs	r1, #34	; 0x22
}
   b8f06:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		insertChar('"');
   b8f0a:	f7ff bf27 	b.w	b8d5c <_ZN10JsonWriter10insertCharEc>
}
   b8f0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b8f12:	bf00      	nop
   b8f14:	000c4b30 	.word	0x000c4b30

000b8f18 <_ZN10JsonWriter20insertCheckSeparatorEv>:
	if (context[contextIndex].isFirst) {
   b8f18:	6942      	ldr	r2, [r0, #20]
   b8f1a:	eb00 0342 	add.w	r3, r0, r2, lsl #1
   b8f1e:	7e1a      	ldrb	r2, [r3, #24]
   b8f20:	b112      	cbz	r2, b8f28 <_ZN10JsonWriter20insertCheckSeparatorEv+0x10>
		context[contextIndex].isFirst = false;
   b8f22:	2200      	movs	r2, #0
   b8f24:	761a      	strb	r2, [r3, #24]
}
   b8f26:	4770      	bx	lr
		insertChar(',');
   b8f28:	212c      	movs	r1, #44	; 0x2c
   b8f2a:	f7ff bf17 	b.w	b8d5c <_ZN10JsonWriter10insertCharEc>

000b8f2e <_ZN10JsonWriter18startObjectOrArrayEcc>:
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   b8f2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   b8f30:	6943      	ldr	r3, [r0, #20]
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   b8f32:	9101      	str	r1, [sp, #4]
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   b8f34:	3301      	adds	r3, #1
   b8f36:	2b08      	cmp	r3, #8
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
   b8f38:	4616      	mov	r6, r2
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
   b8f3a:	d80f      	bhi.n	b8f5c <_ZN10JsonWriter18startObjectOrArrayEcc+0x2e>
	insertCheckSeparator();
   b8f3c:	f7ff ffec 	bl	b8f18 <_ZN10JsonWriter20insertCheckSeparatorEv>
	contextIndex++;
   b8f40:	6943      	ldr	r3, [r0, #20]
	insertChar(startChar);
   b8f42:	9901      	ldr	r1, [sp, #4]
   b8f44:	eb00 0443 	add.w	r4, r0, r3, lsl #1
	contextIndex++;
   b8f48:	1c5a      	adds	r2, r3, #1
	context[contextIndex].isFirst = true;
   b8f4a:	2501      	movs	r5, #1
	contextIndex++;
   b8f4c:	6142      	str	r2, [r0, #20]
	context[contextIndex].isFirst = true;
   b8f4e:	76a5      	strb	r5, [r4, #26]
	context[contextIndex].terminator = endChar;
   b8f50:	76e6      	strb	r6, [r4, #27]
	insertChar(startChar);
   b8f52:	f7ff ff03 	bl	b8d5c <_ZN10JsonWriter10insertCharEc>
   b8f56:	4628      	mov	r0, r5
}
   b8f58:	b002      	add	sp, #8
   b8f5a:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   b8f5c:	2000      	movs	r0, #0
   b8f5e:	e7fb      	b.n	b8f58 <_ZN10JsonWriter18startObjectOrArrayEcc+0x2a>

000b8f60 <_ZN10JsonWriter11insertValueEf>:
void JsonWriter::insertValue(float value) {
   b8f60:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8f62:	4604      	mov	r4, r0
   b8f64:	ee10 0a10 	vmov	r0, s0
		insertsprintf("%.*f", floatPlaces, value);
   b8f68:	f007 fd3e 	bl	c09e8 <__aeabi_f2d>
	if (floatPlaces >= 0) {
   b8f6c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
   b8f6e:	2d00      	cmp	r5, #0
		insertsprintf("%.*f", floatPlaces, value);
   b8f70:	4602      	mov	r2, r0
   b8f72:	460b      	mov	r3, r1
	if (floatPlaces >= 0) {
   b8f74:	db08      	blt.n	b8f88 <_ZN10JsonWriter11insertValueEf+0x28>
		insertsprintf("%.*f", floatPlaces, value);
   b8f76:	e9cd 2300 	strd	r2, r3, [sp]
   b8f7a:	4907      	ldr	r1, [pc, #28]	; (b8f98 <_ZN10JsonWriter11insertValueEf+0x38>)
   b8f7c:	462a      	mov	r2, r5
   b8f7e:	4620      	mov	r0, r4
   b8f80:	f7ff ff2b 	bl	b8dda <_ZN10JsonWriter13insertsprintfEPKcz>
}
   b8f84:	b003      	add	sp, #12
   b8f86:	bd30      	pop	{r4, r5, pc}
		insertsprintf("%f", value);
   b8f88:	4904      	ldr	r1, [pc, #16]	; (b8f9c <_ZN10JsonWriter11insertValueEf+0x3c>)
   b8f8a:	4620      	mov	r0, r4
}
   b8f8c:	b003      	add	sp, #12
   b8f8e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		insertsprintf("%f", value);
   b8f92:	f7ff bf22 	b.w	b8dda <_ZN10JsonWriter13insertsprintfEPKcz>
   b8f96:	bf00      	nop
   b8f98:	000c4b37 	.word	0x000c4b37
   b8f9c:	000c4b3c 	.word	0x000c4b3c

000b8fa0 <_ZN12JsonModifierC1ER10JsonParser>:
JsonModifier::JsonModifier(JsonParser &jp) : jp(jp) {
   b8fa0:	b510      	push	{r4, lr}
   b8fa2:	4604      	mov	r4, r0
   b8fa4:	f7ff feca 	bl	b8d3c <_ZN10JsonWriterC1Ev>
   b8fa8:	4b05      	ldr	r3, [pc, #20]	; (b8fc0 <_ZN12JsonModifierC1ER10JsonParser+0x20>)
   b8faa:	6023      	str	r3, [r4, #0]
   b8fac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b8fb0:	2300      	movs	r3, #0
   b8fb2:	e9c4 230d 	strd	r2, r3, [r4, #52]	; 0x34
   b8fb6:	6321      	str	r1, [r4, #48]	; 0x30
   b8fb8:	63e3      	str	r3, [r4, #60]	; 0x3c
}
   b8fba:	4620      	mov	r0, r4
   b8fbc:	bd10      	pop	{r4, pc}
   b8fbe:	bf00      	nop
   b8fc0:	000c4b78 	.word	0x000c4b78

000b8fc4 <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE>:
	jp.setOffset(left + origAfter);
	jp.parse();

	return true;
}
bool JsonModifier::startModify(const JsonParserGeneratorRK::jsmntok_t *token) {
   b8fc4:	b570      	push	{r4, r5, r6, lr}
	if (start != -1) {
   b8fc6:	6b43      	ldr	r3, [r0, #52]	; 0x34
   b8fc8:	3301      	adds	r3, #1
bool JsonModifier::startModify(const JsonParserGeneratorRK::jsmntok_t *token) {
   b8fca:	4604      	mov	r4, r0
	if (start != -1) {
   b8fcc:	d121      	bne.n	b9012 <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE+0x4e>
		// Modification or insertion already in progress
		return false;
	}
	start = token->start;
	origAfter = jp.getOffset() - token->end;
   b8fce:	6b05      	ldr	r5, [r0, #48]	; 0x30
	start = token->start;
   b8fd0:	684b      	ldr	r3, [r1, #4]
   b8fd2:	6343      	str	r3, [r0, #52]	; 0x34
	size_t getOffset() const { return offset; }
   b8fd4:	68eb      	ldr	r3, [r5, #12]
	origAfter = jp.getOffset() - token->end;
   b8fd6:	6888      	ldr	r0, [r1, #8]
   b8fd8:	1a1a      	subs	r2, r3, r0
   b8fda:	63a2      	str	r2, [r4, #56]	; 0x38
	saveLoc = jp.getBufferLen() - origAfter;
   b8fdc:	68ae      	ldr	r6, [r5, #8]
   b8fde:	4430      	add	r0, r6
   b8fe0:	1ac3      	subs	r3, r0, r3

	//printf("start=%d origAfter=%d saveLoc=%d bufferSize=%d\n", start, origAfter, saveLoc, saveLoc - start);

	if (origAfter > 0) {
   b8fe2:	2a00      	cmp	r2, #0
	saveLoc = jp.getBufferLen() - origAfter;
   b8fe4:	63e3      	str	r3, [r4, #60]	; 0x3c
	if (origAfter > 0) {
   b8fe6:	dd05      	ble.n	b8ff4 <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE+0x30>
	char *getBuffer() const { return buffer; }
   b8fe8:	6868      	ldr	r0, [r5, #4]
		memmove(jp.getBuffer() + saveLoc, jp.getBuffer() + token->end, origAfter);
   b8fea:	6889      	ldr	r1, [r1, #8]
   b8fec:	4401      	add	r1, r0
   b8fee:	4418      	add	r0, r3
   b8ff0:	f008 f918 	bl	c1224 <memmove>
   b8ff4:	6b22      	ldr	r2, [r4, #48]	; 0x30
	}

	setBuffer(jp.getBuffer() + start, saveLoc - start);
   b8ff6:	6b61      	ldr	r1, [r4, #52]	; 0x34
   b8ff8:	6852      	ldr	r2, [r2, #4]
   b8ffa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b8ffc:	440a      	add	r2, r1
   b8ffe:	1a5b      	subs	r3, r3, r1
	this->staticBuffers = true;
   b9000:	2101      	movs	r1, #1
	init();
   b9002:	4620      	mov	r0, r4
	this->bufferLen = bufferLen;
   b9004:	e9c4 2301 	strd	r2, r3, [r4, #4]
	this->staticBuffers = true;
   b9008:	7421      	strb	r1, [r4, #16]
	init();
   b900a:	f7ff fe8f 	bl	b8d2c <_ZN10JsonWriter4initEv>
   b900e:	4608      	mov	r0, r1

	return true;
}
   b9010:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   b9012:	2000      	movs	r0, #0
   b9014:	e7fc      	b.n	b9010 <_ZN12JsonModifier11startModifyEPKN21JsonParserGeneratorRK9jsmntok_tE+0x4c>

000b9016 <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE>:

bool JsonModifier::startAppend(const JsonParserGeneratorRK::jsmntok_t *arrayOrObjectToken) {
   b9016:	b570      	push	{r4, r5, r6, lr}
	if (start != -1) {
   b9018:	6b43      	ldr	r3, [r0, #52]	; 0x34
   b901a:	3301      	adds	r3, #1
bool JsonModifier::startAppend(const JsonParserGeneratorRK::jsmntok_t *arrayOrObjectToken) {
   b901c:	4604      	mov	r4, r0
   b901e:	460e      	mov	r6, r1
	if (start != -1) {
   b9020:	d129      	bne.n	b9076 <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE+0x60>
		// Modification or insertion already in progress
		return false;
	}

	start = arrayOrObjectToken->end - 1; // Before the closing ] or }
   b9022:	688d      	ldr	r5, [r1, #8]
	origAfter = jp.getOffset() - start;
   b9024:	6b01      	ldr	r1, [r0, #48]	; 0x30
	start = arrayOrObjectToken->end - 1; // Before the closing ] or }
   b9026:	3d01      	subs	r5, #1
   b9028:	6345      	str	r5, [r0, #52]	; 0x34
	size_t getOffset() const { return offset; }
   b902a:	68cb      	ldr	r3, [r1, #12]
	origAfter = jp.getOffset() - start;
   b902c:	1b5a      	subs	r2, r3, r5
   b902e:	6382      	str	r2, [r0, #56]	; 0x38
	saveLoc = jp.getBufferLen() - origAfter;
   b9030:	6888      	ldr	r0, [r1, #8]
   b9032:	4428      	add	r0, r5
   b9034:	1ac3      	subs	r3, r0, r3

	if (origAfter > 0) {
   b9036:	2a00      	cmp	r2, #0
	saveLoc = jp.getBufferLen() - origAfter;
   b9038:	63e3      	str	r3, [r4, #60]	; 0x3c
	if (origAfter > 0) {
   b903a:	dd04      	ble.n	b9046 <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE+0x30>
	char *getBuffer() const { return buffer; }
   b903c:	6848      	ldr	r0, [r1, #4]
		memmove(jp.getBuffer() + saveLoc, jp.getBuffer() + start, origAfter);
   b903e:	1941      	adds	r1, r0, r5
   b9040:	4418      	add	r0, r3
   b9042:	f008 f8ef 	bl	c1224 <memmove>
   b9046:	6b22      	ldr	r2, [r4, #48]	; 0x30
	}

	setBuffer(jp.getBuffer() + start, saveLoc - start);
   b9048:	6b61      	ldr	r1, [r4, #52]	; 0x34
   b904a:	6852      	ldr	r2, [r2, #4]
   b904c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b904e:	440a      	add	r2, r1
   b9050:	1a5b      	subs	r3, r3, r1
	this->staticBuffers = true;
   b9052:	2501      	movs	r5, #1
	this->bufferLen = bufferLen;
   b9054:	e9c4 2301 	strd	r2, r3, [r4, #4]
	init();
   b9058:	4620      	mov	r0, r4
	this->staticBuffers = true;
   b905a:	7425      	strb	r5, [r4, #16]
	init();
   b905c:	f7ff fe66 	bl	b8d2c <_ZN10JsonWriter4initEv>
	context[contextIndex].isFirst = isFirst;
   b9060:	6963      	ldr	r3, [r4, #20]
   b9062:	f103 020c 	add.w	r2, r3, #12

	// If array is not empty, add a separator
	setIsFirst(arrayOrObjectToken->size == 0);
   b9066:	68f3      	ldr	r3, [r6, #12]
   b9068:	fab3 f383 	clz	r3, r3
   b906c:	095b      	lsrs	r3, r3, #5
   b906e:	f804 3012 	strb.w	r3, [r4, r2, lsl #1]
	context[contextIndex].isFirst = isFirst;
   b9072:	4628      	mov	r0, r5

	return true;
}
   b9074:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   b9076:	2000      	movs	r0, #0
   b9078:	e7fc      	b.n	b9074 <_ZN12JsonModifier11startAppendEPKN21JsonParserGeneratorRK9jsmntok_tE+0x5e>
	...

000b907c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>:

/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
   b907c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;
   b9080:	6844      	ldr	r4, [r0, #4]
   b9082:	f04f 0c01 	mov.w	ip, #1
	tok->start = tok->end = -1;
   b9086:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b908a:	f8d0 e000 	ldr.w	lr, [r0]
   b908e:	4596      	cmp	lr, r2
   b9090:	f080 81b9 	bcs.w	b9406 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
   b9094:	f811 800e 	ldrb.w	r8, [r1, lr]
   b9098:	f1b8 0f00 	cmp.w	r8, #0
   b909c:	f000 81b3 	beq.w	b9406 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
   b90a0:	f1b8 0f3a 	cmp.w	r8, #58	; 0x3a
   b90a4:	f000 8098 	beq.w	b91d8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x15c>
   b90a8:	d833      	bhi.n	b9112 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x96>
   b90aa:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
   b90ae:	f000 80a6 	beq.w	b91fe <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x182>
   b90b2:	d810      	bhi.n	b90d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x5a>
   b90b4:	f1a8 0809 	sub.w	r8, r8, #9
   b90b8:	fa5f f888 	uxtb.w	r8, r8
   b90bc:	f1b8 0f17 	cmp.w	r8, #23
   b90c0:	d80d      	bhi.n	b90de <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
   b90c2:	4d9f      	ldr	r5, [pc, #636]	; (b9340 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c4>)
   b90c4:	fa0c f808 	lsl.w	r8, ip, r8
   b90c8:	ea18 0f05 	tst.w	r8, r5
   b90cc:	d007      	beq.n	b90de <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b90ce:	6805      	ldr	r5, [r0, #0]
   b90d0:	3501      	adds	r5, #1
   b90d2:	6005      	str	r5, [r0, #0]
   b90d4:	e7d9      	b.n	b908a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe>
		switch (c) {
   b90d6:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
   b90da:	f000 8133 	beq.w	b9344 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c8>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b90de:	f8d0 8000 	ldr.w	r8, [r0]
   b90e2:	4542      	cmp	r2, r8
   b90e4:	d90e      	bls.n	b9104 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b90e6:	f811 5008 	ldrb.w	r5, [r1, r8]
   b90ea:	b15d      	cbz	r5, b9104 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		switch (js[parser->pos]) {
   b90ec:	2d3a      	cmp	r5, #58	; 0x3a
   b90ee:	f200 8169 	bhi.w	b93c4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x348>
   b90f2:	2d1f      	cmp	r5, #31
   b90f4:	f200 8151 	bhi.w	b939a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x31e>
   b90f8:	2d0a      	cmp	r5, #10
   b90fa:	f200 8160 	bhi.w	b93be <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x342>
   b90fe:	2d08      	cmp	r5, #8
   b9100:	f240 8156 	bls.w	b93b0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
	if (tokens == NULL) {
   b9104:	2b00      	cmp	r3, #0
   b9106:	f040 8162 	bne.w	b93ce <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x352>
		parser->pos--;
   b910a:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
	parser->pos--;
   b910e:	6005      	str	r5, [r0, #0]
   b9110:	e0a5      	b.n	b925e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
		switch (c) {
   b9112:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b9116:	d037      	beq.n	b9188 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b9118:	d82e      	bhi.n	b9178 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xfc>
   b911a:	f1b8 0f5b 	cmp.w	r8, #91	; 0x5b
   b911e:	d033      	beq.n	b9188 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b9120:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
   b9124:	d1db      	bne.n	b90de <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
				token->start = parser->pos;
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
   b9126:	2b00      	cmp	r3, #0
   b9128:	d0d1      	beq.n	b90ce <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b912a:	f04f 0902 	mov.w	r9, #2
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
   b912e:	6845      	ldr	r5, [r0, #4]
   b9130:	3d01      	subs	r5, #1
   b9132:	eb03 1805 	add.w	r8, r3, r5, lsl #4
   b9136:	2d00      	cmp	r5, #0
   b9138:	db55      	blt.n	b91e6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x16a>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b913a:	f8d8 7004 	ldr.w	r7, [r8, #4]
   b913e:	3701      	adds	r7, #1
   b9140:	d04d      	beq.n	b91de <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
   b9142:	f8d8 a008 	ldr.w	sl, [r8, #8]
   b9146:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
   b914a:	d148      	bne.n	b91de <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
						if (token->type != type) {
   b914c:	f898 b000 	ldrb.w	fp, [r8]
   b9150:	45cb      	cmp	fp, r9
   b9152:	d14b      	bne.n	b91ec <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
						token->end = parser->pos + 1;
   b9154:	f10e 0e01 	add.w	lr, lr, #1
						parser->toksuper = -1;
   b9158:	f8c0 a008 	str.w	sl, [r0, #8]
						token->end = parser->pos + 1;
   b915c:	f8c8 e008 	str.w	lr, [r8, #8]
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
   b9160:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
				for (; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b9164:	f8de 7004 	ldr.w	r7, [lr, #4]
   b9168:	3701      	adds	r7, #1
   b916a:	d042      	beq.n	b91f2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
   b916c:	f8de 7008 	ldr.w	r7, [lr, #8]
   b9170:	3701      	adds	r7, #1
   b9172:	d13e      	bne.n	b91f2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
					tokens[parser->toksuper].size++;
				break;
			case '\t' : case '\r' : case '\n' : case ' ':
				break;
			case ':':
				parser->toksuper = parser->toknext - 1;
   b9174:	6085      	str	r5, [r0, #8]
				break;
   b9176:	e7aa      	b.n	b90ce <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		switch (c) {
   b9178:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
   b917c:	d1af      	bne.n	b90de <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				if (tokens == NULL)
   b917e:	2b00      	cmp	r3, #0
   b9180:	d0a5      	beq.n	b90ce <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b9182:	f04f 0901 	mov.w	r9, #1
   b9186:	e7d2      	b.n	b912e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xb2>
				count++;
   b9188:	3401      	adds	r4, #1
				if (tokens == NULL) {
   b918a:	2b00      	cmp	r3, #0
   b918c:	d09f      	beq.n	b90ce <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	if (parser->toknext >= num_tokens) {
   b918e:	6845      	ldr	r5, [r0, #4]
   b9190:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b9192:	42af      	cmp	r7, r5
   b9194:	d94a      	bls.n	b922c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b0>
	tok = &tokens[parser->toknext++];
   b9196:	f105 0e01 	add.w	lr, r5, #1
   b919a:	f8c0 e004 	str.w	lr, [r0, #4]
   b919e:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
	tok->start = tok->end = -1;
   b91a2:	e9ce 6601 	strd	r6, r6, [lr, #4]
	tok = &tokens[parser->toknext++];
   b91a6:	ea4f 1a05 	mov.w	sl, r5, lsl #4
	tok->size = 0;
   b91aa:	2500      	movs	r5, #0
   b91ac:	f8ce 500c 	str.w	r5, [lr, #12]
				if (parser->toksuper != -1) {
   b91b0:	6885      	ldr	r5, [r0, #8]
   b91b2:	1c6f      	adds	r7, r5, #1
					tokens[parser->toksuper].size++;
   b91b4:	bf1f      	itttt	ne
   b91b6:	eb03 1905 	addne.w	r9, r3, r5, lsl #4
   b91ba:	f8d9 500c 	ldrne.w	r5, [r9, #12]
   b91be:	3501      	addne	r5, #1
   b91c0:	f8c9 500c 	strne.w	r5, [r9, #12]
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
   b91c4:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b91c8:	bf0c      	ite	eq
   b91ca:	2501      	moveq	r5, #1
   b91cc:	2502      	movne	r5, #2
   b91ce:	f803 500a 	strb.w	r5, [r3, sl]
				token->start = parser->pos;
   b91d2:	6805      	ldr	r5, [r0, #0]
   b91d4:	f8ce 5004 	str.w	r5, [lr, #4]
				parser->toksuper = parser->toknext - 1;
   b91d8:	6845      	ldr	r5, [r0, #4]
   b91da:	3d01      	subs	r5, #1
   b91dc:	e7ca      	b.n	b9174 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xf8>
				for (i = parser->toknext - 1; i >= 0; i--) {
   b91de:	3d01      	subs	r5, #1
   b91e0:	f1a8 0810 	sub.w	r8, r8, #16
   b91e4:	e7a7      	b.n	b9136 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xba>
				if (i == -1) return JSMN_ERROR_INVAL;
   b91e6:	3501      	adds	r5, #1
   b91e8:	f47f af71 	bne.w	b90ce <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
							return JSMN_ERROR_INVAL;
   b91ec:	f06f 0401 	mvn.w	r4, #1
   b91f0:	e01e      	b.n	b9230 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
				for (; i >= 0; i--) {
   b91f2:	3d01      	subs	r5, #1
   b91f4:	1c6f      	adds	r7, r5, #1
   b91f6:	f1ae 0e10 	sub.w	lr, lr, #16
   b91fa:	d1b3      	bne.n	b9164 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe8>
   b91fc:	e767      	b.n	b90ce <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	parser->pos++;
   b91fe:	f10e 0901 	add.w	r9, lr, #1
   b9202:	f8c0 9000 	str.w	r9, [r0]
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b9206:	f8d0 8000 	ldr.w	r8, [r0]
   b920a:	4542      	cmp	r2, r8
   b920c:	f240 8093 	bls.w	b9336 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
   b9210:	f811 5008 	ldrb.w	r5, [r1, r8]
   b9214:	2d00      	cmp	r5, #0
   b9216:	f000 808e 	beq.w	b9336 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
		if (c == '\"') {
   b921a:	2d22      	cmp	r5, #34	; 0x22
   b921c:	d130      	bne.n	b9280 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x204>
			if (tokens == NULL) {
   b921e:	b1f3      	cbz	r3, b925e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
	if (parser->toknext >= num_tokens) {
   b9220:	6845      	ldr	r5, [r0, #4]
   b9222:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b9224:	42af      	cmp	r7, r5
   b9226:	d806      	bhi.n	b9236 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ba>
		parser->pos = start;
   b9228:	f8c0 e000 	str.w	lr, [r0]
					return JSMN_ERROR_NOMEM;
   b922c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
			}
		}
	}

	return count;
}
   b9230:	4620      	mov	r0, r4
   b9232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tok = &tokens[parser->toknext++];
   b9236:	f105 0e01 	add.w	lr, r5, #1
   b923a:	ea4f 1805 	mov.w	r8, r5, lsl #4
   b923e:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b9242:	f8c0 e004 	str.w	lr, [r0, #4]
	tok->start = tok->end = -1;
   b9246:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b924a:	2700      	movs	r7, #0
   b924c:	60ef      	str	r7, [r5, #12]
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
   b924e:	f8d0 e000 	ldr.w	lr, [r0]
	token->type = type;
   b9252:	f04f 0a03 	mov.w	sl, #3
   b9256:	f803 a008 	strb.w	sl, [r3, r8]
	token->end = end;
   b925a:	e9c5 9e01 	strd	r9, lr, [r5, #4]
				if (parser->toksuper != -1 && tokens != NULL)
   b925e:	6885      	ldr	r5, [r0, #8]
   b9260:	1c6f      	adds	r7, r5, #1
				count++;
   b9262:	f104 0401 	add.w	r4, r4, #1
				if (parser->toksuper != -1 && tokens != NULL)
   b9266:	f43f af32 	beq.w	b90ce <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b926a:	2b00      	cmp	r3, #0
   b926c:	f43f af2f 	beq.w	b90ce <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					tokens[parser->toksuper].size++;
   b9270:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b9274:	f8de 500c 	ldr.w	r5, [lr, #12]
   b9278:	3501      	adds	r5, #1
   b927a:	f8ce 500c 	str.w	r5, [lr, #12]
   b927e:	e726      	b.n	b90ce <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		if (c == '\\' && parser->pos + 1 < len) {
   b9280:	2d5c      	cmp	r5, #92	; 0x5c
   b9282:	d111      	bne.n	b92a8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b9284:	f108 0501 	add.w	r5, r8, #1
   b9288:	42aa      	cmp	r2, r5
   b928a:	d90d      	bls.n	b92a8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos++;
   b928c:	6005      	str	r5, [r0, #0]
			switch (js[parser->pos]) {
   b928e:	5d4d      	ldrb	r5, [r1, r5]
   b9290:	2d75      	cmp	r5, #117	; 0x75
   b9292:	d82b      	bhi.n	b92ec <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b9294:	2d6d      	cmp	r5, #109	; 0x6d
   b9296:	d80b      	bhi.n	b92b0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x234>
   b9298:	2d66      	cmp	r5, #102	; 0x66
   b929a:	d827      	bhi.n	b92ec <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b929c:	2d5b      	cmp	r5, #91	; 0x5b
   b929e:	d81d      	bhi.n	b92dc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x260>
   b92a0:	2d22      	cmp	r5, #34	; 0x22
   b92a2:	d001      	beq.n	b92a8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b92a4:	2d2f      	cmp	r5, #47	; 0x2f
   b92a6:	d121      	bne.n	b92ec <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b92a8:	6805      	ldr	r5, [r0, #0]
   b92aa:	3501      	adds	r5, #1
   b92ac:	6005      	str	r5, [r0, #0]
   b92ae:	e7aa      	b.n	b9206 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x18a>
   b92b0:	3d6e      	subs	r5, #110	; 0x6e
   b92b2:	2d07      	cmp	r5, #7
   b92b4:	d81a      	bhi.n	b92ec <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b92b6:	a701      	add	r7, pc, #4	; (adr r7, b92bc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x240>)
   b92b8:	f857 f025 	ldr.w	pc, [r7, r5, lsl #2]
   b92bc:	000b92a9 	.word	0x000b92a9
   b92c0:	000b92ed 	.word	0x000b92ed
   b92c4:	000b92ed 	.word	0x000b92ed
   b92c8:	000b92ed 	.word	0x000b92ed
   b92cc:	000b92a9 	.word	0x000b92a9
   b92d0:	000b92ed 	.word	0x000b92ed
   b92d4:	000b92a9 	.word	0x000b92a9
   b92d8:	000b92f3 	.word	0x000b92f3
   b92dc:	3d5c      	subs	r5, #92	; 0x5c
   b92de:	b2ed      	uxtb	r5, r5
   b92e0:	fa0c f505 	lsl.w	r5, ip, r5
   b92e4:	f240 4741 	movw	r7, #1089	; 0x441
   b92e8:	423d      	tst	r5, r7
   b92ea:	d1dd      	bne.n	b92a8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos = start;
   b92ec:	f8c0 e000 	str.w	lr, [r0]
				if (r < 0) return r;
   b92f0:	e77c      	b.n	b91ec <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
					parser->pos++;
   b92f2:	f108 0502 	add.w	r5, r8, #2
   b92f6:	6005      	str	r5, [r0, #0]
   b92f8:	f04f 0a04 	mov.w	sl, #4
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b92fc:	f8d0 8000 	ldr.w	r8, [r0]
   b9300:	4542      	cmp	r2, r8
   b9302:	d803      	bhi.n	b930c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x290>
					parser->pos--;
   b9304:	6805      	ldr	r5, [r0, #0]
   b9306:	3d01      	subs	r5, #1
   b9308:	6005      	str	r5, [r0, #0]
					break;
   b930a:	e7cd      	b.n	b92a8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b930c:	f811 5008 	ldrb.w	r5, [r1, r8]
   b9310:	2d00      	cmp	r5, #0
   b9312:	d0f7      	beq.n	b9304 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
   b9314:	f1a5 0b30 	sub.w	fp, r5, #48	; 0x30
   b9318:	f1bb 0f09 	cmp.w	fp, #9
   b931c:	d904      	bls.n	b9328 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ac>
   b931e:	f025 0520 	bic.w	r5, r5, #32
   b9322:	3d41      	subs	r5, #65	; 0x41
   b9324:	2d05      	cmp	r5, #5
   b9326:	d8e1      	bhi.n	b92ec <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
						parser->pos++;
   b9328:	f108 0501 	add.w	r5, r8, #1
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b932c:	f1ba 0a01 	subs.w	sl, sl, #1
						parser->pos++;
   b9330:	6005      	str	r5, [r0, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b9332:	d1e3      	bne.n	b92fc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x280>
   b9334:	e7e6      	b.n	b9304 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
	parser->pos = start;
   b9336:	f8c0 e000 	str.w	lr, [r0]
				return JSMN_ERROR_PART;
   b933a:	f06f 0402 	mvn.w	r4, #2
   b933e:	e777      	b.n	b9230 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
   b9340:	00800013 	.word	0x00800013
				if (tokens != NULL && parser->toksuper != -1 &&
   b9344:	2b00      	cmp	r3, #0
   b9346:	f43f aec2 	beq.w	b90ce <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b934a:	6885      	ldr	r5, [r0, #8]
   b934c:	1c6f      	adds	r7, r5, #1
   b934e:	f43f aebe 	beq.w	b90ce <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
   b9352:	012d      	lsls	r5, r5, #4
   b9354:	5d5d      	ldrb	r5, [r3, r5]
   b9356:	3d01      	subs	r5, #1
   b9358:	2d01      	cmp	r5, #1
   b935a:	f67f aeb8 	bls.w	b90ce <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b935e:	6845      	ldr	r5, [r0, #4]
   b9360:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   b9364:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b9368:	f1b8 0f00 	cmp.w	r8, #0
   b936c:	f6ff aeaf 	blt.w	b90ce <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
   b9370:	f81e 5c10 	ldrb.w	r5, [lr, #-16]
   b9374:	3d01      	subs	r5, #1
   b9376:	2d01      	cmp	r5, #1
   b9378:	d80a      	bhi.n	b9390 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
   b937a:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   b937e:	3501      	adds	r5, #1
   b9380:	d006      	beq.n	b9390 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
   b9382:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   b9386:	3501      	adds	r5, #1
   b9388:	d102      	bne.n	b9390 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
								parser->toksuper = i;
   b938a:	f8c0 8008 	str.w	r8, [r0, #8]
								break;
   b938e:	e69e      	b.n	b90ce <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b9390:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b9394:	f1ae 0e10 	sub.w	lr, lr, #16
   b9398:	e7e6      	b.n	b9368 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ec>
   b939a:	f1a5 0920 	sub.w	r9, r5, #32
   b939e:	4f24      	ldr	r7, [pc, #144]	; (b9430 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3b4>)
   b93a0:	fa5f f989 	uxtb.w	r9, r9
   b93a4:	fa0c f909 	lsl.w	r9, ip, r9
   b93a8:	ea19 0f07 	tst.w	r9, r7
   b93ac:	f47f aeaa 	bne.w	b9104 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
   b93b0:	3d20      	subs	r5, #32
   b93b2:	2d5e      	cmp	r5, #94	; 0x5e
   b93b4:	d89a      	bhi.n	b92ec <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b93b6:	f108 0501 	add.w	r5, r8, #1
   b93ba:	6005      	str	r5, [r0, #0]
   b93bc:	e68f      	b.n	b90de <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
		switch (js[parser->pos]) {
   b93be:	2d0d      	cmp	r5, #13
   b93c0:	d1f6      	bne.n	b93b0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
   b93c2:	e69f      	b.n	b9104 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b93c4:	f005 09df 	and.w	r9, r5, #223	; 0xdf
   b93c8:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
   b93cc:	e7f8      	b.n	b93c0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x344>
	if (parser->toknext >= num_tokens) {
   b93ce:	6845      	ldr	r5, [r0, #4]
   b93d0:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b93d2:	42af      	cmp	r7, r5
   b93d4:	f67f af28 	bls.w	b9228 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ac>
	tok = &tokens[parser->toknext++];
   b93d8:	f105 0801 	add.w	r8, r5, #1
   b93dc:	ea4f 1905 	mov.w	r9, r5, lsl #4
   b93e0:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b93e4:	f8c0 8004 	str.w	r8, [r0, #4]
	tok->start = tok->end = -1;
   b93e8:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b93ec:	2700      	movs	r7, #0
   b93ee:	60ef      	str	r7, [r5, #12]
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
   b93f0:	f8d0 8000 	ldr.w	r8, [r0]
	token->type = type;
   b93f4:	f04f 0a04 	mov.w	sl, #4
   b93f8:	f803 a009 	strb.w	sl, [r3, r9]
	token->end = end;
   b93fc:	e9c5 e801 	strd	lr, r8, [r5, #4]
	parser->pos--;
   b9400:	6805      	ldr	r5, [r0, #0]
   b9402:	3d01      	subs	r5, #1
   b9404:	e683      	b.n	b910e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x92>
	if (tokens != NULL) {
   b9406:	2b00      	cmp	r3, #0
   b9408:	f43f af12 	beq.w	b9230 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b940c:	6842      	ldr	r2, [r0, #4]
   b940e:	1e51      	subs	r1, r2, #1
   b9410:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   b9414:	2900      	cmp	r1, #0
   b9416:	f6ff af0b 	blt.w	b9230 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
			if (tokens[i].start != -1 && tokens[i].end == -1) {
   b941a:	f853 2c0c 	ldr.w	r2, [r3, #-12]
   b941e:	3201      	adds	r2, #1
   b9420:	d003      	beq.n	b942a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3ae>
   b9422:	f853 2c08 	ldr.w	r2, [r3, #-8]
   b9426:	3201      	adds	r2, #1
   b9428:	d087      	beq.n	b933a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2be>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b942a:	3901      	subs	r1, #1
   b942c:	3b10      	subs	r3, #16
   b942e:	e7f1      	b.n	b9414 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x398>
   b9430:	04001001 	.word	0x04001001

000b9434 <_ZN10JsonParser5parseEv>:
bool JsonParser::parse() {
   b9434:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (offset == 0) {
   b9436:	68c2      	ldr	r2, [r0, #12]
bool JsonParser::parse() {
   b9438:	4604      	mov	r4, r0
	if (offset == 0) {
   b943a:	b912      	cbnz	r2, b9442 <_ZN10JsonParser5parseEv+0xe>
		return false;
   b943c:	2000      	movs	r0, #0
}
   b943e:	b003      	add	sp, #12
   b9440:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (tokens) {
   b9442:	6943      	ldr	r3, [r0, #20]
		JsonParserGeneratorRK::jsmn_init(&parser);
   b9444:	f100 0620 	add.w	r6, r0, #32
	if (tokens) {
   b9448:	b1ab      	cbz	r3, b9476 <_ZN10JsonParser5parseEv+0x42>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
   b944a:	2100      	movs	r1, #0
	parser->toknext = 0;
   b944c:	e9c0 1108 	strd	r1, r1, [r0, #32]
	parser->toksuper = -1;
   b9450:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b9454:	6281      	str	r1, [r0, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b9456:	69c1      	ldr	r1, [r0, #28]
   b9458:	9100      	str	r1, [sp, #0]
   b945a:	6841      	ldr	r1, [r0, #4]
   b945c:	4630      	mov	r0, r6
   b945e:	f7ff fe0d 	bl	b907c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		if (result == JsonParserGeneratorRK::JSMN_ERROR_NOMEM) {
   b9462:	1c43      	adds	r3, r0, #1
   b9464:	d128      	bne.n	b94b8 <_ZN10JsonParser5parseEv+0x84>
			if (staticBuffers) {
   b9466:	7c25      	ldrb	r5, [r4, #16]
   b9468:	2d00      	cmp	r5, #0
   b946a:	d1e7      	bne.n	b943c <_ZN10JsonParser5parseEv+0x8>
			free(tokens);
   b946c:	6960      	ldr	r0, [r4, #20]
   b946e:	f003 ff1d 	bl	bd2ac <free>
			tokens = 0;
   b9472:	6165      	str	r5, [r4, #20]
			maxTokens = 0;
   b9474:	61e5      	str	r5, [r4, #28]
	parser->pos = 0;
   b9476:	2500      	movs	r5, #0
	parser->toksuper = -1;
   b9478:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	parser->toknext = 0;
   b947c:	e9c4 5508 	strd	r5, r5, [r4, #32]
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b9480:	68e2      	ldr	r2, [r4, #12]
   b9482:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b9484:	62a7      	str	r7, [r4, #40]	; 0x28
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b9486:	9500      	str	r5, [sp, #0]
   b9488:	462b      	mov	r3, r5
   b948a:	4630      	mov	r0, r6
   b948c:	f7ff fdf6 	bl	b907c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
	if (result < 0) {
   b9490:	2800      	cmp	r0, #0
   b9492:	dbd3      	blt.n	b943c <_ZN10JsonParser5parseEv+0x8>
	maxTokens = (size_t) result;
   b9494:	61e0      	str	r0, [r4, #28]
	if (maxTokens > 0) {
   b9496:	d017      	beq.n	b94c8 <_ZN10JsonParser5parseEv+0x94>
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b9498:	0100      	lsls	r0, r0, #4
   b949a:	f003 feff 	bl	bd29c <malloc>
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b949e:	69e2      	ldr	r2, [r4, #28]
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b94a0:	6160      	str	r0, [r4, #20]
   b94a2:	4603      	mov	r3, r0
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b94a4:	9200      	str	r2, [sp, #0]
	parser->toknext = 0;
   b94a6:	e9c4 5508 	strd	r5, r5, [r4, #32]
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b94aa:	68e2      	ldr	r2, [r4, #12]
   b94ac:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b94ae:	62a7      	str	r7, [r4, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b94b0:	4630      	mov	r0, r6
   b94b2:	f7ff fde3 	bl	b907c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
   b94b6:	e001      	b.n	b94bc <_ZN10JsonParser5parseEv+0x88>
		if (result < 0) {
   b94b8:	2800      	cmp	r0, #0
   b94ba:	dbbf      	blt.n	b943c <_ZN10JsonParser5parseEv+0x8>
		tokensEnd = &tokens[result];
   b94bc:	6963      	ldr	r3, [r4, #20]
   b94be:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   b94c2:	61a0      	str	r0, [r4, #24]
	return true;
   b94c4:	2001      	movs	r0, #1
   b94c6:	e7ba      	b.n	b943e <_ZN10JsonParser5parseEv+0xa>
		tokensEnd = tokens;
   b94c8:	6963      	ldr	r3, [r4, #20]
   b94ca:	61a3      	str	r3, [r4, #24]
   b94cc:	e7fa      	b.n	b94c4 <_ZN10JsonParser5parseEv+0x90>

000b94ce <_ZN12JsonModifier6finishEv>:
void JsonModifier::finish() {
   b94ce:	b538      	push	{r3, r4, r5, lr}
	if (start == -1) {
   b94d0:	6b43      	ldr	r3, [r0, #52]	; 0x34
   b94d2:	1c5a      	adds	r2, r3, #1
void JsonModifier::finish() {
   b94d4:	4604      	mov	r4, r0
	if (start == -1) {
   b94d6:	d018      	beq.n	b950a <_ZN12JsonModifier6finishEv+0x3c>
	if (origAfter > 0) {
   b94d8:	6b82      	ldr	r2, [r0, #56]	; 0x38
   b94da:	2a00      	cmp	r2, #0
   b94dc:	dd08      	ble.n	b94f0 <_ZN12JsonModifier6finishEv+0x22>
   b94de:	6b01      	ldr	r1, [r0, #48]	; 0x30
		memmove(jp.getBuffer() + start + getOffset(), jp.getBuffer() + saveLoc, origAfter);
   b94e0:	68e5      	ldr	r5, [r4, #12]
   b94e2:	6848      	ldr	r0, [r1, #4]
   b94e4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   b94e6:	442b      	add	r3, r5
   b94e8:	4401      	add	r1, r0
   b94ea:	4418      	add	r0, r3
   b94ec:	f007 fe9a 	bl	c1224 <memmove>
	jp.setOffset(start + getOffset() + origAfter);
   b94f0:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
   b94f4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b94f6:	440b      	add	r3, r1
   b94f8:	68e1      	ldr	r1, [r4, #12]
   b94fa:	440b      	add	r3, r1
	void setOffset(size_t offset) { this->offset = offset; };
   b94fc:	60d3      	str	r3, [r2, #12]
	jp.parse();
   b94fe:	6b20      	ldr	r0, [r4, #48]	; 0x30
   b9500:	f7ff ff98 	bl	b9434 <_ZN10JsonParser5parseEv>
	start = -1;
   b9504:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b9508:	6363      	str	r3, [r4, #52]	; 0x34
}
   b950a:	bd38      	pop	{r3, r4, r5, pc}

000b950c <_ZN12LocalTimeHMSD1Ev>:
//
LocalTimeHMS::LocalTimeHMS() {
}

LocalTimeHMS::~LocalTimeHMS() {
}
   b950c:	4770      	bx	lr

000b950e <_ZN15LocalTimeChangeD1Ev>:
// LocalTimeChange
//
LocalTimeChange::LocalTimeChange() {
}
LocalTimeChange::~LocalTimeChange() {
}
   b950e:	4770      	bx	lr

000b9510 <_ZN12LocalTimeHMSD0Ev>:
LocalTimeHMS::~LocalTimeHMS() {
   b9510:	b510      	push	{r4, lr}
}
   b9512:	2108      	movs	r1, #8
LocalTimeHMS::~LocalTimeHMS() {
   b9514:	4604      	mov	r4, r0
}
   b9516:	f7fa fdc2 	bl	b409e <_ZdlPvj>
   b951a:	4620      	mov	r0, r4
   b951c:	bd10      	pop	{r4, pc}

000b951e <_ZN15LocalTimeChangeD0Ev>:
LocalTimeChange::~LocalTimeChange() {
   b951e:	b510      	push	{r4, lr}
}
   b9520:	2110      	movs	r1, #16
LocalTimeChange::~LocalTimeChange() {
   b9522:	4604      	mov	r4, r0
}
   b9524:	f7fa fdbb 	bl	b409e <_ZdlPvj>
   b9528:	4620      	mov	r0, r4
   b952a:	bd10      	pop	{r4, pc}

000b952c <_ZN22LocalTimePosixTimezoneD1Ev>:
// LocalTimePosixTimezone
//

LocalTimePosixTimezone::LocalTimePosixTimezone() {
}
LocalTimePosixTimezone::~LocalTimePosixTimezone() {
   b952c:	b510      	push	{r4, lr}
   b952e:	4b05      	ldr	r3, [pc, #20]	; (b9544 <_ZN22LocalTimePosixTimezoneD1Ev+0x18>)
   b9530:	4604      	mov	r4, r0
   b9532:	f840 3b1c 	str.w	r3, [r0], #28
   b9536:	f006 fa0b 	bl	bf950 <_ZN6StringD1Ev>
   b953a:	1d20      	adds	r0, r4, #4
   b953c:	f006 fa08 	bl	bf950 <_ZN6StringD1Ev>
}
   b9540:	4620      	mov	r0, r4
   b9542:	bd10      	pop	{r4, pc}
   b9544:	000c4bec 	.word	0x000c4bec

000b9548 <_ZN22LocalTimePosixTimezoneD0Ev>:
LocalTimePosixTimezone::~LocalTimePosixTimezone() {
   b9548:	b510      	push	{r4, lr}
   b954a:	4604      	mov	r4, r0
}
   b954c:	f7ff ffee 	bl	b952c <_ZN22LocalTimePosixTimezoneD1Ev>
   b9550:	4620      	mov	r0, r4
   b9552:	2158      	movs	r1, #88	; 0x58
   b9554:	f7fa fda3 	bl	b409e <_ZdlPvj>
   b9558:	4620      	mov	r0, r4
   b955a:	bd10      	pop	{r4, pc}

000b955c <_ZN9LocalTimeD1Ev>:
    LocalTime() {};

    /**
     * @brief This class is a singleton and should not be manually destructed
     */
    virtual ~LocalTime() {};
   b955c:	b510      	push	{r4, lr}
   b955e:	4b04      	ldr	r3, [pc, #16]	; (b9570 <_ZN9LocalTimeD1Ev+0x14>)
   b9560:	4604      	mov	r4, r0
   b9562:	f840 3b04 	str.w	r3, [r0], #4
   b9566:	f7ff ffe1 	bl	b952c <_ZN22LocalTimePosixTimezoneD1Ev>
   b956a:	4620      	mov	r0, r4
   b956c:	bd10      	pop	{r4, pc}
   b956e:	bf00      	nop
   b9570:	000c4bbc 	.word	0x000c4bbc

000b9574 <_ZN9LocalTimeD0Ev>:
   b9574:	b510      	push	{r4, lr}
   b9576:	4604      	mov	r4, r0
   b9578:	f7ff fff0 	bl	b955c <_ZN9LocalTimeD1Ev>
   b957c:	4620      	mov	r0, r4
   b957e:	2160      	movs	r1, #96	; 0x60
   b9580:	f7fa fd8d 	bl	b409e <_ZdlPvj>
   b9584:	4620      	mov	r0, r4
   b9586:	bd10      	pop	{r4, pc}

000b9588 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>:
    bool isDST() const { return position == Position::IN_DST || position == Position::BEFORE_STANDARD || position == Position::AFTER_STANDARD; };
   b9588:	f020 0302 	bic.w	r3, r0, #2
   b958c:	2b01      	cmp	r3, #1
   b958e:	d003      	beq.n	b9598 <_ZNK16LocalTimeConvert5isDSTEv.isra.0+0x10>
   b9590:	1f43      	subs	r3, r0, #5
   b9592:	4258      	negs	r0, r3
   b9594:	4158      	adcs	r0, r3
   b9596:	4770      	bx	lr
   b9598:	4618      	mov	r0, r3
   b959a:	4770      	bx	lr

000b959c <_ZN12LocalTimeHMSaSERKS_.isra.0>:
class LocalTimeHMS {
   b959c:	f991 3004 	ldrsb.w	r3, [r1, #4]
   b95a0:	7103      	strb	r3, [r0, #4]
   b95a2:	f991 3005 	ldrsb.w	r3, [r1, #5]
   b95a6:	7143      	strb	r3, [r0, #5]
   b95a8:	f991 3006 	ldrsb.w	r3, [r1, #6]
   b95ac:	7183      	strb	r3, [r0, #6]
   b95ae:	f991 3007 	ldrsb.w	r3, [r1, #7]
   b95b2:	71c3      	strb	r3, [r0, #7]
   b95b4:	4770      	bx	lr

000b95b6 <_ZN22LocalTimePosixTimezoneaSERKS_.isra.0>:
class LocalTimePosixTimezone {
   b95b6:	b538      	push	{r3, r4, r5, lr}
   b95b8:	4604      	mov	r4, r0
   b95ba:	460d      	mov	r5, r1
   b95bc:	3004      	adds	r0, #4
   b95be:	3104      	adds	r1, #4
   b95c0:	f006 fa4d 	bl	bfa5e <_ZN6StringaSERKS_>
   b95c4:	f105 0114 	add.w	r1, r5, #20
   b95c8:	f104 0014 	add.w	r0, r4, #20
   b95cc:	f7ff ffe6 	bl	b959c <_ZN12LocalTimeHMSaSERKS_.isra.0>
   b95d0:	f105 011c 	add.w	r1, r5, #28
   b95d4:	f104 001c 	add.w	r0, r4, #28
   b95d8:	f006 fa41 	bl	bfa5e <_ZN6StringaSERKS_>
   b95dc:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   b95e0:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   b95e4:	f7ff ffda 	bl	b959c <_ZN12LocalTimeHMSaSERKS_.isra.0>
class LocalTimeChange {
   b95e8:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
   b95ec:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
   b95f0:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   b95f4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   b95f8:	f995 303a 	ldrsb.w	r3, [r5, #58]	; 0x3a
   b95fc:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
   b9600:	f995 303b 	ldrsb.w	r3, [r5, #59]	; 0x3b
   b9604:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
   b9608:	f105 013c 	add.w	r1, r5, #60	; 0x3c
   b960c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b9610:	f7ff ffc4 	bl	b959c <_ZN12LocalTimeHMSaSERKS_.isra.0>
   b9614:	f995 3048 	ldrsb.w	r3, [r5, #72]	; 0x48
   b9618:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
   b961c:	f995 3049 	ldrsb.w	r3, [r5, #73]	; 0x49
   b9620:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
   b9624:	f995 304a 	ldrsb.w	r3, [r5, #74]	; 0x4a
   b9628:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
   b962c:	f995 304b 	ldrsb.w	r3, [r5, #75]	; 0x4b
   b9630:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
   b9634:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   b9638:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   b963c:	f7ff ffae 	bl	b959c <_ZN12LocalTimeHMSaSERKS_.isra.0>
class LocalTimePosixTimezone {
   b9640:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
   b9644:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
   b9648:	bd38      	pop	{r3, r4, r5, pc}

000b964a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b964a:	680b      	ldr	r3, [r1, #0]
   b964c:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b964e:	684b      	ldr	r3, [r1, #4]
   b9650:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b9652:	b113      	cbz	r3, b965a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b9654:	685a      	ldr	r2, [r3, #4]
   b9656:	3201      	adds	r2, #1
   b9658:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b965a:	4770      	bx	lr

000b965c <_ZN12LocalTimeHMSC1ERKS_>:
class LocalTimeHMS {
   b965c:	4a02      	ldr	r2, [pc, #8]	; (b9668 <_ZN12LocalTimeHMSC1ERKS_+0xc>)
   b965e:	6002      	str	r2, [r0, #0]
   b9660:	684a      	ldr	r2, [r1, #4]
   b9662:	6042      	str	r2, [r0, #4]
   b9664:	4770      	bx	lr
   b9666:	bf00      	nop
   b9668:	000c4bcc 	.word	0x000c4bcc

000b966c <_ZN12LocalTimeYMD12fromTimeInfoEPK2tm>:
    ymd.year = pTimeInfo->tm_year;
   b966c:	694a      	ldr	r2, [r1, #20]
   b966e:	6803      	ldr	r3, [r0, #0]
   b9670:	f362 0316 	bfi	r3, r2, #0, #23
   b9674:	6003      	str	r3, [r0, #0]
    ymd.month = pTimeInfo->tm_mon + 1;
   b9676:	690b      	ldr	r3, [r1, #16]
   b9678:	1c5a      	adds	r2, r3, #1
   b967a:	8843      	ldrh	r3, [r0, #2]
   b967c:	f362 13ca 	bfi	r3, r2, #7, #4
   b9680:	8043      	strh	r3, [r0, #2]
    ymd.day = pTimeInfo->tm_mday;
   b9682:	68ca      	ldr	r2, [r1, #12]
   b9684:	f3c3 2307 	ubfx	r3, r3, #8, #8
   b9688:	f362 03c7 	bfi	r3, r2, #3, #5
   b968c:	70c3      	strb	r3, [r0, #3]
}
   b968e:	4770      	bx	lr

000b9690 <_ZN12LocalTimeHMSC1Ev>:
LocalTimeHMS::LocalTimeHMS() {
   b9690:	4a02      	ldr	r2, [pc, #8]	; (b969c <_ZN12LocalTimeHMSC1Ev+0xc>)
   b9692:	6002      	str	r2, [r0, #0]
   b9694:	2200      	movs	r2, #0
   b9696:	6042      	str	r2, [r0, #4]
}
   b9698:	4770      	bx	lr
   b969a:	bf00      	nop
   b969c:	000c4bcc 	.word	0x000c4bcc

000b96a0 <_ZN12LocalTimeHMS5parseEPKc>:
void LocalTimeHMS::parse(const char *str) {
   b96a0:	b530      	push	{r4, r5, lr}
    hour = minute = second = 0;
   b96a2:	2300      	movs	r3, #0
void LocalTimeHMS::parse(const char *str) {
   b96a4:	b087      	sub	sp, #28
    hour = minute = second = 0;
   b96a6:	8083      	strh	r3, [r0, #4]
   b96a8:	7183      	strb	r3, [r0, #6]
void LocalTimeHMS::parse(const char *str) {
   b96aa:	460d      	mov	r5, r1
    if (sscanf(str, "%d:%d:%d", &values[0], &values[1], &values[2]) == 3) {
   b96ac:	ab05      	add	r3, sp, #20
   b96ae:	9300      	str	r3, [sp, #0]
   b96b0:	4913      	ldr	r1, [pc, #76]	; (b9700 <_ZN12LocalTimeHMS5parseEPKc+0x60>)
void LocalTimeHMS::parse(const char *str) {
   b96b2:	4604      	mov	r4, r0
    if (sscanf(str, "%d:%d:%d", &values[0], &values[1], &values[2]) == 3) {
   b96b4:	ab04      	add	r3, sp, #16
   b96b6:	aa03      	add	r2, sp, #12
   b96b8:	4628      	mov	r0, r5
   b96ba:	f003 fe0f 	bl	bd2dc <sscanf>
   b96be:	2803      	cmp	r0, #3
   b96c0:	d107      	bne.n	b96d2 <_ZN12LocalTimeHMS5parseEPKc+0x32>
        hour = (int8_t) values[0];    
   b96c2:	9b03      	ldr	r3, [sp, #12]
   b96c4:	7123      	strb	r3, [r4, #4]
        minute = (int8_t) values[1];    
   b96c6:	9b04      	ldr	r3, [sp, #16]
   b96c8:	7163      	strb	r3, [r4, #5]
        second = (int8_t) values[2];    
   b96ca:	9b05      	ldr	r3, [sp, #20]
   b96cc:	71a3      	strb	r3, [r4, #6]
}
   b96ce:	b007      	add	sp, #28
   b96d0:	bd30      	pop	{r4, r5, pc}
    if (sscanf(str, "%d:%d", &values[0], &values[1]) == 2) {
   b96d2:	490c      	ldr	r1, [pc, #48]	; (b9704 <_ZN12LocalTimeHMS5parseEPKc+0x64>)
   b96d4:	ab04      	add	r3, sp, #16
   b96d6:	aa03      	add	r2, sp, #12
   b96d8:	4628      	mov	r0, r5
   b96da:	f003 fdff 	bl	bd2dc <sscanf>
   b96de:	2802      	cmp	r0, #2
   b96e0:	d104      	bne.n	b96ec <_ZN12LocalTimeHMS5parseEPKc+0x4c>
        hour = (int8_t) values[0];    
   b96e2:	9b03      	ldr	r3, [sp, #12]
   b96e4:	7123      	strb	r3, [r4, #4]
        minute = (int8_t) values[1];    
   b96e6:	9b04      	ldr	r3, [sp, #16]
   b96e8:	7163      	strb	r3, [r4, #5]
   b96ea:	e7f0      	b.n	b96ce <_ZN12LocalTimeHMS5parseEPKc+0x2e>
    if (sscanf(str, "%d", &values[0]) == 1) {
   b96ec:	4906      	ldr	r1, [pc, #24]	; (b9708 <_ZN12LocalTimeHMS5parseEPKc+0x68>)
   b96ee:	aa03      	add	r2, sp, #12
   b96f0:	4628      	mov	r0, r5
   b96f2:	f003 fdf3 	bl	bd2dc <sscanf>
   b96f6:	2801      	cmp	r0, #1
        hour = (int8_t) values[0];    
   b96f8:	bf04      	itt	eq
   b96fa:	9b03      	ldreq	r3, [sp, #12]
   b96fc:	7123      	strbeq	r3, [r4, #4]
}
   b96fe:	e7e6      	b.n	b96ce <_ZN12LocalTimeHMS5parseEPKc+0x2e>
   b9700:	000c4b80 	.word	0x000c4b80
   b9704:	000c4b83 	.word	0x000c4b83
   b9708:	000c3bbf 	.word	0x000c3bbf

000b970c <_ZNK12LocalTimeHMS9toSecondsEv>:
    if (hour < 0) {
   b970c:	f990 2004 	ldrsb.w	r2, [r0, #4]
        return - (((int)hour) * -3600 + ((int)minute) * 60 + (int) second);
   b9710:	f990 3005 	ldrsb.w	r3, [r0, #5]
   b9714:	f990 1006 	ldrsb.w	r1, [r0, #6]
    if (hour < 0) {
   b9718:	2a00      	cmp	r2, #0
        return - (((int)hour) * -3600 + ((int)minute) * 60 + (int) second);
   b971a:	bfb8      	it	lt
   b971c:	4808      	ldrlt	r0, [pc, #32]	; (b9740 <_ZNK12LocalTimeHMS9toSecondsEv+0x34>)
   b971e:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   b9722:	ea4f 0383 	mov.w	r3, r3, lsl #2
   b9726:	bfbd      	ittte	lt
   b9728:	fb00 3002 	mlalt	r0, r0, r2, r3
   b972c:	1840      	addlt	r0, r0, r1
   b972e:	4240      	neglt	r0, r0
        return ((int)hour) * 3600 + ((int)minute) * 60 + (int) second;
   b9730:	f44f 6061 	movge.w	r0, #3600	; 0xe10
   b9734:	bfa4      	itt	ge
   b9736:	fb00 3002 	mlage	r0, r0, r2, r3
   b973a:	1840      	addge	r0, r0, r1
}
   b973c:	4770      	bx	lr
   b973e:	bf00      	nop
   b9740:	fffff1f0 	.word	0xfffff1f0

000b9744 <_ZNK22LocalTimePosixTimezone3isZEv>:
    bool isZ() const { return !valid || (!hasDST() && standardHMS.toSeconds() == 0); };
   b9744:	b508      	push	{r3, lr}
   b9746:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
   b974a:	b14b      	cbz	r3, b9760 <_ZNK22LocalTimePosixTimezone3isZEv+0x1c>
   b974c:	f990 303b 	ldrsb.w	r3, [r0, #59]	; 0x3b
   b9750:	b943      	cbnz	r3, b9764 <_ZNK22LocalTimePosixTimezone3isZEv+0x20>
   b9752:	302c      	adds	r0, #44	; 0x2c
   b9754:	f7ff ffda 	bl	b970c <_ZNK12LocalTimeHMS9toSecondsEv>
   b9758:	fab0 f080 	clz	r0, r0
   b975c:	0940      	lsrs	r0, r0, #5
   b975e:	bd08      	pop	{r3, pc}
   b9760:	2001      	movs	r0, #1
   b9762:	e7fc      	b.n	b975e <_ZNK22LocalTimePosixTimezone3isZEv+0x1a>
   b9764:	2000      	movs	r0, #0
   b9766:	e7fa      	b.n	b975e <_ZNK22LocalTimePosixTimezone3isZEv+0x1a>

000b9768 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm>:
    if (!ignore) {
   b9768:	f990 3007 	ldrsb.w	r3, [r0, #7]
   b976c:	b943      	cbnz	r3, b9780 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm+0x18>
        pTimeInfo->tm_hour = hour;
   b976e:	f990 3004 	ldrsb.w	r3, [r0, #4]
   b9772:	608b      	str	r3, [r1, #8]
        pTimeInfo->tm_min = minute;
   b9774:	f990 3005 	ldrsb.w	r3, [r0, #5]
   b9778:	604b      	str	r3, [r1, #4]
        pTimeInfo->tm_sec = second;
   b977a:	f990 3006 	ldrsb.w	r3, [r0, #6]
   b977e:	600b      	str	r3, [r1, #0]
}
   b9780:	4770      	bx	lr

000b9782 <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm>:
    if (!ignore) {
   b9782:	f990 3007 	ldrsb.w	r3, [r0, #7]
void LocalTimeHMS::adjustTimeInfo(struct tm *pTimeInfo) const {
   b9786:	b530      	push	{r4, r5, lr}
    if (!ignore) {
   b9788:	b9b3      	cbnz	r3, b97b8 <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm+0x36>
        if (hour < 0) {
   b978a:	f990 5004 	ldrsb.w	r5, [r0, #4]
            pTimeInfo->tm_hour += hour;
   b978e:	688c      	ldr	r4, [r1, #8]
   b9790:	442c      	add	r4, r5
            pTimeInfo->tm_sec -= second;
   b9792:	e9d1 3200 	ldrd	r3, r2, [r1]
            pTimeInfo->tm_hour += hour;
   b9796:	608c      	str	r4, [r1, #8]
            pTimeInfo->tm_min -= minute;
   b9798:	f990 4005 	ldrsb.w	r4, [r0, #5]
        if (hour < 0) {
   b979c:	2d00      	cmp	r5, #0
            pTimeInfo->tm_min -= minute;
   b979e:	bfb5      	itete	lt
   b97a0:	1b12      	sublt	r2, r2, r4
            pTimeInfo->tm_min += minute;
   b97a2:	1912      	addge	r2, r2, r4
            pTimeInfo->tm_min -= minute;
   b97a4:	604a      	strlt	r2, [r1, #4]
            pTimeInfo->tm_min += minute;
   b97a6:	604a      	strge	r2, [r1, #4]
            pTimeInfo->tm_sec -= second;
   b97a8:	bfb5      	itete	lt
   b97aa:	f990 2006 	ldrsblt.w	r2, [r0, #6]
            pTimeInfo->tm_sec += second;
   b97ae:	f990 2006 	ldrsbge.w	r2, [r0, #6]
            pTimeInfo->tm_sec -= second;
   b97b2:	1a9b      	sublt	r3, r3, r2
            pTimeInfo->tm_sec += second;
   b97b4:	189b      	addge	r3, r3, r2
   b97b6:	600b      	str	r3, [r1, #0]
}
   b97b8:	bd30      	pop	{r4, r5, pc}
	...

000b97bc <_ZN15LocalTimeChangeC1Ev>:
LocalTimeChange::LocalTimeChange() {
   b97bc:	b508      	push	{r3, lr}
   b97be:	4a05      	ldr	r2, [pc, #20]	; (b97d4 <_ZN15LocalTimeChangeC1Ev+0x18>)
   b97c0:	6002      	str	r2, [r0, #0]
   b97c2:	2200      	movs	r2, #0
   b97c4:	4603      	mov	r3, r0
   b97c6:	6042      	str	r2, [r0, #4]
   b97c8:	3008      	adds	r0, #8
   b97ca:	f7ff ff61 	bl	b9690 <_ZN12LocalTimeHMSC1Ev>
}
   b97ce:	4618      	mov	r0, r3
   b97d0:	bd08      	pop	{r3, pc}
   b97d2:	bf00      	nop
   b97d4:	000c4bdc 	.word	0x000c4bdc

000b97d8 <_ZN15LocalTimeChange5clearEv>:
    month = week = dayOfWeek = valid = 0;
   b97d8:	2300      	movs	r3, #0
   b97da:	6043      	str	r3, [r0, #4]
    hour = minute = second = 0;
   b97dc:	8183      	strh	r3, [r0, #12]
   b97de:	7383      	strb	r3, [r0, #14]
}
   b97e0:	4770      	bx	lr
	...

000b97e4 <_ZN15LocalTimeChange5parseEPKc>:
void LocalTimeChange::parse(const char *str) {
   b97e4:	b530      	push	{r4, r5, lr}
   b97e6:	4604      	mov	r4, r0
   b97e8:	b087      	sub	sp, #28
    if (!str || str[0] != 'M') {
   b97ea:	460d      	mov	r5, r1
   b97ec:	b111      	cbz	r1, b97f4 <_ZN15LocalTimeChange5parseEPKc+0x10>
   b97ee:	780b      	ldrb	r3, [r1, #0]
   b97f0:	2b4d      	cmp	r3, #77	; 0x4d
   b97f2:	d005      	beq.n	b9800 <_ZN15LocalTimeChange5parseEPKc+0x1c>
        clear();
   b97f4:	4620      	mov	r0, r4
}
   b97f6:	b007      	add	sp, #28
   b97f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        clear();
   b97fc:	f7ff bfec 	b.w	b97d8 <_ZN15LocalTimeChange5clearEv>
    if (sscanf(str, "M%d.%d.%d", &values[0], &values[1], &values[2]) == 3) {
   b9800:	ab05      	add	r3, sp, #20
   b9802:	9300      	str	r3, [sp, #0]
   b9804:	4911      	ldr	r1, [pc, #68]	; (b984c <_ZN15LocalTimeChange5parseEPKc+0x68>)
   b9806:	ab04      	add	r3, sp, #16
   b9808:	aa03      	add	r2, sp, #12
   b980a:	4628      	mov	r0, r5
   b980c:	f003 fd66 	bl	bd2dc <sscanf>
   b9810:	2803      	cmp	r0, #3
   b9812:	d116      	bne.n	b9842 <_ZN15LocalTimeChange5parseEPKc+0x5e>
        month = (int8_t) values[0];
   b9814:	9b03      	ldr	r3, [sp, #12]
   b9816:	7123      	strb	r3, [r4, #4]
        week = (int8_t) values[1];
   b9818:	9b04      	ldr	r3, [sp, #16]
   b981a:	7163      	strb	r3, [r4, #5]
        dayOfWeek = (int8_t) values[2];
   b981c:	9b05      	ldr	r3, [sp, #20]
   b981e:	71a3      	strb	r3, [r4, #6]
        const char *cp = strchr(str, '/');
   b9820:	212f      	movs	r1, #47	; 0x2f
   b9822:	4628      	mov	r0, r5
   b9824:	f007 fd9c 	bl	c1360 <strchr>
        if (cp) {
   b9828:	b140      	cbz	r0, b983c <_ZN15LocalTimeChange5parseEPKc+0x58>
            hms.parse(cp);
   b982a:	1c41      	adds	r1, r0, #1
   b982c:	f104 0008 	add.w	r0, r4, #8
   b9830:	f7ff ff36 	bl	b96a0 <_ZN12LocalTimeHMS5parseEPKc>
        valid = true;
   b9834:	2301      	movs	r3, #1
   b9836:	71e3      	strb	r3, [r4, #7]
}
   b9838:	b007      	add	sp, #28
   b983a:	bd30      	pop	{r4, r5, pc}
    hour = minute = second = 0;
   b983c:	81a0      	strh	r0, [r4, #12]
   b983e:	73a0      	strb	r0, [r4, #14]
}
   b9840:	e7f8      	b.n	b9834 <_ZN15LocalTimeChange5parseEPKc+0x50>
        clear();
   b9842:	4620      	mov	r0, r4
   b9844:	f7ff ffc8 	bl	b97d8 <_ZN15LocalTimeChange5clearEv>
   b9848:	e7f6      	b.n	b9838 <_ZN15LocalTimeChange5parseEPKc+0x54>
   b984a:	bf00      	nop
   b984c:	000c4b9b 	.word	0x000c4b9b

000b9850 <_ZN22LocalTimePosixTimezoneC1Ev>:
LocalTimePosixTimezone::LocalTimePosixTimezone() {
   b9850:	4b10      	ldr	r3, [pc, #64]	; (b9894 <_ZN22LocalTimePosixTimezoneC1Ev+0x44>)
   b9852:	4911      	ldr	r1, [pc, #68]	; (b9898 <_ZN22LocalTimePosixTimezoneC1Ev+0x48>)
   b9854:	b510      	push	{r4, lr}
   b9856:	4604      	mov	r4, r0
   b9858:	f840 3b04 	str.w	r3, [r0], #4
   b985c:	f006 f8c3 	bl	bf9e6 <_ZN6StringC1EPK19__FlashStringHelper>
   b9860:	f104 0014 	add.w	r0, r4, #20
   b9864:	f7ff ff14 	bl	b9690 <_ZN12LocalTimeHMSC1Ev>
   b9868:	490b      	ldr	r1, [pc, #44]	; (b9898 <_ZN22LocalTimePosixTimezoneC1Ev+0x48>)
   b986a:	f104 001c 	add.w	r0, r4, #28
   b986e:	f006 f8ba 	bl	bf9e6 <_ZN6StringC1EPK19__FlashStringHelper>
   b9872:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   b9876:	f7ff ff0b 	bl	b9690 <_ZN12LocalTimeHMSC1Ev>
   b987a:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b987e:	f7ff ff9d 	bl	b97bc <_ZN15LocalTimeChangeC1Ev>
   b9882:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b9886:	f7ff ff99 	bl	b97bc <_ZN15LocalTimeChangeC1Ev>
   b988a:	2300      	movs	r3, #0
   b988c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
   b9890:	4620      	mov	r0, r4
   b9892:	bd10      	pop	{r4, pc}
   b9894:	000c4bec 	.word	0x000c4bec
   b9898:	000c5454 	.word	0x000c5454

000b989c <_ZN22LocalTimePosixTimezone5parseEPKc>:
    standardStart.clear();
    standardName = "";
    standardHMS.clear();
}

bool LocalTimePosixTimezone::parse(const char *str) {
   b989c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b98a0:	4604      	mov	r4, r0
    char *mutableCopy = strdup(str);
   b98a2:	4608      	mov	r0, r1
   b98a4:	f007 fd86 	bl	c13b4 <strdup>

    char *token, *save = mutableCopy;
    size_t ii = 0;
   b98a8:	2500      	movs	r5, #0
    char *mutableCopy = strdup(str);
   b98aa:	4606      	mov	r6, r0
    char *token, *save = mutableCopy;
   b98ac:	9001      	str	r0, [sp, #4]
                    }
                }
                break;
            }
            case 1: {
                dstStart.parse(token);
   b98ae:	f104 0834 	add.w	r8, r4, #52	; 0x34
    while((token = strtok_r(save, ",", &save)) != 0) {
   b98b2:	493f      	ldr	r1, [pc, #252]	; (b99b0 <_ZN22LocalTimePosixTimezone5parseEPKc+0x114>)
   b98b4:	9801      	ldr	r0, [sp, #4]
   b98b6:	aa01      	add	r2, sp, #4
   b98b8:	f008 fc84 	bl	c21c4 <strtok_r>
   b98bc:	4601      	mov	r1, r0
   b98be:	2800      	cmp	r0, #0
   b98c0:	d062      	beq.n	b9988 <_ZN22LocalTimePosixTimezone5parseEPKc+0xec>
        switch(ii++) {
   b98c2:	2d01      	cmp	r5, #1
   b98c4:	f105 0301 	add.w	r3, r5, #1
   b98c8:	d053      	beq.n	b9972 <_ZN22LocalTimePosixTimezone5parseEPKc+0xd6>
   b98ca:	2d02      	cmp	r5, #2
   b98cc:	d056      	beq.n	b997c <_ZN22LocalTimePosixTimezone5parseEPKc+0xe0>
   b98ce:	2d00      	cmp	r5, #0
   b98d0:	d146      	bne.n	b9960 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc4>
   b98d2:	4602      	mov	r2, r0
                while(*cp >= 'A') {
   b98d4:	f892 9000 	ldrb.w	r9, [r2]
   b98d8:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
   b98dc:	4615      	mov	r5, r2
   b98de:	4617      	mov	r7, r2
   b98e0:	f102 0201 	add.w	r2, r2, #1
   b98e4:	d8f6      	bhi.n	b98d4 <_ZN22LocalTimePosixTimezone5parseEPKc+0x38>
                *cp = 0;
   b98e6:	2200      	movs	r2, #0
   b98e8:	702a      	strb	r2, [r5, #0]
                standardName = start;
   b98ea:	f104 001c 	add.w	r0, r4, #28
   b98ee:	f006 f8d8 	bl	bfaa2 <_ZN6StringaSEPKc>
                valid = true;
   b98f2:	2201      	movs	r2, #1
                *cp = save2;
   b98f4:	f885 9000 	strb.w	r9, [r5]
                valid = true;
   b98f8:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
                if (*cp) {
   b98fc:	782a      	ldrb	r2, [r5, #0]
   b98fe:	b36a      	cbz	r2, b995c <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
                    while(*cp && *cp < 'A') {
   b9900:	f897 a000 	ldrb.w	sl, [r7]
   b9904:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
   b9908:	2a3f      	cmp	r2, #63	; 0x3f
   b990a:	46b9      	mov	r9, r7
   b990c:	46bb      	mov	fp, r7
   b990e:	f107 0701 	add.w	r7, r7, #1
   b9912:	d9f5      	bls.n	b9900 <_ZN22LocalTimePosixTimezone5parseEPKc+0x64>
                    *cp = 0;
   b9914:	2300      	movs	r3, #0
                    standardHMS.parse(start);
   b9916:	f104 072c 	add.w	r7, r4, #44	; 0x2c
                    *cp = 0;
   b991a:	f889 3000 	strb.w	r3, [r9]
                    standardHMS.parse(start);
   b991e:	4629      	mov	r1, r5
   b9920:	4638      	mov	r0, r7
   b9922:	f7ff febd 	bl	b96a0 <_ZN12LocalTimeHMS5parseEPKc>
                    *cp = save2;
   b9926:	f889 a000 	strb.w	sl, [r9]
                    if (*cp) {
   b992a:	f1ba 0f00 	cmp.w	sl, #0
   b992e:	d015      	beq.n	b995c <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
   b9930:	465d      	mov	r5, fp
                        while(*cp && *cp >= 'A') {
   b9932:	f81b ab01 	ldrb.w	sl, [fp], #1
   b9936:	f1ba 0f40 	cmp.w	sl, #64	; 0x40
   b993a:	d8f9      	bhi.n	b9930 <_ZN22LocalTimePosixTimezone5parseEPKc+0x94>
                        *cp = 0;
   b993c:	2200      	movs	r2, #0
   b993e:	702a      	strb	r2, [r5, #0]
                        dstName = start;
   b9940:	4649      	mov	r1, r9
   b9942:	1d20      	adds	r0, r4, #4
   b9944:	f006 f8ad 	bl	bfaa2 <_ZN6StringaSEPKc>
                        *cp = save2;
   b9948:	f885 a000 	strb.w	sl, [r5]
                            dstHMS.parse(start);
   b994c:	f104 0014 	add.w	r0, r4, #20
                        if (*cp) {
   b9950:	f1ba 0f00 	cmp.w	sl, #0
   b9954:	d006      	beq.n	b9964 <_ZN22LocalTimePosixTimezone5parseEPKc+0xc8>
                            dstHMS.parse(start);
   b9956:	4629      	mov	r1, r5
   b9958:	f7ff fea2 	bl	b96a0 <_ZN12LocalTimeHMS5parseEPKc>
                            dstHMS.hour--;
   b995c:	2501      	movs	r5, #1
   b995e:	e7a8      	b.n	b98b2 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
        switch(ii++) {
   b9960:	461d      	mov	r5, r3
   b9962:	e7a6      	b.n	b98b2 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
                            dstHMS = standardHMS;
   b9964:	4639      	mov	r1, r7
   b9966:	f7ff fe19 	bl	b959c <_ZN12LocalTimeHMSaSERKS_.isra.0>
                            dstHMS.hour--;
   b996a:	7e23      	ldrb	r3, [r4, #24]
   b996c:	3b01      	subs	r3, #1
   b996e:	7623      	strb	r3, [r4, #24]
   b9970:	e7f4      	b.n	b995c <_ZN22LocalTimePosixTimezone5parseEPKc+0xc0>
                dstStart.parse(token);
   b9972:	4640      	mov	r0, r8
   b9974:	f7ff ff36 	bl	b97e4 <_ZN15LocalTimeChange5parseEPKc>
                break;
   b9978:	2502      	movs	r5, #2
   b997a:	e79a      	b.n	b98b2 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
            }
            case 2: {
                standardStart.parse(token);
   b997c:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b9980:	f7ff ff30 	bl	b97e4 <_ZN15LocalTimeChange5parseEPKc>
                break;
   b9984:	2503      	movs	r5, #3
   b9986:	e794      	b.n	b98b2 <_ZN22LocalTimePosixTimezone5parseEPKc+0x16>
            }
        }
    }

    if (dstStart.valid && !standardStart.valid) {
   b9988:	f994 303b 	ldrsb.w	r3, [r4, #59]	; 0x3b
   b998c:	b143      	cbz	r3, b99a0 <_ZN22LocalTimePosixTimezone5parseEPKc+0x104>
   b998e:	f994 204b 	ldrsb.w	r2, [r4, #75]	; 0x4b
   b9992:	b92a      	cbnz	r2, b99a0 <_ZN22LocalTimePosixTimezone5parseEPKc+0x104>
        // If DST start is specified, standard start must also be specified
        dstStart.clear();
   b9994:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b9998:	f7ff ff1e 	bl	b97d8 <_ZN15LocalTimeChange5clearEv>
        valid = false;
   b999c:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
    }


    free(mutableCopy);
   b99a0:	4630      	mov	r0, r6
   b99a2:	f003 fc83 	bl	bd2ac <free>

    return valid;
}
   b99a6:	f894 0054 	ldrb.w	r0, [r4, #84]	; 0x54
   b99aa:	b003      	add	sp, #12
   b99ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b99b0:	000c4ba5 	.word	0x000c4ba5

000b99b4 <_ZN22LocalTimePosixTimezoneC1EPKc>:
LocalTimePosixTimezone::LocalTimePosixTimezone(const char *str) {
   b99b4:	b538      	push	{r3, r4, r5, lr}
   b99b6:	4b13      	ldr	r3, [pc, #76]	; (b9a04 <_ZN22LocalTimePosixTimezoneC1EPKc+0x50>)
   b99b8:	4604      	mov	r4, r0
   b99ba:	460d      	mov	r5, r1
   b99bc:	f840 3b04 	str.w	r3, [r0], #4
   b99c0:	4911      	ldr	r1, [pc, #68]	; (b9a08 <_ZN22LocalTimePosixTimezoneC1EPKc+0x54>)
   b99c2:	f006 f810 	bl	bf9e6 <_ZN6StringC1EPK19__FlashStringHelper>
   b99c6:	f104 0014 	add.w	r0, r4, #20
   b99ca:	f7ff fe61 	bl	b9690 <_ZN12LocalTimeHMSC1Ev>
   b99ce:	490e      	ldr	r1, [pc, #56]	; (b9a08 <_ZN22LocalTimePosixTimezoneC1EPKc+0x54>)
   b99d0:	f104 001c 	add.w	r0, r4, #28
   b99d4:	f006 f807 	bl	bf9e6 <_ZN6StringC1EPK19__FlashStringHelper>
   b99d8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   b99dc:	f7ff fe58 	bl	b9690 <_ZN12LocalTimeHMSC1Ev>
   b99e0:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b99e4:	f7ff feea 	bl	b97bc <_ZN15LocalTimeChangeC1Ev>
   b99e8:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b99ec:	f7ff fee6 	bl	b97bc <_ZN15LocalTimeChangeC1Ev>
   b99f0:	2300      	movs	r3, #0
   b99f2:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
    parse(str);
   b99f6:	4629      	mov	r1, r5
   b99f8:	4620      	mov	r0, r4
   b99fa:	f7ff ff4f 	bl	b989c <_ZN22LocalTimePosixTimezone5parseEPKc>
}
   b99fe:	4620      	mov	r0, r4
   b9a00:	bd38      	pop	{r3, r4, r5, pc}
   b9a02:	bf00      	nop
   b9a04:	000c4bec 	.word	0x000c4bec
   b9a08:	000c5454 	.word	0x000c5454

000b9a0c <_ZNK14LocalTimeValue3hmsEv>:
    else {
        return tm_hour - 12;
    }
}

LocalTimeHMS LocalTimeValue::hms() const {
   b9a0c:	b508      	push	{r3, lr}
   b9a0e:	4603      	mov	r3, r0
    LocalTimeHMS result;
   b9a10:	f7ff fe3e 	bl	b9690 <_ZN12LocalTimeHMSC1Ev>
    hour = (int8_t) pTimeInfo->tm_hour;
   b9a14:	688a      	ldr	r2, [r1, #8]
   b9a16:	711a      	strb	r2, [r3, #4]
    minute = (int8_t) pTimeInfo->tm_min;
   b9a18:	684a      	ldr	r2, [r1, #4]
   b9a1a:	715a      	strb	r2, [r3, #5]
    second = (int8_t) pTimeInfo->tm_sec;
   b9a1c:	680a      	ldr	r2, [r1, #0]
   b9a1e:	719a      	strb	r2, [r3, #6]
    result.fromTimeInfo(this);
    return result;
}
   b9a20:	4618      	mov	r0, r3
   b9a22:	bd08      	pop	{r3, pc}

000b9a24 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue>:
LocalTimeHMS::LocalTimeHMS(const LocalTimeValue &value) {
   b9a24:	b513      	push	{r0, r1, r4, lr}
   b9a26:	4b07      	ldr	r3, [pc, #28]	; (b9a44 <_ZN12LocalTimeHMSC1ERK14LocalTimeValue+0x20>)
   b9a28:	6003      	str	r3, [r0, #0]
   b9a2a:	2300      	movs	r3, #0
   b9a2c:	6043      	str	r3, [r0, #4]
   b9a2e:	4604      	mov	r4, r0
    *this = value.hms();
   b9a30:	4668      	mov	r0, sp
   b9a32:	f7ff ffeb 	bl	b9a0c <_ZNK14LocalTimeValue3hmsEv>
   b9a36:	4620      	mov	r0, r4
   b9a38:	4669      	mov	r1, sp
   b9a3a:	f7ff fdaf 	bl	b959c <_ZN12LocalTimeHMSaSERKS_.isra.0>
}
   b9a3e:	b002      	add	sp, #8
   b9a40:	bd10      	pop	{r4, pc}
   b9a42:	bf00      	nop
   b9a44:	000c4bcc 	.word	0x000c4bcc

000b9a48 <_ZNK14LocalTimeValue3ymdEv>:
        tm_min = hms.minute;
        tm_sec = hms.second;
    }
}

LocalTimeYMD LocalTimeValue::ymd() const {
   b9a48:	b507      	push	{r0, r1, r2, lr}
    LocalTimeYMD() {
   b9a4a:	2300      	movs	r3, #0
   b9a4c:	4601      	mov	r1, r0
    LocalTimeYMD result;
    result.fromTimeInfo(this);
   b9a4e:	a801      	add	r0, sp, #4
   b9a50:	9301      	str	r3, [sp, #4]
   b9a52:	f7ff fe0b 	bl	b966c <_ZN12LocalTimeYMD12fromTimeInfoEPK2tm>
    return result;
}
   b9a56:	9801      	ldr	r0, [sp, #4]
   b9a58:	b003      	add	sp, #12
   b9a5a:	f85d fb04 	ldr.w	pc, [sp], #4

000b9a5e <_ZN12LocalTimeYMD18fromLocalTimeValueERK14LocalTimeValue>:
void LocalTimeYMD::fromLocalTimeValue(const LocalTimeValue &value) {
   b9a5e:	b510      	push	{r4, lr}
   b9a60:	4604      	mov	r4, r0
    *this = value.ymd();
   b9a62:	4608      	mov	r0, r1
   b9a64:	f7ff fff0 	bl	b9a48 <_ZNK14LocalTimeValue3ymdEv>
   b9a68:	6020      	str	r0, [r4, #0]
}
   b9a6a:	bd10      	pop	{r4, pc}

000b9a6c <_ZN16LocalTimeConvert7timeStrEv>:
        convert();
    }
}


String LocalTimeConvert::timeStr() {
   b9a6c:	b510      	push	{r4, lr}
   b9a6e:	4604      	mov	r4, r0
   b9a70:	b088      	sub	sp, #32
   b9a72:	4608      	mov	r0, r1
    char ascstr[26];
    asctime_r(&localTimeValue, ascstr);
   b9a74:	3068      	adds	r0, #104	; 0x68
   b9a76:	a901      	add	r1, sp, #4
   b9a78:	f007 fb74 	bl	c1164 <asctime_r>
    int len = strlen(ascstr);
   b9a7c:	a801      	add	r0, sp, #4
   b9a7e:	f007 fcb6 	bl	c13ee <strlen>
    ascstr[len-1] = 0; // remove final newline
   b9a82:	ab08      	add	r3, sp, #32
   b9a84:	4418      	add	r0, r3
   b9a86:	2300      	movs	r3, #0
   b9a88:	f800 3c1d 	strb.w	r3, [r0, #-29]
    return String(ascstr);
   b9a8c:	a901      	add	r1, sp, #4
   b9a8e:	4620      	mov	r0, r4
   b9a90:	f005 ffa9 	bl	bf9e6 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b9a94:	4620      	mov	r0, r4
   b9a96:	b008      	add	sp, #32
   b9a98:	bd10      	pop	{r4, pc}
	...

000b9a9c <_ZNK16LocalTimeConvert8zoneNameEv>:
    char buf[50] = {};
    strftime(buf, sizeof(buf), format_str, &localTimeValue);
    return String(buf);    
}

String LocalTimeConvert::zoneName() const { 
   b9a9c:	b538      	push	{r3, r4, r5, lr}
   b9a9e:	4604      	mov	r4, r0
    if (config.isZ()) {
   b9aa0:	1d08      	adds	r0, r1, #4
String LocalTimeConvert::zoneName() const { 
   b9aa2:	460d      	mov	r5, r1
    if (config.isZ()) {
   b9aa4:	f7ff fe4e 	bl	b9744 <_ZNK22LocalTimePosixTimezone3isZEv>
   b9aa8:	b128      	cbz	r0, b9ab6 <_ZNK16LocalTimeConvert8zoneNameEv+0x1a>
        return "Z";
   b9aaa:	4909      	ldr	r1, [pc, #36]	; (b9ad0 <_ZNK16LocalTimeConvert8zoneNameEv+0x34>)
   b9aac:	4620      	mov	r0, r4
   b9aae:	f005 ff9a 	bl	bf9e6 <_ZN6StringC1EPK19__FlashStringHelper>
        return config.dstName;
    }
    else {
        return config.standardName;
    }
};
   b9ab2:	4620      	mov	r0, r4
   b9ab4:	bd38      	pop	{r3, r4, r5, pc}
    if (isDST()) {
   b9ab6:	6828      	ldr	r0, [r5, #0]
   b9ab8:	f7ff fd66 	bl	b9588 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   b9abc:	b128      	cbz	r0, b9aca <_ZNK16LocalTimeConvert8zoneNameEv+0x2e>
        return config.dstName;
   b9abe:	f105 0108 	add.w	r1, r5, #8
        return config.standardName;
   b9ac2:	4620      	mov	r0, r4
   b9ac4:	f005 ffda 	bl	bfa7c <_ZN6StringC1ERKS_>
   b9ac8:	e7f3      	b.n	b9ab2 <_ZNK16LocalTimeConvert8zoneNameEv+0x16>
   b9aca:	f105 0120 	add.w	r1, r5, #32
   b9ace:	e7f8      	b.n	b9ac2 <_ZNK16LocalTimeConvert8zoneNameEv+0x26>
   b9ad0:	000c4ba7 	.word	0x000c4ba7

000b9ad4 <_ZN16LocalTimeConvert6formatEPKc>:
String LocalTimeConvert::format(const char* format_spec) {
   b9ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b9ad8:	4680      	mov	r8, r0
   b9ada:	b0a8      	sub	sp, #160	; 0xa0
   b9adc:	460c      	mov	r4, r1
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   b9ade:	4615      	mov	r5, r2
   b9ae0:	b12a      	cbz	r2, b9aee <_ZN16LocalTimeConvert6formatEPKc+0x1a>
   b9ae2:	4b47      	ldr	r3, [pc, #284]	; (b9c00 <_ZN16LocalTimeConvert6formatEPKc+0x12c>)
   b9ae4:	4610      	mov	r0, r2
   b9ae6:	6819      	ldr	r1, [r3, #0]
   b9ae8:	f007 fc51 	bl	c138e <strcmp>
   b9aec:	b938      	cbnz	r0, b9afe <_ZN16LocalTimeConvert6formatEPKc+0x2a>
        return timeStr();
   b9aee:	4621      	mov	r1, r4
   b9af0:	4640      	mov	r0, r8
   b9af2:	f7ff ffbb 	bl	b9a6c <_ZN16LocalTimeConvert7timeStrEv>
}
   b9af6:	4640      	mov	r0, r8
   b9af8:	b028      	add	sp, #160	; 0xa0
   b9afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    strncpy(format_str, format_spec, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   b9afe:	4629      	mov	r1, r5
   b9b00:	223f      	movs	r2, #63	; 0x3f
   b9b02:	a818      	add	r0, sp, #96	; 0x60
   b9b04:	f007 fc8f 	bl	c1426 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   b9b08:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b9b0a:	a818      	add	r0, sp, #96	; 0x60
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   b9b0c:	f88d 309f 	strb.w	r3, [sp, #159]	; 0x9f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b9b10:	f007 fc6d 	bl	c13ee <strlen>
    String zoneNameStr = zoneName();
   b9b14:	4621      	mov	r1, r4
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   b9b16:	4605      	mov	r5, r0
    String zoneNameStr = zoneName();
   b9b18:	a803      	add	r0, sp, #12
   b9b1a:	f7ff ffbf 	bl	b9a9c <_ZNK16LocalTimeConvert8zoneNameEv>
    if (config.isZ()) {
   b9b1e:	1d20      	adds	r0, r4, #4
   b9b20:	f7ff fe10 	bl	b9744 <_ZNK22LocalTimePosixTimezone3isZEv>
   b9b24:	b348      	cbz	r0, b9b7a <_ZN16LocalTimeConvert6formatEPKc+0xa6>
        strcpy(time_zone_str, "Z");
   b9b26:	4937      	ldr	r1, [pc, #220]	; (b9c04 <_ZN16LocalTimeConvert6formatEPKc+0x130>)
   b9b28:	a807      	add	r0, sp, #28
   b9b2a:	f007 fc3a 	bl	c13a2 <strcpy>
   b9b2e:	ae18      	add	r6, sp, #96	; 0x60
String LocalTimeConvert::format(const char* format_spec) {
   b9b30:	2700      	movs	r7, #0
    for (size_t i=0; i<len-1; i++)
   b9b32:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
   b9b36:	45ba      	cmp	sl, r7
   b9b38:	d94c      	bls.n	b9bd4 <_ZN16LocalTimeConvert6formatEPKc+0x100>
        if (format_str[i]=='%' && format_str[i+1]=='z')
   b9b3a:	7833      	ldrb	r3, [r6, #0]
   b9b3c:	2b25      	cmp	r3, #37	; 0x25
   b9b3e:	f107 0901 	add.w	r9, r7, #1
   b9b42:	d117      	bne.n	b9b74 <_ZN16LocalTimeConvert6formatEPKc+0xa0>
   b9b44:	7873      	ldrb	r3, [r6, #1]
   b9b46:	2b7a      	cmp	r3, #122	; 0x7a
   b9b48:	d136      	bne.n	b9bb8 <_ZN16LocalTimeConvert6formatEPKc+0xe4>
            size_t tzlen = strlen(time_zone_str);
   b9b4a:	a807      	add	r0, sp, #28
   b9b4c:	f007 fc4f 	bl	c13ee <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b9b50:	ab18      	add	r3, sp, #96	; 0x60
            size_t tzlen = strlen(time_zone_str);
   b9b52:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b9b54:	1838      	adds	r0, r7, r0
   b9b56:	ebaa 0207 	sub.w	r2, sl, r7
   b9b5a:	1cb1      	adds	r1, r6, #2
   b9b5c:	4418      	add	r0, r3
   b9b5e:	f007 fb53 	bl	c1208 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   b9b62:	462a      	mov	r2, r5
   b9b64:	a907      	add	r1, sp, #28
            memcpy(format_str+i, zoneNameStr.c_str(), tzlen);
   b9b66:	4630      	mov	r0, r6
   b9b68:	f007 fb4e 	bl	c1208 <memcpy>
            len = strlen(format_str);
   b9b6c:	a818      	add	r0, sp, #96	; 0x60
   b9b6e:	f007 fc3e 	bl	c13ee <strlen>
   b9b72:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   b9b74:	3601      	adds	r6, #1
   b9b76:	464f      	mov	r7, r9
   b9b78:	e7db      	b.n	b9b32 <_ZN16LocalTimeConvert6formatEPKc+0x5e>
        int time_zone = isDST() ? config.dstHMS.toSeconds() : config.standardHMS.toSeconds();
   b9b7a:	6820      	ldr	r0, [r4, #0]
   b9b7c:	f7ff fd04 	bl	b9588 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
   b9b80:	b1b8      	cbz	r0, b9bb2 <_ZN16LocalTimeConvert6formatEPKc+0xde>
   b9b82:	f104 0018 	add.w	r0, r4, #24
   b9b86:	f7ff fdc1 	bl	b970c <_ZNK12LocalTimeHMS9toSecondsEv>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", -time_zone/3600, abs(time_zone/60)%60);
   b9b8a:	223c      	movs	r2, #60	; 0x3c
   b9b8c:	fb90 f3f2 	sdiv	r3, r0, r2
   b9b90:	2b00      	cmp	r3, #0
   b9b92:	bfb8      	it	lt
   b9b94:	425b      	neglt	r3, r3
   b9b96:	fbb3 f1f2 	udiv	r1, r3, r2
   b9b9a:	fb02 3311 	mls	r3, r2, r1, r3
   b9b9e:	9300      	str	r3, [sp, #0]
   b9ba0:	4a19      	ldr	r2, [pc, #100]	; (b9c08 <_ZN16LocalTimeConvert6formatEPKc+0x134>)
   b9ba2:	4b1a      	ldr	r3, [pc, #104]	; (b9c0c <_ZN16LocalTimeConvert6formatEPKc+0x138>)
   b9ba4:	fb90 f3f3 	sdiv	r3, r0, r3
   b9ba8:	2110      	movs	r1, #16
   b9baa:	a807      	add	r0, sp, #28
   b9bac:	f003 fb9e 	bl	bd2ec <snprintf>
   b9bb0:	e7bd      	b.n	b9b2e <_ZN16LocalTimeConvert6formatEPKc+0x5a>
        int time_zone = isDST() ? config.dstHMS.toSeconds() : config.standardHMS.toSeconds();
   b9bb2:	f104 0030 	add.w	r0, r4, #48	; 0x30
   b9bb6:	e7e6      	b.n	b9b86 <_ZN16LocalTimeConvert6formatEPKc+0xb2>
        if (format_str[i]=='%' && format_str[i+1]=='Z')
   b9bb8:	2b5a      	cmp	r3, #90	; 0x5a
   b9bba:	d1db      	bne.n	b9b74 <_ZN16LocalTimeConvert6formatEPKc+0xa0>
	inline unsigned int length(void) const {return len;}
   b9bbc:	9d05      	ldr	r5, [sp, #20]
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   b9bbe:	ab18      	add	r3, sp, #96	; 0x60
   b9bc0:	1978      	adds	r0, r7, r5
   b9bc2:	ebaa 0207 	sub.w	r2, sl, r7
   b9bc6:	1cb1      	adds	r1, r6, #2
   b9bc8:	4418      	add	r0, r3
   b9bca:	f007 fb1d 	bl	c1208 <memcpy>
            memcpy(format_str+i, zoneNameStr.c_str(), tzlen);
   b9bce:	9903      	ldr	r1, [sp, #12]
   b9bd0:	462a      	mov	r2, r5
   b9bd2:	e7c8      	b.n	b9b66 <_ZN16LocalTimeConvert6formatEPKc+0x92>
    char buf[50] = {};
   b9bd4:	2100      	movs	r1, #0
   b9bd6:	222e      	movs	r2, #46	; 0x2e
   b9bd8:	a80c      	add	r0, sp, #48	; 0x30
   b9bda:	910b      	str	r1, [sp, #44]	; 0x2c
   b9bdc:	f007 fb3c 	bl	c1258 <memset>
    strftime(buf, sizeof(buf), format_str, &localTimeValue);
   b9be0:	f104 0368 	add.w	r3, r4, #104	; 0x68
   b9be4:	aa18      	add	r2, sp, #96	; 0x60
   b9be6:	2132      	movs	r1, #50	; 0x32
   b9be8:	a80b      	add	r0, sp, #44	; 0x2c
   b9bea:	f003 fbb7 	bl	bd35c <strftime>
    return String(buf);    
   b9bee:	a90b      	add	r1, sp, #44	; 0x2c
   b9bf0:	4640      	mov	r0, r8
   b9bf2:	f005 fef8 	bl	bf9e6 <_ZN6StringC1EPK19__FlashStringHelper>
    String zoneNameStr = zoneName();
   b9bf6:	a803      	add	r0, sp, #12
   b9bf8:	f005 feaa 	bl	bf950 <_ZN6StringD1Ev>
   b9bfc:	e77b      	b.n	b9af6 <_ZN16LocalTimeConvert6formatEPKc+0x22>
   b9bfe:	bf00      	nop
   b9c00:	2003d688 	.word	0x2003d688
   b9c04:	000c4ba7 	.word	0x000c4ba7
   b9c08:	000c4ba9 	.word	0x000c4ba9
   b9c0c:	fffff1f0 	.word	0xfffff1f0

000b9c10 <_ZN9LocalTime8instanceEv>:


//
// LocalTime
//
LocalTime &LocalTime::instance() {
   b9c10:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   b9c12:	4d09      	ldr	r5, [pc, #36]	; (b9c38 <_ZN9LocalTime8instanceEv+0x28>)
   b9c14:	682b      	ldr	r3, [r5, #0]
   b9c16:	b963      	cbnz	r3, b9c32 <_ZN9LocalTime8instanceEv+0x22>
        _instance = new LocalTime();
   b9c18:	2060      	movs	r0, #96	; 0x60
   b9c1a:	f7fa fa3c 	bl	b4096 <_Znwj>
   b9c1e:	4604      	mov	r4, r0
   b9c20:	b130      	cbz	r0, b9c30 <_ZN9LocalTime8instanceEv+0x20>
    LocalTime() {};
   b9c22:	4b06      	ldr	r3, [pc, #24]	; (b9c3c <_ZN9LocalTime8instanceEv+0x2c>)
   b9c24:	f840 3b04 	str.w	r3, [r0], #4
   b9c28:	f7ff fe12 	bl	b9850 <_ZN22LocalTimePosixTimezoneC1Ev>
   b9c2c:	2364      	movs	r3, #100	; 0x64
   b9c2e:	65e3      	str	r3, [r4, #92]	; 0x5c
   b9c30:	602c      	str	r4, [r5, #0]
    }
    return *_instance;
}
   b9c32:	6828      	ldr	r0, [r5, #0]
   b9c34:	bd38      	pop	{r3, r4, r5, pc}
   b9c36:	bf00      	nop
   b9c38:	2003e4cc 	.word	0x2003e4cc
   b9c3c:	000c4bbc 	.word	0x000c4bbc

000b9c40 <_ZN9LocalTime8tmToTimeEP2tm>:
// [static]
time_t LocalTime::tmToTime(struct tm *pTimeInfo) {
#ifndef UNITTEST
    // Particle C standard library does not implement timegm, however the C
    // library is always set to UTC, so this works
    return mktime(pTimeInfo);
   b9c40:	f003 bba4 	b.w	bd38c <mktime>

000b9c44 <_ZN9LocalTime14lastDayOfMonthEii>:
}


// [static]
int LocalTime::lastDayOfMonth(int year, int month) {
    switch(month) {
   b9c44:	3901      	subs	r1, #1
   b9c46:	290b      	cmp	r1, #11
   b9c48:	d815      	bhi.n	b9c76 <_ZN9LocalTime14lastDayOfMonthEii+0x32>
   b9c4a:	e8df f001 	tbb	[pc, r1]
   b9c4e:	0816      	.short	0x0816
   b9c50:	06160616 	.word	0x06160616
   b9c54:	16061616 	.word	0x16061616
   b9c58:	1606      	.short	0x1606
        case 5:
        case 7:
        case 8:
        case 10:
        case 12:
            return 31;
   b9c5a:	201e      	movs	r0, #30
   b9c5c:	4770      	bx	lr

        case 2:
            if ((year % 4) == 0) {
   b9c5e:	0783      	lsls	r3, r0, #30
   b9c60:	d10d      	bne.n	b9c7e <_ZN9LocalTime14lastDayOfMonthEii+0x3a>
                if ((year % 100) == 0) {
   b9c62:	2364      	movs	r3, #100	; 0x64
   b9c64:	fb90 f2f3 	sdiv	r2, r0, r3
   b9c68:	fb03 0012 	mls	r0, r3, r2, r0
                    return 28;
                }
                else {
                    return 29;
   b9c6c:	2800      	cmp	r0, #0
   b9c6e:	bf0c      	ite	eq
   b9c70:	201c      	moveq	r0, #28
   b9c72:	201d      	movne	r0, #29
   b9c74:	4770      	bx	lr
        case 6:
        case 9:
        case 11:
            return 30;
    }
    return 0;
   b9c76:	2000      	movs	r0, #0
   b9c78:	4770      	bx	lr
            return 31;
   b9c7a:	201f      	movs	r0, #31
   b9c7c:	4770      	bx	lr
                return 28;
   b9c7e:	201c      	movs	r0, #28
}
   b9c80:	4770      	bx	lr

000b9c82 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>:
time_t LocalTimeChange::calculate(struct tm *pTimeInfo, LocalTimeHMS tzAdjust) const {
   b9c82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pTimeInfo->tm_mday = 1;
   b9c84:	2301      	movs	r3, #1
   b9c86:	60cb      	str	r3, [r1, #12]
    pTimeInfo->tm_mon = month - 1; // tm_mon is zero-based!
   b9c88:	f990 3004 	ldrsb.w	r3, [r0, #4]
   b9c8c:	3b01      	subs	r3, #1
   b9c8e:	610b      	str	r3, [r1, #16]
    pTimeInfo->tm_hour = pTimeInfo->tm_min = pTimeInfo->tm_sec = 0;
   b9c90:	2300      	movs	r3, #0
   b9c92:	e9c1 3300 	strd	r3, r3, [r1]
time_t LocalTimeChange::calculate(struct tm *pTimeInfo, LocalTimeHMS tzAdjust) const {
   b9c96:	4606      	mov	r6, r0
   b9c98:	460c      	mov	r4, r1
   b9c9a:	4617      	mov	r7, r2
    pTimeInfo->tm_hour = pTimeInfo->tm_min = pTimeInfo->tm_sec = 0;
   b9c9c:	608b      	str	r3, [r1, #8]
    LocalTime::tmToTime(pTimeInfo);
   b9c9e:	4620      	mov	r0, r4
   b9ca0:	f7ff ffce 	bl	b9c40 <_ZN9LocalTime8tmToTimeEP2tm>
    while(pTimeInfo->tm_wday != dayOfWeek) {
   b9ca4:	f996 3006 	ldrsb.w	r3, [r6, #6]
   b9ca8:	69a2      	ldr	r2, [r4, #24]
   b9caa:	429a      	cmp	r2, r3
   b9cac:	d003      	beq.n	b9cb6 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x34>
        pTimeInfo->tm_mday++;
   b9cae:	68e3      	ldr	r3, [r4, #12]
   b9cb0:	3301      	adds	r3, #1
   b9cb2:	60e3      	str	r3, [r4, #12]
        LocalTime::tmToTime(pTimeInfo);
   b9cb4:	e7f3      	b.n	b9c9e <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x1c>
    if (week != 1) {
   b9cb6:	f996 5005 	ldrsb.w	r5, [r6, #5]
   b9cba:	2d01      	cmp	r5, #1
   b9cbc:	d013      	beq.n	b9ce6 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS+0x64>
        pTimeInfo->tm_mday += (week - 1) * 7;
   b9cbe:	68e3      	ldr	r3, [r4, #12]
        if (pTimeInfo->tm_mday > LocalTime::lastDayOfMonth(pTimeInfo->tm_year + 1900, month)) {
   b9cc0:	6960      	ldr	r0, [r4, #20]
        pTimeInfo->tm_mday += (week - 1) * 7;
   b9cc2:	3d01      	subs	r5, #1
   b9cc4:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
   b9cc8:	441d      	add	r5, r3
   b9cca:	60e5      	str	r5, [r4, #12]
        if (pTimeInfo->tm_mday > LocalTime::lastDayOfMonth(pTimeInfo->tm_year + 1900, month)) {
   b9ccc:	f996 1004 	ldrsb.w	r1, [r6, #4]
   b9cd0:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   b9cd4:	f7ff ffb6 	bl	b9c44 <_ZN9LocalTime14lastDayOfMonthEii>
   b9cd8:	4285      	cmp	r5, r0
            pTimeInfo->tm_mday -= 7;
   b9cda:	bfc4      	itt	gt
   b9cdc:	3d07      	subgt	r5, #7
   b9cde:	60e5      	strgt	r5, [r4, #12]
        LocalTime::tmToTime(pTimeInfo);        
   b9ce0:	4620      	mov	r0, r4
   b9ce2:	f7ff ffad 	bl	b9c40 <_ZN9LocalTime8tmToTimeEP2tm>
    hms.toTimeInfo(pTimeInfo);
   b9ce6:	4621      	mov	r1, r4
   b9ce8:	f106 0008 	add.w	r0, r6, #8
   b9cec:	f7ff fd3c 	bl	b9768 <_ZNK12LocalTimeHMS10toTimeInfoEP2tm>
    tzAdjust.adjustTimeInfo(pTimeInfo);
   b9cf0:	4638      	mov	r0, r7
   b9cf2:	f7ff fd46 	bl	b9782 <_ZNK12LocalTimeHMS14adjustTimeInfoEP2tm>
    return mktime(pTimeInfo);
   b9cf6:	4620      	mov	r0, r4
}
   b9cf8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return mktime(pTimeInfo);
   b9cfc:	f003 bb46 	b.w	bd38c <mktime>

000b9d00 <_ZN16LocalTimeConvert7convertEv>:
void LocalTimeConvert::convert() {
   b9d00:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!config.isValid()) {
   b9d02:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
void LocalTimeConvert::convert() {
   b9d06:	b085      	sub	sp, #20
   b9d08:	4604      	mov	r4, r0
    if (!config.isValid()) {
   b9d0a:	b92b      	cbnz	r3, b9d18 <_ZN16LocalTimeConvert7convertEv+0x18>
        config = LocalTime::instance().getConfig();
   b9d0c:	f7ff ff80 	bl	b9c10 <_ZN9LocalTime8instanceEv>
   b9d10:	1d01      	adds	r1, r0, #4
   b9d12:	1d20      	adds	r0, r4, #4
   b9d14:	f7ff fc4f 	bl	b95b6 <_ZN22LocalTimePosixTimezoneaSERKS_.isra.0>
    if (config.hasDST()) {
   b9d18:	f994 303f 	ldrsb.w	r3, [r4, #63]	; 0x3f
   b9d1c:	2b00      	cmp	r3, #0
   b9d1e:	d065      	beq.n	b9dec <_ZN16LocalTimeConvert7convertEv+0xec>
        LocalTime::timeToTm(time, &dstStartTimeInfo);
   b9d20:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   b9d24:	f104 0798 	add.w	r7, r4, #152	; 0x98
    localtime_r(&time, pTimeInfo);
   b9d28:	4639      	mov	r1, r7
   b9d2a:	a802      	add	r0, sp, #8
        standardStartTimeInfo = dstStartTimeInfo;
   b9d2c:	463e      	mov	r6, r7
   b9d2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    localtime_r(&time, pTimeInfo);
   b9d32:	f003 fb1b 	bl	bd36c <localtime_r>
        standardStartTimeInfo = dstStartTimeInfo;
   b9d36:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b9d38:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
   b9d3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b9d3e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b9d40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b9d42:	6833      	ldr	r3, [r6, #0]
   b9d44:	602b      	str	r3, [r5, #0]
        dstStart = config.dstStart.calculate(&dstStartTimeInfo, config.standardHMS);
   b9d46:	f104 0130 	add.w	r1, r4, #48	; 0x30
   b9d4a:	a802      	add	r0, sp, #8
   b9d4c:	f7ff fc86 	bl	b965c <_ZN12LocalTimeHMSC1ERKS_>
   b9d50:	aa02      	add	r2, sp, #8
   b9d52:	4639      	mov	r1, r7
   b9d54:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b9d58:	f7ff ff93 	bl	b9c82 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>
   b9d5c:	e9c4 0124 	strd	r0, r1, [r4, #144]	; 0x90
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   b9d60:	f104 0118 	add.w	r1, r4, #24
   b9d64:	a802      	add	r0, sp, #8
   b9d66:	f7ff fc79 	bl	b965c <_ZN12LocalTimeHMSC1ERKS_>
   b9d6a:	aa02      	add	r2, sp, #8
   b9d6c:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
   b9d70:	f104 0048 	add.w	r0, r4, #72	; 0x48
   b9d74:	f7ff ff85 	bl	b9c82 <_ZNK15LocalTimeChange9calculateEP2tm12LocalTimeHMS>
        if (dstStart < standardStart) {
   b9d78:	e9d4 6524 	ldrd	r6, r5, [r4, #144]	; 0x90
   b9d7c:	4286      	cmp	r6, r0
   b9d7e:	eb75 0301 	sbcs.w	r3, r5, r1
        standardStart = config.standardStart.calculate(&standardStartTimeInfo, config.dstHMS);
   b9d82:	e9c4 0130 	strd	r0, r1, [r4, #192]	; 0xc0
        if (dstStart < standardStart) {
   b9d86:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   b9d8a:	da23      	bge.n	b9dd4 <_ZN16LocalTimeConvert7convertEv+0xd4>
            if (time < dstStart) {
   b9d8c:	42b2      	cmp	r2, r6
   b9d8e:	eb73 0505 	sbcs.w	r5, r3, r5
   b9d92:	da19      	bge.n	b9dc8 <_ZN16LocalTimeConvert7convertEv+0xc8>
                position = Position::BEFORE_DST;
   b9d94:	2300      	movs	r3, #0
        position = Position::NO_DST;
   b9d96:	6023      	str	r3, [r4, #0]
    if (!isDST()) {
   b9d98:	6820      	ldr	r0, [r4, #0]
   b9d9a:	f7ff fbf5 	bl	b9588 <_ZNK16LocalTimeConvert5isDSTEv.isra.0>
        LocalTime::timeToTm(time - config.standardHMS.toSeconds(), &localTimeValue);
   b9d9e:	f104 0168 	add.w	r1, r4, #104	; 0x68
   b9da2:	e9d4 5618 	ldrd	r5, r6, [r4, #96]	; 0x60
   b9da6:	9101      	str	r1, [sp, #4]
    if (!isDST()) {
   b9da8:	bb10      	cbnz	r0, b9df0 <_ZN16LocalTimeConvert7convertEv+0xf0>
        LocalTime::timeToTm(time - config.standardHMS.toSeconds(), &localTimeValue);
   b9daa:	f104 0030 	add.w	r0, r4, #48	; 0x30
        LocalTime::timeToTm(time - config.dstHMS.toSeconds(), &localTimeValue);
   b9dae:	f7ff fcad 	bl	b970c <_ZNK12LocalTimeHMS9toSecondsEv>
   b9db2:	1a2d      	subs	r5, r5, r0
   b9db4:	eb66 70e0 	sbc.w	r0, r6, r0, asr #31
   b9db8:	e9cd 5002 	strd	r5, r0, [sp, #8]
    localtime_r(&time, pTimeInfo);
   b9dbc:	9901      	ldr	r1, [sp, #4]
   b9dbe:	a802      	add	r0, sp, #8
   b9dc0:	f003 fad4 	bl	bd36c <localtime_r>
}
   b9dc4:	b005      	add	sp, #20
   b9dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            else if (time < standardStart) {
   b9dc8:	4282      	cmp	r2, r0
   b9dca:	418b      	sbcs	r3, r1
                position = Position::IN_DST;
   b9dcc:	bfb4      	ite	lt
   b9dce:	2301      	movlt	r3, #1
                position = Position::AFTER_DST;
   b9dd0:	2302      	movge	r3, #2
   b9dd2:	e7e0      	b.n	b9d96 <_ZN16LocalTimeConvert7convertEv+0x96>
            if (time < standardStart) {
   b9dd4:	4282      	cmp	r2, r0
   b9dd6:	eb73 0101 	sbcs.w	r1, r3, r1
   b9dda:	da01      	bge.n	b9de0 <_ZN16LocalTimeConvert7convertEv+0xe0>
                position = Position::BEFORE_STANDARD;
   b9ddc:	2303      	movs	r3, #3
   b9dde:	e7da      	b.n	b9d96 <_ZN16LocalTimeConvert7convertEv+0x96>
            else if (time < dstStart) {
   b9de0:	42b2      	cmp	r2, r6
   b9de2:	41ab      	sbcs	r3, r5
                position = Position::IN_STANDARD;
   b9de4:	bfb4      	ite	lt
   b9de6:	2304      	movlt	r3, #4
                position = Position::AFTER_STANDARD;
   b9de8:	2305      	movge	r3, #5
   b9dea:	e7d4      	b.n	b9d96 <_ZN16LocalTimeConvert7convertEv+0x96>
        position = Position::NO_DST;
   b9dec:	2306      	movs	r3, #6
   b9dee:	e7d2      	b.n	b9d96 <_ZN16LocalTimeConvert7convertEv+0x96>
        LocalTime::timeToTm(time - config.dstHMS.toSeconds(), &localTimeValue);
   b9df0:	f104 0018 	add.w	r0, r4, #24
   b9df4:	e7db      	b.n	b9dae <_ZN16LocalTimeConvert7convertEv+0xae>

000b9df6 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b9df6:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b9df8:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b9dfa:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b9dfc:	4668      	mov	r0, sp
   b9dfe:	f7ff fc24 	bl	b964a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b9e02:	466a      	mov	r2, sp
   b9e04:	4629      	mov	r1, r5
   b9e06:	4620      	mov	r0, r4
   b9e08:	f004 f9d2 	bl	be1b0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b9e0c:	a801      	add	r0, sp, #4
   b9e0e:	f7fa fc47 	bl	b46a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9e12:	4620      	mov	r0, r4
   b9e14:	b003      	add	sp, #12
   b9e16:	bd30      	pop	{r4, r5, pc}

000b9e18 <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
   b9e18:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b9e1a:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b9e1c:	4604      	mov	r4, r0
   b9e1e:	4668      	mov	r0, sp
   b9e20:	f7ff fc13 	bl	b964a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b9e24:	466a      	mov	r2, sp
   b9e26:	4629      	mov	r1, r5
   b9e28:	4620      	mov	r0, r4
   b9e2a:	f004 f99d 	bl	be168 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b9e2e:	a801      	add	r0, sp, #4
   b9e30:	f7fa fc36 	bl	b46a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9e34:	4620      	mov	r0, r4
   b9e36:	b003      	add	sp, #12
   b9e38:	bd30      	pop	{r4, r5, pc}

000b9e3a <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b9e3a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b9e3c:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b9e3e:	4604      	mov	r4, r0
   b9e40:	4668      	mov	r0, sp
   b9e42:	f7ff fc02 	bl	b964a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b9e46:	466a      	mov	r2, sp
   b9e48:	4629      	mov	r1, r5
   b9e4a:	4620      	mov	r0, r4
   b9e4c:	f004 f935 	bl	be0ba <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b9e50:	a801      	add	r0, sp, #4
   b9e52:	f7fa fc25 	bl	b46a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b9e56:	4620      	mov	r0, r4
   b9e58:	b003      	add	sp, #12
   b9e5a:	bd30      	pop	{r4, r5, pc}

000b9e5c <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   b9e5c:	4770      	bx	lr

000b9e5e <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   b9e5e:	b510      	push	{r4, lr}
}
   b9e60:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   b9e62:	4604      	mov	r4, r0
}
   b9e64:	f7fa f91b 	bl	b409e <_ZdlPvj>
   b9e68:	4620      	mov	r0, r4
   b9e6a:	bd10      	pop	{r4, pc}

000b9e6c <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   b9e6c:	6803      	ldr	r3, [r0, #0]
   b9e6e:	b2c9      	uxtb	r1, r1
   b9e70:	689b      	ldr	r3, [r3, #8]
   b9e72:	4718      	bx	r3

000b9e74 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   b9e74:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   b9e76:	4d03      	ldr	r5, [pc, #12]	; (b9e84 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   b9e78:	e9c0 2302 	strd	r2, r3, [r0, #8]
   b9e7c:	e9c0 5100 	strd	r5, r1, [r0]
}
   b9e80:	bd30      	pop	{r4, r5, pc}
   b9e82:	bf00      	nop
   b9e84:	000c4bfc 	.word	0x000c4bfc

000b9e88 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   b9e88:	6840      	ldr	r0, [r0, #4]
   b9e8a:	f003 bfa1 	b.w	bddd0 <_ZN7TwoWire5beginEv>

000b9e8e <_ZNSt10lock_guardIR7TwoWireED1Ev>:

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b9e8e:	b510      	push	{r4, lr}
   b9e90:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   b9e92:	6800      	ldr	r0, [r0, #0]
   b9e94:	f003 fff7 	bl	bde86 <_ZN7TwoWire6unlockEv>
   b9e98:	4620      	mov	r0, r4
   b9e9a:	bd10      	pop	{r4, pc}

000b9e9c <_ZN6MB85RC8readDataEjPhj>:

	return true;
}


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b9e9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b9ea0:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b9ea2:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9ea4:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   b9ea6:	460d      	mov	r5, r1
   b9ea8:	4616      	mov	r6, r2
   b9eaa:	461f      	mov	r7, r3
      { _M_device.lock(); }
   b9eac:	f003 ffe2 	bl	bde74 <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   b9eb0:	b1a7      	cbz	r7, b9edc <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b9eb2:	68e1      	ldr	r1, [r4, #12]
   b9eb4:	6860      	ldr	r0, [r4, #4]
   b9eb6:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b9eba:	f003 ffbc 	bl	bde36 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b9ebe:	0a29      	lsrs	r1, r5, #8
   b9ec0:	6860      	ldr	r0, [r4, #4]
   b9ec2:	f7ff ffd3 	bl	b9e6c <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b9ec6:	4629      	mov	r1, r5
   b9ec8:	6860      	ldr	r0, [r4, #4]
   b9eca:	f7ff ffcf 	bl	b9e6c <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   b9ece:	6860      	ldr	r0, [r4, #4]
   b9ed0:	2100      	movs	r1, #0
   b9ed2:	f003 ffcb 	bl	bde6c <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b9ed6:	b148      	cbz	r0, b9eec <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   b9ed8:	2400      	movs	r4, #0
   b9eda:	e000      	b.n	b9ede <_ZN6MB85RC8readDataEjPhj+0x42>
   b9edc:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b9ede:	a801      	add	r0, sp, #4
   b9ee0:	f7ff ffd5 	bl	b9e8e <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   b9ee4:	4620      	mov	r0, r4
   b9ee6:	b003      	add	sp, #12
   b9ee8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   b9eec:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   b9eee:	7b21      	ldrb	r1, [r4, #12]
   b9ef0:	6860      	ldr	r0, [r4, #4]
   b9ef2:	46b8      	mov	r8, r7
   b9ef4:	bf28      	it	cs
   b9ef6:	f04f 0820 	movcs.w	r8, #32
   b9efa:	2301      	movs	r3, #1
   b9efc:	4642      	mov	r2, r8
   b9efe:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b9f02:	f003 ff82 	bl	bde0a <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   b9f06:	f006 fb6d 	bl	c05e4 <_Z19__fetch_global_Wirev>
   b9f0a:	6803      	ldr	r3, [r0, #0]
   b9f0c:	691b      	ldr	r3, [r3, #16]
   b9f0e:	4798      	blx	r3
   b9f10:	4540      	cmp	r0, r8
   b9f12:	dbe1      	blt.n	b9ed8 <_ZN6MB85RC8readDataEjPhj+0x3c>
   b9f14:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   b9f18:	f006 fb64 	bl	c05e4 <_Z19__fetch_global_Wirev>
   b9f1c:	6803      	ldr	r3, [r0, #0]
   b9f1e:	695b      	ldr	r3, [r3, #20]
   b9f20:	4798      	blx	r3
   b9f22:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   b9f26:	454e      	cmp	r6, r9
   b9f28:	d1f6      	bne.n	b9f18 <_ZN6MB85RC8readDataEjPhj+0x7c>
				framAddr++;
   b9f2a:	4445      	add	r5, r8
				dataLen--;
   b9f2c:	eba7 0708 	sub.w	r7, r7, r8
   b9f30:	e7be      	b.n	b9eb0 <_ZN6MB85RC8readDataEjPhj+0x14>

000b9f32 <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b9f32:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9f36:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   b9f38:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9f3a:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   b9f3c:	460e      	mov	r6, r1
   b9f3e:	4690      	mov	r8, r2
   b9f40:	461d      	mov	r5, r3
      { _M_device.lock(); }
   b9f42:	f003 ff97 	bl	bde74 <_ZN7TwoWire4lockEv>
   b9f46:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   b9f4a:	f1b9 0f00 	cmp.w	r9, #0
   b9f4e:	d02a      	beq.n	b9fa6 <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   b9f50:	b34d      	cbz	r5, b9fa6 <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   b9f52:	68e1      	ldr	r1, [r4, #12]
   b9f54:	6860      	ldr	r0, [r4, #4]
   b9f56:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   b9f5a:	f003 ff6c 	bl	bde36 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   b9f5e:	0a31      	lsrs	r1, r6, #8
   b9f60:	6860      	ldr	r0, [r4, #4]
   b9f62:	f7ff ff83 	bl	b9e6c <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   b9f66:	6860      	ldr	r0, [r4, #4]
   b9f68:	4631      	mov	r1, r6
   b9f6a:	f7ff ff7f 	bl	b9e6c <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b9f6e:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   b9f72:	4647      	mov	r7, r8
   b9f74:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   b9f78:	6860      	ldr	r0, [r4, #4]
   b9f7a:	f817 1b01 	ldrb.w	r1, [r7], #1
   b9f7e:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   b9f80:	3d01      	subs	r5, #1
				wire.write(*data);
   b9f82:	689b      	ldr	r3, [r3, #8]
   b9f84:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b9f86:	4555      	cmp	r5, sl
   b9f88:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   b9f8c:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   b9f8e:	d001      	beq.n	b9f94 <_ZN6MB85RC9writeDataEjPKhj+0x62>
   b9f90:	2d00      	cmp	r5, #0
   b9f92:	d1f1      	bne.n	b9f78 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   b9f94:	6860      	ldr	r0, [r4, #4]
   b9f96:	2101      	movs	r1, #1
   b9f98:	f003 ff68 	bl	bde6c <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   b9f9c:	2800      	cmp	r0, #0
   b9f9e:	d0d7      	beq.n	b9f50 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   b9fa0:	f04f 0900 	mov.w	r9, #0
   b9fa4:	e7d1      	b.n	b9f4a <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   b9fa6:	a801      	add	r0, sp, #4
   b9fa8:	f7ff ff71 	bl	b9e8e <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   b9fac:	4648      	mov	r0, r9
   b9fae:	b003      	add	sp, #12
   b9fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b9fb4 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b9fb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9fb8:	b08b      	sub	sp, #44	; 0x2c
   b9fba:	460e      	mov	r6, r1
   b9fbc:	4615      	mov	r5, r2
   b9fbe:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   b9fc0:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b9fc2:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b9fc4:	461c      	mov	r4, r3
      { _M_device.lock(); }
   b9fc6:	f003 ff55 	bl	bde74 <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   b9fca:	42ae      	cmp	r6, r5
   b9fcc:	d229      	bcs.n	ba022 <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   b9fce:	4426      	add	r6, r4
			framAddrTo += numBytes;
   b9fd0:	4425      	add	r5, r4
			while(numBytes > 0) {
   b9fd2:	b18c      	cbz	r4, b9ff8 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   b9fd4:	2c1e      	cmp	r4, #30
   b9fd6:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   b9fd8:	f8d8 3000 	ldr.w	r3, [r8]
   b9fdc:	bf28      	it	cs
   b9fde:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   b9fe0:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   b9fe2:	f8d3 9008 	ldr.w	r9, [r3, #8]
   b9fe6:	aa02      	add	r2, sp, #8
   b9fe8:	463b      	mov	r3, r7
   b9fea:	4631      	mov	r1, r6
   b9fec:	4640      	mov	r0, r8
				framAddrTo -= count;
   b9fee:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   b9ff0:	47c8      	blx	r9
				if (!result) {
   b9ff2:	b948      	cbnz	r0, ba008 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   b9ff4:	2400      	movs	r4, #0
   b9ff6:	e000      	b.n	b9ffa <_ZN6MB85RC8moveDataEjjj+0x46>
   b9ff8:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   b9ffa:	a801      	add	r0, sp, #4
   b9ffc:	f7ff ff47 	bl	b9e8e <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   ba000:	4620      	mov	r0, r4
   ba002:	b00b      	add	sp, #44	; 0x2c
   ba004:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   ba008:	f8d8 3000 	ldr.w	r3, [r8]
   ba00c:	aa02      	add	r2, sp, #8
   ba00e:	f8d3 900c 	ldr.w	r9, [r3, #12]
   ba012:	4629      	mov	r1, r5
   ba014:	463b      	mov	r3, r7
   ba016:	4640      	mov	r0, r8
   ba018:	47c8      	blx	r9
				if (!result) {
   ba01a:	2800      	cmp	r0, #0
   ba01c:	d0ea      	beq.n	b9ff4 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   ba01e:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   ba020:	e7d7      	b.n	b9fd2 <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   ba022:	d9e9      	bls.n	b9ff8 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   ba024:	2c00      	cmp	r4, #0
   ba026:	d0e7      	beq.n	b9ff8 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   ba028:	f8d8 3000 	ldr.w	r3, [r8]
   ba02c:	2c1e      	cmp	r4, #30
   ba02e:	4627      	mov	r7, r4
   ba030:	bf28      	it	cs
   ba032:	271e      	movcs	r7, #30
   ba034:	f8d3 9008 	ldr.w	r9, [r3, #8]
   ba038:	aa02      	add	r2, sp, #8
   ba03a:	463b      	mov	r3, r7
   ba03c:	4631      	mov	r1, r6
   ba03e:	4640      	mov	r0, r8
   ba040:	47c8      	blx	r9
				if (!result) {
   ba042:	2800      	cmp	r0, #0
   ba044:	d0d6      	beq.n	b9ff4 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   ba046:	f8d8 3000 	ldr.w	r3, [r8]
   ba04a:	aa02      	add	r2, sp, #8
   ba04c:	f8d3 900c 	ldr.w	r9, [r3, #12]
   ba050:	4629      	mov	r1, r5
   ba052:	463b      	mov	r3, r7
   ba054:	4640      	mov	r0, r8
   ba056:	47c8      	blx	r9
				if (!result) {
   ba058:	2800      	cmp	r0, #0
   ba05a:	d0cb      	beq.n	b9ff4 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   ba05c:	443e      	add	r6, r7
				framAddrTo += count;
   ba05e:	443d      	add	r5, r7
				numBytes -= count;
   ba060:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   ba062:	e7df      	b.n	ba024 <_ZN6MB85RC8moveDataEjjj+0x70>

000ba064 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E9_M_invokeERKSt9_Any_dataObOS1_SC_OS3_>:

        // This message is monitored by the automated test tool. If you edit this, change that too.
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);

        if (BackgroundPublishRK::instance().publish(curEvent->eventName, curEvent->eventData, curEvent->flags, 
            [this](bool succeeded, const char *eventName, const char *eventData, const void *context) {
   ba064:	6803      	ldr	r3, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   ba066:	780a      	ldrb	r2, [r1, #0]
    publishSuccess = succeeded;
   ba068:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
    publishComplete = true;
   ba06c:	2101      	movs	r1, #1
   ba06e:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
      }
   ba072:	4770      	bx	lr

000ba074 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   ba074:	b410      	push	{r4}
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   ba076:	6842      	ldr	r2, [r0, #4]
   ba078:	4603      	mov	r3, r0
   ba07a:	1054      	asrs	r4, r2, #1
   ba07c:	eb01 0062 	add.w	r0, r1, r2, asr #1
   ba080:	07d2      	lsls	r2, r2, #31
   ba082:	bf48      	it	mi
   ba084:	590a      	ldrmi	r2, [r1, r4]
   ba086:	681b      	ldr	r3, [r3, #0]
      }
   ba088:	f85d 4b04 	ldr.w	r4, [sp], #4
   ba08c:	bf48      	it	mi
   ba08e:	58d3      	ldrmi	r3, [r2, r3]
   ba090:	4718      	bx	r3

000ba092 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   ba092:	2a01      	cmp	r2, #1
   ba094:	d102      	bne.n	ba09c <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   ba096:	6001      	str	r1, [r0, #0]
      }
   ba098:	2000      	movs	r0, #0
   ba09a:	4770      	bx	lr
	  switch (__op)
   ba09c:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   ba09e:	bf04      	itt	eq
   ba0a0:	e9d1 2300 	ldrdeq	r2, r3, [r1]
   ba0a4:	e9c0 2300 	strdeq	r2, r3, [r0]
	      break;
   ba0a8:	e7f6      	b.n	ba098 <_ZNSt17_Function_handlerIFvR17PublishQueuePosixEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x6>

000ba0aa <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
   ba0aa:	2a01      	cmp	r2, #1
   ba0ac:	d102      	bne.n	ba0b4 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   ba0ae:	6001      	str	r1, [r0, #0]
      }
   ba0b0:	2000      	movs	r0, #0
   ba0b2:	4770      	bx	lr
	  switch (__op)
   ba0b4:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   ba0b6:	bf04      	itt	eq
   ba0b8:	680b      	ldreq	r3, [r1, #0]
   ba0ba:	6003      	streq	r3, [r0, #0]
	      break;
   ba0bc:	e7f8      	b.n	ba0b0 <_ZNSt17_Function_handlerIFvbPKcS1_PKvEZN17PublishQueuePosix9stateWaitEvEUlbS1_S1_S3_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x6>

000ba0be <_ZN17PublishQueuePosix4lockEv>:
     * @brief Lock the queue protection mutex
     * 
     * This is done internally; you probably won't need to call this yourself.
     * It needs to be public for the WITH_LOCK() macro to work properly.
     */
    void lock() { os_mutex_recursive_lock(mutex); };
   ba0be:	6f40      	ldr	r0, [r0, #116]	; 0x74
   ba0c0:	f002 bd10 	b.w	bcae4 <os_mutex_recursive_lock>

000ba0c4 <_ZN17PublishQueuePosix4loopEv>:
    if (stateHandler) {
   ba0c4:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
void PublishQueuePosix::loop() {
   ba0c8:	4601      	mov	r1, r0
    if (stateHandler) {
   ba0ca:	b11b      	cbz	r3, ba0d4 <_ZN17PublishQueuePosix4loopEv+0x10>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   ba0cc:	f8d0 30cc 	ldr.w	r3, [r0, #204]	; 0xcc
   ba0d0:	30c0      	adds	r0, #192	; 0xc0
   ba0d2:	4718      	bx	r3
}
   ba0d4:	4770      	bx	lr
	...

000ba0d8 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>:
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   ba0d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        eventData = "";
   ba0da:	4d12      	ldr	r5, [pc, #72]	; (ba124 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x4c>)
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   ba0dc:	4608      	mov	r0, r1
        eventData = "";
   ba0de:	2a00      	cmp	r2, #0
   ba0e0:	bf18      	it	ne
   ba0e2:	4615      	movne	r5, r2
PublishQueueEvent *PublishQueuePosix::newRamEvent(const char *eventName, const char *eventData, PublishFlags flags) {
   ba0e4:	460e      	mov	r6, r1
   ba0e6:	461f      	mov	r7, r3
    if (strlen(eventName) > particle::protocol::MAX_EVENT_NAME_LENGTH) {
   ba0e8:	f007 f981 	bl	c13ee <strlen>
   ba0ec:	2840      	cmp	r0, #64	; 0x40
   ba0ee:	d816      	bhi.n	ba11e <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x46>
    if (strlen(eventData) > particle::protocol::MAX_EVENT_DATA_LENGTH) {
   ba0f0:	4628      	mov	r0, r5
   ba0f2:	f007 f97c 	bl	c13ee <strlen>
   ba0f6:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   ba0fa:	d810      	bhi.n	ba11e <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x46>
    event = (PublishQueueEvent *) new char[sizeof(PublishQueueEvent) + strlen(eventData)];
   ba0fc:	3043      	adds	r0, #67	; 0x43
   ba0fe:	f7f9 ffcc 	bl	b409a <_Znaj>
    if (event) {
   ba102:	4604      	mov	r4, r0
   ba104:	b148      	cbz	r0, ba11a <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x42>
        strcpy(event->eventName, eventName);
   ba106:	4631      	mov	r1, r6
        event->flags = flags;
   ba108:	f800 7b01 	strb.w	r7, [r0], #1
        strcpy(event->eventName, eventName);
   ba10c:	f007 f949 	bl	c13a2 <strcpy>
        strcpy(event->eventData, eventData);
   ba110:	4629      	mov	r1, r5
   ba112:	f104 0042 	add.w	r0, r4, #66	; 0x42
   ba116:	f007 f944 	bl	c13a2 <strcpy>
}
   ba11a:	4620      	mov	r0, r4
   ba11c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
   ba11e:	2400      	movs	r4, #0
   ba120:	e7fb      	b.n	ba11a <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE+0x42>
   ba122:	bf00      	nop
   ba124:	000c5454 	.word	0x000c5454

000ba128 <_ZN17PublishQueuePosix13readQueueFileEi>:
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   ba128:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba12a:	b09f      	sub	sp, #124	; 0x7c
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   ba12c:	460a      	mov	r2, r1
   ba12e:	2300      	movs	r3, #0
PublishQueueEvent *PublishQueuePosix::readQueueFile(int fileNum) {
   ba130:	460e      	mov	r6, r1
    int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDONLY);
   ba132:	1d01      	adds	r1, r0, #4
   ba134:	a808      	add	r0, sp, #32
   ba136:	f002 f885 	bl	bc244 <_ZN14SequentialFile17getPathForFileNumEiPKc>
   ba13a:	9808      	ldr	r0, [sp, #32]
   ba13c:	2100      	movs	r1, #0
   ba13e:	f008 f8eb 	bl	c2318 <open>
   ba142:	4605      	mov	r5, r0
   ba144:	a808      	add	r0, sp, #32
   ba146:	f005 fc03 	bl	bf950 <_ZN6StringD1Ev>
    if (fd) {
   ba14a:	2d00      	cmp	r5, #0
   ba14c:	d060      	beq.n	ba210 <_ZN17PublishQueuePosix13readQueueFileEi+0xe8>
        fstat(fd, &sb);
   ba14e:	a908      	add	r1, sp, #32
   ba150:	4628      	mov	r0, r5
   ba152:	f008 f8cf 	bl	c22f4 <fstat>
        _log.trace("fileNum=%d size=%ld", fileNum, sb.st_size);
   ba156:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   ba158:	492e      	ldr	r1, [pc, #184]	; (ba214 <_ZN17PublishQueuePosix13readQueueFileEi+0xec>)
   ba15a:	482f      	ldr	r0, [pc, #188]	; (ba218 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   ba15c:	4632      	mov	r2, r6
   ba15e:	f7fd fc23 	bl	b79a8 <_ZNK5spark6Logger5traceEPKcz>
        lseek(fd, 0, SEEK_SET);
   ba162:	2200      	movs	r2, #0
   ba164:	4611      	mov	r1, r2
   ba166:	4628      	mov	r0, r5
   ba168:	f008 f8cc 	bl	c2304 <lseek>
        read(fd, &hdr, sizeof(PublishQueueFileHeader));
   ba16c:	2208      	movs	r2, #8
   ba16e:	a906      	add	r1, sp, #24
   ba170:	4628      	mov	r0, r5
   ba172:	f008 f8e5 	bl	c2340 <read>
        if (sb.st_size >= (off_t)(sizeof(PublishQueueFileHeader) + sizeof(PublishQueueEvent)) &&
   ba176:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   ba178:	2f4a      	cmp	r7, #74	; 0x4a
   ba17a:	dd39      	ble.n	ba1f0 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
   ba17c:	4b27      	ldr	r3, [pc, #156]	; (ba21c <_ZN17PublishQueuePosix13readQueueFileEi+0xf4>)
   ba17e:	9a06      	ldr	r2, [sp, #24]
   ba180:	429a      	cmp	r2, r3
   ba182:	d135      	bne.n	ba1f0 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            hdr.headerSize == sizeof(PublishQueueFileHeader) &&
   ba184:	4b26      	ldr	r3, [pc, #152]	; (ba220 <_ZN17PublishQueuePosix13readQueueFileEi+0xf8>)
   ba186:	9a07      	ldr	r2, [sp, #28]
   ba188:	429a      	cmp	r2, r3
   ba18a:	d131      	bne.n	ba1f0 <_ZN17PublishQueuePosix13readQueueFileEi+0xc8>
            size_t eventSize = sb.st_size - sizeof(PublishQueueFileHeader);
   ba18c:	f1a7 0208 	sub.w	r2, r7, #8
            result = (PublishQueueEvent *)new char[eventSize];
   ba190:	4610      	mov	r0, r2
   ba192:	9205      	str	r2, [sp, #20]
   ba194:	f7f9 ff81 	bl	b409a <_Znaj>
            if (result) {
   ba198:	4604      	mov	r4, r0
   ba19a:	b1c0      	cbz	r0, ba1ce <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   ba19c:	4427      	add	r7, r4
                read(fd, result, eventSize);
   ba19e:	4601      	mov	r1, r0
   ba1a0:	9a05      	ldr	r2, [sp, #20]
   ba1a2:	4628      	mov	r0, r5
   ba1a4:	f008 f8cc 	bl	c2340 <read>
                if (((char *)result)[eventSize - 1] == 0 && strlen(result->eventName) < (sizeof(PublishQueueEvent::eventName) - 1)) {
   ba1a8:	f817 3c09 	ldrb.w	r3, [r7, #-9]
   ba1ac:	b9ab      	cbnz	r3, ba1da <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
   ba1ae:	1c63      	adds	r3, r4, #1
   ba1b0:	4618      	mov	r0, r3
   ba1b2:	9305      	str	r3, [sp, #20]
   ba1b4:	f007 f91b 	bl	c13ee <strlen>
   ba1b8:	283f      	cmp	r0, #63	; 0x3f
   ba1ba:	9b05      	ldr	r3, [sp, #20]
   ba1bc:	d80d      	bhi.n	ba1da <_ZN17PublishQueuePosix13readQueueFileEi+0xb2>
                    _log.trace("readQueueFile %d event=%s data=%s", fileNum, result->eventName, result->eventData);
   ba1be:	f104 0242 	add.w	r2, r4, #66	; 0x42
   ba1c2:	9200      	str	r2, [sp, #0]
   ba1c4:	4917      	ldr	r1, [pc, #92]	; (ba224 <_ZN17PublishQueuePosix13readQueueFileEi+0xfc>)
   ba1c6:	4814      	ldr	r0, [pc, #80]	; (ba218 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   ba1c8:	4632      	mov	r2, r6
   ba1ca:	f7fd fbed 	bl	b79a8 <_ZNK5spark6Logger5traceEPKcz>
        close(fd);
   ba1ce:	4628      	mov	r0, r5
   ba1d0:	f008 f888 	bl	c22e4 <close>
}
   ba1d4:	4620      	mov	r0, r4
   ba1d6:	b01f      	add	sp, #124	; 0x7c
   ba1d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    _log.trace("readQueueFile %d corrupted event name or data", fileNum);
   ba1da:	4913      	ldr	r1, [pc, #76]	; (ba228 <_ZN17PublishQueuePosix13readQueueFileEi+0x100>)
   ba1dc:	480e      	ldr	r0, [pc, #56]	; (ba218 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   ba1de:	4632      	mov	r2, r6
   ba1e0:	f7fd fbe2 	bl	b79a8 <_ZNK5spark6Logger5traceEPKcz>
                    delete result;
   ba1e4:	2143      	movs	r1, #67	; 0x43
   ba1e6:	4620      	mov	r0, r4
   ba1e8:	f7f9 ff59 	bl	b409e <_ZdlPvj>
    PublishQueueEvent *result = NULL;
   ba1ec:	2400      	movs	r4, #0
   ba1ee:	e7ee      	b.n	ba1ce <_ZN17PublishQueuePosix13readQueueFileEi+0xa6>
            _log.trace("readQueueFile %d bad magic=%08lx version=%u headerSize=%u nameLen=%u", fileNum, hdr.magic, hdr.version, hdr.headerSize, hdr.nameLen);
   ba1f0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   ba1f4:	9302      	str	r3, [sp, #8]
   ba1f6:	f89d 301d 	ldrb.w	r3, [sp, #29]
   ba1fa:	9301      	str	r3, [sp, #4]
   ba1fc:	f89d 301c 	ldrb.w	r3, [sp, #28]
   ba200:	9300      	str	r3, [sp, #0]
   ba202:	490a      	ldr	r1, [pc, #40]	; (ba22c <_ZN17PublishQueuePosix13readQueueFileEi+0x104>)
   ba204:	9b06      	ldr	r3, [sp, #24]
   ba206:	4804      	ldr	r0, [pc, #16]	; (ba218 <_ZN17PublishQueuePosix13readQueueFileEi+0xf0>)
   ba208:	4632      	mov	r2, r6
   ba20a:	f7fd fbcd 	bl	b79a8 <_ZNK5spark6Logger5traceEPKcz>
   ba20e:	e7ed      	b.n	ba1ec <_ZN17PublishQueuePosix13readQueueFileEi+0xc4>
    PublishQueueEvent *result = NULL;
   ba210:	462c      	mov	r4, r5
    return result;
   ba212:	e7df      	b.n	ba1d4 <_ZN17PublishQueuePosix13readQueueFileEi+0xac>
   ba214:	000c4c10 	.word	0x000c4c10
   ba218:	2003e4d0 	.word	0x2003e4d0
   ba21c:	31b67663 	.word	0x31b67663
   ba220:	00410801 	.word	0x00410801
   ba224:	000c4c24 	.word	0x000c4c24
   ba228:	000c4c46 	.word	0x000c4c46
   ba22c:	000c4c74 	.word	0x000c4c74

000ba230 <_ZN17PublishQueuePosixC1Ev>:
    stateHandler = &PublishQueuePosix::stateWait;
    stateTime = millis();
}


PublishQueuePosix::PublishQueuePosix() {
   ba230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   ba234:	4680      	mov	r8, r0
   ba236:	4b28      	ldr	r3, [pc, #160]	; (ba2d8 <_ZN17PublishQueuePosixC1Ev+0xa8>)
   ba238:	f848 3b04 	str.w	r3, [r8], #4
   ba23c:	4604      	mov	r4, r0
   ba23e:	4640      	mov	r0, r8
   ba240:	f001 ff18 	bl	bc074 <_ZN14SequentialFileC1Ev>
   ba244:	2202      	movs	r2, #2
   ba246:	2364      	movs	r3, #100	; 0x64
	size_t _M_map_size;
	iterator _M_start;
	iterator _M_finish;

	_Deque_impl_data() _GLIBCXX_NOEXCEPT
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   ba248:	2500      	movs	r5, #0
   ba24a:	e9c4 231b 	strd	r2, r3, [r4, #108]	; 0x6c
    _M_initialize_map(size_t __num_elements)
    {
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
				  + 1);

      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   ba24e:	2308      	movs	r3, #8
   ba250:	67e3      	str	r3, [r4, #124]	; 0x7c
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   ba252:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
   ba256:	e9c4 5522 	strd	r5, r5, [r4, #136]	; 0x88
   ba25a:	e9c4 5524 	strd	r5, r5, [r4, #144]	; 0x90
   ba25e:	e9c4 5526 	strd	r5, r5, [r4, #152]	; 0x98
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   ba262:	67a5      	str	r5, [r4, #120]	; 0x78
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   ba264:	2020      	movs	r0, #32
   ba266:	f7f9 ff16 	bl	b4096 <_Znwj>
      // starts in the middle elements and grows outwards.  So nstart may be
      // the beginning of _M_map, but for small maps it may be as far in as
      // _M_map+3.

      _Map_pointer __nstart = (this->_M_impl._M_map
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   ba26a:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   ba26c:	67a0      	str	r0, [r4, #120]	; 0x78
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   ba26e:	3e01      	subs	r6, #1
   ba270:	0876      	lsrs	r6, r6, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   ba272:	eb00 0986 	add.w	r9, r0, r6, lsl #2
   ba276:	4607      	mov	r7, r0
   ba278:	f44f 7000 	mov.w	r0, #512	; 0x200
   ba27c:	f7f9 ff0b 	bl	b4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   ba280:	f500 7300 	add.w	r3, r0, #512	; 0x200
   ba284:	e9c4 0325 	strd	r0, r3, [r4, #148]	; 0x94
   ba288:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   ba28c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   ba290:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   ba294:	e9c4 132d 	strd	r1, r3, [r4, #180]	; 0xb4
   ba298:	f247 5330 	movw	r3, #30000	; 0x7530
    {
      _Map_pointer __cur;
      __try
	{
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
	    *__cur = this->_M_allocate_node();
   ba29c:	f847 0026 	str.w	r0, [r7, r6, lsl #2]
	_M_first = *__new_node;
   ba2a0:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   ba2a4:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   ba2a8:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
   ba2ac:	e9c4 5528 	strd	r5, r5, [r4, #160]	; 0xa0
   ba2b0:	e9c4 552a 	strd	r5, r5, [r4, #168]	; 0xa8
    fileQueue.withDirPath("/usr/pubqueue");
   ba2b4:	4909      	ldr	r1, [pc, #36]	; (ba2dc <_ZN17PublishQueuePosixC1Ev+0xac>)
	_M_node = __new_node;
   ba2b6:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
   ba2ba:	f8c4 909c 	str.w	r9, [r4, #156]	; 0x9c
PublishQueuePosix::PublishQueuePosix() {
   ba2be:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
   ba2c2:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
    _Function_base() : _M_manager(nullptr) { }
   ba2c6:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
    fileQueue.withDirPath("/usr/pubqueue");
   ba2ca:	4640      	mov	r0, r8
   ba2cc:	f001 ff18 	bl	bc100 <_ZN14SequentialFile11withDirPathEPKc>
}
   ba2d0:	4620      	mov	r0, r4
   ba2d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   ba2d6:	bf00      	nop
   ba2d8:	000c4e90 	.word	0x000c4e90
   ba2dc:	000c4cb9 	.word	0x000c4cb9

000ba2e0 <_ZN17PublishQueuePosix8instanceEv>:
PublishQueuePosix &PublishQueuePosix::instance() {
   ba2e0:	b538      	push	{r3, r4, r5, lr}
    if (!_instance) {
   ba2e2:	4d06      	ldr	r5, [pc, #24]	; (ba2fc <_ZN17PublishQueuePosix8instanceEv+0x1c>)
   ba2e4:	682b      	ldr	r3, [r5, #0]
   ba2e6:	b93b      	cbnz	r3, ba2f8 <_ZN17PublishQueuePosix8instanceEv+0x18>
        _instance = new PublishQueuePosix();
   ba2e8:	20d0      	movs	r0, #208	; 0xd0
   ba2ea:	f7f9 fed4 	bl	b4096 <_Znwj>
   ba2ee:	4604      	mov	r4, r0
   ba2f0:	b108      	cbz	r0, ba2f6 <_ZN17PublishQueuePosix8instanceEv+0x16>
   ba2f2:	f7ff ff9d 	bl	ba230 <_ZN17PublishQueuePosixC1Ev>
   ba2f6:	602c      	str	r4, [r5, #0]
}
   ba2f8:	6828      	ldr	r0, [r5, #0]
   ba2fa:	bd38      	pop	{r3, r4, r5, pc}
   ba2fc:	2003e4d4 	.word	0x2003e4d4

000ba300 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>:
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   ba300:	6942      	ldr	r2, [r0, #20]
   ba302:	6a43      	ldr	r3, [r0, #36]	; 0x24
   ba304:	1a9b      	subs	r3, r3, r2
   ba306:	109b      	asrs	r3, r3, #2
   ba308:	1e5a      	subs	r2, r3, #1
   ba30a:	e9d0 3106 	ldrd	r3, r1, [r0, #24]
   ba30e:	1a5b      	subs	r3, r3, r1
   ba310:	109b      	asrs	r3, r3, #2
   ba312:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	  + (__y._M_last - __y._M_cur);
   ba316:	6902      	ldr	r2, [r0, #16]
   ba318:	6880      	ldr	r0, [r0, #8]
   ba31a:	1a10      	subs	r0, r2, r0

      // [23.2.1.2] capacity
      /**  Returns the number of elements in the %deque.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   ba31c:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   ba320:	4770      	bx	lr

000ba322 <_ZN17PublishQueuePosix12getNumEventsEv>:
size_t PublishQueuePosix::getNumEvents() {
   ba322:	b538      	push	{r3, r4, r5, lr}
   ba324:	4605      	mov	r5, r0
   ba326:	f7ff feca 	bl	ba0be <_ZN17PublishQueuePosix4lockEv>
        result = ramQueue.size();
   ba32a:	f105 0078 	add.w	r0, r5, #120	; 0x78
   ba32e:	f7ff ffe7 	bl	ba300 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
        if (result == 0) {
   ba332:	4604      	mov	r4, r0
   ba334:	b950      	cbnz	r0, ba34c <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
            result = fileQueue.getQueueLen();
   ba336:	1d28      	adds	r0, r5, #4
   ba338:	f002 f9d8 	bl	bc6ec <_ZNK14SequentialFile11getQueueLenEv>
            if (curEvent && curFileNum == 0) {
   ba33c:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
            result = fileQueue.getQueueLen();
   ba340:	4604      	mov	r4, r0
            if (curEvent && curFileNum == 0) {
   ba342:	b11b      	cbz	r3, ba34c <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
   ba344:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   ba348:	b903      	cbnz	r3, ba34c <_ZN17PublishQueuePosix12getNumEventsEv+0x2a>
                result++;
   ba34a:	3401      	adds	r4, #1
    bool tryLock() { return os_mutex_recursive_trylock(mutex); };

    /**
     * @brief Unlock the queue protection mutex
     */
    void unlock() { os_mutex_recursive_unlock(mutex); };
   ba34c:	6f68      	ldr	r0, [r5, #116]	; 0x74
   ba34e:	f002 fbd1 	bl	bcaf4 <os_mutex_recursive_unlock>
}
   ba352:	4620      	mov	r0, r4
   ba354:	bd38      	pop	{r3, r4, r5, pc}

000ba356 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>:
       *
       *  Note that no data is returned, and if the first element's data is
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
   ba356:	b510      	push	{r4, lr}
      {
	__glibcxx_requires_nonempty();
	if (this->_M_impl._M_start._M_cur
	    != this->_M_impl._M_start._M_last - 1)
   ba358:	6902      	ldr	r2, [r0, #16]
	if (this->_M_impl._M_start._M_cur
   ba35a:	6883      	ldr	r3, [r0, #8]
	    != this->_M_impl._M_start._M_last - 1)
   ba35c:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   ba35e:	4293      	cmp	r3, r2
      pop_front() _GLIBCXX_NOEXCEPT
   ba360:	4604      	mov	r4, r0
	if (this->_M_impl._M_start._M_cur
   ba362:	d002      	beq.n	ba36a <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x14>
	  {
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
				   this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
   ba364:	3304      	adds	r3, #4
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   ba366:	60a3      	str	r3, [r4, #8]
	  }
	else
	  _M_pop_front_aux();
      }
   ba368:	bd10      	pop	{r4, pc}
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   ba36a:	68c0      	ldr	r0, [r0, #12]
   ba36c:	f44f 7100 	mov.w	r1, #512	; 0x200
   ba370:	f7f9 fe95 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   ba374:	6963      	ldr	r3, [r4, #20]
   ba376:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   ba378:	6162      	str	r2, [r4, #20]
	_M_first = *__new_node;
   ba37a:	685b      	ldr	r3, [r3, #4]
   ba37c:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   ba37e:	f503 7200 	add.w	r2, r3, #512	; 0x200
   ba382:	6122      	str	r2, [r4, #16]
   ba384:	e7ef      	b.n	ba366 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv+0x10>
	...

000ba388 <_ZN17PublishQueuePosix17writeQueueToFilesEv>:
void PublishQueuePosix::writeQueueToFiles() {
   ba388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba38c:	b085      	sub	sp, #20
   ba38e:	4604      	mov	r4, r0
   ba390:	f7ff fe95 	bl	ba0be <_ZN17PublishQueuePosix4lockEv>
                hdr.magic = FILE_MAGIC;
   ba394:	f8df 90a4 	ldr.w	r9, [pc, #164]	; ba43c <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb4>
                hdr.version = FILE_VERSION;
   ba398:	f8df a0a4 	ldr.w	sl, [pc, #164]	; ba440 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb8>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   ba39c:	f8df b0a4 	ldr.w	fp, [pc, #164]	; ba444 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xbc>
      { return __x._M_cur == __y._M_cur; }
   ba3a0:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        while(!ramQueue.empty()) {
   ba3a4:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   ba3a8:	4293      	cmp	r3, r2
   ba3aa:	d105      	bne.n	ba3b8 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x30>
   ba3ac:	6f60      	ldr	r0, [r4, #116]	; 0x74
}
   ba3ae:	b005      	add	sp, #20
   ba3b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba3b4:	f002 bb9e 	b.w	bcaf4 <os_mutex_recursive_unlock>
            ramQueue.pop_front();
   ba3b8:	f104 0078 	add.w	r0, r4, #120	; 0x78
            int fileNum = fileQueue.reserveFile();
   ba3bc:	f104 0804 	add.w	r8, r4, #4
            PublishQueueEvent *event = ramQueue.front();
   ba3c0:	681f      	ldr	r7, [r3, #0]
            ramQueue.pop_front();
   ba3c2:	f7ff ffc8 	bl	ba356 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
            int fileNum = fileQueue.reserveFile();
   ba3c6:	4640      	mov	r0, r8
   ba3c8:	f002 f934 	bl	bc634 <_ZN14SequentialFile11reserveFileEv>
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   ba3cc:	2300      	movs	r3, #0
   ba3ce:	4602      	mov	r2, r0
   ba3d0:	4641      	mov	r1, r8
            int fileNum = fileQueue.reserveFile();
   ba3d2:	4606      	mov	r6, r0
            int fd = open(fileQueue.getPathForFileNum(fileNum), O_RDWR | O_CREAT);
   ba3d4:	4668      	mov	r0, sp
   ba3d6:	f001 ff35 	bl	bc244 <_ZN14SequentialFile17getPathForFileNumEiPKc>
   ba3da:	9800      	ldr	r0, [sp, #0]
   ba3dc:	f240 2102 	movw	r1, #514	; 0x202
   ba3e0:	f007 ff9a 	bl	c2318 <open>
   ba3e4:	4605      	mov	r5, r0
   ba3e6:	4668      	mov	r0, sp
   ba3e8:	f005 fab2 	bl	bf950 <_ZN6StringD1Ev>
            if (fd) {
   ba3ec:	b1c5      	cbz	r5, ba420 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x98>
                write(fd, &hdr, sizeof(hdr));
   ba3ee:	2208      	movs	r2, #8
   ba3f0:	4669      	mov	r1, sp
   ba3f2:	4628      	mov	r0, r5
                hdr.version = FILE_VERSION;
   ba3f4:	e9cd 9a00 	strd	r9, sl, [sp]
                write(fd, &hdr, sizeof(hdr));
   ba3f8:	f007 ffb4 	bl	c2364 <write>
                write(fd, event, sizeof(PublishQueueEvent) + strlen(event->eventData));
   ba3fc:	f107 0042 	add.w	r0, r7, #66	; 0x42
   ba400:	f006 fff5 	bl	c13ee <strlen>
   ba404:	4639      	mov	r1, r7
   ba406:	f100 0243 	add.w	r2, r0, #67	; 0x43
   ba40a:	4628      	mov	r0, r5
   ba40c:	f007 ffaa 	bl	c2364 <write>
                close(fd);
   ba410:	4628      	mov	r0, r5
   ba412:	f007 ff67 	bl	c22e4 <close>
                _log.trace("writeQueueToFiles fileNum=%d", fileNum);
   ba416:	4808      	ldr	r0, [pc, #32]	; (ba438 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0xb0>)
   ba418:	4632      	mov	r2, r6
   ba41a:	4659      	mov	r1, fp
   ba41c:	f7fd fac4 	bl	b79a8 <_ZNK5spark6Logger5traceEPKcz>
            fileQueue.addFileToQueue(fileNum);
   ba420:	4631      	mov	r1, r6
   ba422:	4640      	mov	r0, r8
   ba424:	f002 f948 	bl	bc6b8 <_ZN14SequentialFile14addFileToQueueEi>
            delete event;
   ba428:	2f00      	cmp	r7, #0
   ba42a:	d0b9      	beq.n	ba3a0 <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x18>
   ba42c:	2143      	movs	r1, #67	; 0x43
   ba42e:	4638      	mov	r0, r7
   ba430:	f7f9 fe35 	bl	b409e <_ZdlPvj>
   ba434:	e7b2      	b.n	ba39c <_ZN17PublishQueuePosix17writeQueueToFilesEv+0x14>
   ba436:	bf00      	nop
   ba438:	2003e4d0 	.word	0x2003e4d0
   ba43c:	31b67663 	.word	0x31b67663
   ba440:	00410801 	.word	0x00410801
   ba444:	000c4cc7 	.word	0x000c4cc7

000ba448 <_ZN17PublishQueuePosix16checkQueueLimitsEv>:
void PublishQueuePosix::checkQueueLimits() {
   ba448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba44c:	4604      	mov	r4, r0
   ba44e:	f7ff fe36 	bl	ba0be <_ZN17PublishQueuePosix4lockEv>
        if (ramQueue.size() > ramQueueSize) {
   ba452:	f104 0078 	add.w	r0, r4, #120	; 0x78
   ba456:	f7ff ff53 	bl	ba300 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   ba45a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   ba45c:	4298      	cmp	r0, r3
   ba45e:	d902      	bls.n	ba466 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x1e>
            writeQueueToFiles();
   ba460:	4620      	mov	r0, r4
   ba462:	f7ff ff91 	bl	ba388 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
                _log.info("discarded event %d", fileNum);
   ba466:	f8df 8044 	ldr.w	r8, [pc, #68]	; ba4ac <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x64>
   ba46a:	4f0f      	ldr	r7, [pc, #60]	; (ba4a8 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x60>)
        while(fileQueue.getQueueLen() > (int)fileQueueSize) {
   ba46c:	1d26      	adds	r6, r4, #4
   ba46e:	4630      	mov	r0, r6
   ba470:	f002 f93c 	bl	bc6ec <_ZNK14SequentialFile11getQueueLenEv>
   ba474:	6f23      	ldr	r3, [r4, #112]	; 0x70
   ba476:	4298      	cmp	r0, r3
   ba478:	dc04      	bgt.n	ba484 <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x3c>
   ba47a:	6f60      	ldr	r0, [r4, #116]	; 0x74
}
   ba47c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   ba480:	f002 bb38 	b.w	bcaf4 <os_mutex_recursive_unlock>
            int fileNum = fileQueue.getFileFromQueue(true);
   ba484:	2101      	movs	r1, #1
   ba486:	4630      	mov	r0, r6
   ba488:	f002 f8e0 	bl	bc64c <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum) {
   ba48c:	4605      	mov	r5, r0
   ba48e:	2800      	cmp	r0, #0
   ba490:	d0ed      	beq.n	ba46e <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x26>
                fileQueue.removeFileNum(fileNum, false);
   ba492:	4601      	mov	r1, r0
   ba494:	2200      	movs	r2, #0
   ba496:	4630      	mov	r0, r6
   ba498:	f001 ff10 	bl	bc2bc <_ZN14SequentialFile13removeFileNumEib>
                _log.info("discarded event %d", fileNum);
   ba49c:	462a      	mov	r2, r5
   ba49e:	4641      	mov	r1, r8
   ba4a0:	4638      	mov	r0, r7
   ba4a2:	f7f9 fe4c 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
   ba4a6:	e7e2      	b.n	ba46e <_ZN17PublishQueuePosix16checkQueueLimitsEv+0x26>
   ba4a8:	2003e4d0 	.word	0x2003e4d0
   ba4ac:	000c4ce4 	.word	0x000c4ce4

000ba4b0 <_ZN17PublishQueuePosix18systemEventHandlerEyi>:

PublishQueuePosix::~PublishQueuePosix() {

}

void PublishQueuePosix::systemEventHandler(system_event_t event, int param) {
   ba4b0:	b508      	push	{r3, lr}
    if ((event == reset) || ((event == cloud_status) && (param == cloud_status_disconnecting))) {
   ba4b2:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
   ba4b6:	430b      	orrs	r3, r1
   ba4b8:	d005      	beq.n	ba4c6 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x16>
   ba4ba:	3840      	subs	r0, #64	; 0x40
   ba4bc:	ea50 0301 	orrs.w	r3, r0, r1
   ba4c0:	d10b      	bne.n	ba4da <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2a>
   ba4c2:	2a09      	cmp	r2, #9
   ba4c4:	d109      	bne.n	ba4da <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2a>
        _log.trace("reset or disconnect event, save files to queue");
   ba4c6:	4905      	ldr	r1, [pc, #20]	; (ba4dc <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x2c>)
   ba4c8:	4805      	ldr	r0, [pc, #20]	; (ba4e0 <_ZN17PublishQueuePosix18systemEventHandlerEyi+0x30>)
   ba4ca:	f7fd fa6d 	bl	b79a8 <_ZNK5spark6Logger5traceEPKcz>
        PublishQueuePosix::instance().writeQueueToFiles();
   ba4ce:	f7ff ff07 	bl	ba2e0 <_ZN17PublishQueuePosix8instanceEv>
    }
}
   ba4d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        PublishQueuePosix::instance().writeQueueToFiles();
   ba4d6:	f7ff bf57 	b.w	ba388 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
}
   ba4da:	bd08      	pop	{r3, pc}
   ba4dc:	000c4cf7 	.word	0x000c4cf7
   ba4e0:	2003e4d0 	.word	0x2003e4d0

000ba4e4 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   ba4e4:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   ba4e6:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   ba4e8:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   ba4ea:	b183      	cbz	r3, ba50e <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x2a>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   ba4ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
   ba4ee:	6945      	ldr	r5, [r0, #20]
   ba4f0:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   ba4f2:	42ae      	cmp	r6, r5
   ba4f4:	d906      	bls.n	ba504 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0x20>
   ba4f6:	f855 0b04 	ldr.w	r0, [r5], #4
   ba4fa:	f44f 7100 	mov.w	r1, #512	; 0x200
   ba4fe:	f7f9 fdce 	bl	b409e <_ZdlPvj>
   ba502:	e7f6      	b.n	ba4f2 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev+0xe>
   ba504:	6861      	ldr	r1, [r4, #4]
   ba506:	6820      	ldr	r0, [r4, #0]
   ba508:	0089      	lsls	r1, r1, #2
   ba50a:	f7f9 fdc8 	bl	b409e <_ZdlPvj>
    }
   ba50e:	4620      	mov	r0, r4
   ba510:	bd70      	pop	{r4, r5, r6, pc}
	...

000ba514 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>:
	operator=(_Functor&& __f)
   ba514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   ba516:	e9d1 2300 	ldrd	r2, r3, [r1]
    _Function_base() : _M_manager(nullptr) { }
   ba51a:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   ba51c:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   ba51e:	9102      	str	r1, [sp, #8]
	  { return __mp != nullptr; }
   ba520:	b90a      	cbnz	r2, ba526 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x12>
   ba522:	07d9      	lsls	r1, r3, #31
   ba524:	d505      	bpl.n	ba532 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x1e>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   ba526:	e9cd 2300 	strd	r2, r3, [sp]
	    _M_invoker = &_My_handler::_M_invoke;
   ba52a:	4b0a      	ldr	r3, [pc, #40]	; (ba554 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x40>)
   ba52c:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
   ba52e:	4b0a      	ldr	r3, [pc, #40]	; (ba558 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0+0x44>)
   ba530:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
   ba532:	4621      	mov	r1, r4
   ba534:	4668      	mov	r0, sp
   ba536:	f7fe f8bc 	bl	b86b2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba53a:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   ba53c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   ba53e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba540:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   ba542:	9202      	str	r2, [sp, #8]
    class function<_Res(_ArgTypes...)>
   ba544:	4668      	mov	r0, sp
   ba546:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   ba548:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   ba54a:	9203      	str	r2, [sp, #12]
   ba54c:	f7fa fff5 	bl	b553a <_ZNSt14_Function_baseD1Ev>
	}
   ba550:	b004      	add	sp, #16
   ba552:	bd10      	pop	{r4, pc}
   ba554:	000ba075 	.word	0x000ba075
   ba558:	000ba093 	.word	0x000ba093

000ba55c <_ZN17PublishQueuePosix9stateWaitEv>:
void PublishQueuePosix::stateWait() {
   ba55c:	b570      	push	{r4, r5, r6, lr}
   ba55e:	b086      	sub	sp, #24
   ba560:	4604      	mov	r4, r0
    static bool connected(void) { return spark_cloud_flag_connected(); }
   ba562:	f002 fdfb 	bl	bd15c <spark_cloud_flag_connected>
    if (!Particle.connected()) {
   ba566:	b948      	cbnz	r0, ba57c <_ZN17PublishQueuePosix9stateWaitEv+0x20>
        stateHandler = &PublishQueuePosix::stateConnectWait;
   ba568:	4b43      	ldr	r3, [pc, #268]	; (ba678 <_ZN17PublishQueuePosix9stateWaitEv+0x11c>)
   ba56a:	a902      	add	r1, sp, #8
   ba56c:	e9cd 3002 	strd	r3, r0, [sp, #8]
   ba570:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   ba574:	f7ff ffce 	bl	ba514 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
}
   ba578:	b006      	add	sp, #24
   ba57a:	bd70      	pop	{r4, r5, r6, pc}
    if (pausePublishing) {
   ba57c:	f894 50b2 	ldrb.w	r5, [r4, #178]	; 0xb2
   ba580:	b11d      	cbz	r5, ba58a <_ZN17PublishQueuePosix9stateWaitEv+0x2e>
        canSleep = true;
   ba582:	2301      	movs	r3, #1
   ba584:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
        return;
   ba588:	e7f6      	b.n	ba578 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
   ba58a:	f002 faeb 	bl	bcb64 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - stateTime < durationMs) {
   ba58e:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   ba592:	1ac0      	subs	r0, r0, r3
   ba594:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   ba598:	4298      	cmp	r0, r3
   ba59a:	d3ed      	bcc.n	ba578 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
    curFileNum = fileQueue.getFileFromQueue(false);
   ba59c:	1d26      	adds	r6, r4, #4
   ba59e:	4629      	mov	r1, r5
   ba5a0:	4630      	mov	r0, r6
   ba5a2:	f002 f853 	bl	bc64c <_ZN14SequentialFile16getFileFromQueueEb>
   ba5a6:	4601      	mov	r1, r0
   ba5a8:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    if (curFileNum) {
   ba5ac:	2800      	cmp	r0, #0
   ba5ae:	d052      	beq.n	ba656 <_ZN17PublishQueuePosix9stateWaitEv+0xfa>
        curEvent = readQueueFile(curFileNum);
   ba5b0:	4620      	mov	r0, r4
   ba5b2:	f7ff fdb9 	bl	ba128 <_ZN17PublishQueuePosix13readQueueFileEi>
   ba5b6:	4605      	mov	r5, r0
   ba5b8:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
        if (!curEvent) {
   ba5bc:	2800      	cmp	r0, #0
   ba5be:	d035      	beq.n	ba62c <_ZN17PublishQueuePosix9stateWaitEv+0xd0>
   ba5c0:	f002 fad0 	bl	bcb64 <HAL_Timer_Get_Milli_Seconds>
        stateHandler = &PublishQueuePosix::statePublishWait;
   ba5c4:	ae02      	add	r6, sp, #8
   ba5c6:	2500      	movs	r5, #0
   ba5c8:	4b2c      	ldr	r3, [pc, #176]	; (ba67c <_ZN17PublishQueuePosix9stateWaitEv+0x120>)
        stateTime = millis();
   ba5ca:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::statePublishWait;
   ba5ce:	4631      	mov	r1, r6
   ba5d0:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   ba5d4:	9302      	str	r3, [sp, #8]
   ba5d6:	9503      	str	r5, [sp, #12]
   ba5d8:	f7ff ff9c 	bl	ba514 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   ba5dc:	e9d4 3028 	ldrd	r3, r0, [r4, #160]	; 0xa0
   ba5e0:	f103 0242 	add.w	r2, r3, #66	; 0x42
   ba5e4:	9200      	str	r2, [sp, #0]
   ba5e6:	4926      	ldr	r1, [pc, #152]	; (ba680 <_ZN17PublishQueuePosix9stateWaitEv+0x124>)
   ba5e8:	4a26      	ldr	r2, [pc, #152]	; (ba684 <_ZN17PublishQueuePosix9stateWaitEv+0x128>)
        publishComplete = false;
   ba5ea:	f8a4 50b0 	strh.w	r5, [r4, #176]	; 0xb0
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   ba5ee:	42a8      	cmp	r0, r5
   ba5f0:	bf08      	it	eq
   ba5f2:	460a      	moveq	r2, r1
   ba5f4:	3301      	adds	r3, #1
   ba5f6:	4924      	ldr	r1, [pc, #144]	; (ba688 <_ZN17PublishQueuePosix9stateWaitEv+0x12c>)
   ba5f8:	4824      	ldr	r0, [pc, #144]	; (ba68c <_ZN17PublishQueuePosix9stateWaitEv+0x130>)
        canSleep = false;
   ba5fa:	f884 50b3 	strb.w	r5, [r4, #179]	; 0xb3
        _log.trace("publishing %s event=%s data=%s", (curFileNum ? "file" : "ram"), curEvent->eventName, curEvent->eventData);
   ba5fe:	f7fd f9d3 	bl	b79a8 <_ZNK5spark6Logger5traceEPKcz>
        if (BackgroundPublishRK::instance().publish(curEvent->eventName, curEvent->eventData, curEvent->flags, 
   ba602:	f7fd ff99 	bl	b8538 <_ZN19BackgroundPublishRK8instanceEv>
   ba606:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
	    _M_invoker = &_My_handler::_M_invoke;
   ba60a:	4b21      	ldr	r3, [pc, #132]	; (ba690 <_ZN17PublishQueuePosix9stateWaitEv+0x134>)
   ba60c:	9305      	str	r3, [sp, #20]
   ba60e:	e9cd 6500 	strd	r6, r5, [sp]
   ba612:	4611      	mov	r1, r2
	    _M_manager = &_My_handler::_M_manager;
   ba614:	4b1f      	ldr	r3, [pc, #124]	; (ba694 <_ZN17PublishQueuePosix9stateWaitEv+0x138>)
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   ba616:	9402      	str	r4, [sp, #8]
	    _M_manager = &_My_handler::_M_manager;
   ba618:	9304      	str	r3, [sp, #16]
   ba61a:	f811 3b01 	ldrb.w	r3, [r1], #1
   ba61e:	3242      	adds	r2, #66	; 0x42
   ba620:	f7fe f8d6 	bl	b87d0 <_ZN19BackgroundPublishRK7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEESt8functionIFvbS1_S1_PKvEES8_>
    class function<_Res(_ArgTypes...)>
   ba624:	4630      	mov	r0, r6
   ba626:	f7fa ff88 	bl	b553a <_ZNSt14_Function_baseD1Ev>
   ba62a:	e7a5      	b.n	ba578 <_ZN17PublishQueuePosix9stateWaitEv+0x1c>
            _log.info("discarding corrupted file %d", curFileNum);
   ba62c:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
   ba630:	4919      	ldr	r1, [pc, #100]	; (ba698 <_ZN17PublishQueuePosix9stateWaitEv+0x13c>)
   ba632:	4816      	ldr	r0, [pc, #88]	; (ba68c <_ZN17PublishQueuePosix9stateWaitEv+0x130>)
   ba634:	f7f9 fd83 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
            fileQueue.getFileFromQueue(true);
   ba638:	2101      	movs	r1, #1
   ba63a:	4630      	mov	r0, r6
   ba63c:	f002 f806 	bl	bc64c <_ZN14SequentialFile16getFileFromQueueEb>
            fileQueue.removeFileNum(curFileNum, false);
   ba640:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
   ba644:	462a      	mov	r2, r5
   ba646:	4630      	mov	r0, r6
   ba648:	f001 fe38 	bl	bc2bc <_ZN14SequentialFile13removeFileNumEib>
    if (curEvent) {
   ba64c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   ba650:	2b00      	cmp	r3, #0
   ba652:	d1b5      	bne.n	ba5c0 <_ZN17PublishQueuePosix9stateWaitEv+0x64>
   ba654:	e795      	b.n	ba582 <_ZN17PublishQueuePosix9stateWaitEv+0x26>
      { return __x._M_cur == __y._M_cur; }
   ba656:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
        if (!ramQueue.empty()) {
   ba65a:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
   ba65e:	429a      	cmp	r2, r3
   ba660:	d007      	beq.n	ba672 <_ZN17PublishQueuePosix9stateWaitEv+0x116>
            curEvent = ramQueue.front();
   ba662:	681b      	ldr	r3, [r3, #0]
   ba664:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
            ramQueue.pop_front();
   ba668:	f104 0078 	add.w	r0, r4, #120	; 0x78
   ba66c:	f7ff fe73 	bl	ba356 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE9pop_frontEv>
   ba670:	e7ec      	b.n	ba64c <_ZN17PublishQueuePosix9stateWaitEv+0xf0>
            curEvent = NULL;
   ba672:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    if (curEvent) {
   ba676:	e784      	b.n	ba582 <_ZN17PublishQueuePosix9stateWaitEv+0x26>
   ba678:	000ba69d 	.word	0x000ba69d
   ba67c:	000baa1d 	.word	0x000baa1d
   ba680:	000c4d26 	.word	0x000c4d26
   ba684:	000c5218 	.word	0x000c5218
   ba688:	000c4d47 	.word	0x000c4d47
   ba68c:	2003e4d0 	.word	0x2003e4d0
   ba690:	000ba065 	.word	0x000ba065
   ba694:	000ba0ab 	.word	0x000ba0ab
   ba698:	000c4d2a 	.word	0x000c4d2a

000ba69c <_ZN17PublishQueuePosix16stateConnectWaitEv>:
void PublishQueuePosix::stateConnectWait() {
   ba69c:	b513      	push	{r0, r1, r4, lr}
   ba69e:	4604      	mov	r4, r0
   ba6a0:	f002 fd5c 	bl	bd15c <spark_cloud_flag_connected>
    if (Particle.connected()) {
   ba6a4:	b190      	cbz	r0, ba6cc <_ZN17PublishQueuePosix16stateConnectWaitEv+0x30>
   ba6a6:	f002 fa5d 	bl	bcb64 <HAL_Timer_Get_Milli_Seconds>
        durationMs = waitAfterConnect;
   ba6aa:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   ba6ae:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        stateHandler = &PublishQueuePosix::stateWait;
   ba6b2:	4b0d      	ldr	r3, [pc, #52]	; (ba6e8 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x4c>)
        stateTime = millis();
   ba6b4:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
        stateHandler = &PublishQueuePosix::stateWait;
   ba6b8:	9300      	str	r3, [sp, #0]
   ba6ba:	4669      	mov	r1, sp
   ba6bc:	2300      	movs	r3, #0
   ba6be:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   ba6c2:	9301      	str	r3, [sp, #4]
   ba6c4:	f7ff ff26 	bl	ba514 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
}
   ba6c8:	b002      	add	sp, #8
   ba6ca:	bd10      	pop	{r4, pc}
        if (pausePublishing || getNumEvents() == 0) {
   ba6cc:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
   ba6d0:	b11b      	cbz	r3, ba6da <_ZN17PublishQueuePosix16stateConnectWaitEv+0x3e>
            canSleep = true;
   ba6d2:	2301      	movs	r3, #1
   ba6d4:	f884 30b3 	strb.w	r3, [r4, #179]	; 0xb3
   ba6d8:	e7f6      	b.n	ba6c8 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x2c>
        if (pausePublishing || getNumEvents() == 0) {
   ba6da:	4620      	mov	r0, r4
   ba6dc:	f7ff fe21 	bl	ba322 <_ZN17PublishQueuePosix12getNumEventsEv>
   ba6e0:	2800      	cmp	r0, #0
   ba6e2:	d0f6      	beq.n	ba6d2 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x36>
   ba6e4:	e7f0      	b.n	ba6c8 <_ZN17PublishQueuePosix16stateConnectWaitEv+0x2c>
   ba6e6:	bf00      	nop
   ba6e8:	000ba55d 	.word	0x000ba55d

000ba6ec <_ZN17PublishQueuePosix5setupEv>:
void PublishQueuePosix::setup() {
   ba6ec:	b570      	push	{r4, r5, r6, lr}
   ba6ee:	4605      	mov	r5, r0
   ba6f0:	b098      	sub	sp, #96	; 0x60
    if (system_thread_get_state(nullptr) != spark::feature::ENABLED) {
   ba6f2:	2000      	movs	r0, #0
   ba6f4:	f002 fcd8 	bl	bd0a8 <system_thread_get_state>
   ba6f8:	2801      	cmp	r0, #1
   ba6fa:	d005      	beq.n	ba708 <_ZN17PublishQueuePosix5setupEv+0x1c>
        _log.error("SYSTEM_THREAD(ENABLED) is required");
   ba6fc:	493e      	ldr	r1, [pc, #248]	; (ba7f8 <_ZN17PublishQueuePosix5setupEv+0x10c>)
   ba6fe:	483f      	ldr	r0, [pc, #252]	; (ba7fc <_ZN17PublishQueuePosix5setupEv+0x110>)
   ba700:	f7fd f944 	bl	b798c <_ZNK5spark6Logger5errorEPKcz>
}
   ba704:	b018      	add	sp, #96	; 0x60
   ba706:	bd70      	pop	{r4, r5, r6, pc}
    os_mutex_recursive_create(&mutex);
   ba708:	f105 0074 	add.w	r0, r5, #116	; 0x74
   ba70c:	f002 f9da 	bl	bcac4 <os_mutex_recursive_create>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   ba710:	4b3b      	ldr	r3, [pc, #236]	; (ba800 <_ZN17PublishQueuePosix5setupEv+0x114>)
   ba712:	9304      	str	r3, [sp, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   ba714:	4b3b      	ldr	r3, [pc, #236]	; (ba804 <_ZN17PublishQueuePosix5setupEv+0x118>)
   ba716:	9307      	str	r3, [sp, #28]
        };
   ba718:	a904      	add	r1, sp, #16
	    _M_manager = &_My_handler::_M_manager;
   ba71a:	4b3b      	ldr	r3, [pc, #236]	; (ba808 <_ZN17PublishQueuePosix5setupEv+0x11c>)
   ba71c:	9306      	str	r3, [sp, #24]
   ba71e:	a808      	add	r0, sp, #32
   ba720:	f7fb f8ac 	bl	b587c <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
   ba724:	a908      	add	r1, sp, #32
   ba726:	a80c      	add	r0, sp, #48	; 0x30
   ba728:	f7fb f8a8 	bl	b587c <_ZNSt8functionIFvyiEEC1ERKS1_>
   ba72c:	a90c      	add	r1, sp, #48	; 0x30
   ba72e:	a810      	add	r0, sp, #64	; 0x40
   ba730:	f7fb f8a4 	bl	b587c <_ZNSt8functionIFvyiEEC1ERKS1_>
    _Function_base() : _M_manager(nullptr) { }
   ba734:	2600      	movs	r6, #0
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   ba736:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
   ba738:	9616      	str	r6, [sp, #88]	; 0x58
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   ba73a:	f7f9 fcac 	bl	b4096 <_Znwj>
   ba73e:	4604      	mov	r4, r0
   ba740:	b160      	cbz	r0, ba75c <_ZN17PublishQueuePosix5setupEv+0x70>
    _Function_base() : _M_manager(nullptr) { }
   ba742:	6086      	str	r6, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   ba744:	4601      	mov	r1, r0
   ba746:	a810      	add	r0, sp, #64	; 0x40
   ba748:	f7fd ffb3 	bl	b86b2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba74c:	9b12      	ldr	r3, [sp, #72]	; 0x48
      __a = _GLIBCXX_MOVE(__b);
   ba74e:	68a2      	ldr	r2, [r4, #8]
   ba750:	9212      	str	r2, [sp, #72]	; 0x48
      __b = _GLIBCXX_MOVE(__tmp);
   ba752:	60a3      	str	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   ba754:	68e2      	ldr	r2, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba756:	9b13      	ldr	r3, [sp, #76]	; 0x4c
      __b = _GLIBCXX_MOVE(__tmp);
   ba758:	60e3      	str	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   ba75a:	9213      	str	r2, [sp, #76]	; 0x4c
	    _M_invoker = &_My_handler::_M_invoke;
   ba75c:	4b2b      	ldr	r3, [pc, #172]	; (ba80c <_ZN17PublishQueuePosix5setupEv+0x120>)
   ba75e:	9317      	str	r3, [sp, #92]	; 0x5c
	    _M_manager = &_My_handler::_M_manager;
   ba760:	4b2b      	ldr	r3, [pc, #172]	; (ba810 <_ZN17PublishQueuePosix5setupEv+0x124>)
   ba762:	9316      	str	r3, [sp, #88]	; 0x58
        SystemEventContext context = {};
   ba764:	4b2b      	ldr	r3, [pc, #172]	; (ba814 <_ZN17PublishQueuePosix5setupEv+0x128>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   ba766:	9414      	str	r4, [sp, #80]	; 0x50
   ba768:	2600      	movs	r6, #0
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   ba76a:	2010      	movs	r0, #16
        SystemEventContext context = {};
   ba76c:	e9cd 3601 	strd	r3, r6, [sp, #4]
   ba770:	9603      	str	r6, [sp, #12]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
   ba772:	f7f9 fc90 	bl	b4096 <_Znwj>
   ba776:	4604      	mov	r4, r0
   ba778:	b1d8      	cbz	r0, ba7b2 <_ZN17PublishQueuePosix5setupEv+0xc6>
    bool _M_empty() const { return !_M_manager; }
   ba77a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    _Function_base() : _M_manager(nullptr) { }
   ba77c:	6086      	str	r6, [r0, #8]
      if (static_cast<bool>(__x))
   ba77e:	b133      	cbz	r3, ba78e <_ZN17PublishQueuePosix5setupEv+0xa2>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   ba780:	2202      	movs	r2, #2
   ba782:	a914      	add	r1, sp, #80	; 0x50
   ba784:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   ba786:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba788:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   ba78a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   ba78c:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
   ba78e:	4b22      	ldr	r3, [pc, #136]	; (ba818 <_ZN17PublishQueuePosix5setupEv+0x12c>)
   ba790:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   ba792:	4a22      	ldr	r2, [pc, #136]	; (ba81c <_ZN17PublishQueuePosix5setupEv+0x130>)
        context.callable = wrapper;
   ba794:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
   ba796:	ab01      	add	r3, sp, #4
   ba798:	f44f 6004 	mov.w	r0, #2112	; 0x840
   ba79c:	2100      	movs	r1, #0
   ba79e:	f002 fc63 	bl	bd068 <system_subscribe_event>
        if (r) {
   ba7a2:	b130      	cbz	r0, ba7b2 <_ZN17PublishQueuePosix5setupEv+0xc6>
    class function<_Res(_ArgTypes...)>
   ba7a4:	4620      	mov	r0, r4
   ba7a6:	f7fa fec8 	bl	b553a <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
   ba7aa:	2110      	movs	r1, #16
   ba7ac:	4620      	mov	r0, r4
   ba7ae:	f7f9 fc76 	bl	b409e <_ZdlPvj>
   ba7b2:	a814      	add	r0, sp, #80	; 0x50
   ba7b4:	f7fa fec1 	bl	b553a <_ZNSt14_Function_baseD1Ev>
   ba7b8:	a810      	add	r0, sp, #64	; 0x40
   ba7ba:	f7fa febe 	bl	b553a <_ZNSt14_Function_baseD1Ev>
   ba7be:	a80c      	add	r0, sp, #48	; 0x30
   ba7c0:	f7fa febb 	bl	b553a <_ZNSt14_Function_baseD1Ev>
   ba7c4:	a808      	add	r0, sp, #32
   ba7c6:	f7fa feb8 	bl	b553a <_ZNSt14_Function_baseD1Ev>
   ba7ca:	a804      	add	r0, sp, #16
   ba7cc:	f7fa feb5 	bl	b553a <_ZNSt14_Function_baseD1Ev>
    BackgroundPublishRK::instance().start();
   ba7d0:	f7fd feb2 	bl	b8538 <_ZN19BackgroundPublishRK8instanceEv>
   ba7d4:	f7fd ffd6 	bl	b8784 <_ZN19BackgroundPublishRK5startEv>
    fileQueue.scanDir();
   ba7d8:	1d28      	adds	r0, r5, #4
   ba7da:	f001 feb3 	bl	bc544 <_ZN14SequentialFile7scanDirEv>
    checkQueueLimits();
   ba7de:	4628      	mov	r0, r5
   ba7e0:	f7ff fe32 	bl	ba448 <_ZN17PublishQueuePosix16checkQueueLimitsEv>
    stateHandler = &PublishQueuePosix::stateConnectWait;
   ba7e4:	4b0e      	ldr	r3, [pc, #56]	; (ba820 <_ZN17PublishQueuePosix5setupEv+0x134>)
   ba7e6:	9314      	str	r3, [sp, #80]	; 0x50
   ba7e8:	a914      	add	r1, sp, #80	; 0x50
   ba7ea:	2300      	movs	r3, #0
   ba7ec:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
   ba7f0:	9315      	str	r3, [sp, #84]	; 0x54
   ba7f2:	f7ff fe8f 	bl	ba514 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
   ba7f6:	e785      	b.n	ba704 <_ZN17PublishQueuePosix5setupEv+0x18>
   ba7f8:	000c4d66 	.word	0x000c4d66
   ba7fc:	2003e4d0 	.word	0x2003e4d0
   ba800:	000ba4b1 	.word	0x000ba4b1
   ba804:	000b5517 	.word	0x000b5517
   ba808:	000b5503 	.word	0x000b5503
   ba80c:	000b54dd 	.word	0x000b54dd
   ba810:	000b59a5 	.word	0x000b59a5
   ba814:	000c0002 	.word	0x000c0002
   ba818:	000b554d 	.word	0x000b554d
   ba81c:	000b54b5 	.word	0x000b54b5
   ba820:	000ba69d 	.word	0x000ba69d

000ba824 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
   ba824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   ba828:	4606      	mov	r6, r0
   ba82a:	4689      	mov	r9, r1
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   ba82c:	6a40      	ldr	r0, [r0, #36]	; 0x24
   ba82e:	6971      	ldr	r1, [r6, #20]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   ba830:	6873      	ldr	r3, [r6, #4]
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   ba832:	1a47      	subs	r7, r0, r1
   ba834:	eb09 05a7 	add.w	r5, r9, r7, asr #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   ba838:	3501      	adds	r5, #1
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   ba83a:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
    deque<_Tp, _Alloc>::
   ba83e:	4614      	mov	r4, r2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   ba840:	d927      	bls.n	ba892 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x6e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
					 - __new_num_nodes) / 2
   ba842:	1b5d      	subs	r5, r3, r5
   ba844:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   ba846:	6832      	ldr	r2, [r6, #0]
   ba848:	00ad      	lsls	r5, r5, #2
			 + (__add_at_front ? __nodes_to_add : 0);
   ba84a:	b10c      	cbz	r4, ba850 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x2c>
   ba84c:	ea4f 0489 	mov.w	r4, r9, lsl #2
   ba850:	442c      	add	r4, r5
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   ba852:	4414      	add	r4, r2
	  if (__new_nstart < this->_M_impl._M_start._M_node)
	    std::copy(this->_M_impl._M_start._M_node,
   ba854:	1d03      	adds	r3, r0, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   ba856:	42a1      	cmp	r1, r4
					   is_move_assignable<_Tp>,
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
   ba858:	eba3 0201 	sub.w	r2, r3, r1
   ba85c:	d913      	bls.n	ba886 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x62>
	  if (_Num)
   ba85e:	4299      	cmp	r1, r3
   ba860:	d002      	beq.n	ba868 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   ba862:	4620      	mov	r0, r4
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   ba864:	f006 fcde 	bl	c1224 <memmove>
	_M_node = __new_node;
   ba868:	6174      	str	r4, [r6, #20]
	_M_first = *__new_node;
   ba86a:	6823      	ldr	r3, [r4, #0]
   ba86c:	60f3      	str	r3, [r6, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   ba86e:	f503 7300 	add.w	r3, r3, #512	; 0x200
   ba872:	6133      	str	r3, [r6, #16]
	  this->_M_impl._M_map = __new_map;
	  this->_M_impl._M_map_size = __new_map_size;
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   ba874:	19e3      	adds	r3, r4, r7
	_M_node = __new_node;
   ba876:	6273      	str	r3, [r6, #36]	; 0x24
	_M_first = *__new_node;
   ba878:	59e3      	ldr	r3, [r4, r7]
   ba87a:	61f3      	str	r3, [r6, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   ba87c:	f503 7300 	add.w	r3, r3, #512	; 0x200
   ba880:	6233      	str	r3, [r6, #32]
    }
   ba882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	  if (_Num)
   ba886:	4299      	cmp	r1, r3
   ba888:	d0ee      	beq.n	ba868 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   ba88a:	1d38      	adds	r0, r7, #4
   ba88c:	1a80      	subs	r0, r0, r2
   ba88e:	4420      	add	r0, r4
   ba890:	e7e8      	b.n	ba864 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x40>
	  size_type __new_map_size = this->_M_impl._M_map_size
   ba892:	f103 0802 	add.w	r8, r3, #2
   ba896:	454b      	cmp	r3, r9
   ba898:	bf2c      	ite	cs
   ba89a:	4498      	addcs	r8, r3
   ba89c:	44c8      	addcc	r8, r9
	if (__n > this->_M_max_size())
   ba89e:	f1b8 5f00 	cmp.w	r8, #536870912	; 0x20000000
   ba8a2:	d301      	bcc.n	ba8a8 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x84>
	  std::__throw_bad_alloc();
   ba8a4:	f005 ff2a 	bl	c06fc <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   ba8a8:	ea4f 0088 	mov.w	r0, r8, lsl #2
   ba8ac:	f7f9 fbf3 	bl	b4096 <_Znwj>
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   ba8b0:	eba8 0505 	sub.w	r5, r8, r5
   ba8b4:	086d      	lsrs	r5, r5, #1
   ba8b6:	4682      	mov	sl, r0
   ba8b8:	00ad      	lsls	r5, r5, #2
			 + (__add_at_front ? __nodes_to_add : 0);
   ba8ba:	b10c      	cbz	r4, ba8c0 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x9c>
   ba8bc:	ea4f 0489 	mov.w	r4, r9, lsl #2
	  std::copy(this->_M_impl._M_start._M_node,
   ba8c0:	6a72      	ldr	r2, [r6, #36]	; 0x24
   ba8c2:	6971      	ldr	r1, [r6, #20]
   ba8c4:	3204      	adds	r2, #4
			 + (__add_at_front ? __nodes_to_add : 0);
   ba8c6:	442c      	add	r4, r5
	  if (_Num)
   ba8c8:	4291      	cmp	r1, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   ba8ca:	4454      	add	r4, sl
   ba8cc:	d003      	beq.n	ba8d6 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0xb2>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   ba8ce:	1a52      	subs	r2, r2, r1
   ba8d0:	4620      	mov	r0, r4
   ba8d2:	f006 fca7 	bl	c1224 <memmove>
	::operator delete(__p
   ba8d6:	6871      	ldr	r1, [r6, #4]
   ba8d8:	6830      	ldr	r0, [r6, #0]
   ba8da:	0089      	lsls	r1, r1, #2
   ba8dc:	f7f9 fbdf 	bl	b409e <_ZdlPvj>
	  this->_M_impl._M_map_size = __new_map_size;
   ba8e0:	e9c6 a800 	strd	sl, r8, [r6]
   ba8e4:	e7c0      	b.n	ba868 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb+0x44>
	...

000ba8e8 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   ba8e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   ba8ea:	b085      	sub	sp, #20
   ba8ec:	4604      	mov	r4, r0
   ba8ee:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
   ba8f2:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   ba8f6:	432b      	orrs	r3, r5
bool PublishQueuePosix::publishCommon(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2) {
   ba8f8:	460f      	mov	r7, r1
   ba8fa:	4616      	mov	r6, r2
    PublishQueueEvent *event = newRamEvent(eventName, eventData, flags1 | flags2);
   ba8fc:	f7ff fbec 	bl	ba0d8 <_ZN17PublishQueuePosix11newRamEventEPKcS1_N8particle5FlagsI15PublishFlagTypehEE>
    if (!event) {
   ba900:	4605      	mov	r5, r0
   ba902:	2800      	cmp	r0, #0
   ba904:	d03c      	beq.n	ba980 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x98>
    _log.trace("publishCommon eventName=%s eventData=%s", eventName, eventData ? eventData : "");
   ba906:	4b3f      	ldr	r3, [pc, #252]	; (baa04 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x11c>)
   ba908:	493f      	ldr	r1, [pc, #252]	; (baa08 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x120>)
   ba90a:	4840      	ldr	r0, [pc, #256]	; (baa0c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   ba90c:	2e00      	cmp	r6, #0
   ba90e:	bf18      	it	ne
   ba910:	4633      	movne	r3, r6
   ba912:	463a      	mov	r2, r7
   ba914:	f7fd f848 	bl	b79a8 <_ZNK5spark6Logger5traceEPKcz>
   ba918:	4620      	mov	r0, r4
   ba91a:	f7ff fbd0 	bl	ba0be <_ZN17PublishQueuePosix4lockEv>
	    != this->_M_impl._M_finish._M_last - 1)
   ba91e:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
	if (this->_M_impl._M_finish._M_cur
   ba922:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	    != this->_M_impl._M_finish._M_last - 1)
   ba926:	3a04      	subs	r2, #4
	if (this->_M_impl._M_finish._M_cur
   ba928:	4293      	cmp	r3, r2
        ramQueue.push_back(event);
   ba92a:	f104 0678 	add.w	r6, r4, #120	; 0x78
   ba92e:	d029      	beq.n	ba984 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x9c>
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   ba930:	b103      	cbz	r3, ba934 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x4c>
   ba932:	601d      	str	r5, [r3, #0]
	    ++this->_M_impl._M_finish._M_cur;
   ba934:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   ba938:	3304      	adds	r3, #4
        _log.trace("fileQueueLen=%u ramQueueLen=%u connected=%d", fileQueue.getQueueLen(), ramQueue.size(), Particle.connected());
   ba93a:	1d25      	adds	r5, r4, #4
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   ba93c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
   ba940:	4628      	mov	r0, r5
   ba942:	f001 fed3 	bl	bc6ec <_ZNK14SequentialFile11getQueueLenEv>
   ba946:	9003      	str	r0, [sp, #12]
   ba948:	4630      	mov	r0, r6
   ba94a:	f7ff fcd9 	bl	ba300 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   ba94e:	9002      	str	r0, [sp, #8]
   ba950:	f002 fc04 	bl	bd15c <spark_cloud_flag_connected>
   ba954:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   ba958:	9000      	str	r0, [sp, #0]
   ba95a:	492d      	ldr	r1, [pc, #180]	; (baa10 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x128>)
   ba95c:	482b      	ldr	r0, [pc, #172]	; (baa0c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   ba95e:	f7fd f823 	bl	b79a8 <_ZNK5spark6Logger5traceEPKcz>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   ba962:	4628      	mov	r0, r5
   ba964:	f001 fec2 	bl	bc6ec <_ZNK14SequentialFile11getQueueLenEv>
   ba968:	2800      	cmp	r0, #0
   ba96a:	d03b      	beq.n	ba9e4 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xfc>
            writeQueueToFiles();
   ba96c:	4620      	mov	r0, r4
   ba96e:	f7ff fd0b 	bl	ba388 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
        checkQueueLimits();
   ba972:	4620      	mov	r0, r4
   ba974:	f7ff fd68 	bl	ba448 <_ZN17PublishQueuePosix16checkQueueLimitsEv>
   ba978:	6f60      	ldr	r0, [r4, #116]	; 0x74
   ba97a:	f002 f8bb 	bl	bcaf4 <os_mutex_recursive_unlock>
    return true;
   ba97e:	2001      	movs	r0, #1
}
   ba980:	b005      	add	sp, #20
   ba982:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (size() == max_size())
   ba984:	4630      	mov	r0, r6
   ba986:	f7ff fcbb 	bl	ba300 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   ba98a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   ba98e:	4298      	cmp	r0, r3
   ba990:	d102      	bne.n	ba998 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xb0>
	  __throw_length_error(
   ba992:	4820      	ldr	r0, [pc, #128]	; (baa14 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x12c>)
   ba994:	f005 feb5 	bl	c0702 <_ZSt20__throw_length_errorPKc>
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   ba998:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   ba99c:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   ba99e:	1a9a      	subs	r2, r3, r2
   ba9a0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   ba9a2:	eba3 03a2 	sub.w	r3, r3, r2, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   ba9a6:	2b01      	cmp	r3, #1
   ba9a8:	d804      	bhi.n	ba9b4 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xcc>
	  _M_reallocate_map(__nodes_to_add, false);
   ba9aa:	2200      	movs	r2, #0
   ba9ac:	2101      	movs	r1, #1
   ba9ae:	4630      	mov	r0, r6
   ba9b0:	f7ff ff38 	bl	ba824 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   ba9b4:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   ba9b8:	f8d4 709c 	ldr.w	r7, [r4, #156]	; 0x9c
   ba9bc:	f7f9 fb6b 	bl	b4096 <_Znwj>
   ba9c0:	6078      	str	r0, [r7, #4]
	    _Alloc_traits::construct(this->_M_impl,
   ba9c2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   ba9c6:	b103      	cbz	r3, ba9ca <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe2>
   ba9c8:	601d      	str	r5, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   ba9ca:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   ba9ce:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   ba9d0:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
	_M_first = *__new_node;
   ba9d4:	685b      	ldr	r3, [r3, #4]
   ba9d6:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	_M_last = _M_first + difference_type(_S_buffer_size());
   ba9da:	f503 7200 	add.w	r2, r3, #512	; 0x200
   ba9de:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
   ba9e2:	e7aa      	b.n	ba93a <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x52>
        if (fileQueue.getQueueLen() == 0 && (ramQueue.size() <= ramQueueSize) && Particle.connected()) {
   ba9e4:	4630      	mov	r0, r6
   ba9e6:	f7ff fc8b 	bl	ba300 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   ba9ea:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
   ba9ec:	4298      	cmp	r0, r3
   ba9ee:	d8bd      	bhi.n	ba96c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x84>
   ba9f0:	f002 fbb4 	bl	bd15c <spark_cloud_flag_connected>
   ba9f4:	2800      	cmp	r0, #0
   ba9f6:	d0b9      	beq.n	ba96c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x84>
            _log.trace("queued to ramQueue");
   ba9f8:	4907      	ldr	r1, [pc, #28]	; (baa18 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x130>)
   ba9fa:	4804      	ldr	r0, [pc, #16]	; (baa0c <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x124>)
   ba9fc:	f7fc ffd4 	bl	b79a8 <_ZNK5spark6Logger5traceEPKcz>
   baa00:	e7b7      	b.n	ba972 <_ZN17PublishQueuePosix13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x8a>
   baa02:	bf00      	nop
   baa04:	000c5454 	.word	0x000c5454
   baa08:	000c4d89 	.word	0x000c4d89
   baa0c:	2003e4d0 	.word	0x2003e4d0
   baa10:	000c4de1 	.word	0x000c4de1
   baa14:	000c4db1 	.word	0x000c4db1
   baa18:	000c4e0d 	.word	0x000c4e0d

000baa1c <_ZN17PublishQueuePosix16statePublishWaitEv>:
void PublishQueuePosix::statePublishWait() {
   baa1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (!publishComplete) {
   baa1e:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
void PublishQueuePosix::statePublishWait() {
   baa22:	4604      	mov	r4, r0
    if (!publishComplete) {
   baa24:	2b00      	cmp	r3, #0
   baa26:	d041      	beq.n	baaac <_ZN17PublishQueuePosix16statePublishWaitEv+0x90>
    if (publishSuccess) {
   baa28:	f890 30b1 	ldrb.w	r3, [r0, #177]	; 0xb1
        _log.trace("publish success %d", curFileNum);
   baa2c:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
    if (publishSuccess) {
   baa30:	2b00      	cmp	r3, #0
   baa32:	d03d      	beq.n	baab0 <_ZN17PublishQueuePosix16statePublishWaitEv+0x94>
        _log.trace("publish success %d", curFileNum);
   baa34:	4950      	ldr	r1, [pc, #320]	; (bab78 <_ZN17PublishQueuePosix16statePublishWaitEv+0x15c>)
   baa36:	4851      	ldr	r0, [pc, #324]	; (bab7c <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   baa38:	f7fc ffb6 	bl	b79a8 <_ZNK5spark6Logger5traceEPKcz>
        if (curFileNum) {
   baa3c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   baa40:	b1d3      	cbz	r3, baa78 <_ZN17PublishQueuePosix16statePublishWaitEv+0x5c>
            int fileNum = fileQueue.getFileFromQueue(false);
   baa42:	1d26      	adds	r6, r4, #4
   baa44:	2100      	movs	r1, #0
   baa46:	4630      	mov	r0, r6
   baa48:	f001 fe00 	bl	bc64c <_ZN14SequentialFile16getFileFromQueueEb>
            if (fileNum == curFileNum) {
   baa4c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   baa50:	4298      	cmp	r0, r3
            int fileNum = fileQueue.getFileFromQueue(false);
   baa52:	4605      	mov	r5, r0
            if (fileNum == curFileNum) {
   baa54:	d10d      	bne.n	baa72 <_ZN17PublishQueuePosix16statePublishWaitEv+0x56>
                fileQueue.getFileFromQueue(true);
   baa56:	2101      	movs	r1, #1
   baa58:	4630      	mov	r0, r6
   baa5a:	f001 fdf7 	bl	bc64c <_ZN14SequentialFile16getFileFromQueueEb>
                fileQueue.removeFileNum(fileNum, false);
   baa5e:	2200      	movs	r2, #0
   baa60:	4629      	mov	r1, r5
   baa62:	4630      	mov	r0, r6
   baa64:	f001 fc2a 	bl	bc2bc <_ZN14SequentialFile13removeFileNumEib>
                _log.trace("removed file %d", fileNum);
   baa68:	4945      	ldr	r1, [pc, #276]	; (bab80 <_ZN17PublishQueuePosix16statePublishWaitEv+0x164>)
   baa6a:	4844      	ldr	r0, [pc, #272]	; (bab7c <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   baa6c:	462a      	mov	r2, r5
   baa6e:	f7fc ff9b 	bl	b79a8 <_ZNK5spark6Logger5traceEPKcz>
            curFileNum = 0;
   baa72:	2300      	movs	r3, #0
   baa74:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
        delete curEvent;
   baa78:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   baa7c:	b110      	cbz	r0, baa84 <_ZN17PublishQueuePosix16statePublishWaitEv+0x68>
   baa7e:	2143      	movs	r1, #67	; 0x43
   baa80:	f7f9 fb0d 	bl	b409e <_ZdlPvj>
        curEvent = NULL;
   baa84:	2300      	movs	r3, #0
   baa86:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
        durationMs = waitBetweenPublish;
   baa8a:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
   baa8e:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
    stateHandler = &PublishQueuePosix::stateWait;
   baa92:	4b3c      	ldr	r3, [pc, #240]	; (bab84 <_ZN17PublishQueuePosix16statePublishWaitEv+0x168>)
   baa94:	9300      	str	r3, [sp, #0]
   baa96:	4669      	mov	r1, sp
   baa98:	2300      	movs	r3, #0
   baa9a:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   baa9e:	9301      	str	r3, [sp, #4]
   baaa0:	f7ff fd38 	bl	ba514 <_ZNSt8functionIFvR17PublishQueuePosixEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_.isra.0>
   baaa4:	f002 f85e 	bl	bcb64 <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis();
   baaa8:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
}
   baaac:	b002      	add	sp, #8
   baaae:	bd70      	pop	{r4, r5, r6, pc}
        _log.trace("publish failed %d", curFileNum);
   baab0:	4935      	ldr	r1, [pc, #212]	; (bab88 <_ZN17PublishQueuePosix16statePublishWaitEv+0x16c>)
   baab2:	4832      	ldr	r0, [pc, #200]	; (bab7c <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   baab4:	f7fc ff78 	bl	b79a8 <_ZNK5spark6Logger5traceEPKcz>
        durationMs = waitAfterFailure;
   baab8:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   baabc:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
        if (curFileNum) {
   baac0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   baac4:	b14b      	cbz	r3, baada <_ZN17PublishQueuePosix16statePublishWaitEv+0xbe>
            delete curEvent;
   baac6:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
   baaca:	b110      	cbz	r0, baad2 <_ZN17PublishQueuePosix16statePublishWaitEv+0xb6>
   baacc:	2143      	movs	r1, #67	; 0x43
   baace:	f7f9 fae6 	bl	b409e <_ZdlPvj>
            curEvent = NULL;
   baad2:	2300      	movs	r3, #0
   baad4:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
   baad8:	e7db      	b.n	baa92 <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
   baada:	4620      	mov	r0, r4
   baadc:	f7ff faef 	bl	ba0be <_ZN17PublishQueuePosix4lockEv>
	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
   baae0:	e9d4 3220 	ldrd	r3, r2, [r4, #128]	; 0x80
   baae4:	4293      	cmp	r3, r2
   baae6:	d013      	beq.n	bab10 <_ZN17PublishQueuePosix16statePublishWaitEv+0xf4>
   baae8:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   baaec:	f843 2c04 	str.w	r2, [r3, #-4]
	    --this->_M_impl._M_start._M_cur;
   baaf0:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
   baaf4:	3b04      	subs	r3, #4
   baaf6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
   baafa:	6f60      	ldr	r0, [r4, #116]	; 0x74
   baafc:	f001 fffa 	bl	bcaf4 <os_mutex_recursive_unlock>
            _log.trace("writing to files after publish failure");
   bab00:	4922      	ldr	r1, [pc, #136]	; (bab8c <_ZN17PublishQueuePosix16statePublishWaitEv+0x170>)
   bab02:	481e      	ldr	r0, [pc, #120]	; (bab7c <_ZN17PublishQueuePosix16statePublishWaitEv+0x160>)
   bab04:	f7fc ff50 	bl	b79a8 <_ZNK5spark6Logger5traceEPKcz>
            writeQueueToFiles();
   bab08:	4620      	mov	r0, r4
   bab0a:	f7ff fc3d 	bl	ba388 <_ZN17PublishQueuePosix17writeQueueToFilesEv>
   bab0e:	e7c0      	b.n	baa92 <_ZN17PublishQueuePosix16statePublishWaitEv+0x76>
                ramQueue.push_front(curEvent);
   bab10:	f104 0578 	add.w	r5, r4, #120	; 0x78
	if (size() == max_size())
   bab14:	4628      	mov	r0, r5
   bab16:	f7ff fbf3 	bl	ba300 <_ZNKSt5dequeIP17PublishQueueEventSaIS1_EE4sizeEv>
   bab1a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   bab1e:	4298      	cmp	r0, r3
   bab20:	d102      	bne.n	bab28 <_ZN17PublishQueuePosix16statePublishWaitEv+0x10c>
	  __throw_length_error(
   bab22:	481b      	ldr	r0, [pc, #108]	; (bab90 <_ZN17PublishQueuePosix16statePublishWaitEv+0x174>)
   bab24:	f005 fded 	bl	c0702 <_ZSt20__throw_length_errorPKc>
      }

      void
      _M_reserve_map_at_front(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add > size_type(this->_M_impl._M_start._M_node
   bab28:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   bab2c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
   bab2e:	429a      	cmp	r2, r3
   bab30:	d104      	bne.n	bab3c <_ZN17PublishQueuePosix16statePublishWaitEv+0x120>
				       - this->_M_impl._M_map))
	  _M_reallocate_map(__nodes_to_add, true);
   bab32:	2201      	movs	r2, #1
   bab34:	4611      	mov	r1, r2
   bab36:	4628      	mov	r0, r5
   bab38:	f7ff fe74 	bl	ba824 <_ZNSt5dequeIP17PublishQueueEventSaIS1_EE17_M_reallocate_mapEjb>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   bab3c:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
   bab40:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
   bab44:	f7f9 faa7 	bl	b4096 <_Znwj>
   bab48:	f845 0c04 	str.w	r0, [r5, #-4]
	    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
   bab4c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   bab50:	1f1a      	subs	r2, r3, #4
	_M_node = __new_node;
   bab52:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
	_M_first = *__new_node;
   bab56:	f853 3c04 	ldr.w	r3, [r3, #-4]
   bab5a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	_M_last = _M_first + difference_type(_S_buffer_size());
   bab5e:	f503 7200 	add.w	r2, r3, #512	; 0x200
   bab62:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
	    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;
   bab66:	f503 72fe 	add.w	r2, r3, #508	; 0x1fc
   bab6a:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   bab6e:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   bab72:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
      }
   bab76:	e7c0      	b.n	baafa <_ZN17PublishQueuePosix16statePublishWaitEv+0xde>
   bab78:	000c4e20 	.word	0x000c4e20
   bab7c:	2003e4d0 	.word	0x2003e4d0
   bab80:	000c4e33 	.word	0x000c4e33
   bab84:	000ba55d 	.word	0x000ba55d
   bab88:	000c4e43 	.word	0x000c4e43
   bab8c:	000c4e55 	.word	0x000c4e55
   bab90:	000c4db1 	.word	0x000c4db1

000bab94 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE>:
   bab94:	4b01      	ldr	r3, [pc, #4]	; (bab9c <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0x8>)
   bab96:	4a02      	ldr	r2, [pc, #8]	; (baba0 <_GLOBAL__sub_I__ZN17PublishQueuePosix9_instanceE+0xc>)
   bab98:	601a      	str	r2, [r3, #0]
}
   bab9a:	4770      	bx	lr
   bab9c:	2003e4d0 	.word	0x2003e4d0
   baba0:	000c4e7c 	.word	0x000c4e7c

000baba4 <_ZN17PublishQueuePosixD1Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   baba4:	b510      	push	{r4, lr}
   baba6:	4b07      	ldr	r3, [pc, #28]	; (babc4 <_ZN17PublishQueuePosixD1Ev+0x20>)
   baba8:	4604      	mov	r4, r0
   babaa:	f840 3bc0 	str.w	r3, [r0], #192
   babae:	f7fa fcc4 	bl	b553a <_ZNSt14_Function_baseD1Ev>
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   babb2:	f104 0078 	add.w	r0, r4, #120	; 0x78
   babb6:	f7ff fc95 	bl	ba4e4 <_ZNSt11_Deque_baseIP17PublishQueueEventSaIS1_EED1Ev>
   babba:	1d20      	adds	r0, r4, #4
   babbc:	f001 fc02 	bl	bc3c4 <_ZN14SequentialFileD1Ev>
}
   babc0:	4620      	mov	r0, r4
   babc2:	bd10      	pop	{r4, pc}
   babc4:	000c4e90 	.word	0x000c4e90

000babc8 <_ZN17PublishQueuePosixD0Ev>:
PublishQueuePosix::~PublishQueuePosix() {
   babc8:	b510      	push	{r4, lr}
   babca:	4604      	mov	r4, r0
}
   babcc:	f7ff ffea 	bl	baba4 <_ZN17PublishQueuePosixD1Ev>
   babd0:	4620      	mov	r0, r4
   babd2:	21d0      	movs	r1, #208	; 0xd0
   babd4:	f7f9 fa63 	bl	b409e <_ZdlPvj>
   babd8:	4620      	mov	r0, r4
   babda:	bd10      	pop	{r4, pc}

000babdc <_ZN10RHDatagramC1ER15RHGenericDriverh>:
#include <RHDatagram.h>

RHDatagram::RHDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
    :
    _driver(driver),
    _thisAddress(thisAddress)
   babdc:	6001      	str	r1, [r0, #0]
   babde:	7102      	strb	r2, [r0, #4]
{
}
   babe0:	4770      	bx	lr

000babe2 <_ZN10RHDatagram9availableEv>:
    return false;
}

bool RHDatagram::available()
{
    return _driver.available();
   babe2:	6800      	ldr	r0, [r0, #0]
   babe4:	6803      	ldr	r3, [r0, #0]
   babe6:	68db      	ldr	r3, [r3, #12]
   babe8:	4718      	bx	r3

000babea <_ZN10RHDatagram14waitPacketSentEv>:
    _driver.waitAvailable(polldelay);
}

bool RHDatagram::waitPacketSent()
{
    return _driver.waitPacketSent();
   babea:	6800      	ldr	r0, [r0, #0]
   babec:	6803      	ldr	r3, [r0, #0]
   babee:	6a1b      	ldr	r3, [r3, #32]
   babf0:	4718      	bx	r3

000babf2 <_ZN10RHDatagram20waitAvailableTimeoutEtt>:
    return _driver.waitPacketSent(timeout);
}

bool RHDatagram::waitAvailableTimeout(uint16_t timeout, uint16_t polldelay)
{
    return _driver.waitAvailableTimeout(timeout, polldelay);
   babf2:	6800      	ldr	r0, [r0, #0]
   babf4:	6803      	ldr	r3, [r0, #0]
   babf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   babf8:	4718      	bx	r3

000babfa <_ZN10RHDatagram11thisAddressEv>:
}

uint8_t RHDatagram::thisAddress()
{
    return _thisAddress;
}
   babfa:	7900      	ldrb	r0, [r0, #4]
   babfc:	4770      	bx	lr

000babfe <_ZN10RHDatagram11setHeaderToEh>:

void RHDatagram::setHeaderTo(uint8_t to)
{
    _driver.setHeaderTo(to);
   babfe:	6800      	ldr	r0, [r0, #0]
   bac00:	6803      	ldr	r3, [r0, #0]
   bac02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   bac04:	4718      	bx	r3

000bac06 <_ZN10RHDatagram6sendtoEPhhh>:
{
   bac06:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bac08:	4605      	mov	r5, r0
   bac0a:	460c      	mov	r4, r1
    setHeaderTo(address);
   bac0c:	4619      	mov	r1, r3
{
   bac0e:	9201      	str	r2, [sp, #4]
    setHeaderTo(address);
   bac10:	f7ff fff5 	bl	babfe <_ZN10RHDatagram11setHeaderToEh>
    return _driver.send(buf, len);
   bac14:	6828      	ldr	r0, [r5, #0]
   bac16:	9a01      	ldr	r2, [sp, #4]
   bac18:	6803      	ldr	r3, [r0, #0]
   bac1a:	695b      	ldr	r3, [r3, #20]
   bac1c:	4621      	mov	r1, r4
}
   bac1e:	b003      	add	sp, #12
   bac20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return _driver.send(buf, len);
   bac24:	4718      	bx	r3

000bac26 <_ZN10RHDatagram13setHeaderFromEh>:
}

void RHDatagram::setHeaderFrom(uint8_t from)
{
    _driver.setHeaderFrom(from);
   bac26:	6800      	ldr	r0, [r0, #0]
   bac28:	6803      	ldr	r3, [r0, #0]
   bac2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bac2c:	4718      	bx	r3

000bac2e <_ZN10RHDatagram14setThisAddressEh>:
{
   bac2e:	b538      	push	{r3, r4, r5, lr}
   bac30:	4604      	mov	r4, r0
    _driver.setThisAddress(thisAddress);
   bac32:	6800      	ldr	r0, [r0, #0]
   bac34:	6803      	ldr	r3, [r0, #0]
{
   bac36:	460d      	mov	r5, r1
    _driver.setThisAddress(thisAddress);
   bac38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bac3a:	4798      	blx	r3
    setHeaderFrom(thisAddress);
   bac3c:	4629      	mov	r1, r5
   bac3e:	4620      	mov	r0, r4
   bac40:	f7ff fff1 	bl	bac26 <_ZN10RHDatagram13setHeaderFromEh>
    _thisAddress = thisAddress;
   bac44:	7125      	strb	r5, [r4, #4]
}
   bac46:	bd38      	pop	{r3, r4, r5, pc}

000bac48 <_ZN10RHDatagram4initEv>:
{
   bac48:	b538      	push	{r3, r4, r5, lr}
   bac4a:	4604      	mov	r4, r0
    bool ret = _driver.init();
   bac4c:	6800      	ldr	r0, [r0, #0]
   bac4e:	6803      	ldr	r3, [r0, #0]
   bac50:	689b      	ldr	r3, [r3, #8]
   bac52:	4798      	blx	r3
    if (ret)
   bac54:	4605      	mov	r5, r0
   bac56:	b118      	cbz	r0, bac60 <_ZN10RHDatagram4initEv+0x18>
	setThisAddress(_thisAddress);
   bac58:	7921      	ldrb	r1, [r4, #4]
   bac5a:	4620      	mov	r0, r4
   bac5c:	f7ff ffe7 	bl	bac2e <_ZN10RHDatagram14setThisAddressEh>
}
   bac60:	4628      	mov	r0, r5
   bac62:	bd38      	pop	{r3, r4, r5, pc}

000bac64 <_ZN10RHDatagram11setHeaderIdEh>:
}

void RHDatagram::setHeaderId(uint8_t id)
{
    _driver.setHeaderId(id);
   bac64:	6800      	ldr	r0, [r0, #0]
   bac66:	6803      	ldr	r3, [r0, #0]
   bac68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bac6a:	4718      	bx	r3

000bac6c <_ZN10RHDatagram14setHeaderFlagsEhh>:
}

void RHDatagram::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _driver.setHeaderFlags(set, clear);
   bac6c:	6800      	ldr	r0, [r0, #0]
   bac6e:	6803      	ldr	r3, [r0, #0]
   bac70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bac72:	4718      	bx	r3

000bac74 <_ZN10RHDatagram8headerToEv>:
}

uint8_t RHDatagram::headerTo()
{
    return _driver.headerTo();
   bac74:	6800      	ldr	r0, [r0, #0]
   bac76:	6803      	ldr	r3, [r0, #0]
   bac78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bac7a:	4718      	bx	r3

000bac7c <_ZN10RHDatagram10headerFromEv>:
}

uint8_t RHDatagram::headerFrom()
{
    return _driver.headerFrom();
   bac7c:	6800      	ldr	r0, [r0, #0]
   bac7e:	6803      	ldr	r3, [r0, #0]
   bac80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bac82:	4718      	bx	r3

000bac84 <_ZN10RHDatagram8headerIdEv>:
}

uint8_t RHDatagram::headerId()
{
    return _driver.headerId();
   bac84:	6800      	ldr	r0, [r0, #0]
   bac86:	6803      	ldr	r3, [r0, #0]
   bac88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bac8a:	4718      	bx	r3

000bac8c <_ZN10RHDatagram11headerFlagsEv>:
}

uint8_t RHDatagram::headerFlags()
{
    return _driver.headerFlags();
   bac8c:	6800      	ldr	r0, [r0, #0]
   bac8e:	6803      	ldr	r3, [r0, #0]
   bac90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bac92:	4718      	bx	r3

000bac94 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>:
{
   bac94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bac98:	4604      	mov	r4, r0
    if (_driver.recv(buf, len))
   bac9a:	6800      	ldr	r0, [r0, #0]
{
   bac9c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   bac9e:	461e      	mov	r6, r3
    if (_driver.recv(buf, len))
   baca0:	6803      	ldr	r3, [r0, #0]
   baca2:	691b      	ldr	r3, [r3, #16]
{
   baca4:	e9dd 9808 	ldrd	r9, r8, [sp, #32]
    if (_driver.recv(buf, len))
   baca8:	4798      	blx	r3
   bacaa:	4605      	mov	r5, r0
   bacac:	b1c8      	cbz	r0, bace2 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
	if (from)  *from =  headerFrom();
   bacae:	b11e      	cbz	r6, bacb8 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x24>
   bacb0:	4620      	mov	r0, r4
   bacb2:	f7ff ffe3 	bl	bac7c <_ZN10RHDatagram10headerFromEv>
   bacb6:	7030      	strb	r0, [r6, #0]
	if (to)    *to =    headerTo();
   bacb8:	f1b9 0f00 	cmp.w	r9, #0
   bacbc:	d004      	beq.n	bacc8 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x34>
   bacbe:	4620      	mov	r0, r4
   bacc0:	f7ff ffd8 	bl	bac74 <_ZN10RHDatagram8headerToEv>
   bacc4:	f889 0000 	strb.w	r0, [r9]
	if (id)    *id =    headerId();
   bacc8:	f1b8 0f00 	cmp.w	r8, #0
   baccc:	d004      	beq.n	bacd8 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x44>
   bacce:	4620      	mov	r0, r4
   bacd0:	f7ff ffd8 	bl	bac84 <_ZN10RHDatagram8headerIdEv>
   bacd4:	f888 0000 	strb.w	r0, [r8]
	if (flags) *flags = headerFlags();
   bacd8:	b11f      	cbz	r7, bace2 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_+0x4e>
   bacda:	4620      	mov	r0, r4
   bacdc:	f7ff ffd6 	bl	bac8c <_ZN10RHDatagram11headerFlagsEv>
   bace0:	7038      	strb	r0, [r7, #0]
}
   bace2:	4628      	mov	r0, r5
   bace4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000bace8 <_ZN15RHGenericDriver4initEv>:
}

bool RHGenericDriver::init()
{
    return true;
}
   bace8:	2001      	movs	r0, #1
   bacea:	4770      	bx	lr

000bacec <_ZN15RHGenericDriver14waitPacketSentEv>:
    return false;
}

bool RHGenericDriver::waitPacketSent()
{
    while (_mode == RHModeTx)
   bacec:	7903      	ldrb	r3, [r0, #4]
   bacee:	2b03      	cmp	r3, #3
   bacf0:	d0fc      	beq.n	bacec <_ZN15RHGenericDriver14waitPacketSentEv>
	YIELD; // Wait for any previous transmit to finish
    return true;
}
   bacf2:	2001      	movs	r0, #1
   bacf4:	4770      	bx	lr

000bacf6 <_ZN15RHGenericDriver15isChannelActiveEv>:

// subclasses are expected to override if CAD is available for that radio
bool RHGenericDriver::isChannelActive()
{
    return false;
}
   bacf6:	2000      	movs	r0, #0
   bacf8:	4770      	bx	lr

000bacfa <_ZN15RHGenericDriver14setPromiscuousEb>:

void RHGenericDriver::setPromiscuous(bool promiscuous)
{
    _promiscuous = promiscuous;
   bacfa:	7181      	strb	r1, [r0, #6]
}
   bacfc:	4770      	bx	lr

000bacfe <_ZN15RHGenericDriver14setThisAddressEh>:

void RHGenericDriver::setThisAddress(uint8_t address)
{
    _thisAddress = address;
   bacfe:	7141      	strb	r1, [r0, #5]
}
   bad00:	4770      	bx	lr

000bad02 <_ZN15RHGenericDriver11setHeaderToEh>:

void RHGenericDriver::setHeaderTo(uint8_t to)
{
    _txHeaderTo = to;
   bad02:	72c1      	strb	r1, [r0, #11]
}
   bad04:	4770      	bx	lr

000bad06 <_ZN15RHGenericDriver13setHeaderFromEh>:

void RHGenericDriver::setHeaderFrom(uint8_t from)
{
    _txHeaderFrom = from;
   bad06:	7301      	strb	r1, [r0, #12]
}
   bad08:	4770      	bx	lr

000bad0a <_ZN15RHGenericDriver11setHeaderIdEh>:

void RHGenericDriver::setHeaderId(uint8_t id)
{
    _txHeaderId = id;
   bad0a:	7341      	strb	r1, [r0, #13]
}
   bad0c:	4770      	bx	lr

000bad0e <_ZN15RHGenericDriver14setHeaderFlagsEhh>:

void RHGenericDriver::setHeaderFlags(uint8_t set, uint8_t clear)
{
    _txHeaderFlags &= ~clear;
   bad0e:	7b83      	ldrb	r3, [r0, #14]
   bad10:	ea23 0202 	bic.w	r2, r3, r2
    _txHeaderFlags |= set;
   bad14:	4311      	orrs	r1, r2
   bad16:	7381      	strb	r1, [r0, #14]
}
   bad18:	4770      	bx	lr

000bad1a <_ZN15RHGenericDriver8headerToEv>:

uint8_t RHGenericDriver::headerTo()
{
    return _rxHeaderTo;
   bad1a:	79c0      	ldrb	r0, [r0, #7]
}
   bad1c:	4770      	bx	lr

000bad1e <_ZN15RHGenericDriver10headerFromEv>:

uint8_t RHGenericDriver::headerFrom()
{
    return _rxHeaderFrom;
   bad1e:	7a00      	ldrb	r0, [r0, #8]
}
   bad20:	4770      	bx	lr

000bad22 <_ZN15RHGenericDriver8headerIdEv>:

uint8_t RHGenericDriver::headerId()
{
    return _rxHeaderId;
   bad22:	7a40      	ldrb	r0, [r0, #9]
}
   bad24:	4770      	bx	lr

000bad26 <_ZN15RHGenericDriver11headerFlagsEv>:

uint8_t RHGenericDriver::headerFlags()
{
    return _rxHeaderFlags;
   bad26:	7a80      	ldrb	r0, [r0, #10]
}
   bad28:	4770      	bx	lr

000bad2a <_ZN15RHGenericDriver8lastRssiEv>:

int16_t RHGenericDriver::lastRssi()
{
    return _lastRssi;
   bad2a:	8a00      	ldrh	r0, [r0, #16]
}
   bad2c:	b200      	sxth	r0, r0
   bad2e:	4770      	bx	lr

000bad30 <_ZN15RHGenericDriver4modeEv>:

RHGenericDriver::RHMode  RHGenericDriver::mode()
{
    return _mode;
   bad30:	7900      	ldrb	r0, [r0, #4]
}
   bad32:	4770      	bx	lr

000bad34 <_ZN15RHGenericDriver7setModeENS_6RHModeE>:

void  RHGenericDriver::setMode(RHMode mode)
{
    _mode = mode;
   bad34:	7101      	strb	r1, [r0, #4]
}
   bad36:	4770      	bx	lr

000bad38 <_ZN15RHGenericDriver5rxBadEv>:
#endif
}

uint16_t RHGenericDriver::rxBad()
{
    return _rxBad;
   bad38:	8a40      	ldrh	r0, [r0, #18]
}
   bad3a:	b280      	uxth	r0, r0
   bad3c:	4770      	bx	lr

000bad3e <_ZN15RHGenericDriver6rxGoodEv>:

uint16_t RHGenericDriver::rxGood()
{
    return _rxGood;
   bad3e:	8a80      	ldrh	r0, [r0, #20]
}
   bad40:	b280      	uxth	r0, r0
   bad42:	4770      	bx	lr

000bad44 <_ZN15RHGenericDriver6txGoodEv>:

uint16_t RHGenericDriver::txGood()
{
    return _txGood;
   bad44:	8ac0      	ldrh	r0, [r0, #22]
}
   bad46:	b280      	uxth	r0, r0
   bad48:	4770      	bx	lr

000bad4a <_ZN15RHGenericDriver13waitAvailableEt>:
{
   bad4a:	b538      	push	{r3, r4, r5, lr}
   bad4c:	4605      	mov	r5, r0
   bad4e:	460c      	mov	r4, r1
    while (!available())
   bad50:	682b      	ldr	r3, [r5, #0]
   bad52:	4628      	mov	r0, r5
   bad54:	68db      	ldr	r3, [r3, #12]
   bad56:	4798      	blx	r3
   bad58:	b928      	cbnz	r0, bad66 <_ZN15RHGenericDriver13waitAvailableEt+0x1c>
	if (polldelay)
   bad5a:	2c00      	cmp	r4, #0
   bad5c:	d0f8      	beq.n	bad50 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
	  delay(polldelay);
   bad5e:	4620      	mov	r0, r4
   bad60:	f002 fb1c 	bl	bd39c <delay>
   bad64:	e7f4      	b.n	bad50 <_ZN15RHGenericDriver13waitAvailableEt+0x6>
}
   bad66:	bd38      	pop	{r3, r4, r5, pc}

000bad68 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt>:
{
   bad68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bad6a:	4605      	mov	r5, r0
   bad6c:	460f      	mov	r7, r1
   bad6e:	4614      	mov	r4, r2
   bad70:	f001 fef8 	bl	bcb64 <HAL_Timer_Get_Milli_Seconds>
   bad74:	4606      	mov	r6, r0
   bad76:	f001 fef5 	bl	bcb64 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   bad7a:	1b80      	subs	r0, r0, r6
   bad7c:	42b8      	cmp	r0, r7
   bad7e:	d20a      	bcs.n	bad96 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x2e>
        if (available())
   bad80:	682b      	ldr	r3, [r5, #0]
   bad82:	4628      	mov	r0, r5
   bad84:	68db      	ldr	r3, [r3, #12]
   bad86:	4798      	blx	r3
   bad88:	b930      	cbnz	r0, bad98 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0x30>
	if (polldelay)
   bad8a:	2c00      	cmp	r4, #0
   bad8c:	d0f3      	beq.n	bad76 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
	  delay(polldelay);
   bad8e:	4620      	mov	r0, r4
   bad90:	f002 fb04 	bl	bd39c <delay>
   bad94:	e7ef      	b.n	bad76 <_ZN15RHGenericDriver20waitAvailableTimeoutEtt+0xe>
    return false;
   bad96:	2000      	movs	r0, #0
}
   bad98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bad9a <_ZN15RHGenericDriver14waitPacketSentEt>:
{
   bad9a:	b570      	push	{r4, r5, r6, lr}
   bad9c:	4604      	mov	r4, r0
   bad9e:	460e      	mov	r6, r1
   bada0:	f001 fee0 	bl	bcb64 <HAL_Timer_Get_Milli_Seconds>
   bada4:	4605      	mov	r5, r0
   bada6:	f001 fedd 	bl	bcb64 <HAL_Timer_Get_Milli_Seconds>
    while ((millis() - starttime) < timeout)
   badaa:	1b40      	subs	r0, r0, r5
   badac:	42b0      	cmp	r0, r6
   badae:	d204      	bcs.n	badba <_ZN15RHGenericDriver14waitPacketSentEt+0x20>
        if (_mode != RHModeTx) // Any previous transmit finished?
   badb0:	7923      	ldrb	r3, [r4, #4]
   badb2:	2b03      	cmp	r3, #3
   badb4:	d0f7      	beq.n	bada6 <_ZN15RHGenericDriver14waitPacketSentEt+0xc>
           return true;
   badb6:	2001      	movs	r0, #1
}
   badb8:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   badba:	2000      	movs	r0, #0
   badbc:	e7fc      	b.n	badb8 <_ZN15RHGenericDriver14waitPacketSentEt+0x1e>

000badbe <_ZN15RHGenericDriver7waitCADEv>:
{
   badbe:	b570      	push	{r4, r5, r6, lr}
    if (!_cad_timeout)
   badc0:	69c3      	ldr	r3, [r0, #28]
{
   badc2:	4604      	mov	r4, r0
    if (!_cad_timeout)
   badc4:	b1b3      	cbz	r3, badf4 <_ZN15RHGenericDriver7waitCADEv+0x36>
   badc6:	f001 fecd 	bl	bcb64 <HAL_Timer_Get_Milli_Seconds>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   badca:	2664      	movs	r6, #100	; 0x64
   badcc:	4605      	mov	r5, r0
    while (isChannelActive())
   badce:	6823      	ldr	r3, [r4, #0]
   badd0:	4620      	mov	r0, r4
   badd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   badd4:	4798      	blx	r3
   badd6:	b168      	cbz	r0, badf4 <_ZN15RHGenericDriver7waitCADEv+0x36>
   badd8:	f001 fec4 	bl	bcb64 <HAL_Timer_Get_Milli_Seconds>
         if (millis() - t > _cad_timeout) 
   baddc:	69e3      	ldr	r3, [r4, #28]
   badde:	1b40      	subs	r0, r0, r5
   bade0:	4298      	cmp	r0, r3
   bade2:	d809      	bhi.n	badf8 <_ZN15RHGenericDriver7waitCADEv+0x3a>
         delay(random(1, 10) * 100); // Should these values be configurable? Macros?
   bade4:	210a      	movs	r1, #10
   bade6:	2001      	movs	r0, #1
   bade8:	f004 fcdb 	bl	bf7a2 <_Z6randomii>
   badec:	4370      	muls	r0, r6
   badee:	f002 fad5 	bl	bd39c <delay>
    while (isChannelActive())
   badf2:	e7ec      	b.n	badce <_ZN15RHGenericDriver7waitCADEv+0x10>
	return true;
   badf4:	2001      	movs	r0, #1
}
   badf6:	bd70      	pop	{r4, r5, r6, pc}
	     return false;
   badf8:	2000      	movs	r0, #0
   badfa:	e7fc      	b.n	badf6 <_ZN15RHGenericDriver7waitCADEv+0x38>

000badfc <_ZN15RHGenericDriverC1Ev>:
    _cad_timeout(0)
   badfc:	4a06      	ldr	r2, [pc, #24]	; (bae18 <_ZN15RHGenericDriverC1Ev+0x1c>)
   badfe:	6002      	str	r2, [r0, #0]
   bae00:	21ff      	movs	r1, #255	; 0xff
   bae02:	2200      	movs	r2, #0
   bae04:	7102      	strb	r2, [r0, #4]
   bae06:	7141      	strb	r1, [r0, #5]
   bae08:	8242      	strh	r2, [r0, #18]
   bae0a:	72c1      	strb	r1, [r0, #11]
   bae0c:	8282      	strh	r2, [r0, #20]
   bae0e:	8181      	strh	r1, [r0, #12]
   bae10:	7382      	strb	r2, [r0, #14]
   bae12:	82c2      	strh	r2, [r0, #22]
   bae14:	61c2      	str	r2, [r0, #28]
}
   bae16:	4770      	bx	lr
   bae18:	000c4ea4 	.word	0x000c4ea4

000bae1c <_ZN12RHGenericSPI15attachInterruptEv>:
#endif

    /// SPI Configuration methods
    /// Enable SPI interrupts (if supported)
    /// This can be used in an SPI slave to indicate when an SPI message has been received
    virtual void attachInterrupt() {};
   bae1c:	4770      	bx	lr

000bae1e <_ZN12RHGenericSPI15detachInterruptEv>:

    /// Disable SPI interrupts (if supported)
    /// This can be used to diable the SPI interrupt in slaves where that is supported.
    virtual void detachInterrupt() {};
   bae1e:	4770      	bx	lr

000bae20 <_ZN12RHGenericSPI16beginTransactionEv>:
    /// Signal the start of an SPI transaction that must not be interrupted by other SPI actions
    /// In subclasses that support transactions this will ensure that other SPI transactions
    /// are blocked until this one is completed by endTransaction().
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void beginTransaction(){}
   bae20:	4770      	bx	lr

000bae22 <_ZN12RHGenericSPI14endTransactionEv>:

    /// Signal the end of an SPI transaction
    /// Base does nothing
    /// Might be overridden in subclass
    virtual void endTransaction(){}
   bae22:	4770      	bx	lr

000bae24 <_ZN12RHGenericSPI14usingInterruptEh>:
    /// Base does nothing
    /// Might be overridden in subclass
    /// \param[in] interruptNumber The number of the interrupt
    virtual void usingInterrupt(uint8_t interruptNumber){
      (void)interruptNumber;
    }
   bae24:	4770      	bx	lr

000bae26 <_ZN12RHGenericSPI11setBitOrderENS_8BitOrderE>:
{
}

void RHGenericSPI::setBitOrder(BitOrder bitOrder)
{
    _bitOrder = bitOrder;
   bae26:	7141      	strb	r1, [r0, #5]
}
   bae28:	4770      	bx	lr

000bae2a <_ZN12RHGenericSPI11setDataModeENS_8DataModeE>:

void RHGenericSPI::setDataMode(DataMode dataMode)
{
    _dataMode = dataMode; 
   bae2a:	7181      	strb	r1, [r0, #6]
}
   bae2c:	4770      	bx	lr

000bae2e <_ZN12RHGenericSPI12setFrequencyENS_9FrequencyE>:

void RHGenericSPI::setFrequency(Frequency frequency)
{
    _frequency = frequency;
   bae2e:	7101      	strb	r1, [r0, #4]
}
   bae30:	4770      	bx	lr
	...

000bae34 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>:
RHGenericSPI::RHGenericSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   bae34:	b530      	push	{r4, r5, lr}
    _dataMode(dataMode)
   bae36:	4d03      	ldr	r5, [pc, #12]	; (bae44 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE+0x10>)
   bae38:	6005      	str	r5, [r0, #0]
   bae3a:	7101      	strb	r1, [r0, #4]
   bae3c:	7142      	strb	r2, [r0, #5]
   bae3e:	7183      	strb	r3, [r0, #6]
}
   bae40:	bd30      	pop	{r4, r5, pc}
   bae42:	bf00      	nop
   bae44:	000c4f24 	.word	0x000c4f24

000bae48 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   bae48:	4770      	bx	lr

000bae4a <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   bae4a:	b510      	push	{r4, lr}
  }
   bae4c:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   bae4e:	4604      	mov	r4, r0
  }
   bae50:	f7f9 f925 	bl	b409e <_ZdlPvj>
   bae54:	4620      	mov	r0, r4
   bae56:	bd10      	pop	{r4, pc}

000bae58 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   bae58:	b40e      	push	{r1, r2, r3}
   bae5a:	b503      	push	{r0, r1, lr}
   bae5c:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   bae5e:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   bae60:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   bae64:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   bae66:	f004 fc60 	bl	bf72a <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   bae6a:	b002      	add	sp, #8
   bae6c:	f85d eb04 	ldr.w	lr, [sp], #4
   bae70:	b003      	add	sp, #12
   bae72:	4770      	bx	lr

000bae74 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   bae74:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bae76:	4604      	mov	r4, r0
   bae78:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   bae7a:	7922      	ldrb	r2, [r4, #4]
   bae7c:	68a3      	ldr	r3, [r4, #8]
   bae7e:	b132      	cbz	r2, bae8e <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   bae80:	b9a3      	cbnz	r3, baeac <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   bae82:	490b      	ldr	r1, [pc, #44]	; (baeb0 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   bae84:	b002      	add	sp, #8
   bae86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   bae8a:	f004 bb45 	b.w	bf518 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   bae8e:	4a09      	ldr	r2, [pc, #36]	; (baeb4 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   bae90:	7b26      	ldrb	r6, [r4, #12]
   bae92:	4d09      	ldr	r5, [pc, #36]	; (baeb8 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   bae94:	4909      	ldr	r1, [pc, #36]	; (baebc <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   bae96:	7b64      	ldrb	r4, [r4, #13]
   bae98:	2e01      	cmp	r6, #1
   bae9a:	bf18      	it	ne
   bae9c:	4629      	movne	r1, r5
   bae9e:	e9cd 1400 	strd	r1, r4, [sp]
   baea2:	4907      	ldr	r1, [pc, #28]	; (baec0 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   baea4:	f7ff ffd8 	bl	bae58 <_ZN5Print6printfEPKcz>
  }
   baea8:	b002      	add	sp, #8
   baeaa:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   baeac:	4a05      	ldr	r2, [pc, #20]	; (baec4 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   baeae:	e7ef      	b.n	bae90 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   baeb0:	000c4f61 	.word	0x000c4f61
   baeb4:	000c5454 	.word	0x000c5454
   baeb8:	000c4f5d 	.word	0x000c4f5d
   baebc:	000c4f59 	.word	0x000c4f59
   baec0:	000c4f77 	.word	0x000c4f77
   baec4:	000c4f50 	.word	0x000c4f50

000baec8 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>:
 #define SPI_CLOCK_DIV4  (VARIANT_MCK/21000000) // 4MHz
 #define SPI_CLOCK_DIV2  (VARIANT_MCK/10500000) // 8MHz
 #define SPI_CLOCK_DIV1  (VARIANT_MCK/5250000)  // 16MHz
#endif

RHHardwareSPI::RHHardwareSPI(Frequency frequency, BitOrder bitOrder, DataMode dataMode)
   baec8:	b510      	push	{r4, lr}
   baeca:	4604      	mov	r4, r0
    :
    RHGenericSPI(frequency, bitOrder, dataMode)
   baecc:	f7ff ffb2 	bl	bae34 <_ZN12RHGenericSPIC1ENS_9FrequencyENS_8BitOrderENS_8DataModeE>
   baed0:	4b05      	ldr	r3, [pc, #20]	; (baee8 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x20>)
   baed2:	6023      	str	r3, [r4, #0]
  {
   baed4:	4b05      	ldr	r3, [pc, #20]	; (baeec <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE+0x24>)
   baed6:	60a3      	str	r3, [r4, #8]
   baed8:	2301      	movs	r3, #1
   baeda:	7323      	strb	r3, [r4, #12]
   baedc:	2300      	movs	r3, #0
   baede:	6123      	str	r3, [r4, #16]
   baee0:	82a3      	strh	r3, [r4, #20]
{
}
   baee2:	4620      	mov	r0, r4
   baee4:	bd10      	pop	{r4, pc}
   baee6:	bf00      	nop
   baee8:	000c4fb0 	.word	0x000c4fb0
   baeec:	000c4f9c 	.word	0x000c4f9c

000baef0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   baef0:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   baef2:	4c0b      	ldr	r4, [pc, #44]	; (baf20 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   baef4:	7821      	ldrb	r1, [r4, #0]
   baef6:	f3bf 8f5b 	dmb	ish
   baefa:	f011 0101 	ands.w	r1, r1, #1
   baefe:	d10b      	bne.n	baf18 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   baf00:	4620      	mov	r0, r4
   baf02:	9101      	str	r1, [sp, #4]
   baf04:	f7f9 f8da 	bl	b40bc <__cxa_guard_acquire>
   baf08:	9901      	ldr	r1, [sp, #4]
   baf0a:	b128      	cbz	r0, baf18 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   baf0c:	4805      	ldr	r0, [pc, #20]	; (baf24 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   baf0e:	f004 fc5f 	bl	bf7d0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   baf12:	4620      	mov	r0, r4
   baf14:	f7f9 f8d7 	bl	b40c6 <__cxa_guard_release>
        return instance;
    }
   baf18:	4802      	ldr	r0, [pc, #8]	; (baf24 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   baf1a:	b002      	add	sp, #8
   baf1c:	bd10      	pop	{r4, pc}
   baf1e:	bf00      	nop
   baf20:	2003e4d8 	.word	0x2003e4d8
   baf24:	2003e4dc 	.word	0x2003e4dc

000baf28 <_ZN13RHHardwareSPI8transferEh>:

uint8_t RHHardwareSPI::transfer(uint8_t data) 
{
   baf28:	b507      	push	{r0, r1, r2, lr}
   baf2a:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   baf2c:	f7ff ffe0 	bl	baef0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   baf30:	9901      	ldr	r1, [sp, #4]
    return SPI.transfer(data);
}
   baf32:	b003      	add	sp, #12
   baf34:	f85d eb04 	ldr.w	lr, [sp], #4
   baf38:	f004 bd02 	b.w	bf940 <_ZN8SPIClass8transferEh>

000baf3c <_ZN13RHHardwareSPI15attachInterruptEv>:
    return status;
}
#endif

void RHHardwareSPI::attachInterrupt() 
{
   baf3c:	b508      	push	{r3, lr}
    }
    void transfer(const void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback) {
        instance().transfer(tx_buffer, rx_buffer, length, user_callback);
    }
    void attachInterrupt() {
        instance().attachInterrupt();
   baf3e:	f7ff ffd7 	bl	baef0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.attachInterrupt();
#endif
}
   baf42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   baf46:	f004 bd01 	b.w	bf94c <_ZN8SPIClass15attachInterruptEv>

000baf4a <_ZN13RHHardwareSPI15detachInterruptEv>:

void RHHardwareSPI::detachInterrupt() 
{
   baf4a:	b508      	push	{r3, lr}
    }
    void detachInterrupt() {
        instance().detachInterrupt();
   baf4c:	f7ff ffd0 	bl	baef0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if (RH_PLATFORM == RH_PLATFORM_ARDUINO || RH_PLATFORM == RH_PLATFORM_NRF52)
    SPI.detachInterrupt();
#endif
}
   baf50:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   baf54:	f004 bcfb 	b.w	bf94e <_ZN8SPIClass15detachInterruptEv>

000baf58 <_ZN13RHHardwareSPI5beginEv>:
    
void RHHardwareSPI::begin() 
{
   baf58:	b510      	push	{r4, lr}
#if defined(SPI_HAS_TRANSACTION)
    // Perhaps this is a uniform interface for SPI?
    // Currently Teensy and ESP32 only
   uint32_t frequency;
   if (_frequency == Frequency16MHz)
   baf5a:	7903      	ldrb	r3, [r0, #4]
   baf5c:	2b04      	cmp	r3, #4
   baf5e:	d020      	beq.n	bafa2 <_ZN13RHHardwareSPI5beginEv+0x4a>
       frequency = 16000000;
   else if (_frequency == Frequency8MHz)
   baf60:	2b03      	cmp	r3, #3
   baf62:	d020      	beq.n	bafa6 <_ZN13RHHardwareSPI5beginEv+0x4e>
       frequency = 8000000;
   else if (_frequency == Frequency4MHz)
   baf64:	2b02      	cmp	r3, #2
   baf66:	d020      	beq.n	bafaa <_ZN13RHHardwareSPI5beginEv+0x52>
       frequency = 4000000;
   else if (_frequency == Frequency2MHz)
       frequency = 2000000;
   else
       frequency = 1000000;
   baf68:	4a11      	ldr	r2, [pc, #68]	; (bafb0 <_ZN13RHHardwareSPI5beginEv+0x58>)
   baf6a:	4912      	ldr	r1, [pc, #72]	; (bafb4 <_ZN13RHHardwareSPI5beginEv+0x5c>)
   baf6c:	2b01      	cmp	r3, #1
   baf6e:	bf18      	it	ne
   baf70:	460a      	movne	r2, r1
//   ::BitOrder bitOrder;
#else
    uint8_t bitOrder;
#endif

   if (_bitOrder == BitOrderLSBFirst)
   baf72:	7941      	ldrb	r1, [r0, #5]
       bitOrder = LSBFIRST;
   else
       bitOrder = MSBFIRST;
   
    uint8_t dataMode;
    if (_dataMode == DataMode0)
   baf74:	7983      	ldrb	r3, [r0, #6]
       bitOrder = LSBFIRST;
   baf76:	3901      	subs	r1, #1
   baf78:	bf18      	it	ne
   baf7a:	2101      	movne	r1, #1
    if (_dataMode == DataMode0)
   baf7c:	b133      	cbz	r3, baf8c <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE0;
    else if (_dataMode == DataMode1)
   baf7e:	2b01      	cmp	r3, #1
   baf80:	d004      	beq.n	baf8c <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE1;
    else if (_dataMode == DataMode2)
   baf82:	2b02      	cmp	r3, #2
   baf84:	d002      	beq.n	baf8c <_ZN13RHHardwareSPI5beginEv+0x34>
	dataMode = SPI_MODE2;
    else if (_dataMode == DataMode3)
	dataMode = SPI_MODE3;
    else
	dataMode = SPI_MODE0;
   baf86:	2b03      	cmp	r3, #3
   baf88:	bf18      	it	ne
   baf8a:	2300      	movne	r3, #0
class SPISettings : public Printable {
   baf8c:	2400      	movs	r4, #0
   baf8e:	7304      	strb	r4, [r0, #12]
   baf90:	6102      	str	r2, [r0, #16]
   baf92:	7501      	strb	r1, [r0, #20]
   baf94:	7543      	strb	r3, [r0, #21]
        instance().begin();
   baf96:	f7ff ffab 	bl	baef0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#else
 #warning RHHardwareSPI does not support this platform yet. Consider adding it and contributing a patch.
#endif

#endif // SPI_HAS_TRANSACTION
}
   baf9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   baf9e:	f004 bc21 	b.w	bf7e4 <_ZN8SPIClass5beginEv>
       frequency = 16000000;
   bafa2:	4a05      	ldr	r2, [pc, #20]	; (bafb8 <_ZN13RHHardwareSPI5beginEv+0x60>)
   bafa4:	e7e5      	b.n	baf72 <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 8000000;
   bafa6:	4a05      	ldr	r2, [pc, #20]	; (bafbc <_ZN13RHHardwareSPI5beginEv+0x64>)
   bafa8:	e7e3      	b.n	baf72 <_ZN13RHHardwareSPI5beginEv+0x1a>
       frequency = 4000000;
   bafaa:	4a05      	ldr	r2, [pc, #20]	; (bafc0 <_ZN13RHHardwareSPI5beginEv+0x68>)
   bafac:	e7e1      	b.n	baf72 <_ZN13RHHardwareSPI5beginEv+0x1a>
   bafae:	bf00      	nop
   bafb0:	001e8480 	.word	0x001e8480
   bafb4:	000f4240 	.word	0x000f4240
   bafb8:	00f42400 	.word	0x00f42400
   bafbc:	007a1200 	.word	0x007a1200
   bafc0:	003d0900 	.word	0x003d0900

000bafc4 <_ZN13RHHardwareSPI3endEv>:

void RHHardwareSPI::end() 
{
   bafc4:	b508      	push	{r3, lr}
        instance().end();
   bafc6:	f7ff ff93 	bl	baef0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    return SPI.end();
}
   bafca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   bafce:	f004 bc1d 	b.w	bf80c <_ZN8SPIClass3endEv>

000bafd2 <_ZN13RHHardwareSPI16beginTransactionEv>:

void RHHardwareSPI::beginTransaction()
{
   bafd2:	b510      	push	{r4, lr}
   bafd4:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   bafd6:	f7ff ff8b 	bl	baef0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   bafda:	f104 0108 	add.w	r1, r4, #8
#if defined(SPI_HAS_TRANSACTION)
    SPI.beginTransaction(_settings);
#endif
}
   bafde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bafe2:	f004 bc3f 	b.w	bf864 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000bafe6 <_ZN13RHHardwareSPI14endTransactionEv>:

void RHHardwareSPI::endTransaction()
{
   bafe6:	b508      	push	{r3, lr}
        instance().endTransaction();
   bafe8:	f7ff ff82 	bl	baef0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION)
    SPI.endTransaction();
#endif
}
   bafec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   baff0:	f004 bc1e 	b.w	bf830 <_ZN8SPIClass14endTransactionEv>

000baff4 <_ZN13RHHardwareSPI14usingInterruptEh>:

void RHHardwareSPI::usingInterrupt(uint8_t interrupt)
{
   baff4:	b508      	push	{r3, lr}
        instance().usingInterrupt(arg);
   baff6:	f7ff ff7b 	bl	baef0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
#if defined(SPI_HAS_TRANSACTION) && !defined(RH_MISSING_SPIUSINGINTERRUPT)
    SPI.usingInterrupt(interrupt);
#endif
    (void)interrupt;
}
   baffa:	bd08      	pop	{r3, pc}

000baffc <_GLOBAL__sub_I_hardware_spi>:
RHHardwareSPI hardware_spi;
   baffc:	2300      	movs	r3, #0
   baffe:	4802      	ldr	r0, [pc, #8]	; (bb008 <_GLOBAL__sub_I_hardware_spi+0xc>)
   bb000:	461a      	mov	r2, r3
   bb002:	4619      	mov	r1, r3
   bb004:	f7ff bf60 	b.w	baec8 <_ZN13RHHardwareSPIC1EN12RHGenericSPI9FrequencyENS0_8BitOrderENS0_8DataModeE>
   bb008:	2003e4e4 	.word	0x2003e4e4

000bb00c <_ZN6RHMesh17isPhysicalAddressEPhh>:
////////////////////////////////////////////////////////////////////
// Subclasses may want to override
bool RHMesh::isPhysicalAddress(uint8_t* address, uint8_t addresslen)
{
    // Can only handle physical addresses 1 octet long, which is the physical node address
    return addresslen == 1 && address[0] == _thisAddress;
   bb00c:	2a01      	cmp	r2, #1
   bb00e:	d105      	bne.n	bb01c <_ZN6RHMesh17isPhysicalAddressEPhh+0x10>
   bb010:	7a00      	ldrb	r0, [r0, #8]
   bb012:	780b      	ldrb	r3, [r1, #0]
   bb014:	1a1b      	subs	r3, r3, r0
   bb016:	4258      	negs	r0, r3
   bb018:	4158      	adcs	r0, r3
   bb01a:	4770      	bx	lr
   bb01c:	2000      	movs	r0, #0
}
   bb01e:	4770      	bx	lr

000bb020 <_ZN6RHMesh5doArpEh>:
{
   bb020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   bb024:	4c25      	ldr	r4, [pc, #148]	; (bb0bc <_ZN6RHMesh5doArpEh+0x9c>)
   bb026:	2301      	movs	r3, #1
{
   bb028:	b086      	sub	sp, #24
    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST;
   bb02a:	7023      	strb	r3, [r4, #0]
    p->destlen = 1; 
   bb02c:	7063      	strb	r3, [r4, #1]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   bb02e:	2300      	movs	r3, #0
{
   bb030:	460f      	mov	r7, r1
    p->dest = address; // Who we are looking for
   bb032:	70a1      	strb	r1, [r4, #2]
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   bb034:	9300      	str	r3, [sp, #0]
   bb036:	2203      	movs	r2, #3
   bb038:	23ff      	movs	r3, #255	; 0xff
   bb03a:	4621      	mov	r1, r4
{
   bb03c:	4606      	mov	r6, r0
    uint8_t error = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 2, RH_BROADCAST_ADDRESS);
   bb03e:	f000 fbb7 	bl	bb7b0 <_ZN8RHRouter10sendtoWaitEPhhhh>
    if (error !=  RH_ROUTER_ERROR_NONE)
   bb042:	b120      	cbz	r0, bb04e <_ZN6RHMesh5doArpEh+0x2e>
	return false;
   bb044:	2500      	movs	r5, #0
}
   bb046:	4628      	mov	r0, r5
   bb048:	b006      	add	sp, #24
   bb04a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    uint8_t messageLen = sizeof(_tmpMessage);
   bb04e:	237a      	movs	r3, #122	; 0x7a
   bb050:	f88d 3017 	strb.w	r3, [sp, #23]
   bb054:	f001 fd86 	bl	bcb64 <HAL_Timer_Get_Milli_Seconds>
	if (waitAvailableTimeout(timeLeft))
   bb058:	f106 0904 	add.w	r9, r6, #4
   bb05c:	4680      	mov	r8, r0
    while ((timeLeft = RH_MESH_ARP_TIMEOUT - (millis() - starttime)) > 0)
   bb05e:	f508 657a 	add.w	r5, r8, #4000	; 0xfa0
   bb062:	f001 fd7f 	bl	bcb64 <HAL_Timer_Get_Milli_Seconds>
   bb066:	1a29      	subs	r1, r5, r0
   bb068:	2900      	cmp	r1, #0
   bb06a:	ddeb      	ble.n	bb044 <_ZN6RHMesh5doArpEh+0x24>
	if (waitAvailableTimeout(timeLeft))
   bb06c:	2200      	movs	r2, #0
   bb06e:	b289      	uxth	r1, r1
   bb070:	4648      	mov	r0, r9
   bb072:	f7ff fdbe 	bl	babf2 <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   bb076:	2800      	cmp	r0, #0
   bb078:	d0f3      	beq.n	bb062 <_ZN6RHMesh5doArpEh+0x42>
	    if (RHRouter::recvfromAck(_tmpMessage, &messageLen))
   bb07a:	2300      	movs	r3, #0
   bb07c:	e9cd 3302 	strd	r3, r3, [sp, #8]
   bb080:	e9cd 3300 	strd	r3, r3, [sp]
   bb084:	f10d 0217 	add.w	r2, sp, #23
   bb088:	4621      	mov	r1, r4
   bb08a:	4630      	mov	r0, r6
   bb08c:	f000 fb9a 	bl	bb7c4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   bb090:	4605      	mov	r5, r0
   bb092:	2800      	cmp	r0, #0
   bb094:	d0e3      	beq.n	bb05e <_ZN6RHMesh5doArpEh+0x3e>
		if (   messageLen > 1
   bb096:	f89d 3017 	ldrb.w	r3, [sp, #23]
   bb09a:	2b01      	cmp	r3, #1
   bb09c:	d9df      	bls.n	bb05e <_ZN6RHMesh5doArpEh+0x3e>
		       && p->header.msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   bb09e:	f894 a000 	ldrb.w	sl, [r4]
   bb0a2:	f1ba 0f02 	cmp.w	sl, #2
   bb0a6:	d1da      	bne.n	bb05e <_ZN6RHMesh5doArpEh+0x3e>
		    addRouteTo(address, headerFrom());
   bb0a8:	4648      	mov	r0, r9
   bb0aa:	f7ff fde7 	bl	bac7c <_ZN10RHDatagram10headerFromEv>
   bb0ae:	4653      	mov	r3, sl
   bb0b0:	4602      	mov	r2, r0
   bb0b2:	4639      	mov	r1, r7
   bb0b4:	4630      	mov	r0, r6
   bb0b6:	f000 faf3 	bl	bb6a0 <_ZN8RHRouter10addRouteToEhhh>
		    return true;
   bb0ba:	e7c4      	b.n	bb046 <_ZN6RHMesh5doArpEh+0x26>
   bb0bc:	2003e4fc 	.word	0x2003e4fc

000bb0c0 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh>:
    if (   messageLen > 1 
   bb0c0:	2a01      	cmp	r2, #1
{
   bb0c2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   bb0c6:	4607      	mov	r7, r0
   bb0c8:	460e      	mov	r6, r1
   bb0ca:	4614      	mov	r4, r2
    if (   messageLen > 1 
   bb0cc:	d93b      	bls.n	bb146 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	&& m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE)
   bb0ce:	794d      	ldrb	r5, [r1, #5]
   bb0d0:	2d02      	cmp	r5, #2
   bb0d2:	d130      	bne.n	bb136 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x76>
	addRouteTo(d->dest, headerFrom());
   bb0d4:	f100 0804 	add.w	r8, r0, #4
   bb0d8:	79c9      	ldrb	r1, [r1, #7]
   bb0da:	9101      	str	r1, [sp, #4]
   bb0dc:	4640      	mov	r0, r8
   bb0de:	f7ff fdcd 	bl	bac7c <_ZN10RHDatagram10headerFromEv>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   bb0e2:	3c08      	subs	r4, #8
	addRouteTo(d->dest, headerFrom());
   bb0e4:	462b      	mov	r3, r5
   bb0e6:	4602      	mov	r2, r0
   bb0e8:	9901      	ldr	r1, [sp, #4]
   bb0ea:	4638      	mov	r0, r7
   bb0ec:	f000 fad8 	bl	bb6a0 <_ZN8RHRouter10addRouteToEhhh>
	uint8_t numRoutes = messageLen - sizeof(RoutedMessageHeader) - sizeof(MeshMessageHeader) - 2;
   bb0f0:	b2e5      	uxtb	r5, r4
	for (i = 0; i < numRoutes; i++)
   bb0f2:	f106 0308 	add.w	r3, r6, #8
   bb0f6:	2400      	movs	r4, #0
   bb0f8:	4622      	mov	r2, r4
   bb0fa:	4295      	cmp	r5, r2
   bb0fc:	f104 0401 	add.w	r4, r4, #1
   bb100:	b2e4      	uxtb	r4, r4
   bb102:	d904      	bls.n	bb10e <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x4e>
	    if (d->route[i] == _thisAddress)
   bb104:	f813 2b01 	ldrb.w	r2, [r3], #1
   bb108:	7a39      	ldrb	r1, [r7, #8]
   bb10a:	4291      	cmp	r1, r2
   bb10c:	d1f4      	bne.n	bb0f8 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x38>
   bb10e:	f104 0108 	add.w	r1, r4, #8
   bb112:	440e      	add	r6, r1
	while (i < numRoutes)
   bb114:	42a5      	cmp	r5, r4
   bb116:	d916      	bls.n	bb146 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	    addRouteTo(d->route[i++], headerFrom());
   bb118:	f816 1b01 	ldrb.w	r1, [r6], #1
   bb11c:	9101      	str	r1, [sp, #4]
   bb11e:	4640      	mov	r0, r8
   bb120:	f7ff fdac 	bl	bac7c <_ZN10RHDatagram10headerFromEv>
   bb124:	3401      	adds	r4, #1
   bb126:	4602      	mov	r2, r0
   bb128:	9901      	ldr	r1, [sp, #4]
   bb12a:	2302      	movs	r3, #2
   bb12c:	4638      	mov	r0, r7
   bb12e:	b2e4      	uxtb	r4, r4
   bb130:	f000 fab6 	bl	bb6a0 <_ZN8RHRouter10addRouteToEhhh>
	while (i < numRoutes)
   bb134:	e7ee      	b.n	bb114 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x54>
	     && m->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE)
   bb136:	2d03      	cmp	r5, #3
   bb138:	d105      	bne.n	bb146 <_ZN6RHMesh13peekAtMessageEPN8RHRouter13RoutedMessageEh+0x86>
	deleteRouteTo(d->dest);
   bb13a:	7989      	ldrb	r1, [r1, #6]
}
   bb13c:	b002      	add	sp, #8
   bb13e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	deleteRouteTo(d->dest);
   bb142:	f000 ba96 	b.w	bb672 <_ZN8RHRouter13deleteRouteToEh>
}
   bb146:	b002      	add	sp, #8
   bb148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bb14c <_ZN6RHMeshC1ER15RHGenericDriverh>:
RHMesh::RHMesh(RHGenericDriver& driver, uint8_t thisAddress) 
   bb14c:	b510      	push	{r4, lr}
   bb14e:	4604      	mov	r4, r0
    : RHRouter(driver, thisAddress)
   bb150:	f000 fae6 	bl	bb720 <_ZN8RHRouterC1ER15RHGenericDriverh>
   bb154:	4b01      	ldr	r3, [pc, #4]	; (bb15c <_ZN6RHMeshC1ER15RHGenericDriverh+0x10>)
   bb156:	6023      	str	r3, [r4, #0]
}
   bb158:	4620      	mov	r0, r4
   bb15a:	bd10      	pop	{r4, pc}
   bb15c:	000c4fe4 	.word	0x000c4fe4

000bb160 <_ZN6RHMesh10sendtoWaitEPhhhh>:
{
   bb160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   bb164:	2a79      	cmp	r2, #121	; 0x79
{
   bb166:	f89d 9020 	ldrb.w	r9, [sp, #32]
   bb16a:	4606      	mov	r6, r0
   bb16c:	460f      	mov	r7, r1
   bb16e:	4614      	mov	r4, r2
   bb170:	461d      	mov	r5, r3
    if (len > RH_MESH_MAX_MESSAGE_LEN)
   bb172:	d825      	bhi.n	bb1c0 <_ZN6RHMesh10sendtoWaitEPhhhh+0x60>
    if (address != RH_BROADCAST_ADDRESS)
   bb174:	2bff      	cmp	r3, #255	; 0xff
   bb176:	d114      	bne.n	bb1a2 <_ZN6RHMesh10sendtoWaitEPhhhh+0x42>
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   bb178:	f8df 8048 	ldr.w	r8, [pc, #72]	; bb1c4 <_ZN6RHMesh10sendtoWaitEPhhhh+0x64>
   bb17c:	4640      	mov	r0, r8
   bb17e:	2300      	movs	r3, #0
    memcpy(a->data, buf, len);
   bb180:	4622      	mov	r2, r4
   bb182:	4639      	mov	r1, r7
    a->header.msgType = RH_MESH_MESSAGE_TYPE_APPLICATION;
   bb184:	f800 3b01 	strb.w	r3, [r0], #1
    memcpy(a->data, buf, len);
   bb188:	f006 f83e 	bl	c1208 <memcpy>
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   bb18c:	1c62      	adds	r2, r4, #1
   bb18e:	f8cd 9020 	str.w	r9, [sp, #32]
   bb192:	462b      	mov	r3, r5
   bb194:	4641      	mov	r1, r8
   bb196:	4630      	mov	r0, r6
   bb198:	b2d2      	uxtb	r2, r2
}
   bb19a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return RHRouter::sendtoWait(_tmpMessage, sizeof(RHMesh::MeshMessageHeader) + len, address, flags);
   bb19e:	f000 bb07 	b.w	bb7b0 <_ZN8RHRouter10sendtoWaitEPhhhh>
	RoutingTableEntry* route = getRouteTo(address);
   bb1a2:	4619      	mov	r1, r3
   bb1a4:	f000 fa21 	bl	bb5ea <_ZN8RHRouter10getRouteToEh>
	if (!route && !doArp(address))
   bb1a8:	2800      	cmp	r0, #0
   bb1aa:	d1e5      	bne.n	bb178 <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
   bb1ac:	6833      	ldr	r3, [r6, #0]
   bb1ae:	4629      	mov	r1, r5
   bb1b0:	689b      	ldr	r3, [r3, #8]
   bb1b2:	4630      	mov	r0, r6
   bb1b4:	4798      	blx	r3
   bb1b6:	2800      	cmp	r0, #0
   bb1b8:	d1de      	bne.n	bb178 <_ZN6RHMesh10sendtoWaitEPhhhh+0x18>
	    return RH_ROUTER_ERROR_NO_ROUTE;
   bb1ba:	2002      	movs	r0, #2
}
   bb1bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return RH_ROUTER_ERROR_INVALID_LENGTH;
   bb1c0:	2001      	movs	r0, #1
   bb1c2:	e7fb      	b.n	bb1bc <_ZN6RHMesh10sendtoWaitEPhhhh+0x5c>
   bb1c4:	2003e4fc 	.word	0x2003e4fc

000bb1c8 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHMesh::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{     
   bb1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb1cc:	b089      	sub	sp, #36	; 0x24
   bb1ce:	4698      	mov	r8, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   bb1d0:	237a      	movs	r3, #122	; 0x7a
   bb1d2:	f88d 301a 	strb.w	r3, [sp, #26]
    uint8_t _source;
    uint8_t _dest;
    uint8_t _id;
    uint8_t _flags;
    uint8_t _hops;
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   bb1d6:	f10d 031f 	add.w	r3, sp, #31
   bb1da:	9303      	str	r3, [sp, #12]
   bb1dc:	f10d 031e 	add.w	r3, sp, #30
   bb1e0:	9302      	str	r3, [sp, #8]
   bb1e2:	4e5d      	ldr	r6, [pc, #372]	; (bb358 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
   bb1e4:	f10d 031d 	add.w	r3, sp, #29
   bb1e8:	9301      	str	r3, [sp, #4]
   bb1ea:	ab07      	add	r3, sp, #28
   bb1ec:	9300      	str	r3, [sp, #0]
{     
   bb1ee:	4689      	mov	r9, r1
   bb1f0:	4617      	mov	r7, r2
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   bb1f2:	f10d 031b 	add.w	r3, sp, #27
   bb1f6:	f10d 021a 	add.w	r2, sp, #26
   bb1fa:	4631      	mov	r1, r6
{     
   bb1fc:	e9dd ba12 	ldrd	fp, sl, [sp, #72]	; 0x48
   bb200:	4605      	mov	r5, r0
    if (RHRouter::recvfromAck(_tmpMessage, &tmpMessageLen, &_source, &_dest, &_id, &_flags, &_hops))
   bb202:	f000 fadf 	bl	bb7c4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>
   bb206:	4604      	mov	r4, r0
   bb208:	b920      	cbnz	r0, bb214 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x4c>
		// REVISIT: if this fails what can we do?
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
	    }
	}
    }
    return false;
   bb20a:	2400      	movs	r4, #0
}
   bb20c:	4620      	mov	r0, r4
   bb20e:	b009      	add	sp, #36	; 0x24
   bb210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (   tmpMessageLen >= 1 
   bb214:	f89d 301a 	ldrb.w	r3, [sp, #26]
   bb218:	b373      	cbz	r3, bb278 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb0>
	    && p->msgType == RH_MESH_MESSAGE_TYPE_APPLICATION)
   bb21a:	7832      	ldrb	r2, [r6, #0]
   bb21c:	bb62      	cbnz	r2, bb278 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb0>
	    if (source) *source = _source;
   bb21e:	f1b8 0f00 	cmp.w	r8, #0
   bb222:	d003      	beq.n	bb22c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x64>
   bb224:	f89d 201b 	ldrb.w	r2, [sp, #27]
   bb228:	f888 2000 	strb.w	r2, [r8]
	    if (dest)   *dest   = _dest;
   bb22c:	f1bb 0f00 	cmp.w	fp, #0
   bb230:	d003      	beq.n	bb23a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x72>
   bb232:	f89d 201c 	ldrb.w	r2, [sp, #28]
   bb236:	f88b 2000 	strb.w	r2, [fp]
	    if (id)     *id     = _id;
   bb23a:	f1ba 0f00 	cmp.w	sl, #0
   bb23e:	d003      	beq.n	bb248 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x80>
   bb240:	f89d 201d 	ldrb.w	r2, [sp, #29]
   bb244:	f88a 2000 	strb.w	r2, [sl]
	    if (flags)  *flags  = _flags;
   bb248:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bb24a:	b11a      	cbz	r2, bb254 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x8c>
   bb24c:	9914      	ldr	r1, [sp, #80]	; 0x50
   bb24e:	f89d 201e 	ldrb.w	r2, [sp, #30]
   bb252:	700a      	strb	r2, [r1, #0]
	    if (hops)   *hops   = _hops;
   bb254:	9a15      	ldr	r2, [sp, #84]	; 0x54
   bb256:	b11a      	cbz	r2, bb260 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x98>
   bb258:	9915      	ldr	r1, [sp, #84]	; 0x54
   bb25a:	f89d 201f 	ldrb.w	r2, [sp, #31]
   bb25e:	700a      	strb	r2, [r1, #0]
	    if (*len > msgLen)
   bb260:	783a      	ldrb	r2, [r7, #0]
	    memcpy(buf, a->data, *len);
   bb262:	493e      	ldr	r1, [pc, #248]	; (bb35c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x194>)
	    uint8_t msgLen = tmpMessageLen - sizeof(MeshMessageHeader);
   bb264:	3b01      	subs	r3, #1
   bb266:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   bb268:	429a      	cmp	r2, r3
		*len = msgLen;
   bb26a:	bf88      	it	hi
   bb26c:	703b      	strbhi	r3, [r7, #0]
	    memcpy(buf, a->data, *len);
   bb26e:	783a      	ldrb	r2, [r7, #0]
   bb270:	4648      	mov	r0, r9
   bb272:	f005 ffc9 	bl	c1208 <memcpy>
	    return true;
   bb276:	e7c9      	b.n	bb20c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	else if (   _dest == RH_BROADCAST_ADDRESS 
   bb278:	f89d 201c 	ldrb.w	r2, [sp, #28]
   bb27c:	2aff      	cmp	r2, #255	; 0xff
   bb27e:	d1c4      	bne.n	bb20a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		 && tmpMessageLen > 1 
   bb280:	2b01      	cmp	r3, #1
   bb282:	d9c2      	bls.n	bb20a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		 && p->msgType == RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_REQUEST)
   bb284:	7832      	ldrb	r2, [r6, #0]
   bb286:	2a01      	cmp	r2, #1
   bb288:	d1bf      	bne.n	bb20a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
	    if (_source == _thisAddress)
   bb28a:	7a2a      	ldrb	r2, [r5, #8]
   bb28c:	f89d 401b 	ldrb.w	r4, [sp, #27]
   bb290:	42a2      	cmp	r2, r4
   bb292:	d0ba      	beq.n	bb20a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
	    uint8_t numRoutes = tmpMessageLen - sizeof(MeshMessageHeader) - 2;
   bb294:	1edf      	subs	r7, r3, #3
   bb296:	4932      	ldr	r1, [pc, #200]	; (bb360 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x198>)
   bb298:	b2ff      	uxtb	r7, r7
   bb29a:	2300      	movs	r3, #0
   bb29c:	fa5f f883 	uxtb.w	r8, r3
	    for (i = 0; i < numRoutes; i++)
   bb2a0:	4547      	cmp	r7, r8
   bb2a2:	d906      	bls.n	bb2b2 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xea>
		if (d->route[i] == _thisAddress)
   bb2a4:	f811 0b01 	ldrb.w	r0, [r1], #1
   bb2a8:	4282      	cmp	r2, r0
   bb2aa:	f103 0301 	add.w	r3, r3, #1
   bb2ae:	d1f5      	bne.n	bb29c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xd4>
   bb2b0:	e7ab      	b.n	bb20a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
            addRouteTo(_source, headerFrom()); // The originator needs to be added regardless of node type
   bb2b2:	f105 0904 	add.w	r9, r5, #4
   bb2b6:	4648      	mov	r0, r9
   bb2b8:	f7ff fce0 	bl	bac7c <_ZN10RHDatagram10headerFromEv>
   bb2bc:	2302      	movs	r3, #2
   bb2be:	4602      	mov	r2, r0
   bb2c0:	4621      	mov	r1, r4
   bb2c2:	4628      	mov	r0, r5
   bb2c4:	f000 f9ec 	bl	bb6a0 <_ZN8RHRouter10addRouteToEhhh>
            if (_isa_router)
   bb2c8:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   bb2cc:	b193      	cbz	r3, bb2f4 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12c>
   bb2ce:	4c22      	ldr	r4, [pc, #136]	; (bb358 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
	        for (i = 0; i < numRoutes; i++)
   bb2d0:	1ba3      	subs	r3, r4, r6
   bb2d2:	b2db      	uxtb	r3, r3
   bb2d4:	429f      	cmp	r7, r3
   bb2d6:	d90c      	bls.n	bb2f2 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x12a>
		    addRouteTo(d->route[i], headerFrom());
   bb2d8:	78e1      	ldrb	r1, [r4, #3]
   bb2da:	9105      	str	r1, [sp, #20]
   bb2dc:	4648      	mov	r0, r9
   bb2de:	f7ff fccd 	bl	bac7c <_ZN10RHDatagram10headerFromEv>
   bb2e2:	9905      	ldr	r1, [sp, #20]
   bb2e4:	4602      	mov	r2, r0
   bb2e6:	2302      	movs	r3, #2
   bb2e8:	4628      	mov	r0, r5
   bb2ea:	f000 f9d9 	bl	bb6a0 <_ZN8RHRouter10addRouteToEhhh>
	        for (i = 0; i < numRoutes; i++)
   bb2ee:	3401      	adds	r4, #1
   bb2f0:	e7ee      	b.n	bb2d0 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x108>
   bb2f2:	46b8      	mov	r8, r7
	    if (isPhysicalAddress(&d->dest, d->destlen))
   bb2f4:	682b      	ldr	r3, [r5, #0]
   bb2f6:	7872      	ldrb	r2, [r6, #1]
   bb2f8:	68db      	ldr	r3, [r3, #12]
   bb2fa:	491a      	ldr	r1, [pc, #104]	; (bb364 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x19c>)
   bb2fc:	4628      	mov	r0, r5
   bb2fe:	4798      	blx	r3
   bb300:	4604      	mov	r4, r0
   bb302:	b160      	cbz	r0, bb31e <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x156>
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   bb304:	2302      	movs	r3, #2
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   bb306:	2400      	movs	r4, #0
		d->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_DISCOVERY_RESPONSE;
   bb308:	7033      	strb	r3, [r6, #0]
		RHRouter::sendtoWait((uint8_t*)d, tmpMessageLen, _source);
   bb30a:	f89d 201a 	ldrb.w	r2, [sp, #26]
   bb30e:	f89d 301b 	ldrb.w	r3, [sp, #27]
   bb312:	4911      	ldr	r1, [pc, #68]	; (bb358 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
   bb314:	9400      	str	r4, [sp, #0]
   bb316:	4628      	mov	r0, r5
   bb318:	f000 fa4a 	bl	bb7b0 <_ZN8RHRouter10sendtoWaitEPhhhh>
   bb31c:	e776      	b.n	bb20c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    else if ((i < _max_hops) && _isa_router)
   bb31e:	f895 3116 	ldrb.w	r3, [r5, #278]	; 0x116
   bb322:	4543      	cmp	r3, r8
   bb324:	f67f af71 	bls.w	bb20a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
   bb328:	f895 3117 	ldrb.w	r3, [r5, #279]	; 0x117
   bb32c:	2b00      	cmp	r3, #0
   bb32e:	f43f af6c 	beq.w	bb20a <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x42>
		tmpMessageLen++;
   bb332:	f89d 201a 	ldrb.w	r2, [sp, #26]
		d->route[numRoutes] = _thisAddress;
   bb336:	7a2b      	ldrb	r3, [r5, #8]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   bb338:	4907      	ldr	r1, [pc, #28]	; (bb358 <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x190>)
		d->route[numRoutes] = _thisAddress;
   bb33a:	443e      	add	r6, r7
		tmpMessageLen++;
   bb33c:	3201      	adds	r2, #1
		d->route[numRoutes] = _thisAddress;
   bb33e:	70f3      	strb	r3, [r6, #3]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   bb340:	f89d 301b 	ldrb.w	r3, [sp, #27]
   bb344:	9001      	str	r0, [sp, #4]
		tmpMessageLen++;
   bb346:	b2d2      	uxtb	r2, r2
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   bb348:	9300      	str	r3, [sp, #0]
   bb34a:	4628      	mov	r0, r5
   bb34c:	23ff      	movs	r3, #255	; 0xff
		tmpMessageLen++;
   bb34e:	f88d 201a 	strb.w	r2, [sp, #26]
		RHRouter::sendtoFromSourceWait(_tmpMessage, tmpMessageLen, RH_BROADCAST_ADDRESS, _source);
   bb352:	f000 f9f7 	bl	bb744 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
   bb356:	e759      	b.n	bb20c <_ZN6RHMesh11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
   bb358:	2003e4fc 	.word	0x2003e4fc
   bb35c:	2003e4fd 	.word	0x2003e4fd
   bb360:	2003e4ff 	.word	0x2003e4ff
   bb364:	2003e4fe 	.word	0x2003e4fe

000bb368 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh>:
{
   bb368:	b5f0      	push	{r4, r5, r6, r7, lr}
   bb36a:	b085      	sub	sp, #20
   bb36c:	4605      	mov	r5, r0
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   bb36e:	3004      	adds	r0, #4
{
   bb370:	460e      	mov	r6, r1
   bb372:	9203      	str	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   bb374:	f7ff fc82 	bl	bac7c <_ZN10RHDatagram10headerFromEv>
    uint8_t ret = RHRouter::route(message, messageLen);
   bb378:	9a03      	ldr	r2, [sp, #12]
    uint8_t from = headerFrom(); // Might get clobbered during call to superclass route()
   bb37a:	4607      	mov	r7, r0
    uint8_t ret = RHRouter::route(message, messageLen);
   bb37c:	4631      	mov	r1, r6
   bb37e:	4628      	mov	r0, r5
   bb380:	f000 f94a 	bl	bb618 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   bb384:	2802      	cmp	r0, #2
    uint8_t ret = RHRouter::route(message, messageLen);
   bb386:	4604      	mov	r4, r0
    if (   ret == RH_ROUTER_ERROR_NO_ROUTE
   bb388:	d001      	beq.n	bb38e <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x26>
	|| ret == RH_ROUTER_ERROR_UNABLE_TO_DELIVER)
   bb38a:	2805      	cmp	r0, #5
   bb38c:	d11b      	bne.n	bb3c6 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	deleteRouteTo(message->header.dest);
   bb38e:	7831      	ldrb	r1, [r6, #0]
   bb390:	4628      	mov	r0, r5
   bb392:	f000 f96e 	bl	bb672 <_ZN8RHRouter13deleteRouteToEh>
	if (message->header.source != _thisAddress)
   bb396:	7872      	ldrb	r2, [r6, #1]
   bb398:	7a2b      	ldrb	r3, [r5, #8]
   bb39a:	429a      	cmp	r2, r3
   bb39c:	d013      	beq.n	bb3c6 <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x5e>
	    p->header.msgType = RH_MESH_MESSAGE_TYPE_ROUTE_FAILURE;
   bb39e:	4c0b      	ldr	r4, [pc, #44]	; (bb3cc <_ZN6RHMesh5routeEPN8RHRouter13RoutedMessageEh+0x64>)
   bb3a0:	2303      	movs	r3, #3
   bb3a2:	7023      	strb	r3, [r4, #0]
	    p->dest = message->header.dest; // Who you were trying to deliver to
   bb3a4:	7833      	ldrb	r3, [r6, #0]
   bb3a6:	7063      	strb	r3, [r4, #1]
	    addRouteTo(message->header.source, from);
   bb3a8:	7871      	ldrb	r1, [r6, #1]
   bb3aa:	2302      	movs	r3, #2
   bb3ac:	463a      	mov	r2, r7
   bb3ae:	4628      	mov	r0, r5
   bb3b0:	f000 f976 	bl	bb6a0 <_ZN8RHRouter10addRouteToEhhh>
	    ret = RHRouter::sendtoWait((uint8_t*)p, sizeof(RHMesh::MeshMessageHeader) + 1, message->header.source);
   bb3b4:	2300      	movs	r3, #0
   bb3b6:	9300      	str	r3, [sp, #0]
   bb3b8:	4621      	mov	r1, r4
   bb3ba:	7873      	ldrb	r3, [r6, #1]
   bb3bc:	2202      	movs	r2, #2
   bb3be:	4628      	mov	r0, r5
   bb3c0:	f000 f9f6 	bl	bb7b0 <_ZN8RHRouter10sendtoWaitEPhhhh>
   bb3c4:	4604      	mov	r4, r0
}
   bb3c6:	4620      	mov	r0, r4
   bb3c8:	b005      	add	sp, #20
   bb3ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bb3cc:	2003e4fc 	.word	0x2003e4fc

000bb3d0 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>:

#include <RHReliableDatagram.h>

////////////////////////////////////////////////////////////////////
// Constructors
RHReliableDatagram::RHReliableDatagram(RHGenericDriver& driver, uint8_t thisAddress) 
   bb3d0:	b510      	push	{r4, lr}
   bb3d2:	4604      	mov	r4, r0
    : RHDatagram(driver, thisAddress)
   bb3d4:	f7ff fc02 	bl	babdc <_ZN10RHDatagramC1ER15RHGenericDriverh>
{
    _retransmissions = 0;
    _lastSequenceNumber = 0;
    _timeout = RH_DEFAULT_TIMEOUT;
   bb3d8:	23c8      	movs	r3, #200	; 0xc8
    _retransmissions = 0;
   bb3da:	2100      	movs	r1, #0
    _timeout = RH_DEFAULT_TIMEOUT;
   bb3dc:	81e3      	strh	r3, [r4, #14]
    _retries = RH_DEFAULT_RETRIES;
   bb3de:	2303      	movs	r3, #3
    _retransmissions = 0;
   bb3e0:	60a1      	str	r1, [r4, #8]
    _lastSequenceNumber = 0;
   bb3e2:	7321      	strb	r1, [r4, #12]
    _retries = RH_DEFAULT_RETRIES;
   bb3e4:	7423      	strb	r3, [r4, #16]
    memset(_seenIds, 0, sizeof(_seenIds));
   bb3e6:	f44f 7280 	mov.w	r2, #256	; 0x100
   bb3ea:	f104 0011 	add.w	r0, r4, #17
   bb3ee:	f005 ff33 	bl	c1258 <memset>
}
   bb3f2:	4620      	mov	r0, r4
   bb3f4:	bd10      	pop	{r4, pc}

000bb3f6 <_ZN18RHReliableDatagram11acknowledgeEhh>:
{
    _retransmissions = 0;
}
 
void RHReliableDatagram::acknowledge(uint8_t id, uint8_t from)
{
   bb3f6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   bb3f8:	4604      	mov	r4, r0
   bb3fa:	9201      	str	r2, [sp, #4]
    setHeaderId(id);
   bb3fc:	f7ff fc32 	bl	bac64 <_ZN10RHDatagram11setHeaderIdEh>
    setHeaderFlags(RH_FLAGS_ACK);
   bb400:	4620      	mov	r0, r4
   bb402:	2200      	movs	r2, #0
   bb404:	2180      	movs	r1, #128	; 0x80
   bb406:	f7ff fc31 	bl	bac6c <_ZN10RHDatagram14setHeaderFlagsEhh>
    // We would prefer to send a zero length ACK,
    // but if an RH_RF22 receives a 0 length message with a CRC error, it will never receive
    // a 0 length message again, until its reset, which makes everything hang :-(
    // So we send an ACK of 1 octet
    // REVISIT: should we send the RSSI for the information of the sender?
    uint8_t ack = '!';
   bb40a:	2221      	movs	r2, #33	; 0x21
    sendto(&ack, sizeof(ack), from); 
   bb40c:	9b01      	ldr	r3, [sp, #4]
    uint8_t ack = '!';
   bb40e:	f88d 200f 	strb.w	r2, [sp, #15]
    sendto(&ack, sizeof(ack), from); 
   bb412:	f10d 010f 	add.w	r1, sp, #15
   bb416:	2201      	movs	r2, #1
   bb418:	4620      	mov	r0, r4
   bb41a:	f7ff fbf4 	bl	bac06 <_ZN10RHDatagram6sendtoEPhhh>
    waitPacketSent();
   bb41e:	4620      	mov	r0, r4
   bb420:	f7ff fbe3 	bl	babea <_ZN10RHDatagram14waitPacketSentEv>
}
   bb424:	b004      	add	sp, #16
   bb426:	bd10      	pop	{r4, pc}

000bb428 <_ZN18RHReliableDatagram10sendtoWaitEPhhh>:
{
   bb428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   bb42c:	7b05      	ldrb	r5, [r0, #12]
   bb42e:	3501      	adds	r5, #1
   bb430:	b2ed      	uxtb	r5, r5
{
   bb432:	b087      	sub	sp, #28
   bb434:	4604      	mov	r4, r0
   bb436:	4689      	mov	r9, r1
   bb438:	4692      	mov	sl, r2
   bb43a:	4698      	mov	r8, r3
    uint8_t thisSequenceNumber = ++_lastSequenceNumber;
   bb43c:	7305      	strb	r5, [r0, #12]
    uint8_t retries = 0;
   bb43e:	2700      	movs	r7, #0
    while (retries++ <= _retries)
   bb440:	7c22      	ldrb	r2, [r4, #16]
   bb442:	463b      	mov	r3, r7
   bb444:	429a      	cmp	r2, r3
   bb446:	f107 0701 	add.w	r7, r7, #1
   bb44a:	b2ff      	uxtb	r7, r7
   bb44c:	d36b      	bcc.n	bb526 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xfe>
	setHeaderId(thisSequenceNumber);
   bb44e:	4629      	mov	r1, r5
   bb450:	4620      	mov	r0, r4
   bb452:	f7ff fc07 	bl	bac64 <_ZN10RHDatagram11setHeaderIdEh>
        uint8_t headerFlagsToClear = RH_FLAGS_ACK;
   bb456:	2f01      	cmp	r7, #1
        setHeaderFlags(headerFlagsToSet, headerFlagsToClear);
   bb458:	bf0d      	iteet	eq
   bb45a:	22c0      	moveq	r2, #192	; 0xc0
   bb45c:	2280      	movne	r2, #128	; 0x80
   bb45e:	2140      	movne	r1, #64	; 0x40
   bb460:	2100      	moveq	r1, #0
   bb462:	4620      	mov	r0, r4
   bb464:	f7ff fc02 	bl	bac6c <_ZN10RHDatagram14setHeaderFlagsEhh>
	sendto(buf, len, address);
   bb468:	4643      	mov	r3, r8
   bb46a:	4652      	mov	r2, sl
   bb46c:	4649      	mov	r1, r9
   bb46e:	4620      	mov	r0, r4
   bb470:	f7ff fbc9 	bl	bac06 <_ZN10RHDatagram6sendtoEPhhh>
	waitPacketSent();
   bb474:	4620      	mov	r0, r4
   bb476:	f7ff fbb8 	bl	babea <_ZN10RHDatagram14waitPacketSentEv>
	if (address == RH_BROADCAST_ADDRESS)
   bb47a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   bb47e:	d054      	beq.n	bb52a <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x102>
	if (retries > 1)
   bb480:	2f01      	cmp	r7, #1
	    _retransmissions++;
   bb482:	bf82      	ittt	hi
   bb484:	68a3      	ldrhi	r3, [r4, #8]
   bb486:	3301      	addhi	r3, #1
   bb488:	60a3      	strhi	r3, [r4, #8]
   bb48a:	f001 fb6b 	bl	bcb64 <HAL_Timer_Get_Milli_Seconds>
	uint16_t timeout = _timeout + (_timeout * random(0, 256) / 256);
   bb48e:	f44f 7180 	mov.w	r1, #256	; 0x100
   bb492:	4683      	mov	fp, r0
   bb494:	2000      	movs	r0, #0
   bb496:	89e6      	ldrh	r6, [r4, #14]
   bb498:	f004 f983 	bl	bf7a2 <_Z6randomii>
   bb49c:	4370      	muls	r0, r6
   bb49e:	bf48      	it	mi
   bb4a0:	30ff      	addmi	r0, #255	; 0xff
   bb4a2:	eb06 2620 	add.w	r6, r6, r0, asr #8
        while ((timeLeft = timeout - (millis() - thisSendTime)) > 0)
   bb4a6:	fa1b f686 	uxtah	r6, fp, r6
   bb4aa:	f001 fb5b 	bl	bcb64 <HAL_Timer_Get_Milli_Seconds>
   bb4ae:	1a30      	subs	r0, r6, r0
   bb4b0:	2800      	cmp	r0, #0
   bb4b2:	ddc5      	ble.n	bb440 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x18>
	    if (waitAvailableTimeout(timeLeft))
   bb4b4:	b281      	uxth	r1, r0
   bb4b6:	2200      	movs	r2, #0
   bb4b8:	4620      	mov	r0, r4
   bb4ba:	f7ff fb9a 	bl	babf2 <_ZN10RHDatagram20waitAvailableTimeoutEtt>
   bb4be:	2800      	cmp	r0, #0
   bb4c0:	d0f3      	beq.n	bb4aa <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		if (recvfrom(0, 0, &from, &to, &id, &flags)) // Discards the message
   bb4c2:	f10d 0317 	add.w	r3, sp, #23
   bb4c6:	9302      	str	r3, [sp, #8]
   bb4c8:	f10d 0316 	add.w	r3, sp, #22
   bb4cc:	9301      	str	r3, [sp, #4]
   bb4ce:	2200      	movs	r2, #0
   bb4d0:	f10d 0315 	add.w	r3, sp, #21
   bb4d4:	9300      	str	r3, [sp, #0]
   bb4d6:	4611      	mov	r1, r2
   bb4d8:	ab05      	add	r3, sp, #20
   bb4da:	4620      	mov	r0, r4
   bb4dc:	f7ff fbda 	bl	bac94 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   bb4e0:	2800      	cmp	r0, #0
   bb4e2:	d0e2      	beq.n	bb4aa <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
		    if (   from == address 
   bb4e4:	f89d 2014 	ldrb.w	r2, [sp, #20]
			   && (flags & RH_FLAGS_ACK) 
   bb4e8:	f99d 3017 	ldrsb.w	r3, [sp, #23]
		    if (   from == address 
   bb4ec:	4542      	cmp	r2, r8
   bb4ee:	d10e      	bne.n	bb50e <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && to == _thisAddress 
   bb4f0:	f894 c004 	ldrb.w	ip, [r4, #4]
   bb4f4:	f89d 1015 	ldrb.w	r1, [sp, #21]
   bb4f8:	458c      	cmp	ip, r1
   bb4fa:	d108      	bne.n	bb50e <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe6>
			   && (flags & RH_FLAGS_ACK) 
   bb4fc:	2b00      	cmp	r3, #0
   bb4fe:	da08      	bge.n	bb512 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xea>
			   && (id == thisSequenceNumber))
   bb500:	f89d 3016 	ldrb.w	r3, [sp, #22]
   bb504:	42ab      	cmp	r3, r5
   bb506:	d1d0      	bne.n	bb4aa <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
}
   bb508:	b007      	add	sp, #28
   bb50a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    else if (   !(flags & RH_FLAGS_ACK)
   bb50e:	2b00      	cmp	r3, #0
   bb510:	dbcb      	blt.n	bb4aa <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
				&& (id == _seenIds[from]))
   bb512:	18a1      	adds	r1, r4, r2
   bb514:	f89d 3016 	ldrb.w	r3, [sp, #22]
   bb518:	7c49      	ldrb	r1, [r1, #17]
   bb51a:	4299      	cmp	r1, r3
   bb51c:	d1c5      	bne.n	bb4aa <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
			acknowledge(id, from);
   bb51e:	4620      	mov	r0, r4
   bb520:	f7ff ff69 	bl	bb3f6 <_ZN18RHReliableDatagram11acknowledgeEhh>
   bb524:	e7c1      	b.n	bb4aa <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0x82>
    return false;
   bb526:	2000      	movs	r0, #0
   bb528:	e7ee      	b.n	bb508 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>
	    return true;
   bb52a:	2001      	movs	r0, #1
   bb52c:	e7ec      	b.n	bb508 <_ZN18RHReliableDatagram10sendtoWaitEPhhh+0xe0>

000bb52e <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>:
{  
   bb52e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bb532:	b089      	sub	sp, #36	; 0x24
   bb534:	e9cd 2104 	strd	r2, r1, [sp, #16]
   bb538:	e9dd 9810 	ldrd	r9, r8, [sp, #64]	; 0x40
   bb53c:	9f12      	ldr	r7, [sp, #72]	; 0x48
   bb53e:	4604      	mov	r4, r0
   bb540:	461e      	mov	r6, r3
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   bb542:	f7ff fb4e 	bl	babe2 <_ZN10RHDatagram9availableEv>
   bb546:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   bb54a:	b920      	cbnz	r0, bb556 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x28>
    return false;
   bb54c:	2500      	movs	r5, #0
}
   bb54e:	4628      	mov	r0, r5
   bb550:	b009      	add	sp, #36	; 0x24
   bb552:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (available() && recvfrom(buf, len, &_from, &_to, &_id, &_flags))
   bb556:	f10d 031f 	add.w	r3, sp, #31
   bb55a:	9302      	str	r3, [sp, #8]
   bb55c:	f10d 031e 	add.w	r3, sp, #30
   bb560:	9301      	str	r3, [sp, #4]
   bb562:	f10d 031d 	add.w	r3, sp, #29
   bb566:	9300      	str	r3, [sp, #0]
   bb568:	4620      	mov	r0, r4
   bb56a:	ab07      	add	r3, sp, #28
   bb56c:	f7ff fb92 	bl	bac94 <_ZN10RHDatagram8recvfromEPhS0_S0_S0_S0_S0_>
   bb570:	4605      	mov	r5, r0
   bb572:	2800      	cmp	r0, #0
   bb574:	d0ea      	beq.n	bb54c <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	if (!(_flags & RH_FLAGS_ACK))
   bb576:	f99d 301f 	ldrsb.w	r3, [sp, #31]
   bb57a:	2b00      	cmp	r3, #0
   bb57c:	dbe6      	blt.n	bb54c <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
	    if (_to ==_thisAddress)
   bb57e:	7922      	ldrb	r2, [r4, #4]
   bb580:	f89d 301d 	ldrb.w	r3, [sp, #29]
   bb584:	429a      	cmp	r2, r3
   bb586:	d106      	bne.n	bb596 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x68>
		acknowledge(_id, _from);
   bb588:	f89d 201c 	ldrb.w	r2, [sp, #28]
   bb58c:	f89d 101e 	ldrb.w	r1, [sp, #30]
   bb590:	4620      	mov	r0, r4
   bb592:	f7ff ff30 	bl	bb3f6 <_ZN18RHReliableDatagram11acknowledgeEhh>
	    if ((RH_ENABLE_EXPLICIT_RETRY_DEDUP && !(_flags & RH_FLAGS_RETRY)) || _id != _seenIds[_from])
   bb596:	f89d 201f 	ldrb.w	r2, [sp, #31]
   bb59a:	f89d 101c 	ldrb.w	r1, [sp, #28]
   bb59e:	f89d 301e 	ldrb.w	r3, [sp, #30]
   bb5a2:	f012 0f40 	tst.w	r2, #64	; 0x40
   bb5a6:	440c      	add	r4, r1
   bb5a8:	d002      	beq.n	bb5b0 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x82>
   bb5aa:	7c60      	ldrb	r0, [r4, #17]
   bb5ac:	4298      	cmp	r0, r3
   bb5ae:	d0cd      	beq.n	bb54c <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x1e>
		if (from)  *from =  _from;
   bb5b0:	b106      	cbz	r6, bb5b4 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x86>
   bb5b2:	7031      	strb	r1, [r6, #0]
		if (to)    *to =    _to;
   bb5b4:	f1b9 0f00 	cmp.w	r9, #0
   bb5b8:	d003      	beq.n	bb5c2 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x94>
   bb5ba:	f89d 101d 	ldrb.w	r1, [sp, #29]
   bb5be:	f889 1000 	strb.w	r1, [r9]
		if (id)    *id =    _id;
   bb5c2:	f1b8 0f00 	cmp.w	r8, #0
   bb5c6:	d001      	beq.n	bb5cc <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x9e>
   bb5c8:	f888 3000 	strb.w	r3, [r8]
		if (flags) *flags = _flags;
   bb5cc:	b107      	cbz	r7, bb5d0 <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0xa2>
   bb5ce:	703a      	strb	r2, [r7, #0]
		_seenIds[_from] = _id;
   bb5d0:	7463      	strb	r3, [r4, #17]
		return true;
   bb5d2:	e7bc      	b.n	bb54e <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_+0x20>

000bb5d4 <_ZN8RHRouter13peekAtMessageEPNS_13RoutedMessageEh>:
void RHRouter::peekAtMessage(RoutedMessage* message, uint8_t messageLen)
{
  // Default does nothing
  (void)message; // Not used
  (void)messageLen; // Not used
}
   bb5d4:	4770      	bx	lr

000bb5d6 <_ZN8RHRouter4initEv>:
{
   bb5d6:	b510      	push	{r4, lr}
   bb5d8:	4604      	mov	r4, r0
    bool ret = RHReliableDatagram::init();
   bb5da:	3004      	adds	r0, #4
   bb5dc:	f7ff fb34 	bl	bac48 <_ZN10RHDatagram4initEv>
    if (ret)
   bb5e0:	b110      	cbz	r0, bb5e8 <_ZN8RHRouter4initEv+0x12>
	_max_hops = RH_DEFAULT_MAX_HOPS;
   bb5e2:	231e      	movs	r3, #30
   bb5e4:	f884 3116 	strb.w	r3, [r4, #278]	; 0x116
}
   bb5e8:	bd10      	pop	{r4, pc}

000bb5ea <_ZN8RHRouter10getRouteToEh>:
{
   bb5ea:	b510      	push	{r4, lr}
   bb5ec:	4602      	mov	r2, r0
   bb5ee:	2300      	movs	r3, #0
	if (_routes[i].dest == dest && _routes[i].state != Invalid)
   bb5f0:	f892 4118 	ldrb.w	r4, [r2, #280]	; 0x118
   bb5f4:	428c      	cmp	r4, r1
   bb5f6:	d108      	bne.n	bb60a <_ZN8RHRouter10getRouteToEh+0x20>
   bb5f8:	f892 411a 	ldrb.w	r4, [r2, #282]	; 0x11a
   bb5fc:	b12c      	cbz	r4, bb60a <_ZN8RHRouter10getRouteToEh+0x20>
	    return &_routes[i];
   bb5fe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   bb602:	f503 738c 	add.w	r3, r3, #280	; 0x118
   bb606:	4418      	add	r0, r3
}
   bb608:	bd10      	pop	{r4, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bb60a:	3301      	adds	r3, #1
   bb60c:	2b32      	cmp	r3, #50	; 0x32
   bb60e:	f102 0203 	add.w	r2, r2, #3
   bb612:	d1ed      	bne.n	bb5f0 <_ZN8RHRouter10getRouteToEh+0x6>
    return NULL;
   bb614:	2000      	movs	r0, #0
   bb616:	e7f7      	b.n	bb608 <_ZN8RHRouter10getRouteToEh+0x1e>

000bb618 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh>:
{
   bb618:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   bb61a:	780b      	ldrb	r3, [r1, #0]
   bb61c:	2bff      	cmp	r3, #255	; 0xff
{
   bb61e:	4605      	mov	r5, r0
   bb620:	460c      	mov	r4, r1
    if (message->header.dest != RH_BROADCAST_ADDRESS)
   bb622:	d006      	beq.n	bb632 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x1a>
	RoutingTableEntry* route = getRouteTo(message->header.dest);
   bb624:	4619      	mov	r1, r3
   bb626:	9201      	str	r2, [sp, #4]
   bb628:	f7ff ffdf 	bl	bb5ea <_ZN8RHRouter10getRouteToEh>
	if (!route)
   bb62c:	b158      	cbz	r0, bb646 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2e>
	next_hop = route->next_hop;
   bb62e:	7843      	ldrb	r3, [r0, #1]
   bb630:	9a01      	ldr	r2, [sp, #4]
    if (!RHReliableDatagram::sendtoWait((uint8_t*)message, messageLen, next_hop))
   bb632:	4621      	mov	r1, r4
   bb634:	1d28      	adds	r0, r5, #4
   bb636:	f7ff fef7 	bl	bb428 <_ZN18RHReliableDatagram10sendtoWaitEPhhh>
	return RH_ROUTER_ERROR_UNABLE_TO_DELIVER;
   bb63a:	2800      	cmp	r0, #0
   bb63c:	bf14      	ite	ne
   bb63e:	2000      	movne	r0, #0
   bb640:	2005      	moveq	r0, #5
}
   bb642:	b003      	add	sp, #12
   bb644:	bd30      	pop	{r4, r5, pc}
	    return RH_ROUTER_ERROR_NO_ROUTE;
   bb646:	2002      	movs	r0, #2
   bb648:	e7fb      	b.n	bb642 <_ZN8RHRouter5routeEPNS_13RoutedMessageEh+0x2a>

000bb64a <_ZN8RHRouter11deleteRouteEh>:
{
   bb64a:	b510      	push	{r4, lr}
   bb64c:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   bb650:	4604      	mov	r4, r0
	   sizeof(RoutingTableEntry) * (RH_ROUTING_TABLE_SIZE - index - 1));
   bb652:	f1c1 0231 	rsb	r2, r1, #49	; 0x31
    memcpy(&_routes[index], &_routes[index+1], 
   bb656:	f503 708c 	add.w	r0, r3, #280	; 0x118
   bb65a:	f203 111b 	addw	r1, r3, #283	; 0x11b
   bb65e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   bb662:	4421      	add	r1, r4
   bb664:	4420      	add	r0, r4
   bb666:	f005 fdcf 	bl	c1208 <memcpy>
    _routes[RH_ROUTING_TABLE_SIZE - 1].state = Invalid;
   bb66a:	2300      	movs	r3, #0
   bb66c:	f884 31ad 	strb.w	r3, [r4, #429]	; 0x1ad
}
   bb670:	bd10      	pop	{r4, pc}

000bb672 <_ZN8RHRouter13deleteRouteToEh>:
{
   bb672:	b538      	push	{r3, r4, r5, lr}
   bb674:	460a      	mov	r2, r1
   bb676:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   bb678:	f500 748c 	add.w	r4, r0, #280	; 0x118
   bb67c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   bb680:	b2d9      	uxtb	r1, r3
   bb682:	5d65      	ldrb	r5, [r4, r5]
   bb684:	4295      	cmp	r5, r2
   bb686:	d103      	bne.n	bb690 <_ZN8RHRouter13deleteRouteToEh+0x1e>
	    deleteRoute(i);
   bb688:	f7ff ffdf 	bl	bb64a <_ZN8RHRouter11deleteRouteEh>
	    return true;
   bb68c:	2001      	movs	r0, #1
}
   bb68e:	bd38      	pop	{r3, r4, r5, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bb690:	3301      	adds	r3, #1
   bb692:	2b32      	cmp	r3, #50	; 0x32
   bb694:	d1f2      	bne.n	bb67c <_ZN8RHRouter13deleteRouteToEh+0xa>
    return false;
   bb696:	2000      	movs	r0, #0
   bb698:	e7f9      	b.n	bb68e <_ZN8RHRouter13deleteRouteToEh+0x1c>

000bb69a <_ZN8RHRouter17retireOldestRouteEv>:
    deleteRoute(0);
   bb69a:	2100      	movs	r1, #0
   bb69c:	f7ff bfd5 	b.w	bb64a <_ZN8RHRouter11deleteRouteEh>

000bb6a0 <_ZN8RHRouter10addRouteToEhhh>:
{
   bb6a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb6a2:	4616      	mov	r6, r2
   bb6a4:	461f      	mov	r7, r3
   bb6a6:	4604      	mov	r4, r0
   bb6a8:	460d      	mov	r5, r1
   bb6aa:	2300      	movs	r3, #0
	if (_routes[i].dest == dest)
   bb6ac:	f500 728c 	add.w	r2, r0, #280	; 0x118
   bb6b0:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   bb6b4:	5c11      	ldrb	r1, [r2, r0]
   bb6b6:	42a9      	cmp	r1, r5
   bb6b8:	d105      	bne.n	bb6c6 <_ZN8RHRouter10addRouteToEhhh+0x26>
	    _routes[i].next_hop = next_hop;
   bb6ba:	4420      	add	r0, r4
	    _routes[i].next_hop = next_hop;
   bb6bc:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   bb6c0:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
}
   bb6c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bb6c6:	3301      	adds	r3, #1
   bb6c8:	2b32      	cmp	r3, #50	; 0x32
   bb6ca:	d1f1      	bne.n	bb6b0 <_ZN8RHRouter10addRouteToEhhh+0x10>
   bb6cc:	2300      	movs	r3, #0
	if (_routes[i].state == Invalid)
   bb6ce:	f504 728d 	add.w	r2, r4, #282	; 0x11a
   bb6d2:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   bb6d6:	5c11      	ldrb	r1, [r2, r0]
   bb6d8:	b919      	cbnz	r1, bb6e2 <_ZN8RHRouter10addRouteToEhhh+0x42>
	    _routes[i].dest = dest;
   bb6da:	4420      	add	r0, r4
   bb6dc:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
   bb6e0:	e7ec      	b.n	bb6bc <_ZN8RHRouter10addRouteToEhhh+0x1c>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bb6e2:	3301      	adds	r3, #1
   bb6e4:	2b32      	cmp	r3, #50	; 0x32
   bb6e6:	d1f4      	bne.n	bb6d2 <_ZN8RHRouter10addRouteToEhhh+0x32>
    retireOldestRoute();
   bb6e8:	4620      	mov	r0, r4
   bb6ea:	f7ff ffd6 	bl	bb69a <_ZN8RHRouter17retireOldestRouteEv>
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bb6ee:	4620      	mov	r0, r4
   bb6f0:	f104 0396 	add.w	r3, r4, #150	; 0x96
	if (_routes[i].state == Invalid)
   bb6f4:	f890 211a 	ldrb.w	r2, [r0, #282]	; 0x11a
   bb6f8:	b92a      	cbnz	r2, bb706 <_ZN8RHRouter10addRouteToEhhh+0x66>
	    _routes[i].dest = dest;
   bb6fa:	f880 5118 	strb.w	r5, [r0, #280]	; 0x118
	    _routes[i].next_hop = next_hop;
   bb6fe:	f880 6119 	strb.w	r6, [r0, #281]	; 0x119
	    _routes[i].state = state;
   bb702:	f880 711a 	strb.w	r7, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bb706:	3003      	adds	r0, #3
   bb708:	4298      	cmp	r0, r3
   bb70a:	d1f3      	bne.n	bb6f4 <_ZN8RHRouter10addRouteToEhhh+0x54>
   bb70c:	e7da      	b.n	bb6c4 <_ZN8RHRouter10addRouteToEhhh+0x24>

000bb70e <_ZN8RHRouter17clearRoutingTableEv>:
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bb70e:	f100 0396 	add.w	r3, r0, #150	; 0x96
	_routes[i].state = Invalid;
   bb712:	2200      	movs	r2, #0
   bb714:	f880 211a 	strb.w	r2, [r0, #282]	; 0x11a
    for (i = 0; i < RH_ROUTING_TABLE_SIZE; i++)
   bb718:	3003      	adds	r0, #3
   bb71a:	4298      	cmp	r0, r3
   bb71c:	d1fa      	bne.n	bb714 <_ZN8RHRouter17clearRoutingTableEv+0x6>
}
   bb71e:	4770      	bx	lr

000bb720 <_ZN8RHRouterC1ER15RHGenericDriverh>:
RHRouter::RHRouter(RHGenericDriver& driver, uint8_t thisAddress) 
   bb720:	b510      	push	{r4, lr}
   bb722:	4604      	mov	r4, r0
    : RHReliableDatagram(driver, thisAddress)
   bb724:	3004      	adds	r0, #4
   bb726:	f7ff fe53 	bl	bb3d0 <_ZN18RHReliableDatagramC1ER15RHGenericDriverh>
   bb72a:	4b05      	ldr	r3, [pc, #20]	; (bb740 <_ZN8RHRouterC1ER15RHGenericDriverh+0x20>)
   bb72c:	6023      	str	r3, [r4, #0]
    _max_hops = RH_DEFAULT_MAX_HOPS;
   bb72e:	f44f 738f 	mov.w	r3, #286	; 0x11e
    clearRoutingTable();
   bb732:	4620      	mov	r0, r4
    _max_hops = RH_DEFAULT_MAX_HOPS;
   bb734:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
    clearRoutingTable();
   bb738:	f7ff ffe9 	bl	bb70e <_ZN8RHRouter17clearRoutingTableEv>
}
   bb73c:	4620      	mov	r0, r4
   bb73e:	bd10      	pop	{r4, pc}
   bb740:	000c4ffc 	.word	0x000c4ffc

000bb744 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>:
{
   bb744:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   bb748:	4604      	mov	r4, r0
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   bb74a:	6840      	ldr	r0, [r0, #4]
{
   bb74c:	9101      	str	r1, [sp, #4]
   bb74e:	461f      	mov	r7, r3
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   bb750:	6803      	ldr	r3, [r0, #0]
{
   bb752:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   bb756:	699b      	ldr	r3, [r3, #24]
{
   bb758:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
   bb75c:	4616      	mov	r6, r2
    if (((uint16_t)len + sizeof(RoutedMessageHeader)) > _driver.maxMessageLength())
   bb75e:	4798      	blx	r3
   bb760:	f106 0805 	add.w	r8, r6, #5
   bb764:	4580      	cmp	r8, r0
   bb766:	d81c      	bhi.n	bb7a2 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x5e>
    _tmpMessage.header.source = source;
   bb768:	4d10      	ldr	r5, [pc, #64]	; (bb7ac <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh+0x68>)
    memcpy(_tmpMessage.data, buf, len);
   bb76a:	9901      	ldr	r1, [sp, #4]
    _tmpMessage.header.source = source;
   bb76c:	f885 a001 	strb.w	sl, [r5, #1]
    _tmpMessage.header.hops = 0;
   bb770:	2300      	movs	r3, #0
   bb772:	70ab      	strb	r3, [r5, #2]
    _tmpMessage.header.id = _lastE2ESequenceNumber++;
   bb774:	f894 3115 	ldrb.w	r3, [r4, #277]	; 0x115
   bb778:	70eb      	strb	r3, [r5, #3]
   bb77a:	1c5a      	adds	r2, r3, #1
   bb77c:	f884 2115 	strb.w	r2, [r4, #277]	; 0x115
    memcpy(_tmpMessage.data, buf, len);
   bb780:	1d68      	adds	r0, r5, #5
   bb782:	4632      	mov	r2, r6
    _tmpMessage.header.dest = dest;
   bb784:	702f      	strb	r7, [r5, #0]
    _tmpMessage.header.flags = flags;
   bb786:	f885 9004 	strb.w	r9, [r5, #4]
    memcpy(_tmpMessage.data, buf, len);
   bb78a:	f005 fd3d 	bl	c1208 <memcpy>
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   bb78e:	6823      	ldr	r3, [r4, #0]
   bb790:	685b      	ldr	r3, [r3, #4]
   bb792:	fa5f f288 	uxtb.w	r2, r8
   bb796:	4629      	mov	r1, r5
   bb798:	4620      	mov	r0, r4
}
   bb79a:	b002      	add	sp, #8
   bb79c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return route(&_tmpMessage, sizeof(RoutedMessageHeader)+len);
   bb7a0:	4718      	bx	r3
}
   bb7a2:	2001      	movs	r0, #1
   bb7a4:	b002      	add	sp, #8
   bb7a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bb7aa:	bf00      	nop
   bb7ac:	2003e576 	.word	0x2003e576

000bb7b0 <_ZN8RHRouter10sendtoWaitEPhhhh>:
{
   bb7b0:	b513      	push	{r0, r1, r4, lr}
    return sendtoFromSourceWait(buf, len, dest, _thisAddress, flags);
   bb7b2:	f89d 4010 	ldrb.w	r4, [sp, #16]
   bb7b6:	9401      	str	r4, [sp, #4]
   bb7b8:	7a04      	ldrb	r4, [r0, #8]
   bb7ba:	9400      	str	r4, [sp, #0]
   bb7bc:	f7ff ffc2 	bl	bb744 <_ZN8RHRouter20sendtoFromSourceWaitEPhhhhh>
}
   bb7c0:	b002      	add	sp, #8
   bb7c2:	bd10      	pop	{r4, pc}

000bb7c4 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_>:

////////////////////////////////////////////////////////////////////
bool RHRouter::recvfromAck(uint8_t* buf, uint8_t* len, uint8_t* source, uint8_t* dest, uint8_t* id, uint8_t* flags, uint8_t* hops)
{  
   bb7c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb7c8:	b087      	sub	sp, #28
   bb7ca:	461f      	mov	r7, r3
    uint8_t tmpMessageLen = sizeof(_tmpMessage);
   bb7cc:	237f      	movs	r3, #127	; 0x7f
   bb7ce:	f88d 3013 	strb.w	r3, [sp, #19]
    uint8_t _from;
    uint8_t _to;
    uint8_t _id;
    uint8_t _flags;
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   bb7d2:	f10d 0317 	add.w	r3, sp, #23
   bb7d6:	9302      	str	r3, [sp, #8]
   bb7d8:	f8df 90d0 	ldr.w	r9, [pc, #208]	; bb8ac <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>
   bb7dc:	f10d 0316 	add.w	r3, sp, #22
   bb7e0:	9301      	str	r3, [sp, #4]
   bb7e2:	f10d 0315 	add.w	r3, sp, #21
   bb7e6:	9300      	str	r3, [sp, #0]
{  
   bb7e8:	4604      	mov	r4, r0
   bb7ea:	4688      	mov	r8, r1
   bb7ec:	4616      	mov	r6, r2
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   bb7ee:	ab05      	add	r3, sp, #20
   bb7f0:	f10d 0213 	add.w	r2, sp, #19
   bb7f4:	4649      	mov	r1, r9
   bb7f6:	3004      	adds	r0, #4
{  
   bb7f8:	e9dd ba10 	ldrd	fp, sl, [sp, #64]	; 0x40
    if (RHReliableDatagram::recvfromAck((uint8_t*)&_tmpMessage, &tmpMessageLen, &_from, &_to, &_id, &_flags))
   bb7fc:	f7ff fe97 	bl	bb52e <_ZN18RHReliableDatagram11recvfromAckEPhS0_S0_S0_S0_S0_>
   bb800:	4605      	mov	r5, r0
   bb802:	b908      	cbnz	r0, bb808 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x44>
	    if (_isa_router)
	        route(&_tmpMessage, tmpMessageLen);
	}
	// Discard it and maybe wait for another
    }
    return false;
   bb804:	2500      	movs	r5, #0
   bb806:	e038      	b.n	bb87a <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xb6>
	peekAtMessage(&_tmpMessage, tmpMessageLen);
   bb808:	6823      	ldr	r3, [r4, #0]
   bb80a:	f89d 2013 	ldrb.w	r2, [sp, #19]
   bb80e:	681b      	ldr	r3, [r3, #0]
   bb810:	4649      	mov	r1, r9
   bb812:	4620      	mov	r0, r4
   bb814:	4798      	blx	r3
	if (_tmpMessage.header.dest == _thisAddress || _tmpMessage.header.dest == RH_BROADCAST_ADDRESS)
   bb816:	f899 3000 	ldrb.w	r3, [r9]
   bb81a:	7a22      	ldrb	r2, [r4, #8]
   bb81c:	429a      	cmp	r2, r3
   bb81e:	d001      	beq.n	bb824 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x60>
   bb820:	2bff      	cmp	r3, #255	; 0xff
   bb822:	d12e      	bne.n	bb882 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xbe>
	    if (source) *source  = _tmpMessage.header.source;
   bb824:	b117      	cbz	r7, bb82c <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x68>
   bb826:	4b21      	ldr	r3, [pc, #132]	; (bb8ac <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   bb828:	785b      	ldrb	r3, [r3, #1]
   bb82a:	703b      	strb	r3, [r7, #0]
	    if (dest)   *dest    = _tmpMessage.header.dest;
   bb82c:	f1bb 0f00 	cmp.w	fp, #0
   bb830:	d003      	beq.n	bb83a <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x76>
   bb832:	4b1e      	ldr	r3, [pc, #120]	; (bb8ac <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   bb834:	781b      	ldrb	r3, [r3, #0]
   bb836:	f88b 3000 	strb.w	r3, [fp]
	    if (id)     *id      = _tmpMessage.header.id;
   bb83a:	f1ba 0f00 	cmp.w	sl, #0
   bb83e:	d003      	beq.n	bb848 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x84>
   bb840:	4b1a      	ldr	r3, [pc, #104]	; (bb8ac <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   bb842:	78db      	ldrb	r3, [r3, #3]
   bb844:	f88a 3000 	strb.w	r3, [sl]
	    if (flags)  *flags   = _tmpMessage.header.flags;
   bb848:	9b12      	ldr	r3, [sp, #72]	; 0x48
   bb84a:	b11b      	cbz	r3, bb854 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x90>
   bb84c:	4b17      	ldr	r3, [pc, #92]	; (bb8ac <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   bb84e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   bb850:	791b      	ldrb	r3, [r3, #4]
   bb852:	7013      	strb	r3, [r2, #0]
	    if (hops)   *hops    = _tmpMessage.header.hops;
   bb854:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bb856:	b11b      	cbz	r3, bb860 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x9c>
   bb858:	4b14      	ldr	r3, [pc, #80]	; (bb8ac <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xe8>)
   bb85a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   bb85c:	789b      	ldrb	r3, [r3, #2]
   bb85e:	7013      	strb	r3, [r2, #0]
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   bb860:	f89d 3013 	ldrb.w	r3, [sp, #19]
	    if (*len > msgLen)
   bb864:	7832      	ldrb	r2, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   bb866:	4912      	ldr	r1, [pc, #72]	; (bb8b0 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0xec>)
	    uint8_t msgLen = tmpMessageLen - sizeof(RoutedMessageHeader);
   bb868:	3b05      	subs	r3, #5
   bb86a:	b2db      	uxtb	r3, r3
	    if (*len > msgLen)
   bb86c:	429a      	cmp	r2, r3
		*len = msgLen;
   bb86e:	bf88      	it	hi
   bb870:	7033      	strbhi	r3, [r6, #0]
	    memcpy(buf, _tmpMessage.data, *len);
   bb872:	7832      	ldrb	r2, [r6, #0]
   bb874:	4640      	mov	r0, r8
   bb876:	f005 fcc7 	bl	c1208 <memcpy>
}
   bb87a:	4628      	mov	r0, r5
   bb87c:	b007      	add	sp, #28
   bb87e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 && _tmpMessage.header.hops++ < _max_hops)
   bb882:	f899 3002 	ldrb.w	r3, [r9, #2]
   bb886:	1c5a      	adds	r2, r3, #1
   bb888:	f889 2002 	strb.w	r2, [r9, #2]
   bb88c:	f894 2116 	ldrb.w	r2, [r4, #278]	; 0x116
   bb890:	429a      	cmp	r2, r3
   bb892:	d9b7      	bls.n	bb804 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	    if (_isa_router)
   bb894:	f894 3117 	ldrb.w	r3, [r4, #279]	; 0x117
   bb898:	2b00      	cmp	r3, #0
   bb89a:	d0b3      	beq.n	bb804 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
	        route(&_tmpMessage, tmpMessageLen);
   bb89c:	6823      	ldr	r3, [r4, #0]
   bb89e:	f89d 2013 	ldrb.w	r2, [sp, #19]
   bb8a2:	685b      	ldr	r3, [r3, #4]
   bb8a4:	4649      	mov	r1, r9
   bb8a6:	4620      	mov	r0, r4
   bb8a8:	4798      	blx	r3
   bb8aa:	e7ab      	b.n	bb804 <_ZN8RHRouter11recvfromAckEPhS0_S0_S0_S0_S0_S0_+0x40>
   bb8ac:	2003e576 	.word	0x2003e576
   bb8b0:	2003e57b 	.word	0x2003e57b

000bb8b4 <_ZN11RHSPIDriver4initEv>:
    _slaveSelectPin(slaveSelectPin)
{
}

bool RHSPIDriver::init()
{
   bb8b4:	b510      	push	{r4, lr}
   bb8b6:	4604      	mov	r4, r0
    // start the SPI library with the default speeds etc:
    // On Arduino Due this defaults to SPI1 on the central group of 6 SPI pins
    _spi.begin();
   bb8b8:	6a00      	ldr	r0, [r0, #32]
   bb8ba:	6803      	ldr	r3, [r0, #0]
   bb8bc:	68db      	ldr	r3, [r3, #12]
   bb8be:	4798      	blx	r3

    // Initialise the slave select pin
    // On Maple, this must be _after_ spi.begin

    // Sometimes we dont want to work the _slaveSelectPin here
    if (_slaveSelectPin != 0xff)
   bb8c0:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   bb8c4:	28ff      	cmp	r0, #255	; 0xff
   bb8c6:	d002      	beq.n	bb8ce <_ZN11RHSPIDriver4initEv+0x1a>
	pinMode(_slaveSelectPin, OUTPUT);
   bb8c8:	2101      	movs	r1, #1
   bb8ca:	f004 fe01 	bl	c04d0 <pinMode>

    deselectSlave();
   bb8ce:	6823      	ldr	r3, [r4, #0]
   bb8d0:	4620      	mov	r0, r4
   bb8d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   bb8d4:	4798      	blx	r3
    // 100ms is too long for STM32L0, and somehow can cause the USB interface to fail
    // in some versions of the core.
#if (RH_PLATFORM == RH_PLATFORM_STM32L0) && (defined STM32L082xx || defined STM32L072xx)
    delay(10);
#else
    delay(100);
   bb8d6:	2064      	movs	r0, #100	; 0x64
   bb8d8:	f001 fd60 	bl	bd39c <delay>
#endif
    
    return true;
}
   bb8dc:	2001      	movs	r0, #1
   bb8de:	bd10      	pop	{r4, pc}

000bb8e0 <_ZN11RHSPIDriver11selectSlaveEv>:
    _spi.usingInterrupt(interruptNumber);
}

void RHSPIDriver::selectSlave()
{
    digitalWrite(_slaveSelectPin, LOW);
   bb8e0:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   bb8e4:	2100      	movs	r1, #0
   bb8e6:	f004 be04 	b.w	c04f2 <digitalWrite>

000bb8ea <_ZN11RHSPIDriver13deselectSlaveEv>:
}
    
void RHSPIDriver::deselectSlave()
{
    digitalWrite(_slaveSelectPin, HIGH);
   bb8ea:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   bb8ee:	2101      	movs	r1, #1
   bb8f0:	f004 bdff 	b.w	c04f2 <digitalWrite>

000bb8f4 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>:
RHSPIDriver::RHSPIDriver(uint8_t slaveSelectPin, RHGenericSPI& spi)
   bb8f4:	b570      	push	{r4, r5, r6, lr}
   bb8f6:	4604      	mov	r4, r0
   bb8f8:	460d      	mov	r5, r1
   bb8fa:	4616      	mov	r6, r2
    _slaveSelectPin(slaveSelectPin)
   bb8fc:	f7ff fa7e 	bl	badfc <_ZN15RHGenericDriverC1Ev>
   bb900:	4b03      	ldr	r3, [pc, #12]	; (bb910 <_ZN11RHSPIDriverC1EhR12RHGenericSPI+0x1c>)
   bb902:	6023      	str	r3, [r4, #0]
   bb904:	6226      	str	r6, [r4, #32]
   bb906:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
}
   bb90a:	4620      	mov	r0, r4
   bb90c:	bd70      	pop	{r4, r5, r6, pc}
   bb90e:	bf00      	nop
   bb910:	000c500c 	.word	0x000c500c

000bb914 <_ZN11RHSPIDriver7spiReadEh>:
{
   bb914:	b538      	push	{r3, r4, r5, lr}
   bb916:	4604      	mov	r4, r0
    _spi.beginTransaction();
   bb918:	6a00      	ldr	r0, [r0, #32]
   bb91a:	6803      	ldr	r3, [r0, #0]
   bb91c:	6a1b      	ldr	r3, [r3, #32]
{
   bb91e:	460d      	mov	r5, r1
    _spi.beginTransaction();
   bb920:	4798      	blx	r3
    selectSlave();
   bb922:	6823      	ldr	r3, [r4, #0]
   bb924:	4620      	mov	r0, r4
   bb926:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   bb928:	4798      	blx	r3
    _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the address with the write mask off
   bb92a:	6a20      	ldr	r0, [r4, #32]
   bb92c:	6803      	ldr	r3, [r0, #0]
   bb92e:	f005 017f 	and.w	r1, r5, #127	; 0x7f
   bb932:	681b      	ldr	r3, [r3, #0]
   bb934:	4798      	blx	r3
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   bb936:	6a20      	ldr	r0, [r4, #32]
   bb938:	6803      	ldr	r3, [r0, #0]
   bb93a:	2100      	movs	r1, #0
   bb93c:	681b      	ldr	r3, [r3, #0]
   bb93e:	4798      	blx	r3
    deselectSlave();
   bb940:	6823      	ldr	r3, [r4, #0]
    val = _spi.transfer(0); // The written value is ignored, reg value is read
   bb942:	4605      	mov	r5, r0
    deselectSlave();
   bb944:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   bb946:	4620      	mov	r0, r4
   bb948:	4798      	blx	r3
    _spi.endTransaction();
   bb94a:	6a20      	ldr	r0, [r4, #32]
   bb94c:	6803      	ldr	r3, [r0, #0]
   bb94e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bb950:	4798      	blx	r3
}
   bb952:	4628      	mov	r0, r5
   bb954:	bd38      	pop	{r3, r4, r5, pc}

000bb956 <_ZN11RHSPIDriver8spiWriteEhh>:
{
   bb956:	b570      	push	{r4, r5, r6, lr}
   bb958:	4604      	mov	r4, r0
    _spi.beginTransaction();
   bb95a:	6a00      	ldr	r0, [r0, #32]
   bb95c:	6803      	ldr	r3, [r0, #0]
   bb95e:	6a1b      	ldr	r3, [r3, #32]
{
   bb960:	4616      	mov	r6, r2
   bb962:	460d      	mov	r5, r1
    _spi.beginTransaction();
   bb964:	4798      	blx	r3
    selectSlave();
   bb966:	6823      	ldr	r3, [r4, #0]
   bb968:	4620      	mov	r0, r4
   bb96a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   bb96c:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the address with the write mask on
   bb96e:	6a20      	ldr	r0, [r4, #32]
   bb970:	6803      	ldr	r3, [r0, #0]
   bb972:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   bb976:	681b      	ldr	r3, [r3, #0]
   bb978:	4798      	blx	r3
   bb97a:	4605      	mov	r5, r0
    _spi.transfer(val); // New value follows
   bb97c:	6a20      	ldr	r0, [r4, #32]
   bb97e:	6803      	ldr	r3, [r0, #0]
   bb980:	4631      	mov	r1, r6
   bb982:	681b      	ldr	r3, [r3, #0]
   bb984:	4798      	blx	r3
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   bb986:	2001      	movs	r0, #1
   bb988:	f001 f8e4 	bl	bcb54 <HAL_Delay_Microseconds>
    deselectSlave();
   bb98c:	6823      	ldr	r3, [r4, #0]
   bb98e:	4620      	mov	r0, r4
   bb990:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   bb992:	4798      	blx	r3
    _spi.endTransaction();
   bb994:	6a20      	ldr	r0, [r4, #32]
   bb996:	6803      	ldr	r3, [r0, #0]
   bb998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bb99a:	4798      	blx	r3
}
   bb99c:	4628      	mov	r0, r5
   bb99e:	bd70      	pop	{r4, r5, r6, pc}

000bb9a0 <_ZN11RHSPIDriver12spiBurstReadEhPhh>:
{
   bb9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb9a2:	4604      	mov	r4, r0
    _spi.beginTransaction();
   bb9a4:	6a00      	ldr	r0, [r0, #32]
{
   bb9a6:	461e      	mov	r6, r3
    _spi.beginTransaction();
   bb9a8:	6803      	ldr	r3, [r0, #0]
   bb9aa:	6a1b      	ldr	r3, [r3, #32]
{
   bb9ac:	460f      	mov	r7, r1
   bb9ae:	4615      	mov	r5, r2
    _spi.beginTransaction();
   bb9b0:	4798      	blx	r3
    selectSlave();
   bb9b2:	6823      	ldr	r3, [r4, #0]
   bb9b4:	4620      	mov	r0, r4
   bb9b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   bb9b8:	4798      	blx	r3
    status = _spi.transfer(reg & ~RH_SPI_WRITE_MASK); // Send the start address with the write mask off
   bb9ba:	6a20      	ldr	r0, [r4, #32]
   bb9bc:	6803      	ldr	r3, [r0, #0]
   bb9be:	f007 017f 	and.w	r1, r7, #127	; 0x7f
   bb9c2:	681b      	ldr	r3, [r3, #0]
   bb9c4:	4798      	blx	r3
   bb9c6:	442e      	add	r6, r5
   bb9c8:	4607      	mov	r7, r0
    while (len--)
   bb9ca:	42b5      	cmp	r5, r6
   bb9cc:	d007      	beq.n	bb9de <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x3e>
	*dest++ = _spi.transfer(0);
   bb9ce:	6a20      	ldr	r0, [r4, #32]
   bb9d0:	6803      	ldr	r3, [r0, #0]
   bb9d2:	2100      	movs	r1, #0
   bb9d4:	681b      	ldr	r3, [r3, #0]
   bb9d6:	4798      	blx	r3
   bb9d8:	f805 0b01 	strb.w	r0, [r5], #1
    while (len--)
   bb9dc:	e7f5      	b.n	bb9ca <_ZN11RHSPIDriver12spiBurstReadEhPhh+0x2a>
    deselectSlave();
   bb9de:	6823      	ldr	r3, [r4, #0]
   bb9e0:	4620      	mov	r0, r4
   bb9e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   bb9e4:	4798      	blx	r3
    _spi.endTransaction();
   bb9e6:	6a20      	ldr	r0, [r4, #32]
   bb9e8:	6803      	ldr	r3, [r0, #0]
   bb9ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bb9ec:	4798      	blx	r3
}
   bb9ee:	4638      	mov	r0, r7
   bb9f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bb9f2 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>:
{
   bb9f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb9f4:	4604      	mov	r4, r0
    _spi.beginTransaction();
   bb9f6:	6a00      	ldr	r0, [r0, #32]
{
   bb9f8:	461e      	mov	r6, r3
    _spi.beginTransaction();
   bb9fa:	6803      	ldr	r3, [r0, #0]
   bb9fc:	6a1b      	ldr	r3, [r3, #32]
{
   bb9fe:	460f      	mov	r7, r1
   bba00:	4615      	mov	r5, r2
    _spi.beginTransaction();
   bba02:	4798      	blx	r3
    selectSlave();
   bba04:	6823      	ldr	r3, [r4, #0]
   bba06:	4620      	mov	r0, r4
   bba08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   bba0a:	4798      	blx	r3
    status = _spi.transfer(reg | RH_SPI_WRITE_MASK); // Send the start address with the write mask on
   bba0c:	6a20      	ldr	r0, [r4, #32]
   bba0e:	6803      	ldr	r3, [r0, #0]
   bba10:	f047 0180 	orr.w	r1, r7, #128	; 0x80
   bba14:	681b      	ldr	r3, [r3, #0]
   bba16:	4798      	blx	r3
   bba18:	442e      	add	r6, r5
   bba1a:	4607      	mov	r7, r0
    while (len--)
   bba1c:	42b5      	cmp	r5, r6
   bba1e:	d006      	beq.n	bba2e <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x3c>
	_spi.transfer(*src++);
   bba20:	6a20      	ldr	r0, [r4, #32]
   bba22:	f815 1b01 	ldrb.w	r1, [r5], #1
   bba26:	6803      	ldr	r3, [r0, #0]
   bba28:	681b      	ldr	r3, [r3, #0]
   bba2a:	4798      	blx	r3
    while (len--)
   bba2c:	e7f6      	b.n	bba1c <_ZN11RHSPIDriver13spiBurstWriteEhPKhh+0x2a>
    deselectSlave();
   bba2e:	6823      	ldr	r3, [r4, #0]
   bba30:	4620      	mov	r0, r4
   bba32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   bba34:	4798      	blx	r3
    _spi.endTransaction();
   bba36:	6a20      	ldr	r0, [r4, #32]
   bba38:	6803      	ldr	r3, [r0, #0]
   bba3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bba3c:	4798      	blx	r3
}
   bba3e:	4638      	mov	r0, r7
   bba40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bba42 <_ZN11RHSPIDriver17spiUsingInterruptEh>:
    _spi.usingInterrupt(interruptNumber);
   bba42:	6a00      	ldr	r0, [r0, #32]
   bba44:	6803      	ldr	r3, [r0, #0]
   bba46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bba48:	4718      	bx	r3

000bba4a <_ZN7RH_RF9514modeWillChangeEN15RHGenericDriver6RHModeE>:

    /// Called by RH_RF95 when the radio mode is about to change to a new setting.
    /// Can be used by subclasses to implement antenna switching etc.
    /// \param[in] mode RHMode the new mode about to take effect
    /// \return true if the subclasses changes successful
    virtual bool modeWillChange(RHMode) {return true;}
   bba4a:	2001      	movs	r0, #1
   bba4c:	4770      	bx	lr

000bba4e <_ZN7RH_RF9516maxMessageLengthEv>:
}

uint8_t RH_RF95::maxMessageLength()
{
    return RH_RF95_MAX_MESSAGE_LEN;
}
   bba4e:	20fb      	movs	r0, #251	; 0xfb
   bba50:	4770      	bx	lr

000bba52 <_ZN7RH_RF95D1Ev>:
class RH_RF95 : public RHSPIDriver
   bba52:	4770      	bx	lr

000bba54 <_ZN7RH_RF9515isChannelActiveEv>:
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
}

bool RH_RF95::isChannelActive()
{
   bba54:	b510      	push	{r4, lr}
    // Set mode RHModeCad
    if (_mode != RHModeCad)
   bba56:	7903      	ldrb	r3, [r0, #4]
   bba58:	2b05      	cmp	r3, #5
{
   bba5a:	4604      	mov	r4, r0
    if (_mode != RHModeCad)
   bba5c:	d010      	beq.n	bba80 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
    {
	modeWillChange(RHModeCad);
   bba5e:	6803      	ldr	r3, [r0, #0]
   bba60:	2105      	movs	r1, #5
   bba62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   bba66:	4798      	blx	r3
        spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_CAD);
   bba68:	2207      	movs	r2, #7
   bba6a:	2101      	movs	r1, #1
   bba6c:	4620      	mov	r0, r4
   bba6e:	f7ff ff72 	bl	bb956 <_ZN11RHSPIDriver8spiWriteEhh>
        spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x80); // Interrupt on CadDone
   bba72:	2280      	movs	r2, #128	; 0x80
   bba74:	2140      	movs	r1, #64	; 0x40
   bba76:	4620      	mov	r0, r4
   bba78:	f7ff ff6d 	bl	bb956 <_ZN11RHSPIDriver8spiWriteEhh>
        _mode = RHModeCad;
   bba7c:	2305      	movs	r3, #5
   bba7e:	7123      	strb	r3, [r4, #4]
    }

    while (_mode == RHModeCad)
   bba80:	7923      	ldrb	r3, [r4, #4]
   bba82:	2b05      	cmp	r3, #5
   bba84:	d0fc      	beq.n	bba80 <_ZN7RH_RF9515isChannelActiveEv+0x2c>
        YIELD;

    return _cad;
   bba86:	7e20      	ldrb	r0, [r4, #24]
}
   bba88:	bd10      	pop	{r4, pc}

000bba8a <_ZN7RH_RF95D0Ev>:
   bba8a:	b510      	push	{r4, lr}
   bba8c:	f44f 7198 	mov.w	r1, #304	; 0x130
   bba90:	4604      	mov	r4, r0
   bba92:	f7f8 fb04 	bl	b409e <_ZdlPvj>
   bba96:	4620      	mov	r0, r4
   bba98:	bd10      	pop	{r4, pc}

000bba9a <_ZN7RH_RF955sleepEv>:
{
   bba9a:	b510      	push	{r4, lr}
    if (_mode != RHModeSleep)
   bba9c:	7903      	ldrb	r3, [r0, #4]
   bba9e:	2b01      	cmp	r3, #1
{
   bbaa0:	4604      	mov	r4, r0
    if (_mode != RHModeSleep)
   bbaa2:	d00b      	beq.n	bbabc <_ZN7RH_RF955sleepEv+0x22>
	modeWillChange(RHModeSleep);
   bbaa4:	6803      	ldr	r3, [r0, #0]
   bbaa6:	2101      	movs	r1, #1
   bbaa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   bbaac:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP);
   bbaae:	2200      	movs	r2, #0
   bbab0:	2101      	movs	r1, #1
   bbab2:	4620      	mov	r0, r4
   bbab4:	f7ff ff4f 	bl	bb956 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeSleep;
   bbab8:	2301      	movs	r3, #1
   bbaba:	7123      	strb	r3, [r4, #4]
}
   bbabc:	2001      	movs	r0, #1
   bbabe:	bd10      	pop	{r4, pc}

000bbac0 <_ZN7RH_RF954recvEPhS0_>:
{
   bbac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!available())
   bbac2:	6803      	ldr	r3, [r0, #0]
   bbac4:	68db      	ldr	r3, [r3, #12]
{
   bbac6:	4604      	mov	r4, r0
   bbac8:	460f      	mov	r7, r1
   bbaca:	4615      	mov	r5, r2
    if (!available())
   bbacc:	4798      	blx	r3
   bbace:	4606      	mov	r6, r0
   bbad0:	b1b0      	cbz	r0, bbb00 <_ZN7RH_RF954recvEPhS0_+0x40>
    if (buf && len)
   bbad2:	b187      	cbz	r7, bbaf6 <_ZN7RH_RF954recvEPhS0_+0x36>
   bbad4:	b17d      	cbz	r5, bbaf6 <_ZN7RH_RF954recvEPhS0_+0x36>
	if (*len > _bufLen-RH_RF95_HEADER_LEN)
   bbad6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   bbada:	782a      	ldrb	r2, [r5, #0]
   bbadc:	3b03      	subs	r3, #3
   bbade:	4293      	cmp	r3, r2
	    *len = _bufLen-RH_RF95_HEADER_LEN;
   bbae0:	bfde      	ittt	le
   bbae2:	f894 3028 	ldrble.w	r3, [r4, #40]	; 0x28
   bbae6:	3b04      	suble	r3, #4
   bbae8:	702b      	strble	r3, [r5, #0]
	memcpy(buf, _buf+RH_RF95_HEADER_LEN, *len);
   bbaea:	782a      	ldrb	r2, [r5, #0]
   bbaec:	f104 012d 	add.w	r1, r4, #45	; 0x2d
   bbaf0:	4638      	mov	r0, r7
   bbaf2:	f005 fb89 	bl	c1208 <memcpy>
    _rxBufValid = false;
   bbaf6:	2300      	movs	r3, #0
   bbaf8:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   bbafc:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
   bbb00:	4630      	mov	r0, r6
   bbb02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bbb04 <_ZN7RH_RF9510setTxPowerEab.part.0>:
	if (power > 20)
   bbb04:	2914      	cmp	r1, #20
void RH_RF95::setTxPower(int8_t power, bool useRFO)
   bbb06:	b538      	push	{r3, r4, r5, lr}
   bbb08:	4605      	mov	r5, r0
   bbb0a:	460c      	mov	r4, r1
	if (power > 20)
   bbb0c:	dc14      	bgt.n	bbb38 <_ZN7RH_RF9510setTxPowerEab.part.0+0x34>
	if (power < 2)
   bbb0e:	2901      	cmp	r1, #1
   bbb10:	dd14      	ble.n	bbb3c <_ZN7RH_RF9510setTxPowerEab.part.0+0x38>
	if (power > 17)
   bbb12:	2911      	cmp	r1, #17
   bbb14:	dd13      	ble.n	bbb3e <_ZN7RH_RF9510setTxPowerEab.part.0+0x3a>
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_ENABLE);
   bbb16:	2207      	movs	r2, #7
   bbb18:	214d      	movs	r1, #77	; 0x4d
   bbb1a:	4628      	mov	r0, r5
   bbb1c:	f7ff ff1b 	bl	bb956 <_ZN11RHSPIDriver8spiWriteEhh>
	    power -= 3;
   bbb20:	3c03      	subs	r4, #3
   bbb22:	b264      	sxtb	r4, r4
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   bbb24:	1ea2      	subs	r2, r4, #2
   bbb26:	f062 027f 	orn	r2, r2, #127	; 0x7f
   bbb2a:	4628      	mov	r0, r5
   bbb2c:	b2d2      	uxtb	r2, r2
}
   bbb2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-2));
   bbb32:	2109      	movs	r1, #9
   bbb34:	f7ff bf0f 	b.w	bb956 <_ZN11RHSPIDriver8spiWriteEhh>
	    power = 20;
   bbb38:	2414      	movs	r4, #20
   bbb3a:	e7ec      	b.n	bbb16 <_ZN7RH_RF9510setTxPowerEab.part.0+0x12>
	    power = 2;
   bbb3c:	2402      	movs	r4, #2
	    spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   bbb3e:	2204      	movs	r2, #4
   bbb40:	214d      	movs	r1, #77	; 0x4d
   bbb42:	4628      	mov	r0, r5
   bbb44:	f7ff ff07 	bl	bb956 <_ZN11RHSPIDriver8spiWriteEhh>
   bbb48:	e7ec      	b.n	bbb24 <_ZN7RH_RF9510setTxPowerEab.part.0+0x20>
	...

000bbb4c <_ZN7RH_RF95C1EhhR12RHGenericSPI>:
RH_RF95::RH_RF95(uint8_t slaveSelectPin, uint8_t interruptPin, RHGenericSPI& spi)
   bbb4c:	b538      	push	{r3, r4, r5, lr}
   bbb4e:	4604      	mov	r4, r0
   bbb50:	4615      	mov	r5, r2
    _rxBufValid(0)
   bbb52:	461a      	mov	r2, r3
   bbb54:	f7ff fece 	bl	bb8f4 <_ZN11RHSPIDriverC1EhR12RHGenericSPI>
   bbb58:	4b09      	ldr	r3, [pc, #36]	; (bbb80 <_ZN7RH_RF95C1EhhR12RHGenericSPI+0x34>)
   bbb5a:	6023      	str	r3, [r4, #0]
    _myInterruptIndex = 0xff; // Not allocated yet
   bbb5c:	22ff      	movs	r2, #255	; 0xff
    _rxBufValid(0)
   bbb5e:	2300      	movs	r3, #0
    _myInterruptIndex = 0xff; // Not allocated yet
   bbb60:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
    _enableCRC = true;
   bbb64:	2201      	movs	r2, #1
    _rxBufValid(0)
   bbb66:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
   bbb6a:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
    _interruptPin = interruptPin;
   bbb6e:	f884 5026 	strb.w	r5, [r4, #38]	; 0x26
    _enableCRC = true;
   bbb72:	f884 212b 	strb.w	r2, [r4, #299]	; 0x12b
    _useRFO = false;
   bbb76:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
}
   bbb7a:	4620      	mov	r0, r4
   bbb7c:	bd38      	pop	{r3, r4, r5, pc}
   bbb7e:	bf00      	nop
   bbb80:	000c50a4 	.word	0x000c50a4

000bbb84 <_ZN7RH_RF9513validateRxBufEv>:
    if (_bufLen < 4)
   bbb84:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   bbb88:	2b03      	cmp	r3, #3
   bbb8a:	d91b      	bls.n	bbbc4 <_ZN7RH_RF9513validateRxBufEv+0x40>
    _rxHeaderTo    = _buf[0];
   bbb8c:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   bbb90:	71c3      	strb	r3, [r0, #7]
    _rxHeaderFrom  = _buf[1];
   bbb92:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   bbb96:	7203      	strb	r3, [r0, #8]
    _rxHeaderId    = _buf[2];
   bbb98:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
   bbb9c:	7243      	strb	r3, [r0, #9]
    _rxHeaderFlags = _buf[3];
   bbb9e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
   bbba2:	7283      	strb	r3, [r0, #10]
	_rxHeaderTo == _thisAddress ||
   bbba4:	7983      	ldrb	r3, [r0, #6]
   bbba6:	b933      	cbnz	r3, bbbb6 <_ZN7RH_RF9513validateRxBufEv+0x32>
   bbba8:	79c3      	ldrb	r3, [r0, #7]
    if (_promiscuous ||
   bbbaa:	7942      	ldrb	r2, [r0, #5]
   bbbac:	429a      	cmp	r2, r3
   bbbae:	d002      	beq.n	bbbb6 <_ZN7RH_RF9513validateRxBufEv+0x32>
	_rxHeaderTo == RH_BROADCAST_ADDRESS)
   bbbb0:	79c3      	ldrb	r3, [r0, #7]
	_rxHeaderTo == _thisAddress ||
   bbbb2:	2bff      	cmp	r3, #255	; 0xff
   bbbb4:	d106      	bne.n	bbbc4 <_ZN7RH_RF9513validateRxBufEv+0x40>
	_rxGood++;
   bbbb6:	8a83      	ldrh	r3, [r0, #20]
   bbbb8:	3301      	adds	r3, #1
   bbbba:	b29b      	uxth	r3, r3
   bbbbc:	8283      	strh	r3, [r0, #20]
	_rxBufValid = true;
   bbbbe:	2301      	movs	r3, #1
   bbbc0:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
}
   bbbc4:	4770      	bx	lr
	...

000bbbc8 <_ZN7RH_RF9512setFrequencyEf>:
{
   bbbc8:	b538      	push	{r3, r4, r5, lr}
   bbbca:	4604      	mov	r4, r0
   bbbcc:	ed2d 8b02 	vpush	{d8}
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   bbbd0:	ee10 0a10 	vmov	r0, s0
{
   bbbd4:	eeb0 8a40 	vmov.f32	s16, s0
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   bbbd8:	f004 ff06 	bl	c09e8 <__aeabi_f2d>
   bbbdc:	a317      	add	r3, pc, #92	; (adr r3, bbc3c <_ZN7RH_RF9512setFrequencyEf+0x74>)
   bbbde:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbbe2:	f004 ff59 	bl	c0a98 <__aeabi_dmul>
   bbbe6:	a317      	add	r3, pc, #92	; (adr r3, bbc44 <_ZN7RH_RF9512setFrequencyEf+0x7c>)
   bbbe8:	e9d3 2300 	ldrd	r2, r3, [r3]
   bbbec:	f005 f87e 	bl	c0cec <__aeabi_ddiv>
   bbbf0:	f005 fa2a 	bl	c1048 <__aeabi_d2uiz>
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   bbbf4:	2106      	movs	r1, #6
    uint32_t frf = (centre * 1000000.0) / RH_RF95_FSTEP;
   bbbf6:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
   bbbf8:	f3c0 4207 	ubfx	r2, r0, #16, #8
   bbbfc:	4620      	mov	r0, r4
   bbbfe:	f7ff feaa 	bl	bb956 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_07_FRF_MID, (frf >> 8) & 0xff);
   bbc02:	f3c5 2207 	ubfx	r2, r5, #8, #8
   bbc06:	2107      	movs	r1, #7
   bbc08:	4620      	mov	r0, r4
   bbc0a:	f7ff fea4 	bl	bb956 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_08_FRF_LSB, frf & 0xff);
   bbc0e:	b2ea      	uxtb	r2, r5
   bbc10:	2108      	movs	r1, #8
   bbc12:	4620      	mov	r0, r4
   bbc14:	f7ff fe9f 	bl	bb956 <_ZN11RHSPIDriver8spiWriteEhh>
    _usingHFport = (centre >= 779.0);
   bbc18:	eddf 7a07 	vldr	s15, [pc, #28]	; bbc38 <_ZN7RH_RF9512setFrequencyEf+0x70>
   bbc1c:	eeb4 8ae7 	vcmpe.f32	s16, s15
}
   bbc20:	ecbd 8b02 	vpop	{d8}
    _usingHFport = (centre >= 779.0);
   bbc24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   bbc28:	bfac      	ite	ge
   bbc2a:	2301      	movge	r3, #1
   bbc2c:	2300      	movlt	r3, #0
}
   bbc2e:	2001      	movs	r0, #1
    _usingHFport = (centre >= 779.0);
   bbc30:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129
}
   bbc34:	bd38      	pop	{r3, r4, r5, pc}
   bbc36:	bf00      	nop
   bbc38:	4442c000 	.word	0x4442c000
   bbc3c:	00000000 	.word	0x00000000
   bbc40:	412e8480 	.word	0x412e8480
   bbc44:	00000000 	.word	0x00000000
   bbc48:	404e8480 	.word	0x404e8480

000bbc4c <_ZN7RH_RF9511setModeIdleEv>:
{
   bbc4c:	b510      	push	{r4, lr}
    if (_mode != RHModeIdle)
   bbc4e:	7903      	ldrb	r3, [r0, #4]
   bbc50:	2b02      	cmp	r3, #2
{
   bbc52:	4604      	mov	r4, r0
    if (_mode != RHModeIdle)
   bbc54:	d00b      	beq.n	bbc6e <_ZN7RH_RF9511setModeIdleEv+0x22>
	modeWillChange(RHModeIdle);
   bbc56:	6803      	ldr	r3, [r0, #0]
   bbc58:	2102      	movs	r1, #2
   bbc5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   bbc5e:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_STDBY);
   bbc60:	2201      	movs	r2, #1
   bbc62:	4611      	mov	r1, r2
   bbc64:	4620      	mov	r0, r4
   bbc66:	f7ff fe76 	bl	bb956 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeIdle;
   bbc6a:	2302      	movs	r3, #2
   bbc6c:	7123      	strb	r3, [r4, #4]
}
   bbc6e:	bd10      	pop	{r4, pc}

000bbc70 <_ZN7RH_RF9515handleInterruptEv>:
{
   bbc70:	b570      	push	{r4, r5, r6, lr}
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   bbc72:	2112      	movs	r1, #18
{
   bbc74:	4604      	mov	r4, r0
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   bbc76:	f7ff fe4d 	bl	bb914 <_ZN11RHSPIDriver7spiReadEh>
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   bbc7a:	211c      	movs	r1, #28
    uint8_t irq_flags = spiRead(RH_RF95_REG_12_IRQ_FLAGS);
   bbc7c:	4605      	mov	r5, r0
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   bbc7e:	4620      	mov	r0, r4
   bbc80:	f7ff fe48 	bl	bb914 <_ZN11RHSPIDriver7spiReadEh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   bbc84:	22ff      	movs	r2, #255	; 0xff
    uint8_t hop_channel = spiRead(RH_RF95_REG_1C_HOP_CHANNEL);
   bbc86:	4606      	mov	r6, r0
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   bbc88:	2112      	movs	r1, #18
   bbc8a:	4620      	mov	r0, r4
   bbc8c:	f7ff fe63 	bl	bb956 <_ZN11RHSPIDriver8spiWriteEhh>
    if (_mode == RHModeRx
   bbc90:	7923      	ldrb	r3, [r4, #4]
	&& (   (irq_flags & (RH_RF95_RX_TIMEOUT | RH_RF95_PAYLOAD_CRC_ERROR))
   bbc92:	2b04      	cmp	r3, #4
   bbc94:	d107      	bne.n	bbca6 <_ZN7RH_RF9515handleInterruptEv+0x36>
   bbc96:	f015 0fa0 	tst.w	r5, #160	; 0xa0
   bbc9a:	d117      	bne.n	bbccc <_ZN7RH_RF9515handleInterruptEv+0x5c>
	    || (_enableCRC && !(hop_channel & RH_RF95_RX_PAYLOAD_CRC_IS_ON)) ))
   bbc9c:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
   bbca0:	b10b      	cbz	r3, bbca6 <_ZN7RH_RF9515handleInterruptEv+0x36>
   bbca2:	0670      	lsls	r0, r6, #25
   bbca4:	d512      	bpl.n	bbccc <_ZN7RH_RF9515handleInterruptEv+0x5c>
    else if (_mode == RHModeRx && irq_flags & RH_RF95_RX_DONE)
   bbca6:	7923      	ldrb	r3, [r4, #4]
   bbca8:	2b04      	cmp	r3, #4
   bbcaa:	d101      	bne.n	bbcb0 <_ZN7RH_RF9515handleInterruptEv+0x40>
   bbcac:	0669      	lsls	r1, r5, #25
   bbcae:	d422      	bmi.n	bbcf6 <_ZN7RH_RF9515handleInterruptEv+0x86>
    else if (_mode == RHModeTx && irq_flags & RH_RF95_TX_DONE)
   bbcb0:	7923      	ldrb	r3, [r4, #4]
   bbcb2:	2b03      	cmp	r3, #3
   bbcb4:	d101      	bne.n	bbcba <_ZN7RH_RF9515handleInterruptEv+0x4a>
   bbcb6:	072a      	lsls	r2, r5, #28
   bbcb8:	d468      	bmi.n	bbd8c <_ZN7RH_RF9515handleInterruptEv+0x11c>
    else if (_mode == RHModeCad && irq_flags & RH_RF95_CAD_DONE)
   bbcba:	7923      	ldrb	r3, [r4, #4]
   bbcbc:	2b05      	cmp	r3, #5
   bbcbe:	d10e      	bne.n	bbcde <_ZN7RH_RF9515handleInterruptEv+0x6e>
   bbcc0:	076b      	lsls	r3, r5, #29
   bbcc2:	d50c      	bpl.n	bbcde <_ZN7RH_RF9515handleInterruptEv+0x6e>
        _cad = irq_flags & RH_RF95_CAD_DETECTED;
   bbcc4:	f005 0501 	and.w	r5, r5, #1
   bbcc8:	7625      	strb	r5, [r4, #24]
   bbcca:	e063      	b.n	bbd94 <_ZN7RH_RF9515handleInterruptEv+0x124>
	_rxBad++;
   bbccc:	8a63      	ldrh	r3, [r4, #18]
   bbcce:	3301      	adds	r3, #1
   bbcd0:	b29b      	uxth	r3, r3
   bbcd2:	8263      	strh	r3, [r4, #18]
    _rxBufValid = false;
   bbcd4:	2300      	movs	r3, #0
   bbcd6:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
    _bufLen = 0;
   bbcda:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   bbcde:	22ff      	movs	r2, #255	; 0xff
   bbce0:	2112      	movs	r1, #18
   bbce2:	4620      	mov	r0, r4
   bbce4:	f7ff fe37 	bl	bb956 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   bbce8:	4620      	mov	r0, r4
   bbcea:	22ff      	movs	r2, #255	; 0xff
}
   bbcec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    spiWrite(RH_RF95_REG_12_IRQ_FLAGS, 0xff); // Clear all IRQ flags
   bbcf0:	2112      	movs	r1, #18
   bbcf2:	f7ff be30 	b.w	bb956 <_ZN11RHSPIDriver8spiWriteEhh>
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   bbcf6:	2113      	movs	r1, #19
   bbcf8:	4620      	mov	r0, r4
   bbcfa:	f7ff fe0b 	bl	bb914 <_ZN11RHSPIDriver7spiReadEh>
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   bbcfe:	2110      	movs	r1, #16
	uint8_t len = spiRead(RH_RF95_REG_13_RX_NB_BYTES);
   bbd00:	4605      	mov	r5, r0
	spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, spiRead(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
   bbd02:	4620      	mov	r0, r4
   bbd04:	f7ff fe06 	bl	bb914 <_ZN11RHSPIDriver7spiReadEh>
   bbd08:	210d      	movs	r1, #13
   bbd0a:	4602      	mov	r2, r0
   bbd0c:	4620      	mov	r0, r4
   bbd0e:	f7ff fe22 	bl	bb956 <_ZN11RHSPIDriver8spiWriteEhh>
	spiBurstRead(RH_RF95_REG_00_FIFO, _buf, len);
   bbd12:	f104 0229 	add.w	r2, r4, #41	; 0x29
   bbd16:	462b      	mov	r3, r5
   bbd18:	2100      	movs	r1, #0
   bbd1a:	4620      	mov	r0, r4
   bbd1c:	f7ff fe40 	bl	bb9a0 <_ZN11RHSPIDriver12spiBurstReadEhPhh>
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   bbd20:	2119      	movs	r1, #25
	_bufLen = len;
   bbd22:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
	_lastSNR = (int8_t)spiRead(RH_RF95_REG_19_PKT_SNR_VALUE) / 4;
   bbd26:	4620      	mov	r0, r4
   bbd28:	f7ff fdf4 	bl	bb914 <_ZN11RHSPIDriver7spiReadEh>
   bbd2c:	b240      	sxtb	r0, r0
   bbd2e:	2800      	cmp	r0, #0
   bbd30:	bfb8      	it	lt
   bbd32:	3003      	addlt	r0, #3
   bbd34:	1080      	asrs	r0, r0, #2
   bbd36:	f884 012a 	strb.w	r0, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   bbd3a:	211a      	movs	r1, #26
   bbd3c:	4620      	mov	r0, r4
   bbd3e:	f7ff fde9 	bl	bb914 <_ZN11RHSPIDriver7spiReadEh>
	if (_lastSNR < 0)
   bbd42:	f994 312a 	ldrsb.w	r3, [r4, #298]	; 0x12a
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   bbd46:	b200      	sxth	r0, r0
	if (_lastSNR < 0)
   bbd48:	2b00      	cmp	r3, #0
	_lastRssi = spiRead(RH_RF95_REG_1A_PKT_RSSI_VALUE);
   bbd4a:	8220      	strh	r0, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   bbd4c:	bfa9      	itett	ge
   bbd4e:	8a23      	ldrhge	r3, [r4, #16]
	    _lastRssi = _lastRssi + _lastSNR;
   bbd50:	8a22      	ldrhlt	r2, [r4, #16]
	    _lastRssi = (int)_lastRssi * 16 / 15;
   bbd52:	b21b      	sxthge	r3, r3
   bbd54:	011b      	lslge	r3, r3, #4
	    _lastRssi = _lastRssi + _lastSNR;
   bbd56:	bfb2      	itee	lt
   bbd58:	189b      	addlt	r3, r3, r2
	    _lastRssi = (int)_lastRssi * 16 / 15;
   bbd5a:	220f      	movge	r2, #15
   bbd5c:	fb93 f3f2 	sdivge	r3, r3, r2
   bbd60:	b21b      	sxth	r3, r3
   bbd62:	8223      	strh	r3, [r4, #16]
	if (_usingHFport)
   bbd64:	f894 3129 	ldrb.w	r3, [r4, #297]	; 0x129
   bbd68:	b16b      	cbz	r3, bbd86 <_ZN7RH_RF9515handleInterruptEv+0x116>
	    _lastRssi -= 157;
   bbd6a:	8a23      	ldrh	r3, [r4, #16]
   bbd6c:	3b9d      	subs	r3, #157	; 0x9d
	    _lastRssi -= 164;
   bbd6e:	b21b      	sxth	r3, r3
   bbd70:	8223      	strh	r3, [r4, #16]
	validateRxBuf(); 
   bbd72:	4620      	mov	r0, r4
   bbd74:	f7ff ff06 	bl	bbb84 <_ZN7RH_RF9513validateRxBufEv>
	if (_rxBufValid)
   bbd78:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
   bbd7c:	2b00      	cmp	r3, #0
   bbd7e:	d0ae      	beq.n	bbcde <_ZN7RH_RF9515handleInterruptEv+0x6e>
        setModeIdle();
   bbd80:	f7ff ff64 	bl	bbc4c <_ZN7RH_RF9511setModeIdleEv>
   bbd84:	e7ab      	b.n	bbcde <_ZN7RH_RF9515handleInterruptEv+0x6e>
	    _lastRssi -= 164;
   bbd86:	8a23      	ldrh	r3, [r4, #16]
   bbd88:	3ba4      	subs	r3, #164	; 0xa4
   bbd8a:	e7f0      	b.n	bbd6e <_ZN7RH_RF9515handleInterruptEv+0xfe>
	_txGood++;
   bbd8c:	8ae3      	ldrh	r3, [r4, #22]
   bbd8e:	3301      	adds	r3, #1
   bbd90:	b29b      	uxth	r3, r3
   bbd92:	82e3      	strh	r3, [r4, #22]
        setModeIdle();
   bbd94:	4620      	mov	r0, r4
   bbd96:	e7f3      	b.n	bbd80 <_ZN7RH_RF9515handleInterruptEv+0x110>

000bbd98 <_ZN7RH_RF954isr0Ev>:
    if (_deviceForInterrupt[0])
   bbd98:	4b02      	ldr	r3, [pc, #8]	; (bbda4 <_ZN7RH_RF954isr0Ev+0xc>)
   bbd9a:	6818      	ldr	r0, [r3, #0]
   bbd9c:	b108      	cbz	r0, bbda2 <_ZN7RH_RF954isr0Ev+0xa>
	_deviceForInterrupt[0]->handleInterrupt();
   bbd9e:	f7ff bf67 	b.w	bbc70 <_ZN7RH_RF9515handleInterruptEv>
}
   bbda2:	4770      	bx	lr
   bbda4:	2003e5f8 	.word	0x2003e5f8

000bbda8 <_ZN7RH_RF954isr1Ev>:
    if (_deviceForInterrupt[1])
   bbda8:	4b02      	ldr	r3, [pc, #8]	; (bbdb4 <_ZN7RH_RF954isr1Ev+0xc>)
   bbdaa:	6858      	ldr	r0, [r3, #4]
   bbdac:	b108      	cbz	r0, bbdb2 <_ZN7RH_RF954isr1Ev+0xa>
	_deviceForInterrupt[1]->handleInterrupt();
   bbdae:	f7ff bf5f 	b.w	bbc70 <_ZN7RH_RF9515handleInterruptEv>
}
   bbdb2:	4770      	bx	lr
   bbdb4:	2003e5f8 	.word	0x2003e5f8

000bbdb8 <_ZN7RH_RF954isr2Ev>:
    if (_deviceForInterrupt[2])
   bbdb8:	4b02      	ldr	r3, [pc, #8]	; (bbdc4 <_ZN7RH_RF954isr2Ev+0xc>)
   bbdba:	6898      	ldr	r0, [r3, #8]
   bbdbc:	b108      	cbz	r0, bbdc2 <_ZN7RH_RF954isr2Ev+0xa>
	_deviceForInterrupt[2]->handleInterrupt();
   bbdbe:	f7ff bf57 	b.w	bbc70 <_ZN7RH_RF9515handleInterruptEv>
}
   bbdc2:	4770      	bx	lr
   bbdc4:	2003e5f8 	.word	0x2003e5f8

000bbdc8 <_ZN7RH_RF959setModeRxEv>:
{
   bbdc8:	b510      	push	{r4, lr}
    if (_mode != RHModeRx)
   bbdca:	7903      	ldrb	r3, [r0, #4]
   bbdcc:	2b04      	cmp	r3, #4
{
   bbdce:	4604      	mov	r4, r0
    if (_mode != RHModeRx)
   bbdd0:	d010      	beq.n	bbdf4 <_ZN7RH_RF959setModeRxEv+0x2c>
	modeWillChange(RHModeRx);
   bbdd2:	6803      	ldr	r3, [r0, #0]
   bbdd4:	2104      	movs	r1, #4
   bbdd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   bbdda:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_RXCONTINUOUS);
   bbddc:	2205      	movs	r2, #5
   bbdde:	2101      	movs	r1, #1
   bbde0:	4620      	mov	r0, r4
   bbde2:	f7ff fdb8 	bl	bb956 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x00); // Interrupt on RxDone
   bbde6:	2200      	movs	r2, #0
   bbde8:	2140      	movs	r1, #64	; 0x40
   bbdea:	4620      	mov	r0, r4
   bbdec:	f7ff fdb3 	bl	bb956 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeRx;
   bbdf0:	2304      	movs	r3, #4
   bbdf2:	7123      	strb	r3, [r4, #4]
}
   bbdf4:	bd10      	pop	{r4, pc}

000bbdf6 <_ZN7RH_RF959availableEv>:
{
   bbdf6:	b510      	push	{r4, lr}
    if (_mode == RHModeTx)
   bbdf8:	7903      	ldrb	r3, [r0, #4]
   bbdfa:	2b03      	cmp	r3, #3
{
   bbdfc:	4604      	mov	r4, r0
    if (_mode == RHModeTx)
   bbdfe:	d005      	beq.n	bbe0c <_ZN7RH_RF959availableEv+0x16>
    setModeRx();
   bbe00:	f7ff ffe2 	bl	bbdc8 <_ZN7RH_RF959setModeRxEv>
    return _rxBufValid; // Will be set by the interrupt handler when a good message is received
   bbe04:	f894 0128 	ldrb.w	r0, [r4, #296]	; 0x128
   bbe08:	b2c0      	uxtb	r0, r0
}
   bbe0a:	bd10      	pop	{r4, pc}
	return false;
   bbe0c:	2000      	movs	r0, #0
   bbe0e:	e7fc      	b.n	bbe0a <_ZN7RH_RF959availableEv+0x14>

000bbe10 <_ZN7RH_RF959setModeTxEv>:
{
   bbe10:	b510      	push	{r4, lr}
    if (_mode != RHModeTx)
   bbe12:	7903      	ldrb	r3, [r0, #4]
   bbe14:	2b03      	cmp	r3, #3
{
   bbe16:	4604      	mov	r4, r0
    if (_mode != RHModeTx)
   bbe18:	d010      	beq.n	bbe3c <_ZN7RH_RF959setModeTxEv+0x2c>
	modeWillChange(RHModeTx);
   bbe1a:	6803      	ldr	r3, [r0, #0]
   bbe1c:	2103      	movs	r1, #3
   bbe1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   bbe22:	4798      	blx	r3
	spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_TX);
   bbe24:	2203      	movs	r2, #3
   bbe26:	2101      	movs	r1, #1
   bbe28:	4620      	mov	r0, r4
   bbe2a:	f7ff fd94 	bl	bb956 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_40_DIO_MAPPING1, 0x40); // Interrupt on TxDone
   bbe2e:	2240      	movs	r2, #64	; 0x40
   bbe30:	4611      	mov	r1, r2
   bbe32:	4620      	mov	r0, r4
   bbe34:	f7ff fd8f 	bl	bb956 <_ZN11RHSPIDriver8spiWriteEhh>
	_mode = RHModeTx;
   bbe38:	2303      	movs	r3, #3
   bbe3a:	7123      	strb	r3, [r4, #4]
}
   bbe3c:	bd10      	pop	{r4, pc}

000bbe3e <_ZN7RH_RF954sendEPKhh>:
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   bbe3e:	2afb      	cmp	r2, #251	; 0xfb
{
   bbe40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bbe42:	4604      	mov	r4, r0
   bbe44:	460f      	mov	r7, r1
   bbe46:	4615      	mov	r5, r2
    if (len > RH_RF95_MAX_MESSAGE_LEN)
   bbe48:	d902      	bls.n	bbe50 <_ZN7RH_RF954sendEPKhh+0x12>
	return false;
   bbe4a:	2600      	movs	r6, #0
}
   bbe4c:	4630      	mov	r0, r6
   bbe4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    waitPacketSent(); // Make sure we dont interrupt an outgoing message
   bbe50:	6803      	ldr	r3, [r0, #0]
   bbe52:	6a1b      	ldr	r3, [r3, #32]
   bbe54:	4798      	blx	r3
    setModeIdle();
   bbe56:	4620      	mov	r0, r4
   bbe58:	f7ff fef8 	bl	bbc4c <_ZN7RH_RF9511setModeIdleEv>
    if (!waitCAD()) 
   bbe5c:	6823      	ldr	r3, [r4, #0]
   bbe5e:	4620      	mov	r0, r4
   bbe60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bbe62:	4798      	blx	r3
   bbe64:	4606      	mov	r6, r0
   bbe66:	2800      	cmp	r0, #0
   bbe68:	d0ef      	beq.n	bbe4a <_ZN7RH_RF954sendEPKhh+0xc>
    spiWrite(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0);
   bbe6a:	2200      	movs	r2, #0
   bbe6c:	210d      	movs	r1, #13
   bbe6e:	4620      	mov	r0, r4
   bbe70:	f7ff fd71 	bl	bb956 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderTo);
   bbe74:	7ae2      	ldrb	r2, [r4, #11]
   bbe76:	2100      	movs	r1, #0
   bbe78:	4620      	mov	r0, r4
   bbe7a:	f7ff fd6c 	bl	bb956 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFrom);
   bbe7e:	7b22      	ldrb	r2, [r4, #12]
   bbe80:	2100      	movs	r1, #0
   bbe82:	4620      	mov	r0, r4
   bbe84:	f7ff fd67 	bl	bb956 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderId);
   bbe88:	7b62      	ldrb	r2, [r4, #13]
   bbe8a:	2100      	movs	r1, #0
   bbe8c:	4620      	mov	r0, r4
   bbe8e:	f7ff fd62 	bl	bb956 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_00_FIFO, _txHeaderFlags);
   bbe92:	7ba2      	ldrb	r2, [r4, #14]
   bbe94:	2100      	movs	r1, #0
   bbe96:	4620      	mov	r0, r4
   bbe98:	f7ff fd5d 	bl	bb956 <_ZN11RHSPIDriver8spiWriteEhh>
    spiBurstWrite(RH_RF95_REG_00_FIFO, data, len);
   bbe9c:	462b      	mov	r3, r5
   bbe9e:	463a      	mov	r2, r7
   bbea0:	2100      	movs	r1, #0
   bbea2:	4620      	mov	r0, r4
   bbea4:	f7ff fda5 	bl	bb9f2 <_ZN11RHSPIDriver13spiBurstWriteEhPKhh>
    spiWrite(RH_RF95_REG_22_PAYLOAD_LENGTH, len + RH_RF95_HEADER_LEN);
   bbea8:	1d2a      	adds	r2, r5, #4
   bbeaa:	b2d2      	uxtb	r2, r2
   bbeac:	2122      	movs	r1, #34	; 0x22
   bbeae:	4620      	mov	r0, r4
   bbeb0:	f7ff fd51 	bl	bb956 <_ZN11RHSPIDriver8spiWriteEhh>
    setModeTx(); // Start the transmitter
   bbeb4:	4620      	mov	r0, r4
   bbeb6:	f7ff ffab 	bl	bbe10 <_ZN7RH_RF959setModeTxEv>
    return true;
   bbeba:	e7c7      	b.n	bbe4c <_ZN7RH_RF954sendEPKhh+0xe>

000bbebc <_ZN7RH_RF9510setTxPowerEab>:
{
   bbebc:	b510      	push	{r4, lr}
   bbebe:	4604      	mov	r4, r0
    _useRFO = useRFO;
   bbec0:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (useRFO)
   bbec4:	b172      	cbz	r2, bbee4 <_ZN7RH_RF9510setTxPowerEab+0x28>
	spiWrite(RH_RF95_REG_09_PA_CONFIG, RH_RF95_MAX_POWER | power);
   bbec6:	f381 0204 	usat	r2, #4, r1
   bbeca:	f042 0270 	orr.w	r2, r2, #112	; 0x70
   bbece:	b2d2      	uxtb	r2, r2
   bbed0:	2109      	movs	r1, #9
   bbed2:	f7ff fd40 	bl	bb956 <_ZN11RHSPIDriver8spiWriteEhh>
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   bbed6:	4620      	mov	r0, r4
   bbed8:	2204      	movs	r2, #4
}
   bbeda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	spiWrite(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
   bbede:	214d      	movs	r1, #77	; 0x4d
   bbee0:	f7ff bd39 	b.w	bb956 <_ZN11RHSPIDriver8spiWriteEhh>
}
   bbee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bbee8:	f7ff be0c 	b.w	bbb04 <_ZN7RH_RF9510setTxPowerEab.part.0>

000bbeec <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>:
{
   bbeec:	b538      	push	{r3, r4, r5, lr}
   bbeee:	460c      	mov	r4, r1
   bbef0:	4605      	mov	r5, r0
    spiWrite(RH_RF95_REG_1D_MODEM_CONFIG1,       config->reg_1d);
   bbef2:	780a      	ldrb	r2, [r1, #0]
   bbef4:	211d      	movs	r1, #29
   bbef6:	f7ff fd2e 	bl	bb956 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_1E_MODEM_CONFIG2,       config->reg_1e);
   bbefa:	7862      	ldrb	r2, [r4, #1]
   bbefc:	211e      	movs	r1, #30
   bbefe:	4628      	mov	r0, r5
   bbf00:	f7ff fd29 	bl	bb956 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   bbf04:	78a2      	ldrb	r2, [r4, #2]
   bbf06:	4628      	mov	r0, r5
   bbf08:	2126      	movs	r1, #38	; 0x26
}
   bbf0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_26_MODEM_CONFIG3,       config->reg_26);
   bbf0e:	f7ff bd22 	b.w	bb956 <_ZN11RHSPIDriver8spiWriteEhh>
	...

000bbf14 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>:
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   bbf14:	2905      	cmp	r1, #5
{
   bbf16:	b513      	push	{r0, r1, r4, lr}
    if (index > (signed int)(sizeof(MODEM_CONFIG_TABLE) / sizeof(ModemConfig)))
   bbf18:	d80f      	bhi.n	bbf3a <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x26>
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   bbf1a:	4b09      	ldr	r3, [pc, #36]	; (bbf40 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x2c>)
   bbf1c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   bbf20:	185c      	adds	r4, r3, r1
   bbf22:	5a5a      	ldrh	r2, [r3, r1]
   bbf24:	78a3      	ldrb	r3, [r4, #2]
   bbf26:	f8ad 2004 	strh.w	r2, [sp, #4]
    setModemRegisters(&cfg);
   bbf2a:	a901      	add	r1, sp, #4
    memcpy_P(&cfg, &MODEM_CONFIG_TABLE[index], sizeof(RH_RF95::ModemConfig));
   bbf2c:	f88d 3006 	strb.w	r3, [sp, #6]
    setModemRegisters(&cfg);
   bbf30:	f7ff ffdc 	bl	bbeec <_ZN7RH_RF9517setModemRegistersEPKNS_11ModemConfigE>
    return true;
   bbf34:	2001      	movs	r0, #1
}
   bbf36:	b002      	add	sp, #8
   bbf38:	bd10      	pop	{r4, pc}
        return false;
   bbf3a:	2000      	movs	r0, #0
   bbf3c:	e7fb      	b.n	bbf36 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE+0x22>
   bbf3e:	bf00      	nop
   bbf40:	000c508c 	.word	0x000c508c

000bbf44 <_ZN7RH_RF9517setPreambleLengthEt>:
{
   bbf44:	b538      	push	{r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   bbf46:	0a0a      	lsrs	r2, r1, #8
{
   bbf48:	4605      	mov	r5, r0
   bbf4a:	460c      	mov	r4, r1
    spiWrite(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
   bbf4c:	2120      	movs	r1, #32
   bbf4e:	f7ff fd02 	bl	bb956 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   bbf52:	b2e2      	uxtb	r2, r4
   bbf54:	4628      	mov	r0, r5
   bbf56:	2121      	movs	r1, #33	; 0x21
}
   bbf58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    spiWrite(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
   bbf5c:	f7ff bcfb 	b.w	bb956 <_ZN11RHSPIDriver8spiWriteEhh>

000bbf60 <_ZN7RH_RF954initEv>:
{
   bbf60:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bbf62:	4604      	mov	r4, r0
    if (!RHSPIDriver::init())
   bbf64:	f7ff fca6 	bl	bb8b4 <_ZN11RHSPIDriver4initEv>
   bbf68:	4606      	mov	r6, r0
   bbf6a:	b918      	cbnz	r0, bbf74 <_ZN7RH_RF954initEv+0x14>
	return false;
   bbf6c:	2600      	movs	r6, #0
}
   bbf6e:	4630      	mov	r0, r6
   bbf70:	b002      	add	sp, #8
   bbf72:	bd70      	pop	{r4, r5, r6, pc}
    if (_interruptPin != RH_INVALID_PIN)
   bbf74:	f894 5026 	ldrb.w	r5, [r4, #38]	; 0x26
   bbf78:	2dff      	cmp	r5, #255	; 0xff
   bbf7a:	d054      	beq.n	bc026 <_ZN7RH_RF954initEv+0xc6>
	spiUsingInterrupt(interruptNumber);
   bbf7c:	4629      	mov	r1, r5
   bbf7e:	4620      	mov	r0, r4
   bbf80:	f7ff fd5f 	bl	bba42 <_ZN11RHSPIDriver17spiUsingInterruptEh>
    spiWrite(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE);
   bbf84:	2280      	movs	r2, #128	; 0x80
   bbf86:	2101      	movs	r1, #1
   bbf88:	4620      	mov	r0, r4
   bbf8a:	f7ff fce4 	bl	bb956 <_ZN11RHSPIDriver8spiWriteEhh>
    delay(10); // Wait for sleep mode to take over from say, CAD
   bbf8e:	200a      	movs	r0, #10
   bbf90:	f001 fa04 	bl	bd39c <delay>
    if (spiRead(RH_RF95_REG_01_OP_MODE) != (RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE))
   bbf94:	2101      	movs	r1, #1
   bbf96:	4620      	mov	r0, r4
   bbf98:	f7ff fcbc 	bl	bb914 <_ZN11RHSPIDriver7spiReadEh>
   bbf9c:	2880      	cmp	r0, #128	; 0x80
   bbf9e:	d1e5      	bne.n	bbf6c <_ZN7RH_RF954initEv+0xc>
    if (_interruptPin != RH_INVALID_PIN)
   bbfa0:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
   bbfa4:	28ff      	cmp	r0, #255	; 0xff
   bbfa6:	d01c      	beq.n	bbfe2 <_ZN7RH_RF954initEv+0x82>
	pinMode(_interruptPin, INPUT); 
   bbfa8:	2100      	movs	r1, #0
   bbfaa:	f004 fa91 	bl	c04d0 <pinMode>
	if (_myInterruptIndex == 0xff)
   bbfae:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   bbfb2:	2bff      	cmp	r3, #255	; 0xff
   bbfb4:	d107      	bne.n	bbfc6 <_ZN7RH_RF954initEv+0x66>
	    if (_interruptCount <= RH_RF95_NUM_INTERRUPTS)
   bbfb6:	4a26      	ldr	r2, [pc, #152]	; (bc050 <_ZN7RH_RF954initEv+0xf0>)
   bbfb8:	7813      	ldrb	r3, [r2, #0]
   bbfba:	2b03      	cmp	r3, #3
   bbfbc:	d8d6      	bhi.n	bbf6c <_ZN7RH_RF954initEv+0xc>
		_myInterruptIndex = _interruptCount++;
   bbfbe:	1c59      	adds	r1, r3, #1
   bbfc0:	7011      	strb	r1, [r2, #0]
   bbfc2:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	_deviceForInterrupt[_myInterruptIndex] = this;
   bbfc6:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   bbfca:	4b22      	ldr	r3, [pc, #136]	; (bc054 <_ZN7RH_RF954initEv+0xf4>)
   bbfcc:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
	if (_myInterruptIndex == 0)
   bbfd0:	bb62      	cbnz	r2, bc02c <_ZN7RH_RF954initEv+0xcc>
	    attachInterrupt(interruptNumber, isr0, RISING);
   bbfd2:	4921      	ldr	r1, [pc, #132]	; (bc058 <_ZN7RH_RF954initEv+0xf8>)
   bbfd4:	9200      	str	r2, [sp, #0]
   bbfd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bbfda:	2201      	movs	r2, #1
	    attachInterrupt(interruptNumber, isr2, RISING);
   bbfdc:	b2a8      	uxth	r0, r5
   bbfde:	f001 ff5d 	bl	bde9c <_Z15attachInterrupttPFvvE13InterruptModeah>
    spiWrite(RH_RF95_REG_0E_FIFO_TX_BASE_ADDR, 0);
   bbfe2:	2200      	movs	r2, #0
   bbfe4:	210e      	movs	r1, #14
   bbfe6:	4620      	mov	r0, r4
   bbfe8:	f7ff fcb5 	bl	bb956 <_ZN11RHSPIDriver8spiWriteEhh>
    spiWrite(RH_RF95_REG_0F_FIFO_RX_BASE_ADDR, 0);
   bbfec:	2200      	movs	r2, #0
   bbfee:	210f      	movs	r1, #15
   bbff0:	4620      	mov	r0, r4
   bbff2:	f7ff fcb0 	bl	bb956 <_ZN11RHSPIDriver8spiWriteEhh>
    setModeIdle();
   bbff6:	4620      	mov	r0, r4
   bbff8:	f7ff fe28 	bl	bbc4c <_ZN7RH_RF9511setModeIdleEv>
    setModemConfig(Bw125Cr45Sf128); // Radio default
   bbffc:	2100      	movs	r1, #0
   bbffe:	4620      	mov	r0, r4
   bc000:	f7ff ff88 	bl	bbf14 <_ZN7RH_RF9514setModemConfigENS_17ModemConfigChoiceE>
    setPreambleLength(8); // Default is 8
   bc004:	2108      	movs	r1, #8
   bc006:	4620      	mov	r0, r4
   bc008:	f7ff ff9c 	bl	bbf44 <_ZN7RH_RF9517setPreambleLengthEt>
    setFrequency(434.0);
   bc00c:	ed9f 0a13 	vldr	s0, [pc, #76]	; bc05c <_ZN7RH_RF954initEv+0xfc>
   bc010:	4620      	mov	r0, r4
   bc012:	f7ff fdd9 	bl	bbbc8 <_ZN7RH_RF9512setFrequencyEf>
    _useRFO = useRFO;
   bc016:	2300      	movs	r3, #0
   bc018:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
    if (useRFO)
   bc01c:	210d      	movs	r1, #13
   bc01e:	4620      	mov	r0, r4
   bc020:	f7ff fd70 	bl	bbb04 <_ZN7RH_RF9510setTxPowerEab.part.0>
    return true;
   bc024:	e7a3      	b.n	bbf6e <_ZN7RH_RF954initEv+0xe>
    int interruptNumber = NOT_AN_INTERRUPT;
   bc026:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   bc02a:	e7ab      	b.n	bbf84 <_ZN7RH_RF954initEv+0x24>
	else if (_myInterruptIndex == 1)
   bc02c:	2a01      	cmp	r2, #1
   bc02e:	f04f 0300 	mov.w	r3, #0
   bc032:	d104      	bne.n	bc03e <_ZN7RH_RF954initEv+0xde>
	    attachInterrupt(interruptNumber, isr1, RISING);
   bc034:	9300      	str	r3, [sp, #0]
   bc036:	490a      	ldr	r1, [pc, #40]	; (bc060 <_ZN7RH_RF954initEv+0x100>)
   bc038:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bc03c:	e7ce      	b.n	bbfdc <_ZN7RH_RF954initEv+0x7c>
	else if (_myInterruptIndex == 2)
   bc03e:	2a02      	cmp	r2, #2
   bc040:	d194      	bne.n	bbf6c <_ZN7RH_RF954initEv+0xc>
	    attachInterrupt(interruptNumber, isr2, RISING);
   bc042:	9300      	str	r3, [sp, #0]
   bc044:	4907      	ldr	r1, [pc, #28]	; (bc064 <_ZN7RH_RF954initEv+0x104>)
   bc046:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bc04a:	2201      	movs	r2, #1
   bc04c:	e7c6      	b.n	bbfdc <_ZN7RH_RF954initEv+0x7c>
   bc04e:	bf00      	nop
   bc050:	2003e5f5 	.word	0x2003e5f5
   bc054:	2003e5f8 	.word	0x2003e5f8
   bc058:	000bbd99 	.word	0x000bbd99
   bc05c:	43d90000 	.word	0x43d90000
   bc060:	000bbda9 	.word	0x000bbda9
   bc064:	000bbdb9 	.word	0x000bbdb9

000bc068 <_ZN7RH_RF957lastSNREv>:
}

int RH_RF95::lastSNR()
{
    return _lastSNR;
}
   bc068:	f990 012a 	ldrsb.w	r0, [r0, #298]	; 0x12a
   bc06c:	4770      	bx	lr

000bc06e <_ZN14SequentialFile14preScanAddHookEPKc>:
     * @return true to add the file to the queue or false to not queue the file.
     * 
     * This would allow a subclass to do some validation of the file before adding
     * it to the queue when reading the files from disk after reboot.
     */
    virtual bool preScanAddHook(const char *name) { return true; };
   bc06e:	2001      	movs	r0, #1
   bc070:	4770      	bx	lr
	...

000bc074 <_ZN14SequentialFileC1Ev>:


static Logger _log("app.seqfile");


SequentialFile::SequentialFile() {
   bc074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc076:	4d1f      	ldr	r5, [pc, #124]	; (bc0f4 <_ZN14SequentialFileC1Ev+0x80>)
   bc078:	4b1f      	ldr	r3, [pc, #124]	; (bc0f8 <_ZN14SequentialFileC1Ev+0x84>)
   bc07a:	4604      	mov	r4, r0
   bc07c:	4629      	mov	r1, r5
   bc07e:	f840 3b04 	str.w	r3, [r0], #4
   bc082:	f003 fcb0 	bl	bf9e6 <_ZN6StringC1EPK19__FlashStringHelper>
   bc086:	491d      	ldr	r1, [pc, #116]	; (bc0fc <_ZN14SequentialFileC1Ev+0x88>)
   bc088:	f104 0014 	add.w	r0, r4, #20
   bc08c:	f003 fcab 	bl	bf9e6 <_ZN6StringC1EPK19__FlashStringHelper>
   bc090:	4629      	mov	r1, r5
   bc092:	f104 0024 	add.w	r0, r4, #36	; 0x24
   bc096:	f003 fca6 	bl	bf9e6 <_ZN6StringC1EPK19__FlashStringHelper>
   bc09a:	2300      	movs	r3, #0
   bc09c:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
   bc0a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   bc0a4:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
   bc0a8:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
   bc0ac:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
   bc0b0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
   bc0b4:	6423      	str	r3, [r4, #64]	; 0x40
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
   bc0b6:	2308      	movs	r3, #8
   bc0b8:	6463      	str	r3, [r4, #68]	; 0x44
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   bc0ba:	2020      	movs	r0, #32
   bc0bc:	f7f7 ffeb 	bl	b4096 <_Znwj>
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   bc0c0:	6c65      	ldr	r5, [r4, #68]	; 0x44
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
   bc0c2:	6420      	str	r0, [r4, #64]	; 0x40
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
   bc0c4:	3d01      	subs	r5, #1
   bc0c6:	086d      	lsrs	r5, r5, #1
      _Map_pointer __nstart = (this->_M_impl._M_map
   bc0c8:	eb00 0785 	add.w	r7, r0, r5, lsl #2
   bc0cc:	4606      	mov	r6, r0
   bc0ce:	f44f 7000 	mov.w	r0, #512	; 0x200
   bc0d2:	f7f7 ffe0 	bl	b4096 <_Znwj>
	_M_last = _M_first + difference_type(_S_buffer_size());
   bc0d6:	f500 7300 	add.w	r3, r0, #512	; 0x200
   bc0da:	e9c4 0317 	strd	r0, r3, [r4, #92]	; 0x5c
	    *__cur = this->_M_allocate_node();
   bc0de:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
	_M_first = *__new_node;
   bc0e2:	64e0      	str	r0, [r4, #76]	; 0x4c
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
   bc0e4:	64a0      	str	r0, [r4, #72]	; 0x48
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
   bc0e6:	65a0      	str	r0, [r4, #88]	; 0x58
	_M_node = __new_node;
   bc0e8:	6567      	str	r7, [r4, #84]	; 0x54
	_M_last = _M_first + difference_type(_S_buffer_size());
   bc0ea:	6523      	str	r3, [r4, #80]	; 0x50
	_M_node = __new_node;
   bc0ec:	6667      	str	r7, [r4, #100]	; 0x64

}
   bc0ee:	4620      	mov	r0, r4
   bc0f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bc0f2:	bf00      	nop
   bc0f4:	000c5454 	.word	0x000c5454
   bc0f8:	000c5228 	.word	0x000c5228
   bc0fc:	000c5128 	.word	0x000c5128

000bc100 <_ZN14SequentialFile11withDirPathEPKc>:

SequentialFile::~SequentialFile() {

}

SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   bc100:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    this->dirPath = dirPath; 
   bc102:	1d05      	adds	r5, r0, #4
SequentialFile &SequentialFile::withDirPath(const char *dirPath) { 
   bc104:	4604      	mov	r4, r0
    this->dirPath = dirPath; 
   bc106:	4628      	mov	r0, r5
   bc108:	f003 fccb 	bl	bfaa2 <_ZN6StringaSEPKc>
    if (this->dirPath.endsWith("/")) {
   bc10c:	490e      	ldr	r1, [pc, #56]	; (bc148 <_ZN14SequentialFile11withDirPathEPKc+0x48>)
   bc10e:	4668      	mov	r0, sp
   bc110:	f003 fc69 	bl	bf9e6 <_ZN6StringC1EPK19__FlashStringHelper>
   bc114:	4669      	mov	r1, sp
   bc116:	4628      	mov	r0, r5
   bc118:	f003 fd3d 	bl	bfb96 <_ZNK6String8endsWithERKS_>
   bc11c:	4606      	mov	r6, r0
   bc11e:	4668      	mov	r0, sp
   bc120:	f003 fc16 	bl	bf950 <_ZN6StringD1Ev>
   bc124:	b16e      	cbz	r6, bc142 <_ZN14SequentialFile11withDirPathEPKc+0x42>
        this->dirPath = this->dirPath.substring(0, this->dirPath.length() - 1);
   bc126:	68e3      	ldr	r3, [r4, #12]
   bc128:	2200      	movs	r2, #0
   bc12a:	3b01      	subs	r3, #1
   bc12c:	4629      	mov	r1, r5
   bc12e:	4668      	mov	r0, sp
   bc130:	f003 fd54 	bl	bfbdc <_ZNK6String9substringEjj>
   bc134:	4669      	mov	r1, sp
   bc136:	4628      	mov	r0, r5
   bc138:	f003 fcab 	bl	bfa92 <_ZN6StringaSEOS_>
   bc13c:	4668      	mov	r0, sp
   bc13e:	f003 fc07 	bl	bf950 <_ZN6StringD1Ev>
    }
    return *this; 
};
   bc142:	4620      	mov	r0, r4
   bc144:	b004      	add	sp, #16
   bc146:	bd70      	pop	{r4, r5, r6, pc}
   bc148:	000c512d 	.word	0x000c512d

000bc14c <_ZNK14SequentialFile14queueMutexLockEv>:

    return size;
}


void SequentialFile::queueMutexLock() const {
   bc14c:	b510      	push	{r4, lr}
    if (!queueMutex) {
   bc14e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
void SequentialFile::queueMutexLock() const {
   bc150:	4604      	mov	r4, r0
    if (!queueMutex) {
   bc152:	b913      	cbnz	r3, bc15a <_ZNK14SequentialFile14queueMutexLockEv+0xe>
        os_mutex_create(&queueMutex);
   bc154:	303c      	adds	r0, #60	; 0x3c
   bc156:	f000 fc9d 	bl	bca94 <os_mutex_create>
    }

    os_mutex_lock(queueMutex);
   bc15a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
   bc15c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    os_mutex_lock(queueMutex);
   bc160:	f000 bca0 	b.w	bcaa4 <os_mutex_lock>

000bc164 <_ZNK14SequentialFile16queueMutexUnlockEv>:

void SequentialFile::queueMutexUnlock() const {
    os_mutex_unlock(queueMutex);
   bc164:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   bc166:	f000 bca5 	b.w	bcab4 <os_mutex_unlock>
	...

000bc16c <_ZN14SequentialFile20createDirIfNecessaryEPKc>:
}



// [static]
bool SequentialFile::createDirIfNecessary(const char *path) {
   bc16c:	b510      	push	{r4, lr}
   bc16e:	b096      	sub	sp, #88	; 0x58
    struct stat statbuf;

    int result = stat(path, &statbuf);
   bc170:	4669      	mov	r1, sp
bool SequentialFile::createDirIfNecessary(const char *path) {
   bc172:	4604      	mov	r4, r0
    int result = stat(path, &statbuf);
   bc174:	f000 fe56 	bl	bce24 <stat>
    if (result == 0) {
   bc178:	b9d0      	cbnz	r0, bc1b0 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x44>
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   bc17a:	9b01      	ldr	r3, [sp, #4]
   bc17c:	045b      	lsls	r3, r3, #17
            _log.info("%s exists and is a directory", path);
   bc17e:	4622      	mov	r2, r4
        if ((statbuf.st_mode & S_IFDIR) != 0) {
   bc180:	d506      	bpl.n	bc190 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x24>
            _log.info("%s exists and is a directory", path);
   bc182:	4915      	ldr	r1, [pc, #84]	; (bc1d8 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x6c>)
    }

    // File does not exist (errno == 2)
    result = mkdir(path, 0777);
    if (result == 0) {
        _log.info("created dir %s", path);
   bc184:	4815      	ldr	r0, [pc, #84]	; (bc1dc <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   bc186:	f7f7 ffda 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
        return true;
   bc18a:	2001      	movs	r0, #1
    }
    else {
        _log.error("mkdir failed errno=%d", errno);
        return false;
    }
}
   bc18c:	b016      	add	sp, #88	; 0x58
   bc18e:	bd10      	pop	{r4, pc}
        _log.error("file in the way, deleting %s", path);
   bc190:	4812      	ldr	r0, [pc, #72]	; (bc1dc <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   bc192:	4913      	ldr	r1, [pc, #76]	; (bc1e0 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x74>)
   bc194:	f7fb fbfa 	bl	b798c <_ZNK5spark6Logger5errorEPKcz>
        unlink(path);
   bc198:	4620      	mov	r0, r4
   bc19a:	f006 f8db 	bl	c2354 <unlink>
    result = mkdir(path, 0777);
   bc19e:	f240 11ff 	movw	r1, #511	; 0x1ff
   bc1a2:	4620      	mov	r0, r4
   bc1a4:	f000 fe46 	bl	bce34 <mkdir>
    if (result == 0) {
   bc1a8:	b980      	cbnz	r0, bc1cc <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x60>
        _log.info("created dir %s", path);
   bc1aa:	490e      	ldr	r1, [pc, #56]	; (bc1e4 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x78>)
   bc1ac:	4622      	mov	r2, r4
   bc1ae:	e7e9      	b.n	bc184 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x18>
        if (errno != ENOENT) {
   bc1b0:	f001 f8bc 	bl	bd32c <__errno>
   bc1b4:	6803      	ldr	r3, [r0, #0]
   bc1b6:	2b02      	cmp	r3, #2
   bc1b8:	d0f1      	beq.n	bc19e <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x32>
            _log.error("stat filed errno=%d", errno);
   bc1ba:	f001 f8b7 	bl	bd32c <__errno>
   bc1be:	490a      	ldr	r1, [pc, #40]	; (bc1e8 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x7c>)
   bc1c0:	6802      	ldr	r2, [r0, #0]
        _log.error("mkdir failed errno=%d", errno);
   bc1c2:	4806      	ldr	r0, [pc, #24]	; (bc1dc <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x70>)
   bc1c4:	f7fb fbe2 	bl	b798c <_ZNK5spark6Logger5errorEPKcz>
        return false;
   bc1c8:	2000      	movs	r0, #0
   bc1ca:	e7df      	b.n	bc18c <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x20>
        _log.error("mkdir failed errno=%d", errno);
   bc1cc:	f001 f8ae 	bl	bd32c <__errno>
   bc1d0:	4906      	ldr	r1, [pc, #24]	; (bc1ec <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x80>)
   bc1d2:	6802      	ldr	r2, [r0, #0]
   bc1d4:	e7f5      	b.n	bc1c2 <_ZN14SequentialFile20createDirIfNecessaryEPKc+0x56>
   bc1d6:	bf00      	nop
   bc1d8:	000c513a 	.word	0x000c513a
   bc1dc:	2003e604 	.word	0x2003e604
   bc1e0:	000c5157 	.word	0x000c5157
   bc1e4:	000c5188 	.word	0x000c5188
   bc1e8:	000c5174 	.word	0x000c5174
   bc1ec:	000c5197 	.word	0x000c5197

000bc1f0 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>:


// [static]
String SequentialFile::getNameWithOptionalExt(const char *name, const char *ext) {
   bc1f0:	b538      	push	{r3, r4, r5, lr}
   bc1f2:	4615      	mov	r5, r2
   bc1f4:	4604      	mov	r4, r0
    String result = name;
   bc1f6:	f003 fbf6 	bl	bf9e6 <_ZN6StringC1EPK19__FlashStringHelper>

    if (ext && *ext) {
   bc1fa:	b14d      	cbz	r5, bc210 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
   bc1fc:	782b      	ldrb	r3, [r5, #0]
   bc1fe:	b13b      	cbz	r3, bc210 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x20>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
   bc200:	4904      	ldr	r1, [pc, #16]	; (bc214 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_+0x24>)
   bc202:	4620      	mov	r0, r4
   bc204:	f003 fc76 	bl	bfaf4 <_ZN6String6concatEPKc>
   bc208:	4629      	mov	r1, r5
   bc20a:	4620      	mov	r0, r4
   bc20c:	f003 fc72 	bl	bfaf4 <_ZN6String6concatEPKc>
        result += ".";
        result += ext;
    }

    return result;
}
   bc210:	4620      	mov	r0, r4
   bc212:	bd38      	pop	{r3, r4, r5, pc}
   bc214:	000c5558 	.word	0x000c5558

000bc218 <_ZN14SequentialFile17getNameForFileNumEiPKc>:
String SequentialFile::getNameForFileNum(int fileNum, const char *overrideExt) {
   bc218:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   bc21a:	4605      	mov	r5, r0
   bc21c:	460e      	mov	r6, r1
   bc21e:	461c      	mov	r4, r3
    String name = String::format(pattern.c_str(), fileNum);
   bc220:	6949      	ldr	r1, [r1, #20]
   bc222:	4668      	mov	r0, sp
   bc224:	f003 fcfa 	bl	bfc1c <_ZN6String6formatEPKcz>
	const char * c_str() const { return buffer; }
   bc228:	9900      	ldr	r1, [sp, #0]
    return getNameWithOptionalExt(name, (overrideExt ? overrideExt : filenameExtension.c_str()));
   bc22a:	b904      	cbnz	r4, bc22e <_ZN14SequentialFile17getNameForFileNumEiPKc+0x16>
   bc22c:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bc22e:	4622      	mov	r2, r4
   bc230:	4628      	mov	r0, r5
   bc232:	f7ff ffdd 	bl	bc1f0 <_ZN14SequentialFile22getNameWithOptionalExtEPKcS1_>
    String name = String::format(pattern.c_str(), fileNum);
   bc236:	4668      	mov	r0, sp
   bc238:	f003 fb8a 	bl	bf950 <_ZN6StringD1Ev>
}
   bc23c:	4628      	mov	r0, r5
   bc23e:	b004      	add	sp, #16
   bc240:	bd70      	pop	{r4, r5, r6, pc}
	...

000bc244 <_ZN14SequentialFile17getPathForFileNumEiPKc>:
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   bc244:	b570      	push	{r4, r5, r6, lr}
   bc246:	460c      	mov	r4, r1
   bc248:	b08e      	sub	sp, #56	; 0x38
    String result;
   bc24a:	491a      	ldr	r1, [pc, #104]	; (bc2b4 <_ZN14SequentialFile17getPathForFileNumEiPKc+0x70>)
String SequentialFile::getPathForFileNum(int fileNum, const char *overrideExt) {
   bc24c:	e9cd 3200 	strd	r3, r2, [sp]
   bc250:	4605      	mov	r5, r0
    String result;
   bc252:	f003 fbc8 	bl	bf9e6 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(dirPath.length() + pattern.length() + 4);
   bc256:	68e0      	ldr	r0, [r4, #12]
   bc258:	69e1      	ldr	r1, [r4, #28]
   bc25a:	4401      	add	r1, r0
   bc25c:	3104      	adds	r1, #4
   bc25e:	4628      	mov	r0, r5
   bc260:	f003 fb94 	bl	bf98c <_ZN6String7reserveEj>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   bc264:	1d21      	adds	r1, r4, #4
   bc266:	a806      	add	r0, sp, #24
   bc268:	f003 fc08 	bl	bfa7c <_ZN6StringC1ERKS_>
    result = dirPath + String("/") + getNameForFileNum(fileNum, overrideExt);
   bc26c:	4912      	ldr	r1, [pc, #72]	; (bc2b8 <_ZN14SequentialFile17getPathForFileNumEiPKc+0x74>)
   bc26e:	a802      	add	r0, sp, #8
   bc270:	f003 fbb9 	bl	bf9e6 <_ZN6StringC1EPK19__FlashStringHelper>
   bc274:	a902      	add	r1, sp, #8
   bc276:	a806      	add	r0, sp, #24
   bc278:	f003 fc5a 	bl	bfb30 <_ZplRK15StringSumHelperRK6String>
   bc27c:	e9dd 3200 	ldrd	r3, r2, [sp]
   bc280:	4606      	mov	r6, r0
   bc282:	4621      	mov	r1, r4
   bc284:	a80a      	add	r0, sp, #40	; 0x28
   bc286:	f7ff ffc7 	bl	bc218 <_ZN14SequentialFile17getNameForFileNumEiPKc>
   bc28a:	a90a      	add	r1, sp, #40	; 0x28
   bc28c:	4630      	mov	r0, r6
   bc28e:	f003 fc4f 	bl	bfb30 <_ZplRK15StringSumHelperRK6String>
   bc292:	4601      	mov	r1, r0
   bc294:	4628      	mov	r0, r5
   bc296:	f003 fbe2 	bl	bfa5e <_ZN6StringaSERKS_>
   bc29a:	a80a      	add	r0, sp, #40	; 0x28
   bc29c:	f003 fb58 	bl	bf950 <_ZN6StringD1Ev>
   bc2a0:	a802      	add	r0, sp, #8
   bc2a2:	f003 fb55 	bl	bf950 <_ZN6StringD1Ev>
class StringSumHelper : public String
   bc2a6:	a806      	add	r0, sp, #24
   bc2a8:	f003 fb52 	bl	bf950 <_ZN6StringD1Ev>
}
   bc2ac:	4628      	mov	r0, r5
   bc2ae:	b00e      	add	sp, #56	; 0x38
   bc2b0:	bd70      	pop	{r4, r5, r6, pc}
   bc2b2:	bf00      	nop
   bc2b4:	000c5454 	.word	0x000c5454
   bc2b8:	000c512d 	.word	0x000c512d

000bc2bc <_ZN14SequentialFile13removeFileNumEib>:
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   bc2bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (allExtensions) {
   bc2c0:	4613      	mov	r3, r2
void SequentialFile::removeFileNum(int fileNum, bool allExtensions) {
   bc2c2:	b08e      	sub	sp, #56	; 0x38
   bc2c4:	4605      	mov	r5, r0
   bc2c6:	460f      	mov	r7, r1
    if (allExtensions) {
   bc2c8:	2a00      	cmp	r2, #0
   bc2ca:	d04a      	beq.n	bc362 <_ZN14SequentialFile13removeFileNumEib+0xa6>
        DIR *dir = opendir(dirPath);
   bc2cc:	6840      	ldr	r0, [r0, #4]
   bc2ce:	f000 fdc1 	bl	bce54 <opendir>
        if (dir) {
   bc2d2:	4606      	mov	r6, r0
   bc2d4:	2800      	cmp	r0, #0
   bc2d6:	d054      	beq.n	bc382 <_ZN14SequentialFile13removeFileNumEib+0xc6>
                        String path = dirPath + String("/") + ent->d_name;
   bc2d8:	f8df a0b4 	ldr.w	sl, [pc, #180]	; bc390 <_ZN14SequentialFile13removeFileNumEib+0xd4>
                        _log.trace("removed %s", path.c_str());
   bc2dc:	f8df 90ac 	ldr.w	r9, [pc, #172]	; bc38c <_ZN14SequentialFile13removeFileNumEib+0xd0>
   bc2e0:	f8df 80a4 	ldr.w	r8, [pc, #164]	; bc388 <_ZN14SequentialFile13removeFileNumEib+0xcc>
                struct dirent* ent = readdir(dir); 
   bc2e4:	4630      	mov	r0, r6
   bc2e6:	f000 fdbd 	bl	bce64 <readdir>
                if (!ent) {
   bc2ea:	2800      	cmp	r0, #0
   bc2ec:	d033      	beq.n	bc356 <_ZN14SequentialFile13removeFileNumEib+0x9a>
                if (ent->d_type != DT_REG) {
   bc2ee:	7a82      	ldrb	r2, [r0, #10]
   bc2f0:	2a08      	cmp	r2, #8
   bc2f2:	d1f7      	bne.n	bc2e4 <_ZN14SequentialFile13removeFileNumEib+0x28>
                if (sscanf(ent->d_name, pattern.c_str(), &curFileNum) == 1) {
   bc2f4:	f100 040b 	add.w	r4, r0, #11
   bc2f8:	6969      	ldr	r1, [r5, #20]
   bc2fa:	aa01      	add	r2, sp, #4
   bc2fc:	4620      	mov	r0, r4
   bc2fe:	f000 ffed 	bl	bd2dc <sscanf>
   bc302:	2801      	cmp	r0, #1
   bc304:	d1ee      	bne.n	bc2e4 <_ZN14SequentialFile13removeFileNumEib+0x28>
                    if (curFileNum == fileNum) {
   bc306:	9b01      	ldr	r3, [sp, #4]
   bc308:	42bb      	cmp	r3, r7
   bc30a:	d1eb      	bne.n	bc2e4 <_ZN14SequentialFile13removeFileNumEib+0x28>
	StringSumHelper(const String &s) : String(s) {}
   bc30c:	1d29      	adds	r1, r5, #4
   bc30e:	a80a      	add	r0, sp, #40	; 0x28
   bc310:	f003 fbb4 	bl	bfa7c <_ZN6StringC1ERKS_>
                        String path = dirPath + String("/") + ent->d_name;
   bc314:	4651      	mov	r1, sl
   bc316:	a806      	add	r0, sp, #24
   bc318:	f003 fb65 	bl	bf9e6 <_ZN6StringC1EPK19__FlashStringHelper>
   bc31c:	a906      	add	r1, sp, #24
   bc31e:	a80a      	add	r0, sp, #40	; 0x28
   bc320:	f003 fc06 	bl	bfb30 <_ZplRK15StringSumHelperRK6String>
   bc324:	4621      	mov	r1, r4
   bc326:	f003 fc0f 	bl	bfb48 <_ZplRK15StringSumHelperPKc>
   bc32a:	4601      	mov	r1, r0
   bc32c:	a802      	add	r0, sp, #8
   bc32e:	f003 fba5 	bl	bfa7c <_ZN6StringC1ERKS_>
   bc332:	a806      	add	r0, sp, #24
   bc334:	f003 fb0c 	bl	bf950 <_ZN6StringD1Ev>
class StringSumHelper : public String
   bc338:	a80a      	add	r0, sp, #40	; 0x28
   bc33a:	f003 fb09 	bl	bf950 <_ZN6StringD1Ev>
                        unlink(path);
   bc33e:	9802      	ldr	r0, [sp, #8]
   bc340:	f006 f808 	bl	c2354 <unlink>
                        _log.trace("removed %s", path.c_str());
   bc344:	4640      	mov	r0, r8
   bc346:	9a02      	ldr	r2, [sp, #8]
   bc348:	4649      	mov	r1, r9
   bc34a:	f7fb fb2d 	bl	b79a8 <_ZNK5spark6Logger5traceEPKcz>
                        String path = dirPath + String("/") + ent->d_name;
   bc34e:	a802      	add	r0, sp, #8
   bc350:	f003 fafe 	bl	bf950 <_ZN6StringD1Ev>
                    continue;
   bc354:	e7c6      	b.n	bc2e4 <_ZN14SequentialFile13removeFileNumEib+0x28>
            closedir(dir);
   bc356:	4630      	mov	r0, r6
}
   bc358:	b00e      	add	sp, #56	; 0x38
   bc35a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            closedir(dir);
   bc35e:	f000 bd89 	b.w	bce74 <closedir>
        String path = getPathForFileNum(fileNum); 
   bc362:	460a      	mov	r2, r1
   bc364:	4601      	mov	r1, r0
   bc366:	a80a      	add	r0, sp, #40	; 0x28
   bc368:	f7ff ff6c 	bl	bc244 <_ZN14SequentialFile17getPathForFileNumEiPKc>
        unlink(path);
   bc36c:	980a      	ldr	r0, [sp, #40]	; 0x28
   bc36e:	f005 fff1 	bl	c2354 <unlink>
        _log.trace("removed %s", path.c_str());
   bc372:	4805      	ldr	r0, [pc, #20]	; (bc388 <_ZN14SequentialFile13removeFileNumEib+0xcc>)
   bc374:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   bc376:	4905      	ldr	r1, [pc, #20]	; (bc38c <_ZN14SequentialFile13removeFileNumEib+0xd0>)
   bc378:	f7fb fb16 	bl	b79a8 <_ZNK5spark6Logger5traceEPKcz>
        String path = getPathForFileNum(fileNum); 
   bc37c:	a80a      	add	r0, sp, #40	; 0x28
   bc37e:	f003 fae7 	bl	bf950 <_ZN6StringD1Ev>
}
   bc382:	b00e      	add	sp, #56	; 0x38
   bc384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bc388:	2003e604 	.word	0x2003e604
   bc38c:	000c512f 	.word	0x000c512f
   bc390:	000c512d 	.word	0x000c512d

000bc394 <_ZNSt11_Deque_baseIiSaIiEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
   bc394:	b570      	push	{r4, r5, r6, lr}
      if (this->_M_impl._M_map)
   bc396:	6803      	ldr	r3, [r0, #0]
    _Deque_base<_Tp, _Alloc>::
   bc398:	4604      	mov	r4, r0
      if (this->_M_impl._M_map)
   bc39a:	b183      	cbz	r3, bc3be <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x2a>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
   bc39c:	6a43      	ldr	r3, [r0, #36]	; 0x24
   bc39e:	6945      	ldr	r5, [r0, #20]
   bc3a0:	1d1e      	adds	r6, r3, #4
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
   bc3a2:	42ae      	cmp	r6, r5
   bc3a4:	d906      	bls.n	bc3b4 <_ZNSt11_Deque_baseIiSaIiEED1Ev+0x20>
	::operator delete(__p
   bc3a6:	f855 0b04 	ldr.w	r0, [r5], #4
   bc3aa:	f44f 7100 	mov.w	r1, #512	; 0x200
   bc3ae:	f7f7 fe76 	bl	b409e <_ZdlPvj>
   bc3b2:	e7f6      	b.n	bc3a2 <_ZNSt11_Deque_baseIiSaIiEED1Ev+0xe>
   bc3b4:	6861      	ldr	r1, [r4, #4]
   bc3b6:	6820      	ldr	r0, [r4, #0]
   bc3b8:	0089      	lsls	r1, r1, #2
   bc3ba:	f7f7 fe70 	bl	b409e <_ZdlPvj>
    }
   bc3be:	4620      	mov	r0, r4
   bc3c0:	bd70      	pop	{r4, r5, r6, pc}
	...

000bc3c4 <_ZN14SequentialFileD1Ev>:
SequentialFile::~SequentialFile() {
   bc3c4:	b510      	push	{r4, lr}
   bc3c6:	4b09      	ldr	r3, [pc, #36]	; (bc3ec <_ZN14SequentialFileD1Ev+0x28>)
   bc3c8:	4604      	mov	r4, r0
   bc3ca:	f840 3b40 	str.w	r3, [r0], #64
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
   bc3ce:	f7ff ffe1 	bl	bc394 <_ZNSt11_Deque_baseIiSaIiEED1Ev>
   bc3d2:	f104 0024 	add.w	r0, r4, #36	; 0x24
   bc3d6:	f003 fabb 	bl	bf950 <_ZN6StringD1Ev>
   bc3da:	f104 0014 	add.w	r0, r4, #20
   bc3de:	f003 fab7 	bl	bf950 <_ZN6StringD1Ev>
   bc3e2:	1d20      	adds	r0, r4, #4
   bc3e4:	f003 fab4 	bl	bf950 <_ZN6StringD1Ev>
}
   bc3e8:	4620      	mov	r0, r4
   bc3ea:	bd10      	pop	{r4, pc}
   bc3ec:	000c5228 	.word	0x000c5228

000bc3f0 <_ZN14SequentialFileD0Ev>:
SequentialFile::~SequentialFile() {
   bc3f0:	b510      	push	{r4, lr}
   bc3f2:	4604      	mov	r4, r0
}
   bc3f4:	f7ff ffe6 	bl	bc3c4 <_ZN14SequentialFileD1Ev>
   bc3f8:	4620      	mov	r0, r4
   bc3fa:	2168      	movs	r1, #104	; 0x68
   bc3fc:	f7f7 fe4f 	bl	b409e <_ZdlPvj>
   bc400:	4620      	mov	r0, r4
   bc402:	bd10      	pop	{r4, pc}

000bc404 <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>:
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
   bc404:	68c3      	ldr	r3, [r0, #12]
   bc406:	68ca      	ldr	r2, [r1, #12]
   bc408:	1a9b      	subs	r3, r3, r2
   bc40a:	109b      	asrs	r3, r3, #2
   bc40c:	1e5a      	subs	r2, r3, #1
   bc40e:	e9d0 3000 	ldrd	r3, r0, [r0]
   bc412:	1a1b      	subs	r3, r3, r0
   bc414:	109b      	asrs	r3, r3, #2
   bc416:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
	  + (__y._M_last - __y._M_cur);
   bc41a:	6888      	ldr	r0, [r1, #8]
   bc41c:	680a      	ldr	r2, [r1, #0]
   bc41e:	1a80      	subs	r0, r0, r2
      }
   bc420:	eb03 00a0 	add.w	r0, r3, r0, asr #2
   bc424:	4770      	bx	lr
	...

000bc428 <_ZNSt5dequeIiSaIiEE9push_backERKi>:
      push_back(const value_type& __x)
   bc428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	    != this->_M_impl._M_finish._M_last - 1)
   bc42c:	6a02      	ldr	r2, [r0, #32]
	if (this->_M_impl._M_finish._M_cur
   bc42e:	6983      	ldr	r3, [r0, #24]
	    != this->_M_impl._M_finish._M_last - 1)
   bc430:	3a04      	subs	r2, #4
	if (this->_M_impl._M_finish._M_cur
   bc432:	4293      	cmp	r3, r2
      push_back(const value_type& __x)
   bc434:	4604      	mov	r4, r0
   bc436:	460f      	mov	r7, r1
	if (this->_M_impl._M_finish._M_cur
   bc438:	d007      	beq.n	bc44a <_ZNSt5dequeIiSaIiEE9push_backERKi+0x22>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   bc43a:	b10b      	cbz	r3, bc440 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x18>
   bc43c:	680a      	ldr	r2, [r1, #0]
   bc43e:	601a      	str	r2, [r3, #0]
	    ++this->_M_impl._M_finish._M_cur;
   bc440:	69a3      	ldr	r3, [r4, #24]
   bc442:	3304      	adds	r3, #4
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
   bc444:	61a3      	str	r3, [r4, #24]
      }
   bc446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   bc44a:	f100 0108 	add.w	r1, r0, #8
   bc44e:	3018      	adds	r0, #24
   bc450:	f7ff ffd8 	bl	bc404 <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>
	if (size() == max_size())
   bc454:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   bc458:	4298      	cmp	r0, r3
   bc45a:	d102      	bne.n	bc462 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x3a>
	  __throw_length_error(
   bc45c:	4838      	ldr	r0, [pc, #224]	; (bc540 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x118>)
   bc45e:	f004 f950 	bl	c0702 <_ZSt20__throw_length_errorPKc>
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   bc462:	6a62      	ldr	r2, [r4, #36]	; 0x24
   bc464:	6820      	ldr	r0, [r4, #0]
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   bc466:	6863      	ldr	r3, [r4, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
   bc468:	1a11      	subs	r1, r2, r0
   bc46a:	eba3 01a1 	sub.w	r1, r3, r1, asr #2
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
   bc46e:	2901      	cmp	r1, #1
   bc470:	d825      	bhi.n	bc4be <_ZNSt5dequeIiSaIiEE9push_backERKi+0x96>
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
   bc472:	6961      	ldr	r1, [r4, #20]
   bc474:	eba2 0801 	sub.w	r8, r2, r1
   bc478:	ea4f 06a8 	mov.w	r6, r8, asr #2
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
   bc47c:	1cb5      	adds	r5, r6, #2
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
   bc47e:	ebb3 0f45 	cmp.w	r3, r5, lsl #1
   bc482:	d936      	bls.n	bc4f2 <_ZNSt5dequeIiSaIiEE9push_backERKi+0xca>
					 - __new_num_nodes) / 2
   bc484:	1b5d      	subs	r5, r3, r5
   bc486:	086d      	lsrs	r5, r5, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
   bc488:	eb00 0585 	add.w	r5, r0, r5, lsl #2
	    std::copy(this->_M_impl._M_start._M_node,
   bc48c:	1d13      	adds	r3, r2, #4
	  if (__new_nstart < this->_M_impl._M_start._M_node)
   bc48e:	42a9      	cmp	r1, r5
	  const ptrdiff_t _Num = __last - __first;
   bc490:	eba3 0201 	sub.w	r2, r3, r1
   bc494:	d926      	bls.n	bc4e4 <_ZNSt5dequeIiSaIiEE9push_backERKi+0xbc>
	  if (_Num)
   bc496:	428b      	cmp	r3, r1
   bc498:	d002      	beq.n	bc4a0 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   bc49a:	4628      	mov	r0, r5
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   bc49c:	f004 fec2 	bl	c1224 <memmove>
	_M_node = __new_node;
   bc4a0:	6165      	str	r5, [r4, #20]
	_M_first = *__new_node;
   bc4a2:	682b      	ldr	r3, [r5, #0]
   bc4a4:	60e3      	str	r3, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
   bc4a6:	f503 7300 	add.w	r3, r3, #512	; 0x200
   bc4aa:	6123      	str	r3, [r4, #16]
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
   bc4ac:	eb05 0308 	add.w	r3, r5, r8
	_M_node = __new_node;
   bc4b0:	6263      	str	r3, [r4, #36]	; 0x24
	_M_first = *__new_node;
   bc4b2:	f855 3008 	ldr.w	r3, [r5, r8]
   bc4b6:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   bc4b8:	f503 7300 	add.w	r3, r3, #512	; 0x200
   bc4bc:	6223      	str	r3, [r4, #32]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   bc4be:	f44f 7000 	mov.w	r0, #512	; 0x200
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
   bc4c2:	6a65      	ldr	r5, [r4, #36]	; 0x24
   bc4c4:	f7f7 fde7 	bl	b4096 <_Znwj>
   bc4c8:	6068      	str	r0, [r5, #4]
	    _Alloc_traits::construct(this->_M_impl,
   bc4ca:	69a3      	ldr	r3, [r4, #24]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   bc4cc:	b10b      	cbz	r3, bc4d2 <_ZNSt5dequeIiSaIiEE9push_backERKi+0xaa>
   bc4ce:	683a      	ldr	r2, [r7, #0]
   bc4d0:	601a      	str	r2, [r3, #0]
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
   bc4d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bc4d4:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   bc4d6:	6262      	str	r2, [r4, #36]	; 0x24
	_M_first = *__new_node;
   bc4d8:	685b      	ldr	r3, [r3, #4]
   bc4da:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
   bc4dc:	f503 7200 	add.w	r2, r3, #512	; 0x200
   bc4e0:	6222      	str	r2, [r4, #32]
   bc4e2:	e7af      	b.n	bc444 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x1c>
	  if (_Num)
   bc4e4:	428b      	cmp	r3, r1
   bc4e6:	d0db      	beq.n	bc4a0 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   bc4e8:	f108 0004 	add.w	r0, r8, #4
   bc4ec:	1a80      	subs	r0, r0, r2
   bc4ee:	4428      	add	r0, r5
   bc4f0:	e7d4      	b.n	bc49c <_ZNSt5dequeIiSaIiEE9push_backERKi+0x74>
	  size_type __new_map_size = this->_M_impl._M_map_size
   bc4f2:	f103 0902 	add.w	r9, r3, #2
   bc4f6:	2b01      	cmp	r3, #1
   bc4f8:	bf2c      	ite	cs
   bc4fa:	4499      	addcs	r9, r3
   bc4fc:	f109 0901 	addcc.w	r9, r9, #1
	if (__n > this->_M_max_size())
   bc500:	f1b9 5f00 	cmp.w	r9, #536870912	; 0x20000000
   bc504:	d301      	bcc.n	bc50a <_ZNSt5dequeIiSaIiEE9push_backERKi+0xe2>
	  std::__throw_bad_alloc();
   bc506:	f004 f8f9 	bl	c06fc <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   bc50a:	ea4f 0089 	mov.w	r0, r9, lsl #2
   bc50e:	f7f7 fdc2 	bl	b4096 <_Znwj>
	  std::copy(this->_M_impl._M_start._M_node,
   bc512:	6a62      	ldr	r2, [r4, #36]	; 0x24
   bc514:	6961      	ldr	r1, [r4, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   bc516:	eba9 0505 	sub.w	r5, r9, r5
	  std::copy(this->_M_impl._M_start._M_node,
   bc51a:	3204      	adds	r2, #4
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
   bc51c:	086d      	lsrs	r5, r5, #1
	  if (_Num)
   bc51e:	4291      	cmp	r1, r2
   bc520:	4682      	mov	sl, r0
   bc522:	eb00 0585 	add.w	r5, r0, r5, lsl #2
   bc526:	d003      	beq.n	bc530 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x108>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   bc528:	1a52      	subs	r2, r2, r1
   bc52a:	4628      	mov	r0, r5
   bc52c:	f004 fe7a 	bl	c1224 <memmove>
	::operator delete(__p
   bc530:	6861      	ldr	r1, [r4, #4]
   bc532:	6820      	ldr	r0, [r4, #0]
   bc534:	0089      	lsls	r1, r1, #2
   bc536:	f7f7 fdb2 	bl	b409e <_ZdlPvj>
	  this->_M_impl._M_map_size = __new_map_size;
   bc53a:	e9c4 a900 	strd	sl, r9, [r4]
   bc53e:	e7af      	b.n	bc4a0 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x78>
   bc540:	000c4db1 	.word	0x000c4db1

000bc544 <_ZN14SequentialFile7scanDirEv>:
bool SequentialFile::scanDir(void) {
   bc544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (dirPath.length() <= 1) {
   bc548:	68c3      	ldr	r3, [r0, #12]
   bc54a:	2b01      	cmp	r3, #1
bool SequentialFile::scanDir(void) {
   bc54c:	b086      	sub	sp, #24
   bc54e:	4604      	mov	r4, r0
    if (dirPath.length() <= 1) {
   bc550:	d808      	bhi.n	bc564 <_ZN14SequentialFile7scanDirEv+0x20>
        _log.error("unconfigured dirPath");
   bc552:	4934      	ldr	r1, [pc, #208]	; (bc624 <_ZN14SequentialFile7scanDirEv+0xe0>)
   bc554:	4834      	ldr	r0, [pc, #208]	; (bc628 <_ZN14SequentialFile7scanDirEv+0xe4>)
   bc556:	f7fb fa19 	bl	b798c <_ZNK5spark6Logger5errorEPKcz>
        return false;
   bc55a:	2600      	movs	r6, #0
}
   bc55c:	4630      	mov	r0, r6
   bc55e:	b006      	add	sp, #24
   bc560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!createDirIfNecessary(dirPath)) {
   bc564:	6840      	ldr	r0, [r0, #4]
   bc566:	f7ff fe01 	bl	bc16c <_ZN14SequentialFile20createDirIfNecessaryEPKc>
   bc56a:	4606      	mov	r6, r0
   bc56c:	2800      	cmp	r0, #0
   bc56e:	d0f4      	beq.n	bc55a <_ZN14SequentialFile7scanDirEv+0x16>
    _log.trace("scanning %s with pattern %s", dirPath.c_str(), pattern.c_str());
   bc570:	6963      	ldr	r3, [r4, #20]
   bc572:	6862      	ldr	r2, [r4, #4]
   bc574:	492d      	ldr	r1, [pc, #180]	; (bc62c <_ZN14SequentialFile7scanDirEv+0xe8>)
   bc576:	482c      	ldr	r0, [pc, #176]	; (bc628 <_ZN14SequentialFile7scanDirEv+0xe4>)
   bc578:	f7fb fa16 	bl	b79a8 <_ZNK5spark6Logger5traceEPKcz>
    DIR *dir = opendir(dirPath);
   bc57c:	6860      	ldr	r0, [r4, #4]
   bc57e:	f000 fc69 	bl	bce54 <opendir>
    if (!dir) {
   bc582:	4607      	mov	r7, r0
   bc584:	2800      	cmp	r0, #0
   bc586:	d0e8      	beq.n	bc55a <_ZN14SequentialFile7scanDirEv+0x16>
    lastFileNum = 0;
   bc588:	2300      	movs	r3, #0
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   bc58a:	f8df 90a4 	ldr.w	r9, [pc, #164]	; bc630 <_ZN14SequentialFile7scanDirEv+0xec>
   bc58e:	f8df 8098 	ldr.w	r8, [pc, #152]	; bc628 <_ZN14SequentialFile7scanDirEv+0xe4>
    lastFileNum = 0;
   bc592:	63a3      	str	r3, [r4, #56]	; 0x38
        struct dirent* ent = readdir(dir); 
   bc594:	4638      	mov	r0, r7
   bc596:	f000 fc65 	bl	bce64 <readdir>
        if (!ent) {
   bc59a:	4605      	mov	r5, r0
   bc59c:	2800      	cmp	r0, #0
   bc59e:	d039      	beq.n	bc614 <_ZN14SequentialFile7scanDirEv+0xd0>
        if (ent->d_type != DT_REG) {
   bc5a0:	7a83      	ldrb	r3, [r0, #10]
   bc5a2:	2b08      	cmp	r3, #8
   bc5a4:	d1f6      	bne.n	bc594 <_ZN14SequentialFile7scanDirEv+0x50>
        if (sscanf(ent->d_name, pattern, &fileNum) == 1) {
   bc5a6:	350b      	adds	r5, #11
   bc5a8:	6961      	ldr	r1, [r4, #20]
   bc5aa:	aa01      	add	r2, sp, #4
   bc5ac:	4628      	mov	r0, r5
   bc5ae:	f000 fe95 	bl	bd2dc <sscanf>
   bc5b2:	2801      	cmp	r0, #1
   bc5b4:	d1ee      	bne.n	bc594 <_ZN14SequentialFile7scanDirEv+0x50>
            if (filenameExtension.length() == 0 || String(ent->d_name).endsWith(filenameExtension)) {
   bc5b6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   bc5b8:	b17b      	cbz	r3, bc5da <_ZN14SequentialFile7scanDirEv+0x96>
   bc5ba:	4629      	mov	r1, r5
   bc5bc:	a802      	add	r0, sp, #8
   bc5be:	f003 fa12 	bl	bf9e6 <_ZN6StringC1EPK19__FlashStringHelper>
   bc5c2:	f104 0124 	add.w	r1, r4, #36	; 0x24
   bc5c6:	a802      	add	r0, sp, #8
   bc5c8:	f003 fae5 	bl	bfb96 <_ZNK6String8endsWithERKS_>
   bc5cc:	4682      	mov	sl, r0
   bc5ce:	a802      	add	r0, sp, #8
   bc5d0:	f003 f9be 	bl	bf950 <_ZN6StringD1Ev>
   bc5d4:	f1ba 0f00 	cmp.w	sl, #0
   bc5d8:	d0dc      	beq.n	bc594 <_ZN14SequentialFile7scanDirEv+0x50>
                if (preScanAddHook(ent->d_name)) {
   bc5da:	6823      	ldr	r3, [r4, #0]
   bc5dc:	4629      	mov	r1, r5
   bc5de:	689b      	ldr	r3, [r3, #8]
   bc5e0:	4620      	mov	r0, r4
   bc5e2:	4798      	blx	r3
   bc5e4:	2800      	cmp	r0, #0
   bc5e6:	d0d5      	beq.n	bc594 <_ZN14SequentialFile7scanDirEv+0x50>
                    if (fileNum > lastFileNum) {
   bc5e8:	9a01      	ldr	r2, [sp, #4]
   bc5ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   bc5ec:	4293      	cmp	r3, r2
                        lastFileNum = fileNum;
   bc5ee:	bfb8      	it	lt
   bc5f0:	63a2      	strlt	r2, [r4, #56]	; 0x38
                    _log.trace("adding to queue %d %s", fileNum, ent->d_name);
   bc5f2:	462b      	mov	r3, r5
   bc5f4:	4649      	mov	r1, r9
   bc5f6:	4640      	mov	r0, r8
   bc5f8:	f7fb f9d6 	bl	b79a8 <_ZNK5spark6Logger5traceEPKcz>
                    queueMutexLock();
   bc5fc:	4620      	mov	r0, r4
   bc5fe:	f7ff fda5 	bl	bc14c <_ZNK14SequentialFile14queueMutexLockEv>
                    queue.push_back(fileNum); 
   bc602:	f104 0040 	add.w	r0, r4, #64	; 0x40
   bc606:	a901      	add	r1, sp, #4
   bc608:	f7ff ff0e 	bl	bc428 <_ZNSt5dequeIiSaIiEE9push_backERKi>
                    queueMutexUnlock();
   bc60c:	4620      	mov	r0, r4
   bc60e:	f7ff fda9 	bl	bc164 <_ZNK14SequentialFile16queueMutexUnlockEv>
            continue;
   bc612:	e7bf      	b.n	bc594 <_ZN14SequentialFile7scanDirEv+0x50>
    closedir(dir);
   bc614:	4638      	mov	r0, r7
   bc616:	f000 fc2d 	bl	bce74 <closedir>
    scanDirCompleted = true;
   bc61a:	2301      	movs	r3, #1
   bc61c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return true;
   bc620:	e79c      	b.n	bc55c <_ZN14SequentialFile7scanDirEv+0x18>
   bc622:	bf00      	nop
   bc624:	000c51ad 	.word	0x000c51ad
   bc628:	2003e604 	.word	0x2003e604
   bc62c:	000c51c2 	.word	0x000c51c2
   bc630:	000c51de 	.word	0x000c51de

000bc634 <_ZN14SequentialFile11reserveFileEv>:
int SequentialFile::reserveFile(void) {
   bc634:	b510      	push	{r4, lr}
    if (!scanDirCompleted) {
   bc636:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::reserveFile(void) {
   bc63a:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   bc63c:	b90b      	cbnz	r3, bc642 <_ZN14SequentialFile11reserveFileEv+0xe>
        scanDir();
   bc63e:	f7ff ff81 	bl	bc544 <_ZN14SequentialFile7scanDirEv>
    return ++lastFileNum;
   bc642:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   bc644:	3001      	adds	r0, #1
   bc646:	63a0      	str	r0, [r4, #56]	; 0x38
}
   bc648:	bd10      	pop	{r4, pc}
	...

000bc64c <_ZN14SequentialFile16getFileFromQueueEb>:
int SequentialFile::getFileFromQueue(bool remove) {
   bc64c:	b570      	push	{r4, r5, r6, lr}
    if (!scanDirCompleted) {
   bc64e:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
int SequentialFile::getFileFromQueue(bool remove) {
   bc652:	4604      	mov	r4, r0
   bc654:	460e      	mov	r6, r1
    if (!scanDirCompleted) {
   bc656:	b90b      	cbnz	r3, bc65c <_ZN14SequentialFile16getFileFromQueueEb+0x10>
        scanDir();
   bc658:	f7ff ff74 	bl	bc544 <_ZN14SequentialFile7scanDirEv>
    queueMutexLock();
   bc65c:	4620      	mov	r0, r4
   bc65e:	f7ff fd75 	bl	bc14c <_ZNK14SequentialFile14queueMutexLockEv>
      { return __x._M_cur == __y._M_cur; }
   bc662:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    if (!queue.empty()) {
   bc664:	6da2      	ldr	r2, [r4, #88]	; 0x58
   bc666:	429a      	cmp	r2, r3
   bc668:	d020      	beq.n	bc6ac <_ZN14SequentialFile16getFileFromQueueEb+0x60>
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
   bc66a:	e9d4 0213 	ldrd	r0, r2, [r4, #76]	; 0x4c
        fileNum = queue.front();
   bc66e:	681d      	ldr	r5, [r3, #0]
        if (remove) {
   bc670:	b126      	cbz	r6, bc67c <_ZN14SequentialFile16getFileFromQueueEb+0x30>
	    != this->_M_impl._M_start._M_last - 1)
   bc672:	3a04      	subs	r2, #4
	if (this->_M_impl._M_start._M_cur
   bc674:	4293      	cmp	r3, r2
   bc676:	d00c      	beq.n	bc692 <_ZN14SequentialFile16getFileFromQueueEb+0x46>
	    ++this->_M_impl._M_start._M_cur;
   bc678:	3304      	adds	r3, #4
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
   bc67a:	64a3      	str	r3, [r4, #72]	; 0x48
    queueMutexUnlock();
   bc67c:	4620      	mov	r0, r4
   bc67e:	f7ff fd71 	bl	bc164 <_ZNK14SequentialFile16queueMutexUnlockEv>
    if (fileNum != 0) {
   bc682:	b125      	cbz	r5, bc68e <_ZN14SequentialFile16getFileFromQueueEb+0x42>
        _log.trace("getFileFromQueue returned %d", fileNum);
   bc684:	490a      	ldr	r1, [pc, #40]	; (bc6b0 <_ZN14SequentialFile16getFileFromQueueEb+0x64>)
   bc686:	480b      	ldr	r0, [pc, #44]	; (bc6b4 <_ZN14SequentialFile16getFileFromQueueEb+0x68>)
   bc688:	462a      	mov	r2, r5
   bc68a:	f7fb f98d 	bl	b79a8 <_ZNK5spark6Logger5traceEPKcz>
}
   bc68e:	4628      	mov	r0, r5
   bc690:	bd70      	pop	{r4, r5, r6, pc}
   bc692:	f44f 7100 	mov.w	r1, #512	; 0x200
   bc696:	f7f7 fd02 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
   bc69a:	6d63      	ldr	r3, [r4, #84]	; 0x54
   bc69c:	1d1a      	adds	r2, r3, #4
	_M_node = __new_node;
   bc69e:	6562      	str	r2, [r4, #84]	; 0x54
	_M_first = *__new_node;
   bc6a0:	685b      	ldr	r3, [r3, #4]
   bc6a2:	64e3      	str	r3, [r4, #76]	; 0x4c
	_M_last = _M_first + difference_type(_S_buffer_size());
   bc6a4:	f503 7200 	add.w	r2, r3, #512	; 0x200
   bc6a8:	6522      	str	r2, [r4, #80]	; 0x50
   bc6aa:	e7e6      	b.n	bc67a <_ZN14SequentialFile16getFileFromQueueEb+0x2e>
    int fileNum = 0;
   bc6ac:	2500      	movs	r5, #0
   bc6ae:	e7e5      	b.n	bc67c <_ZN14SequentialFile16getFileFromQueueEb+0x30>
   bc6b0:	000c51f4 	.word	0x000c51f4
   bc6b4:	2003e604 	.word	0x2003e604

000bc6b8 <_ZN14SequentialFile14addFileToQueueEi>:
void SequentialFile::addFileToQueue(int fileNum) {
   bc6b8:	b513      	push	{r0, r1, r4, lr}
    if (!scanDirCompleted) {
   bc6ba:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
void SequentialFile::addFileToQueue(int fileNum) {
   bc6be:	9101      	str	r1, [sp, #4]
   bc6c0:	4604      	mov	r4, r0
    if (!scanDirCompleted) {
   bc6c2:	b90b      	cbnz	r3, bc6c8 <_ZN14SequentialFile14addFileToQueueEi+0x10>
        scanDir();
   bc6c4:	f7ff ff3e 	bl	bc544 <_ZN14SequentialFile7scanDirEv>
    if (fileNum > lastFileNum) {
   bc6c8:	9b01      	ldr	r3, [sp, #4]
   bc6ca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   bc6cc:	429a      	cmp	r2, r3
        lastFileNum = fileNum;
   bc6ce:	bfb8      	it	lt
   bc6d0:	63a3      	strlt	r3, [r4, #56]	; 0x38
    queueMutexLock();
   bc6d2:	4620      	mov	r0, r4
   bc6d4:	f7ff fd3a 	bl	bc14c <_ZNK14SequentialFile14queueMutexLockEv>
    queue.push_back(fileNum); 
   bc6d8:	a901      	add	r1, sp, #4
   bc6da:	f104 0040 	add.w	r0, r4, #64	; 0x40
   bc6de:	f7ff fea3 	bl	bc428 <_ZNSt5dequeIiSaIiEE9push_backERKi>
    queueMutexUnlock();
   bc6e2:	4620      	mov	r0, r4
   bc6e4:	f7ff fd3e 	bl	bc164 <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   bc6e8:	b002      	add	sp, #8
   bc6ea:	bd10      	pop	{r4, pc}

000bc6ec <_ZNK14SequentialFile11getQueueLenEv>:
int SequentialFile::getQueueLen() const {
   bc6ec:	b538      	push	{r3, r4, r5, lr}
   bc6ee:	4604      	mov	r4, r0
    queueMutexLock();
   bc6f0:	f7ff fd2c 	bl	bc14c <_ZNK14SequentialFile14queueMutexLockEv>
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
   bc6f4:	f104 0148 	add.w	r1, r4, #72	; 0x48
   bc6f8:	f104 0058 	add.w	r0, r4, #88	; 0x58
   bc6fc:	f7ff fe82 	bl	bc404 <_ZStmiRKSt15_Deque_iteratorIiRiPiES4_>
   bc700:	4605      	mov	r5, r0
    queueMutexUnlock();
   bc702:	4620      	mov	r0, r4
   bc704:	f7ff fd2e 	bl	bc164 <_ZNK14SequentialFile16queueMutexUnlockEv>
}
   bc708:	4628      	mov	r0, r5
   bc70a:	bd38      	pop	{r3, r4, r5, pc}

000bc70c <_GLOBAL__sub_I__ZN14SequentialFileC2Ev>:
   bc70c:	4b01      	ldr	r3, [pc, #4]	; (bc714 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0x8>)
   bc70e:	4a02      	ldr	r2, [pc, #8]	; (bc718 <_GLOBAL__sub_I__ZN14SequentialFileC2Ev+0xc>)
   bc710:	601a      	str	r2, [r3, #0]
}
   bc712:	4770      	bx	lr
   bc714:	2003e604 	.word	0x2003e604
   bc718:	000c5211 	.word	0x000c5211

000bc71c <_ZN15StorageHelperRK18PersistentDataBase5setupEv>:
// PersistentDataBase
//

void StorageHelperRK::PersistentDataBase::setup() {
    // Load data at boot
    load();
   bc71c:	6803      	ldr	r3, [r0, #0]
   bc71e:	685b      	ldr	r3, [r3, #4]
   bc720:	4718      	bx	r3

000bc722 <_ZN15StorageHelperRK18PersistentDataBase5flushEb>:

    return true;
}


void StorageHelperRK::PersistentDataBase::flush(bool force) {
   bc722:	b510      	push	{r4, lr}
    if (lastUpdate) {
   bc724:	6983      	ldr	r3, [r0, #24]
void StorageHelperRK::PersistentDataBase::flush(bool force) {
   bc726:	4604      	mov	r4, r0
    if (lastUpdate) {
   bc728:	b133      	cbz	r3, bc738 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   bc72a:	b131      	cbz	r1, bc73a <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x18>
            save();
   bc72c:	6823      	ldr	r3, [r4, #0]
   bc72e:	4620      	mov	r0, r4
   bc730:	689b      	ldr	r3, [r3, #8]
   bc732:	4798      	blx	r3
            lastUpdate = 0;
   bc734:	2300      	movs	r3, #0
   bc736:	61a3      	str	r3, [r4, #24]
        }
    }
}
   bc738:	bd10      	pop	{r4, pc}
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   bc73a:	f000 fa13 	bl	bcb64 <HAL_Timer_Get_Milli_Seconds>
        if (force || (millis() - lastUpdate >= saveDelayMs)) {
   bc73e:	69a3      	ldr	r3, [r4, #24]
   bc740:	1ac0      	subs	r0, r0, r3
   bc742:	69e3      	ldr	r3, [r4, #28]
   bc744:	4298      	cmp	r0, r3
   bc746:	d2f1      	bcs.n	bc72c <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0xa>
   bc748:	e7f6      	b.n	bc738 <_ZN15StorageHelperRK18PersistentDataBase5flushEb+0x16>

000bc74a <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv>:

void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   bc74a:	b510      	push	{r4, lr}
    if (saveDelayMs) {
   bc74c:	69c3      	ldr	r3, [r0, #28]
void StorageHelperRK::PersistentDataBase::saveOrDefer() {
   bc74e:	4604      	mov	r4, r0
    if (saveDelayMs) {
   bc750:	b11b      	cbz	r3, bc75a <_ZN15StorageHelperRK18PersistentDataBase11saveOrDeferEv+0x10>
   bc752:	f000 fa07 	bl	bcb64 <HAL_Timer_Get_Milli_Seconds>
        lastUpdate = millis();
   bc756:	61a0      	str	r0, [r4, #24]
    }
    else {
        save();
    }
}
   bc758:	bd10      	pop	{r4, pc}
        save();
   bc75a:	6803      	ldr	r3, [r0, #0]
}
   bc75c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        save();
   bc760:	689b      	ldr	r3, [r3, #8]
   bc762:	4718      	bx	r3

000bc764 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>:
   bc764:	f000 b9c6 	b.w	bcaf4 <os_mutex_recursive_unlock>

000bc768 <_ZNK5spark6Logger4dumpEPKvj>:
inline void spark::Logger::dump(const void *data, size_t size) const {
   bc768:	b507      	push	{r0, r1, r2, lr}
   bc76a:	4613      	mov	r3, r2
    if (data) {
   bc76c:	b139      	cbz	r1, bc77e <_ZNK5spark6Logger4dumpEPKvj+0x16>
        log_dump(level, name_, data, size, 0, nullptr);
   bc76e:	2200      	movs	r2, #0
   bc770:	e9cd 2200 	strd	r2, r2, [sp]
   bc774:	460a      	mov	r2, r1
   bc776:	6801      	ldr	r1, [r0, #0]
   bc778:	201e      	movs	r0, #30
   bc77a:	f000 fc3b 	bl	bcff4 <log_dump>
}
   bc77e:	b003      	add	sp, #12
   bc780:	f85d fb04 	ldr.w	pc, [sp], #4

000bc784 <_ZN15StorageHelperRK18PersistentDataBase4saveEv>:
    savedDataHeader->version = savedDataVersion;
    savedDataHeader->size = (uint16_t) savedDataSize;
    savedDataHeader->hash = getHash();
}

void StorageHelperRK::PersistentDataBase::save() {
   bc784:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (logData) {
   bc786:	f890 3020 	ldrb.w	r3, [r0, #32]
void StorageHelperRK::PersistentDataBase::save() {
   bc78a:	4604      	mov	r4, r0
    if (logData) {
   bc78c:	b19b      	cbz	r3, bc7b6 <_ZN15StorageHelperRK18PersistentDataBase4saveEv+0x32>
        Log.info("saving data size=%d", (int)savedDataHeader->size);
   bc78e:	6883      	ldr	r3, [r0, #8]
   bc790:	4d0a      	ldr	r5, [pc, #40]	; (bc7bc <_ZN15StorageHelperRK18PersistentDataBase4saveEv+0x38>)
   bc792:	88da      	ldrh	r2, [r3, #6]
   bc794:	490a      	ldr	r1, [pc, #40]	; (bc7c0 <_ZN15StorageHelperRK18PersistentDataBase4saveEv+0x3c>)
   bc796:	4628      	mov	r0, r5
   bc798:	f7f7 fcd1 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
        Log.dump((const uint8_t *)savedDataHeader, savedDataHeader->size);
   bc79c:	68a1      	ldr	r1, [r4, #8]
   bc79e:	4628      	mov	r0, r5
   bc7a0:	88ca      	ldrh	r2, [r1, #6]
   bc7a2:	f7ff ffe1 	bl	bc768 <_ZNK5spark6Logger4dumpEPKvj>
        log_write(level, name_, data, size, nullptr);
   bc7a6:	2300      	movs	r3, #0
   bc7a8:	9300      	str	r3, [sp, #0]
   bc7aa:	4a06      	ldr	r2, [pc, #24]	; (bc7c4 <_ZN15StorageHelperRK18PersistentDataBase4saveEv+0x40>)
   bc7ac:	6829      	ldr	r1, [r5, #0]
   bc7ae:	2301      	movs	r3, #1
   bc7b0:	201e      	movs	r0, #30
   bc7b2:	f000 fc17 	bl	bcfe4 <log_write>
        Log.print("\n");
    }
}
   bc7b6:	b003      	add	sp, #12
   bc7b8:	bd30      	pop	{r4, r5, pc}
   bc7ba:	bf00      	nop
   bc7bc:	2003e650 	.word	0x2003e650
   bc7c0:	000c5234 	.word	0x000c5234
   bc7c4:	000c5453 	.word	0x000c5453

000bc7c8 <_ZN15StorageHelperRK18PersistentDataBase4loadEv>:
bool StorageHelperRK::PersistentDataBase::load() {
   bc7c8:	b510      	push	{r4, lr}
   bc7ca:	4604      	mov	r4, r0
   bc7cc:	3004      	adds	r0, #4
   bc7ce:	f7f9 fd4f 	bl	b6270 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        if (!validate(savedDataSize)) {
   bc7d2:	6823      	ldr	r3, [r4, #0]
   bc7d4:	68e1      	ldr	r1, [r4, #12]
   bc7d6:	695b      	ldr	r3, [r3, #20]
   bc7d8:	4620      	mov	r0, r4
   bc7da:	4798      	blx	r3
   bc7dc:	b918      	cbnz	r0, bc7e6 <_ZN15StorageHelperRK18PersistentDataBase4loadEv+0x1e>
            initialize();
   bc7de:	6823      	ldr	r3, [r4, #0]
   bc7e0:	4620      	mov	r0, r4
   bc7e2:	699b      	ldr	r3, [r3, #24]
   bc7e4:	4798      	blx	r3
      { _M_device.unlock(); }
   bc7e6:	6860      	ldr	r0, [r4, #4]
   bc7e8:	f7ff ffbc 	bl	bc764 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   bc7ec:	2001      	movs	r0, #1
   bc7ee:	bd10      	pop	{r4, pc}

000bc7f0 <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String>:
bool StorageHelperRK::PersistentDataBase::getValueString(size_t offset, size_t size, String &value) const {
   bc7f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc7f2:	4605      	mov	r5, r0
      { _M_device.lock(); }
   bc7f4:	3004      	adds	r0, #4
   bc7f6:	4614      	mov	r4, r2
   bc7f8:	460e      	mov	r6, r1
   bc7fa:	461f      	mov	r7, r3
   bc7fc:	f7f9 fd38 	bl	b6270 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        if (offset <= (savedDataSize - (size - 1))) {
   bc800:	68ea      	ldr	r2, [r5, #12]
   bc802:	f1c4 0401 	rsb	r4, r4, #1
   bc806:	4414      	add	r4, r2
   bc808:	42b4      	cmp	r4, r6
   bc80a:	d30a      	bcc.n	bc822 <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String+0x32>
            const char *p = (const char *)savedDataHeader;
   bc80c:	68a9      	ldr	r1, [r5, #8]
            value = p; // copies string
   bc80e:	4638      	mov	r0, r7
   bc810:	4431      	add	r1, r6
   bc812:	f003 f946 	bl	bfaa2 <_ZN6StringaSEPKc>
            result = true;
   bc816:	2401      	movs	r4, #1
      { _M_device.unlock(); }
   bc818:	6868      	ldr	r0, [r5, #4]
   bc81a:	f7ff ffa3 	bl	bc764 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   bc81e:	4620      	mov	r0, r4
   bc820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bool result = false;
   bc822:	2400      	movs	r4, #0
   bc824:	e7f8      	b.n	bc818 <_ZNK15StorageHelperRK18PersistentDataBase14getValueStringEjjR6String+0x28>
	...

000bc828 <_ZN15StorageHelperRK10murmur3_32EPKhjm>:
    }
    PersistentDataBase::save();
}


uint32_t StorageHelperRK::murmur3_32(const uint8_t* key, size_t len, uint32_t seed) {
   bc828:	b5f0      	push	{r4, r5, r6, r7, lr}
   bc82a:	f021 0403 	bic.w	r4, r1, #3
     * 
     * @param k 
     * @return uint32_t 
     */
    static inline uint32_t murmur_32_scramble(uint32_t k) {
        k *= 0xcc9e2d51;
   bc82e:	4f18      	ldr	r7, [pc, #96]	; (bc890 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
        k = (k << 15) | (k >> 17);
        k *= 0x1b873593;
   bc830:	4e18      	ldr	r6, [pc, #96]	; (bc894 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        // A swap here has no effects on hash properties though.
        memcpy(&k, key, sizeof(uint32_t));
        key += sizeof(uint32_t);
        h ^= murmur_32_scramble(k);
        h = (h << 13) | (h >> 19);
        h = h * 5 + 0xe6546b64;
   bc832:	4d19      	ldr	r5, [pc, #100]	; (bc898 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x70>)
   bc834:	4404      	add	r4, r0
    for (size_t i = len >> 2; i; i--) {
   bc836:	42a0      	cmp	r0, r4
   bc838:	d00c      	beq.n	bc854 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x2c>
        memcpy(&k, key, sizeof(uint32_t));
   bc83a:	f850 3b04 	ldr.w	r3, [r0], #4
        k *= 0xcc9e2d51;
   bc83e:	437b      	muls	r3, r7
        k = (k << 15) | (k >> 17);
   bc840:	ea4f 4373 	mov.w	r3, r3, ror #17
        k *= 0x1b873593;
   bc844:	4373      	muls	r3, r6
        h ^= murmur_32_scramble(k);
   bc846:	405a      	eors	r2, r3
        h = (h << 13) | (h >> 19);
   bc848:	ea4f 42f2 	mov.w	r2, r2, ror #19
        h = h * 5 + 0xe6546b64;
   bc84c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   bc850:	442a      	add	r2, r5
    for (size_t i = len >> 2; i; i--) {
   bc852:	e7f0      	b.n	bc836 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0xe>
    }
    /* Read the rest. */
    k = 0;
    for (size_t i = len & 3; i; i--) {
   bc854:	f001 0403 	and.w	r4, r1, #3
   bc858:	4404      	add	r4, r0
    k = 0;
   bc85a:	2300      	movs	r3, #0
    for (size_t i = len & 3; i; i--) {
   bc85c:	42a0      	cmp	r0, r4
   bc85e:	d004      	beq.n	bc86a <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x42>
        k <<= 8;
        k |= key[i - 1];
   bc860:	f814 5d01 	ldrb.w	r5, [r4, #-1]!
   bc864:	ea45 2303 	orr.w	r3, r5, r3, lsl #8
    for (size_t i = len & 3; i; i--) {
   bc868:	e7f8      	b.n	bc85c <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x34>
        k *= 0xcc9e2d51;
   bc86a:	4809      	ldr	r0, [pc, #36]	; (bc890 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x68>)
   bc86c:	4343      	muls	r3, r0
        k *= 0x1b873593;
   bc86e:	4809      	ldr	r0, [pc, #36]	; (bc894 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x6c>)
        k = (k << 15) | (k >> 17);
   bc870:	ea4f 4373 	mov.w	r3, r3, ror #17
        return k;
   bc874:	404a      	eors	r2, r1
        k *= 0x1b873593;
   bc876:	4358      	muls	r0, r3
    // A swap is *not* necessary here because the preceding loop already
    // places the low bytes in the low places according to whatever endianness
    // we use. Swaps only apply when the memory is copied in a chunk.
    h ^= murmur_32_scramble(k);
    /* Finalize. */
	h ^= len;
   bc878:	4050      	eors	r0, r2
	h ^= h >> 16;
	h *= 0x85ebca6b;
   bc87a:	4b08      	ldr	r3, [pc, #32]	; (bc89c <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x74>)
	h ^= h >> 16;
   bc87c:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
	h *= 0x85ebca6b;
   bc880:	4358      	muls	r0, r3
	h ^= h >> 13;
	h *= 0xc2b2ae35;
   bc882:	4b07      	ldr	r3, [pc, #28]	; (bc8a0 <_ZN15StorageHelperRK10murmur3_32EPKhjm+0x78>)
	h ^= h >> 13;
   bc884:	ea80 3050 	eor.w	r0, r0, r0, lsr #13
	h *= 0xc2b2ae35;
   bc888:	4358      	muls	r0, r3
	h ^= h >> 16;
	return h;
}
   bc88a:	ea80 4010 	eor.w	r0, r0, r0, lsr #16
   bc88e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bc890:	cc9e2d51 	.word	0xcc9e2d51
   bc894:	1b873593 	.word	0x1b873593
   bc898:	e6546b64 	.word	0xe6546b64
   bc89c:	85ebca6b 	.word	0x85ebca6b
   bc8a0:	c2b2ae35 	.word	0xc2b2ae35

000bc8a4 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>:
uint32_t StorageHelperRK::PersistentDataBase::getHash() const {
   bc8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc8a6:	4604      	mov	r4, r0
      { _M_device.lock(); }
   bc8a8:	3004      	adds	r0, #4
   bc8aa:	f7f9 fce1 	bl	b6270 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        uint32_t savedHash = savedDataHeader->hash;
   bc8ae:	68a3      	ldr	r3, [r4, #8]
        savedDataHeader->hash = 0;
   bc8b0:	2200      	movs	r2, #0
        uint32_t savedHash = savedDataHeader->hash;
   bc8b2:	689f      	ldr	r7, [r3, #8]
        savedDataHeader->hash = 0;
   bc8b4:	609a      	str	r2, [r3, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   bc8b6:	68a6      	ldr	r6, [r4, #8]
   bc8b8:	4a05      	ldr	r2, [pc, #20]	; (bc8d0 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv+0x2c>)
   bc8ba:	88f1      	ldrh	r1, [r6, #6]
   bc8bc:	4630      	mov	r0, r6
   bc8be:	f7ff ffb3 	bl	bc828 <_ZN15StorageHelperRK10murmur3_32EPKhjm>
        savedDataHeader->hash = savedHash;
   bc8c2:	60b7      	str	r7, [r6, #8]
        hash = StorageHelperRK::murmur3_32((const uint8_t *)savedDataHeader, savedDataHeader->size, HASH_SEED);
   bc8c4:	4605      	mov	r5, r0
      { _M_device.unlock(); }
   bc8c6:	6860      	ldr	r0, [r4, #4]
   bc8c8:	f7ff ff4c 	bl	bc764 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   bc8cc:	4628      	mov	r0, r5
   bc8ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bc8d0:	851c2a3f 	.word	0x851c2a3f

000bc8d4 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>:
void StorageHelperRK::PersistentDataBase::updateHash() {
   bc8d4:	b570      	push	{r4, r5, r6, lr}
   bc8d6:	4604      	mov	r4, r0
    savedDataHeader->hash = getHash();
   bc8d8:	6885      	ldr	r5, [r0, #8]
   bc8da:	f7ff ffe3 	bl	bc8a4 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   bc8de:	60a8      	str	r0, [r5, #8]
    saveOrDefer();
   bc8e0:	6823      	ldr	r3, [r4, #0]
   bc8e2:	4620      	mov	r0, r4
   bc8e4:	691b      	ldr	r3, [r3, #16]
}
   bc8e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    saveOrDefer();
   bc8ea:	4718      	bx	r3

000bc8ec <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc>:
bool StorageHelperRK::PersistentDataBase::setValueString(size_t offset, size_t size, const char *value) {
   bc8ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bc8f0:	4604      	mov	r4, r0
      { _M_device.lock(); }
   bc8f2:	3004      	adds	r0, #4
   bc8f4:	4690      	mov	r8, r2
   bc8f6:	460d      	mov	r5, r1
   bc8f8:	461f      	mov	r7, r3
   bc8fa:	f7f9 fcb9 	bl	b6270 <_ZNK15StorageHelperRK20CustomRecursiveMutex4lockEv>
        if (offset <= (savedDataSize - (size - 1)) && strlen(value) < size) {
   bc8fe:	68e2      	ldr	r2, [r4, #12]
   bc900:	f1c8 0301 	rsb	r3, r8, #1
   bc904:	4413      	add	r3, r2
   bc906:	42ab      	cmp	r3, r5
   bc908:	d319      	bcc.n	bc93e <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x52>
   bc90a:	4638      	mov	r0, r7
   bc90c:	f004 fd6f 	bl	c13ee <strlen>
   bc910:	4540      	cmp	r0, r8
   bc912:	d214      	bcs.n	bc93e <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x52>
            char *p = (char *)savedDataHeader;
   bc914:	68a6      	ldr	r6, [r4, #8]
            p += offset;
   bc916:	4435      	add	r5, r6
            if (strcmp(value, p) != 0) {
   bc918:	4629      	mov	r1, r5
   bc91a:	4638      	mov	r0, r7
   bc91c:	f004 fd37 	bl	c138e <strcmp>
   bc920:	b158      	cbz	r0, bc93a <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x4e>
                memset(p, 0, size);
   bc922:	4642      	mov	r2, r8
   bc924:	2100      	movs	r1, #0
   bc926:	4628      	mov	r0, r5
   bc928:	f004 fc96 	bl	c1258 <memset>
                strcpy(p, value);
   bc92c:	4639      	mov	r1, r7
   bc92e:	4628      	mov	r0, r5
   bc930:	f004 fd37 	bl	c13a2 <strcpy>
                updateHash();
   bc934:	4620      	mov	r0, r4
   bc936:	f7ff ffcd 	bl	bc8d4 <_ZN15StorageHelperRK18PersistentDataBase10updateHashEv>
            result = true;
   bc93a:	2501      	movs	r5, #1
   bc93c:	e000      	b.n	bc940 <_ZN15StorageHelperRK18PersistentDataBase14setValueStringEjjPKc+0x54>
    bool result = false;
   bc93e:	2500      	movs	r5, #0
      { _M_device.unlock(); }
   bc940:	6860      	ldr	r0, [r4, #4]
   bc942:	f7ff ff0f 	bl	bc764 <_ZNK15StorageHelperRK20CustomRecursiveMutex6unlockEv.isra.0>
}
   bc946:	4628      	mov	r0, r5
   bc948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bc94c <_ZN15StorageHelperRK18PersistentDataBase8validateEj>:
bool StorageHelperRK::PersistentDataBase::validate(size_t dataSize) {
   bc94c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bc94e:	4604      	mov	r4, r0
   bc950:	460d      	mov	r5, r1
    uint32_t hash = getHash();
   bc952:	f7ff ffa7 	bl	bc8a4 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
    if (logData) {
   bc956:	f894 3020 	ldrb.w	r3, [r4, #32]
    uint32_t hash = getHash();
   bc95a:	4606      	mov	r6, r0
    if (logData) {
   bc95c:	b193      	cbz	r3, bc984 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x38>
        Log.info("validating data size=%d", (int)dataSize);
   bc95e:	4f29      	ldr	r7, [pc, #164]	; (bca04 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xb8>)
   bc960:	4929      	ldr	r1, [pc, #164]	; (bca08 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xbc>)
   bc962:	462a      	mov	r2, r5
   bc964:	4638      	mov	r0, r7
   bc966:	f7f7 fbea 	bl	b413e <_ZNK5spark6Logger4infoEPKcz>
        Log.dump((const uint8_t *)savedDataHeader, dataSize);
   bc96a:	68a1      	ldr	r1, [r4, #8]
   bc96c:	462a      	mov	r2, r5
   bc96e:	4638      	mov	r0, r7
   bc970:	f7ff fefa 	bl	bc768 <_ZNK5spark6Logger4dumpEPKvj>
   bc974:	2300      	movs	r3, #0
   bc976:	9300      	str	r3, [sp, #0]
   bc978:	4a24      	ldr	r2, [pc, #144]	; (bca0c <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xc0>)
   bc97a:	6839      	ldr	r1, [r7, #0]
   bc97c:	2301      	movs	r3, #1
   bc97e:	201e      	movs	r0, #30
   bc980:	f000 fb30 	bl	bcfe4 <log_write>
    if (dataSize >= 12 && 
   bc984:	2d0b      	cmp	r5, #11
   bc986:	d923      	bls.n	bc9d0 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x84>
        savedDataHeader->magic == savedDataMagic && 
   bc988:	68a3      	ldr	r3, [r4, #8]
    if (dataSize >= 12 && 
   bc98a:	6922      	ldr	r2, [r4, #16]
   bc98c:	6819      	ldr	r1, [r3, #0]
   bc98e:	4291      	cmp	r1, r2
   bc990:	d11f      	bne.n	bc9d2 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x86>
        savedDataHeader->magic == savedDataMagic && 
   bc992:	8899      	ldrh	r1, [r3, #4]
   bc994:	8aa2      	ldrh	r2, [r4, #20]
   bc996:	4291      	cmp	r1, r2
   bc998:	d11b      	bne.n	bc9d2 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x86>
        savedDataHeader->version == savedDataVersion &&
   bc99a:	88d9      	ldrh	r1, [r3, #6]
   bc99c:	b2aa      	uxth	r2, r5
   bc99e:	4291      	cmp	r1, r2
   bc9a0:	d817      	bhi.n	bc9d2 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x86>
        savedDataHeader->size <= (uint16_t) dataSize &&
   bc9a2:	689a      	ldr	r2, [r3, #8]
   bc9a4:	42b2      	cmp	r2, r6
   bc9a6:	d114      	bne.n	bc9d2 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x86>
        if ((size_t)dataSize < savedDataSize) {
   bc9a8:	68e2      	ldr	r2, [r4, #12]
   bc9aa:	42aa      	cmp	r2, r5
   bc9ac:	d905      	bls.n	bc9ba <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x6e>
                p[ii] = 0;
   bc9ae:	2100      	movs	r1, #0
   bc9b0:	5559      	strb	r1, [r3, r5]
            for(size_t ii = (size_t)dataSize; ii < savedDataSize; ii++) {
   bc9b2:	68e2      	ldr	r2, [r4, #12]
   bc9b4:	3501      	adds	r5, #1
   bc9b6:	42aa      	cmp	r2, r5
   bc9b8:	d8fa      	bhi.n	bc9b0 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x64>
        savedDataHeader->size = (uint16_t) savedDataSize;
   bc9ba:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
        savedDataHeader->hash = getHash();
   bc9be:	4620      	mov	r0, r4
        savedDataHeader->size = (uint16_t) savedDataSize;
   bc9c0:	80da      	strh	r2, [r3, #6]
        savedDataHeader->hash = getHash();
   bc9c2:	68a5      	ldr	r5, [r4, #8]
   bc9c4:	f7ff ff6e 	bl	bc8a4 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   bc9c8:	60a8      	str	r0, [r5, #8]
        isValid = true;
   bc9ca:	2001      	movs	r0, #1
}
   bc9cc:	b003      	add	sp, #12
   bc9ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!isValid && dataSize != 0 && savedDataHeader->magic != 0) {
   bc9d0:	b19d      	cbz	r5, bc9fa <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xae>
   bc9d2:	68a1      	ldr	r1, [r4, #8]
   bc9d4:	680a      	ldr	r2, [r1, #0]
   bc9d6:	b192      	cbz	r2, bc9fe <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xb2>
        Log.trace("got: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataHeader->magic, (int)savedDataHeader->version, (int)savedDataHeader->size, (int)savedDataHeader->hash);
   bc9d8:	6888      	ldr	r0, [r1, #8]
   bc9da:	888b      	ldrh	r3, [r1, #4]
   bc9dc:	9001      	str	r0, [sp, #4]
   bc9de:	88c9      	ldrh	r1, [r1, #6]
   bc9e0:	4808      	ldr	r0, [pc, #32]	; (bca04 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xb8>)
   bc9e2:	9100      	str	r1, [sp, #0]
   bc9e4:	490a      	ldr	r1, [pc, #40]	; (bca10 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xc4>)
   bc9e6:	f7fa ffdf 	bl	b79a8 <_ZNK5spark6Logger5traceEPKcz>
        Log.trace("exp: magic=%08x version=%04x size=%04x hash=%08x", (int)savedDataMagic, (int)savedDataVersion, (int)dataSize, (int)hash);
   bc9ea:	e9cd 5600 	strd	r5, r6, [sp]
   bc9ee:	8aa3      	ldrh	r3, [r4, #20]
   bc9f0:	6922      	ldr	r2, [r4, #16]
   bc9f2:	4908      	ldr	r1, [pc, #32]	; (bca14 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xc8>)
   bc9f4:	4803      	ldr	r0, [pc, #12]	; (bca04 <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0xb8>)
   bc9f6:	f7fa ffd7 	bl	b79a8 <_ZNK5spark6Logger5traceEPKcz>
   bc9fa:	2000      	movs	r0, #0
   bc9fc:	e7e6      	b.n	bc9cc <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x80>
   bc9fe:	4610      	mov	r0, r2
   bca00:	e7e4      	b.n	bc9cc <_ZN15StorageHelperRK18PersistentDataBase8validateEj+0x80>
   bca02:	bf00      	nop
   bca04:	2003e650 	.word	0x2003e650
   bca08:	000c5248 	.word	0x000c5248
   bca0c:	000c5453 	.word	0x000c5453
   bca10:	000c5260 	.word	0x000c5260
   bca14:	000c5291 	.word	0x000c5291

000bca18 <_ZN15StorageHelperRK18PersistentDataBase10initializeEv>:
void StorageHelperRK::PersistentDataBase::initialize() {
   bca18:	b538      	push	{r3, r4, r5, lr}
   bca1a:	4604      	mov	r4, r0
    memset(savedDataHeader, 0, savedDataSize);
   bca1c:	68c2      	ldr	r2, [r0, #12]
   bca1e:	6880      	ldr	r0, [r0, #8]
   bca20:	2100      	movs	r1, #0
   bca22:	f004 fc19 	bl	c1258 <memset>
    savedDataHeader->magic = savedDataMagic;
   bca26:	68a3      	ldr	r3, [r4, #8]
   bca28:	6922      	ldr	r2, [r4, #16]
   bca2a:	601a      	str	r2, [r3, #0]
    savedDataHeader->version = savedDataVersion;
   bca2c:	68a3      	ldr	r3, [r4, #8]
   bca2e:	8aa2      	ldrh	r2, [r4, #20]
   bca30:	809a      	strh	r2, [r3, #4]
    savedDataHeader->size = (uint16_t) savedDataSize;
   bca32:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    savedDataHeader->hash = getHash();
   bca36:	4620      	mov	r0, r4
    savedDataHeader->size = (uint16_t) savedDataSize;
   bca38:	80da      	strh	r2, [r3, #6]
    savedDataHeader->hash = getHash();
   bca3a:	68a5      	ldr	r5, [r4, #8]
   bca3c:	f7ff ff32 	bl	bc8a4 <_ZNK15StorageHelperRK18PersistentDataBase7getHashEv>
   bca40:	60a8      	str	r0, [r5, #8]
}
   bca42:	bd38      	pop	{r3, r4, r5, pc}

000bca44 <cellular_signal>:
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(void*, cellular_signal_t*))
   bca44:	b508      	push	{r3, lr}
   bca46:	4b02      	ldr	r3, [pc, #8]	; (bca50 <cellular_signal+0xc>)
   bca48:	681b      	ldr	r3, [r3, #0]
   bca4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bca4c:	9301      	str	r3, [sp, #4]
   bca4e:	bd08      	pop	{r3, pc}
   bca50:	00030274 	.word	0x00030274

000bca54 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   bca54:	b508      	push	{r3, lr}
   bca56:	4b02      	ldr	r3, [pc, #8]	; (bca60 <os_thread_create+0xc>)
   bca58:	681b      	ldr	r3, [r3, #0]
   bca5a:	685b      	ldr	r3, [r3, #4]
   bca5c:	9301      	str	r3, [sp, #4]
   bca5e:	bd08      	pop	{r3, pc}
   bca60:	00030248 	.word	0x00030248

000bca64 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   bca64:	b508      	push	{r3, lr}
   bca66:	4b02      	ldr	r3, [pc, #8]	; (bca70 <os_thread_is_current+0xc>)
   bca68:	681b      	ldr	r3, [r3, #0]
   bca6a:	689b      	ldr	r3, [r3, #8]
   bca6c:	9301      	str	r3, [sp, #4]
   bca6e:	bd08      	pop	{r3, pc}
   bca70:	00030248 	.word	0x00030248

000bca74 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   bca74:	b508      	push	{r3, lr}
   bca76:	4b02      	ldr	r3, [pc, #8]	; (bca80 <os_thread_join+0xc>)
   bca78:	681b      	ldr	r3, [r3, #0]
   bca7a:	691b      	ldr	r3, [r3, #16]
   bca7c:	9301      	str	r3, [sp, #4]
   bca7e:	bd08      	pop	{r3, pc}
   bca80:	00030248 	.word	0x00030248

000bca84 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   bca84:	b508      	push	{r3, lr}
   bca86:	4b02      	ldr	r3, [pc, #8]	; (bca90 <os_thread_cleanup+0xc>)
   bca88:	681b      	ldr	r3, [r3, #0]
   bca8a:	695b      	ldr	r3, [r3, #20]
   bca8c:	9301      	str	r3, [sp, #4]
   bca8e:	bd08      	pop	{r3, pc}
   bca90:	00030248 	.word	0x00030248

000bca94 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   bca94:	b508      	push	{r3, lr}
   bca96:	4b02      	ldr	r3, [pc, #8]	; (bcaa0 <os_mutex_create+0xc>)
   bca98:	681b      	ldr	r3, [r3, #0]
   bca9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bca9c:	9301      	str	r3, [sp, #4]
   bca9e:	bd08      	pop	{r3, pc}
   bcaa0:	00030248 	.word	0x00030248

000bcaa4 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   bcaa4:	b508      	push	{r3, lr}
   bcaa6:	4b02      	ldr	r3, [pc, #8]	; (bcab0 <os_mutex_lock+0xc>)
   bcaa8:	681b      	ldr	r3, [r3, #0]
   bcaaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   bcaac:	9301      	str	r3, [sp, #4]
   bcaae:	bd08      	pop	{r3, pc}
   bcab0:	00030248 	.word	0x00030248

000bcab4 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   bcab4:	b508      	push	{r3, lr}
   bcab6:	4b02      	ldr	r3, [pc, #8]	; (bcac0 <os_mutex_unlock+0xc>)
   bcab8:	681b      	ldr	r3, [r3, #0]
   bcaba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bcabc:	9301      	str	r3, [sp, #4]
   bcabe:	bd08      	pop	{r3, pc}
   bcac0:	00030248 	.word	0x00030248

000bcac4 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   bcac4:	b508      	push	{r3, lr}
   bcac6:	4b02      	ldr	r3, [pc, #8]	; (bcad0 <os_mutex_recursive_create+0xc>)
   bcac8:	681b      	ldr	r3, [r3, #0]
   bcaca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bcacc:	9301      	str	r3, [sp, #4]
   bcace:	bd08      	pop	{r3, pc}
   bcad0:	00030248 	.word	0x00030248

000bcad4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   bcad4:	b508      	push	{r3, lr}
   bcad6:	4b02      	ldr	r3, [pc, #8]	; (bcae0 <os_mutex_recursive_destroy+0xc>)
   bcad8:	681b      	ldr	r3, [r3, #0]
   bcada:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   bcadc:	9301      	str	r3, [sp, #4]
   bcade:	bd08      	pop	{r3, pc}
   bcae0:	00030248 	.word	0x00030248

000bcae4 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   bcae4:	b508      	push	{r3, lr}
   bcae6:	4b02      	ldr	r3, [pc, #8]	; (bcaf0 <os_mutex_recursive_lock+0xc>)
   bcae8:	681b      	ldr	r3, [r3, #0]
   bcaea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bcaec:	9301      	str	r3, [sp, #4]
   bcaee:	bd08      	pop	{r3, pc}
   bcaf0:	00030248 	.word	0x00030248

000bcaf4 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   bcaf4:	b508      	push	{r3, lr}
   bcaf6:	4b02      	ldr	r3, [pc, #8]	; (bcb00 <os_mutex_recursive_unlock+0xc>)
   bcaf8:	681b      	ldr	r3, [r3, #0]
   bcafa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bcafc:	9301      	str	r3, [sp, #4]
   bcafe:	bd08      	pop	{r3, pc}
   bcb00:	00030248 	.word	0x00030248

000bcb04 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   bcb04:	b508      	push	{r3, lr}
   bcb06:	4b02      	ldr	r3, [pc, #8]	; (bcb10 <os_thread_exit+0xc>)
   bcb08:	681b      	ldr	r3, [r3, #0]
   bcb0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   bcb0c:	9301      	str	r3, [sp, #4]
   bcb0e:	bd08      	pop	{r3, pc}
   bcb10:	00030248 	.word	0x00030248

000bcb14 <HAL_Core_Runtime_Info>:
DYNALIB_FN(16, hal_core, HAL_watchdog_reset_flagged, bool(void))
DYNALIB_FN(17, hal_core, HAL_Notify_WDT, void(void))
DYNALIB_FN(18, hal_core, HAL_Bootloader_Get_Flag, uint16_t(BootloaderFlag))
DYNALIB_FN(19, hal_core, HAL_Bootloader_Lock, void(bool))
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
   bcb14:	b508      	push	{r3, lr}
   bcb16:	4b02      	ldr	r3, [pc, #8]	; (bcb20 <HAL_Core_Runtime_Info+0xc>)
   bcb18:	681b      	ldr	r3, [r3, #0]
   bcb1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bcb1c:	9301      	str	r3, [sp, #4]
   bcb1e:	bd08      	pop	{r3, pc}
   bcb20:	00030234 	.word	0x00030234

000bcb24 <HAL_Feature_Set>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   bcb24:	b508      	push	{r3, lr}
   bcb26:	4b02      	ldr	r3, [pc, #8]	; (bcb30 <HAL_Feature_Set+0xc>)
   bcb28:	681b      	ldr	r3, [r3, #0]
   bcb2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   bcb2c:	9301      	str	r3, [sp, #4]
   bcb2e:	bd08      	pop	{r3, pc}
   bcb30:	00030234 	.word	0x00030234

000bcb34 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   bcb34:	b508      	push	{r3, lr}
   bcb36:	4b02      	ldr	r3, [pc, #8]	; (bcb40 <HAL_RNG_GetRandomNumber+0xc>)
   bcb38:	681b      	ldr	r3, [r3, #0]
   bcb3a:	685b      	ldr	r3, [r3, #4]
   bcb3c:	9301      	str	r3, [sp, #4]
   bcb3e:	bd08      	pop	{r3, pc}
   bcb40:	00030218 	.word	0x00030218

000bcb44 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   bcb44:	b508      	push	{r3, lr}
   bcb46:	4b02      	ldr	r3, [pc, #8]	; (bcb50 <HAL_Delay_Milliseconds+0xc>)
   bcb48:	681b      	ldr	r3, [r3, #0]
   bcb4a:	689b      	ldr	r3, [r3, #8]
   bcb4c:	9301      	str	r3, [sp, #4]
   bcb4e:	bd08      	pop	{r3, pc}
   bcb50:	00030218 	.word	0x00030218

000bcb54 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   bcb54:	b508      	push	{r3, lr}
   bcb56:	4b02      	ldr	r3, [pc, #8]	; (bcb60 <HAL_Delay_Microseconds+0xc>)
   bcb58:	681b      	ldr	r3, [r3, #0]
   bcb5a:	68db      	ldr	r3, [r3, #12]
   bcb5c:	9301      	str	r3, [sp, #4]
   bcb5e:	bd08      	pop	{r3, pc}
   bcb60:	00030218 	.word	0x00030218

000bcb64 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   bcb64:	b508      	push	{r3, lr}
   bcb66:	4b02      	ldr	r3, [pc, #8]	; (bcb70 <HAL_Timer_Get_Milli_Seconds+0xc>)
   bcb68:	681b      	ldr	r3, [r3, #0]
   bcb6a:	695b      	ldr	r3, [r3, #20]
   bcb6c:	9301      	str	r3, [sp, #4]
   bcb6e:	bd08      	pop	{r3, pc}
   bcb70:	00030218 	.word	0x00030218

000bcb74 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   bcb74:	b508      	push	{r3, lr}
   bcb76:	4b02      	ldr	r3, [pc, #8]	; (bcb80 <hal_rtc_time_is_valid+0xc>)
   bcb78:	681b      	ldr	r3, [r3, #0]
   bcb7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bcb7c:	9301      	str	r3, [sp, #4]
   bcb7e:	bd08      	pop	{r3, pc}
   bcb80:	00030218 	.word	0x00030218

000bcb84 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   bcb84:	b508      	push	{r3, lr}
   bcb86:	4b02      	ldr	r3, [pc, #8]	; (bcb90 <hal_timer_millis+0xc>)
   bcb88:	681b      	ldr	r3, [r3, #0]
   bcb8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   bcb8c:	9301      	str	r3, [sp, #4]
   bcb8e:	bd08      	pop	{r3, pc}
   bcb90:	00030218 	.word	0x00030218

000bcb94 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   bcb94:	b508      	push	{r3, lr}
   bcb96:	4b02      	ldr	r3, [pc, #8]	; (bcba0 <hal_rtc_get_time+0xc>)
   bcb98:	681b      	ldr	r3, [r3, #0]
   bcb9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   bcb9c:	9301      	str	r3, [sp, #4]
   bcb9e:	bd08      	pop	{r3, pc}
   bcba0:	00030218 	.word	0x00030218

000bcba4 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   bcba4:	b508      	push	{r3, lr}
   bcba6:	4b02      	ldr	r3, [pc, #8]	; (bcbb0 <hal_rtc_set_time+0xc>)
   bcba8:	681b      	ldr	r3, [r3, #0]
   bcbaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   bcbac:	9301      	str	r3, [sp, #4]
   bcbae:	bd08      	pop	{r3, pc}
   bcbb0:	00030218 	.word	0x00030218

000bcbb4 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   bcbb4:	b508      	push	{r3, lr}
   bcbb6:	4b02      	ldr	r3, [pc, #8]	; (bcbc0 <HAL_Validate_Pin_Function+0xc>)
   bcbb8:	681b      	ldr	r3, [r3, #0]
   bcbba:	685b      	ldr	r3, [r3, #4]
   bcbbc:	9301      	str	r3, [sp, #4]
   bcbbe:	bd08      	pop	{r3, pc}
   bcbc0:	0003022c 	.word	0x0003022c

000bcbc4 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   bcbc4:	b508      	push	{r3, lr}
   bcbc6:	4b02      	ldr	r3, [pc, #8]	; (bcbd0 <HAL_Pin_Mode+0xc>)
   bcbc8:	681b      	ldr	r3, [r3, #0]
   bcbca:	689b      	ldr	r3, [r3, #8]
   bcbcc:	9301      	str	r3, [sp, #4]
   bcbce:	bd08      	pop	{r3, pc}
   bcbd0:	0003022c 	.word	0x0003022c

000bcbd4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   bcbd4:	b508      	push	{r3, lr}
   bcbd6:	4b02      	ldr	r3, [pc, #8]	; (bcbe0 <HAL_Get_Pin_Mode+0xc>)
   bcbd8:	681b      	ldr	r3, [r3, #0]
   bcbda:	68db      	ldr	r3, [r3, #12]
   bcbdc:	9301      	str	r3, [sp, #4]
   bcbde:	bd08      	pop	{r3, pc}
   bcbe0:	0003022c 	.word	0x0003022c

000bcbe4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   bcbe4:	b508      	push	{r3, lr}
   bcbe6:	4b02      	ldr	r3, [pc, #8]	; (bcbf0 <HAL_GPIO_Write+0xc>)
   bcbe8:	681b      	ldr	r3, [r3, #0]
   bcbea:	691b      	ldr	r3, [r3, #16]
   bcbec:	9301      	str	r3, [sp, #4]
   bcbee:	bd08      	pop	{r3, pc}
   bcbf0:	0003022c 	.word	0x0003022c

000bcbf4 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   bcbf4:	b508      	push	{r3, lr}
   bcbf6:	4b02      	ldr	r3, [pc, #8]	; (bcc00 <HAL_GPIO_Read+0xc>)
   bcbf8:	681b      	ldr	r3, [r3, #0]
   bcbfa:	695b      	ldr	r3, [r3, #20]
   bcbfc:	9301      	str	r3, [sp, #4]
   bcbfe:	bd08      	pop	{r3, pc}
   bcc00:	0003022c 	.word	0x0003022c

000bcc04 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   bcc04:	b508      	push	{r3, lr}
   bcc06:	4b02      	ldr	r3, [pc, #8]	; (bcc10 <HAL_Interrupts_Attach+0xc>)
   bcc08:	681b      	ldr	r3, [r3, #0]
   bcc0a:	699b      	ldr	r3, [r3, #24]
   bcc0c:	9301      	str	r3, [sp, #4]
   bcc0e:	bd08      	pop	{r3, pc}
   bcc10:	0003022c 	.word	0x0003022c

000bcc14 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   bcc14:	b508      	push	{r3, lr}
   bcc16:	4b02      	ldr	r3, [pc, #8]	; (bcc20 <HAL_Interrupts_Detach+0xc>)
   bcc18:	681b      	ldr	r3, [r3, #0]
   bcc1a:	69db      	ldr	r3, [r3, #28]
   bcc1c:	9301      	str	r3, [sp, #4]
   bcc1e:	bd08      	pop	{r3, pc}
   bcc20:	0003022c 	.word	0x0003022c

000bcc24 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   bcc24:	b508      	push	{r3, lr}
   bcc26:	4b02      	ldr	r3, [pc, #8]	; (bcc30 <hal_adc_read+0xc>)
   bcc28:	681b      	ldr	r3, [r3, #0]
   bcc2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bcc2c:	9301      	str	r3, [sp, #4]
   bcc2e:	bd08      	pop	{r3, pc}
   bcc30:	0003022c 	.word	0x0003022c

000bcc34 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   bcc34:	b508      	push	{r3, lr}
   bcc36:	4b02      	ldr	r3, [pc, #8]	; (bcc40 <hal_i2c_begin+0xc>)
   bcc38:	681b      	ldr	r3, [r3, #0]
   bcc3a:	68db      	ldr	r3, [r3, #12]
   bcc3c:	9301      	str	r3, [sp, #4]
   bcc3e:	bd08      	pop	{r3, pc}
   bcc40:	00030228 	.word	0x00030228

000bcc44 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   bcc44:	b508      	push	{r3, lr}
   bcc46:	4b02      	ldr	r3, [pc, #8]	; (bcc50 <hal_i2c_begin_transmission+0xc>)
   bcc48:	681b      	ldr	r3, [r3, #0]
   bcc4a:	699b      	ldr	r3, [r3, #24]
   bcc4c:	9301      	str	r3, [sp, #4]
   bcc4e:	bd08      	pop	{r3, pc}
   bcc50:	00030228 	.word	0x00030228

000bcc54 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   bcc54:	b508      	push	{r3, lr}
   bcc56:	4b02      	ldr	r3, [pc, #8]	; (bcc60 <hal_i2c_end_transmission+0xc>)
   bcc58:	681b      	ldr	r3, [r3, #0]
   bcc5a:	69db      	ldr	r3, [r3, #28]
   bcc5c:	9301      	str	r3, [sp, #4]
   bcc5e:	bd08      	pop	{r3, pc}
   bcc60:	00030228 	.word	0x00030228

000bcc64 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   bcc64:	b508      	push	{r3, lr}
   bcc66:	4b02      	ldr	r3, [pc, #8]	; (bcc70 <hal_i2c_write+0xc>)
   bcc68:	681b      	ldr	r3, [r3, #0]
   bcc6a:	6a1b      	ldr	r3, [r3, #32]
   bcc6c:	9301      	str	r3, [sp, #4]
   bcc6e:	bd08      	pop	{r3, pc}
   bcc70:	00030228 	.word	0x00030228

000bcc74 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   bcc74:	b508      	push	{r3, lr}
   bcc76:	4b02      	ldr	r3, [pc, #8]	; (bcc80 <hal_i2c_available+0xc>)
   bcc78:	681b      	ldr	r3, [r3, #0]
   bcc7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bcc7c:	9301      	str	r3, [sp, #4]
   bcc7e:	bd08      	pop	{r3, pc}
   bcc80:	00030228 	.word	0x00030228

000bcc84 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   bcc84:	b508      	push	{r3, lr}
   bcc86:	4b02      	ldr	r3, [pc, #8]	; (bcc90 <hal_i2c_read+0xc>)
   bcc88:	681b      	ldr	r3, [r3, #0]
   bcc8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bcc8c:	9301      	str	r3, [sp, #4]
   bcc8e:	bd08      	pop	{r3, pc}
   bcc90:	00030228 	.word	0x00030228

000bcc94 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   bcc94:	b508      	push	{r3, lr}
   bcc96:	4b02      	ldr	r3, [pc, #8]	; (bcca0 <hal_i2c_peek+0xc>)
   bcc98:	681b      	ldr	r3, [r3, #0]
   bcc9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bcc9c:	9301      	str	r3, [sp, #4]
   bcc9e:	bd08      	pop	{r3, pc}
   bcca0:	00030228 	.word	0x00030228

000bcca4 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   bcca4:	b508      	push	{r3, lr}
   bcca6:	4b02      	ldr	r3, [pc, #8]	; (bccb0 <hal_i2c_flush+0xc>)
   bcca8:	681b      	ldr	r3, [r3, #0]
   bccaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bccac:	9301      	str	r3, [sp, #4]
   bccae:	bd08      	pop	{r3, pc}
   bccb0:	00030228 	.word	0x00030228

000bccb4 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   bccb4:	b508      	push	{r3, lr}
   bccb6:	4b02      	ldr	r3, [pc, #8]	; (bccc0 <hal_i2c_is_enabled+0xc>)
   bccb8:	681b      	ldr	r3, [r3, #0]
   bccba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bccbc:	9301      	str	r3, [sp, #4]
   bccbe:	bd08      	pop	{r3, pc}
   bccc0:	00030228 	.word	0x00030228

000bccc4 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   bccc4:	b508      	push	{r3, lr}
   bccc6:	4b02      	ldr	r3, [pc, #8]	; (bccd0 <hal_i2c_init+0xc>)
   bccc8:	681b      	ldr	r3, [r3, #0]
   bccca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bcccc:	9301      	str	r3, [sp, #4]
   bccce:	bd08      	pop	{r3, pc}
   bccd0:	00030228 	.word	0x00030228

000bccd4 <hal_i2c_lock>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   bccd4:	b508      	push	{r3, lr}
   bccd6:	4b02      	ldr	r3, [pc, #8]	; (bcce0 <hal_i2c_lock+0xc>)
   bccd8:	681b      	ldr	r3, [r3, #0]
   bccda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   bccdc:	9301      	str	r3, [sp, #4]
   bccde:	bd08      	pop	{r3, pc}
   bcce0:	00030228 	.word	0x00030228

000bcce4 <hal_i2c_unlock>:
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   bcce4:	b508      	push	{r3, lr}
   bcce6:	4b02      	ldr	r3, [pc, #8]	; (bccf0 <hal_i2c_unlock+0xc>)
   bcce8:	681b      	ldr	r3, [r3, #0]
   bccea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bccec:	9301      	str	r3, [sp, #4]
   bccee:	bd08      	pop	{r3, pc}
   bccf0:	00030228 	.word	0x00030228

000bccf4 <hal_i2c_request_ex>:
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   bccf4:	b508      	push	{r3, lr}
   bccf6:	4b02      	ldr	r3, [pc, #8]	; (bcd00 <hal_i2c_request_ex+0xc>)
   bccf8:	681b      	ldr	r3, [r3, #0]
   bccfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bccfc:	9301      	str	r3, [sp, #4]
   bccfe:	bd08      	pop	{r3, pc}
   bcd00:	00030228 	.word	0x00030228

000bcd04 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   bcd04:	b508      	push	{r3, lr}
   bcd06:	4b02      	ldr	r3, [pc, #8]	; (bcd10 <inet_inet_ntop+0xc>)
   bcd08:	681b      	ldr	r3, [r3, #0]
   bcd0a:	695b      	ldr	r3, [r3, #20]
   bcd0c:	9301      	str	r3, [sp, #4]
   bcd0e:	bd08      	pop	{r3, pc}
   bcd10:	00030264 	.word	0x00030264

000bcd14 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   bcd14:	b508      	push	{r3, lr}
   bcd16:	4b02      	ldr	r3, [pc, #8]	; (bcd20 <netdb_freeaddrinfo+0xc>)
   bcd18:	681b      	ldr	r3, [r3, #0]
   bcd1a:	689b      	ldr	r3, [r3, #8]
   bcd1c:	9301      	str	r3, [sp, #4]
   bcd1e:	bd08      	pop	{r3, pc}
   bcd20:	00030268 	.word	0x00030268

000bcd24 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   bcd24:	b508      	push	{r3, lr}
   bcd26:	4b02      	ldr	r3, [pc, #8]	; (bcd30 <netdb_getaddrinfo+0xc>)
   bcd28:	681b      	ldr	r3, [r3, #0]
   bcd2a:	68db      	ldr	r3, [r3, #12]
   bcd2c:	9301      	str	r3, [sp, #4]
   bcd2e:	bd08      	pop	{r3, pc}
   bcd30:	00030268 	.word	0x00030268

000bcd34 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   bcd34:	b508      	push	{r3, lr}
   bcd36:	4b02      	ldr	r3, [pc, #8]	; (bcd40 <hal_spi_begin+0xc>)
   bcd38:	681b      	ldr	r3, [r3, #0]
   bcd3a:	681b      	ldr	r3, [r3, #0]
   bcd3c:	9301      	str	r3, [sp, #4]
   bcd3e:	bd08      	pop	{r3, pc}
   bcd40:	00030230 	.word	0x00030230

000bcd44 <hal_spi_end>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
   bcd44:	b508      	push	{r3, lr}
   bcd46:	4b02      	ldr	r3, [pc, #8]	; (bcd50 <hal_spi_end+0xc>)
   bcd48:	681b      	ldr	r3, [r3, #0]
   bcd4a:	685b      	ldr	r3, [r3, #4]
   bcd4c:	9301      	str	r3, [sp, #4]
   bcd4e:	bd08      	pop	{r3, pc}
   bcd50:	00030230 	.word	0x00030230

000bcd54 <hal_spi_transfer>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   bcd54:	b508      	push	{r3, lr}
   bcd56:	4b02      	ldr	r3, [pc, #8]	; (bcd60 <hal_spi_transfer+0xc>)
   bcd58:	681b      	ldr	r3, [r3, #0]
   bcd5a:	695b      	ldr	r3, [r3, #20]
   bcd5c:	9301      	str	r3, [sp, #4]
   bcd5e:	bd08      	pop	{r3, pc}
   bcd60:	00030230 	.word	0x00030230

000bcd64 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   bcd64:	b508      	push	{r3, lr}
   bcd66:	4b02      	ldr	r3, [pc, #8]	; (bcd70 <hal_spi_init+0xc>)
   bcd68:	681b      	ldr	r3, [r3, #0]
   bcd6a:	69db      	ldr	r3, [r3, #28]
   bcd6c:	9301      	str	r3, [sp, #4]
   bcd6e:	bd08      	pop	{r3, pc}
   bcd70:	00030230 	.word	0x00030230

000bcd74 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   bcd74:	b508      	push	{r3, lr}
   bcd76:	4b02      	ldr	r3, [pc, #8]	; (bcd80 <hal_spi_is_enabled+0xc>)
   bcd78:	681b      	ldr	r3, [r3, #0]
   bcd7a:	6a1b      	ldr	r3, [r3, #32]
   bcd7c:	9301      	str	r3, [sp, #4]
   bcd7e:	bd08      	pop	{r3, pc}
   bcd80:	00030230 	.word	0x00030230

000bcd84 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   bcd84:	b508      	push	{r3, lr}
   bcd86:	4b02      	ldr	r3, [pc, #8]	; (bcd90 <hal_spi_info+0xc>)
   bcd88:	681b      	ldr	r3, [r3, #0]
   bcd8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bcd8c:	9301      	str	r3, [sp, #4]
   bcd8e:	bd08      	pop	{r3, pc}
   bcd90:	00030230 	.word	0x00030230

000bcd94 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   bcd94:	b508      	push	{r3, lr}
   bcd96:	4b02      	ldr	r3, [pc, #8]	; (bcda0 <hal_spi_set_settings+0xc>)
   bcd98:	681b      	ldr	r3, [r3, #0]
   bcd9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bcd9c:	9301      	str	r3, [sp, #4]
   bcd9e:	bd08      	pop	{r3, pc}
   bcda0:	00030230 	.word	0x00030230

000bcda4 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   bcda4:	b508      	push	{r3, lr}
   bcda6:	4b02      	ldr	r3, [pc, #8]	; (bcdb0 <hal_spi_acquire+0xc>)
   bcda8:	681b      	ldr	r3, [r3, #0]
   bcdaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bcdac:	9301      	str	r3, [sp, #4]
   bcdae:	bd08      	pop	{r3, pc}
   bcdb0:	00030230 	.word	0x00030230

000bcdb4 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   bcdb4:	b508      	push	{r3, lr}
   bcdb6:	4b02      	ldr	r3, [pc, #8]	; (bcdc0 <hal_spi_release+0xc>)
   bcdb8:	681b      	ldr	r3, [r3, #0]
   bcdba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bcdbc:	9301      	str	r3, [sp, #4]
   bcdbe:	bd08      	pop	{r3, pc}
   bcdc0:	00030230 	.word	0x00030230

000bcdc4 <_open>:
// Function signatures shouldn't be changed other than changing pointer types.
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_posix_syscall)
DYNALIB_FN(0, hal_posix_syscall, _open, int(const char* pathname, int flags, ... /* arg */))
   bcdc4:	b508      	push	{r3, lr}
   bcdc6:	4b02      	ldr	r3, [pc, #8]	; (bcdd0 <_open+0xc>)
   bcdc8:	681b      	ldr	r3, [r3, #0]
   bcdca:	681b      	ldr	r3, [r3, #0]
   bcdcc:	9301      	str	r3, [sp, #4]
   bcdce:	bd08      	pop	{r3, pc}
   bcdd0:	00030284 	.word	0x00030284

000bcdd4 <_write>:
DYNALIB_FN(1, hal_posix_syscall, _write, int(int fd, const void* buf, size_t count))
   bcdd4:	b508      	push	{r3, lr}
   bcdd6:	4b02      	ldr	r3, [pc, #8]	; (bcde0 <_write+0xc>)
   bcdd8:	681b      	ldr	r3, [r3, #0]
   bcdda:	685b      	ldr	r3, [r3, #4]
   bcddc:	9301      	str	r3, [sp, #4]
   bcdde:	bd08      	pop	{r3, pc}
   bcde0:	00030284 	.word	0x00030284

000bcde4 <_read>:
DYNALIB_FN(2, hal_posix_syscall, _read, int(int fd, void* buf, size_t count))
   bcde4:	b508      	push	{r3, lr}
   bcde6:	4b02      	ldr	r3, [pc, #8]	; (bcdf0 <_read+0xc>)
   bcde8:	681b      	ldr	r3, [r3, #0]
   bcdea:	689b      	ldr	r3, [r3, #8]
   bcdec:	9301      	str	r3, [sp, #4]
   bcdee:	bd08      	pop	{r3, pc}
   bcdf0:	00030284 	.word	0x00030284

000bcdf4 <_close>:
DYNALIB_FN(3, hal_posix_syscall, _close, int(int fd))
   bcdf4:	b508      	push	{r3, lr}
   bcdf6:	4b02      	ldr	r3, [pc, #8]	; (bce00 <_close+0xc>)
   bcdf8:	681b      	ldr	r3, [r3, #0]
   bcdfa:	68db      	ldr	r3, [r3, #12]
   bcdfc:	9301      	str	r3, [sp, #4]
   bcdfe:	bd08      	pop	{r3, pc}
   bce00:	00030284 	.word	0x00030284

000bce04 <_fstat>:
DYNALIB_FN(4, hal_posix_syscall, fsync, int(int fd))
DYNALIB_FN(5, hal_posix_syscall, _fstat, int(int fd, struct stat* buf))
   bce04:	b508      	push	{r3, lr}
   bce06:	4b02      	ldr	r3, [pc, #8]	; (bce10 <_fstat+0xc>)
   bce08:	681b      	ldr	r3, [r3, #0]
   bce0a:	695b      	ldr	r3, [r3, #20]
   bce0c:	9301      	str	r3, [sp, #4]
   bce0e:	bd08      	pop	{r3, pc}
   bce10:	00030284 	.word	0x00030284

000bce14 <_lseek>:
DYNALIB_FN(6, hal_posix_syscall, _fcntl, int(int fd, int cmd, ... /* arg */))
DYNALIB_FN(7, hal_posix_syscall, _isatty, int(int fd))
DYNALIB_FN(8, hal_posix_syscall, _lseek, off_t(int fd, off_t offset, int whence))
   bce14:	b508      	push	{r3, lr}
   bce16:	4b02      	ldr	r3, [pc, #8]	; (bce20 <_lseek+0xc>)
   bce18:	681b      	ldr	r3, [r3, #0]
   bce1a:	6a1b      	ldr	r3, [r3, #32]
   bce1c:	9301      	str	r3, [sp, #4]
   bce1e:	bd08      	pop	{r3, pc}
   bce20:	00030284 	.word	0x00030284

000bce24 <stat>:
DYNALIB_FN(9, hal_posix_syscall, stat, int(const char* pathname, struct stat* buf))
   bce24:	b508      	push	{r3, lr}
   bce26:	4b02      	ldr	r3, [pc, #8]	; (bce30 <stat+0xc>)
   bce28:	681b      	ldr	r3, [r3, #0]
   bce2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bce2c:	9301      	str	r3, [sp, #4]
   bce2e:	bd08      	pop	{r3, pc}
   bce30:	00030284 	.word	0x00030284

000bce34 <mkdir>:
DYNALIB_FN(10, hal_posix_syscall, mkdir, int(const char* pathname, mode_t mode))
   bce34:	b508      	push	{r3, lr}
   bce36:	4b02      	ldr	r3, [pc, #8]	; (bce40 <mkdir+0xc>)
   bce38:	681b      	ldr	r3, [r3, #0]
   bce3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bce3c:	9301      	str	r3, [sp, #4]
   bce3e:	bd08      	pop	{r3, pc}
   bce40:	00030284 	.word	0x00030284

000bce44 <_unlink>:
DYNALIB_FN(11, hal_posix_syscall, rmdir, int(const char* pathname))
DYNALIB_FN(12, hal_posix_syscall, _unlink, int(const char* pathname))
   bce44:	b508      	push	{r3, lr}
   bce46:	4b02      	ldr	r3, [pc, #8]	; (bce50 <_unlink+0xc>)
   bce48:	681b      	ldr	r3, [r3, #0]
   bce4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bce4c:	9301      	str	r3, [sp, #4]
   bce4e:	bd08      	pop	{r3, pc}
   bce50:	00030284 	.word	0x00030284

000bce54 <opendir>:
DYNALIB_FN(13, hal_posix_syscall, _link, int(const char* oldpath, const char* newpath))
DYNALIB_FN(14, hal_posix_syscall, _rename, int(const char* oldpath, const char* newpath))
DYNALIB_FN(15, hal_posix_syscall, opendir, DIR*(const char* name))
   bce54:	b508      	push	{r3, lr}
   bce56:	4b02      	ldr	r3, [pc, #8]	; (bce60 <opendir+0xc>)
   bce58:	681b      	ldr	r3, [r3, #0]
   bce5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bce5c:	9301      	str	r3, [sp, #4]
   bce5e:	bd08      	pop	{r3, pc}
   bce60:	00030284 	.word	0x00030284

000bce64 <readdir>:
DYNALIB_FN(16, hal_posix_syscall, readdir, struct dirent*(DIR* pdir))
   bce64:	b508      	push	{r3, lr}
   bce66:	4b02      	ldr	r3, [pc, #8]	; (bce70 <readdir+0xc>)
   bce68:	681b      	ldr	r3, [r3, #0]
   bce6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bce6c:	9301      	str	r3, [sp, #4]
   bce6e:	bd08      	pop	{r3, pc}
   bce70:	00030284 	.word	0x00030284

000bce74 <closedir>:
DYNALIB_FN(17, hal_posix_syscall, telldir, long(DIR* pdir))
DYNALIB_FN(18, hal_posix_syscall, seekdir, void(DIR* pdir, long loc))
DYNALIB_FN(19, hal_posix_syscall, rewinddir, void(DIR* pdir))
DYNALIB_FN(20, hal_posix_syscall, readdir_r, int(DIR* pdir, struct dirent* entry, struct dirent** out_dirent))
DYNALIB_FN(21, hal_posix_syscall, closedir, int(DIR* pdir))
   bce74:	b508      	push	{r3, lr}
   bce76:	4b02      	ldr	r3, [pc, #8]	; (bce80 <closedir+0xc>)
   bce78:	681b      	ldr	r3, [r3, #0]
   bce7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bce7c:	9301      	str	r3, [sp, #4]
   bce7e:	bd08      	pop	{r3, pc}
   bce80:	00030284 	.word	0x00030284

000bce84 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   bce84:	b508      	push	{r3, lr}
   bce86:	4b02      	ldr	r3, [pc, #8]	; (bce90 <hal_usart_end+0xc>)
   bce88:	681b      	ldr	r3, [r3, #0]
   bce8a:	689b      	ldr	r3, [r3, #8]
   bce8c:	9301      	str	r3, [sp, #4]
   bce8e:	bd08      	pop	{r3, pc}
   bce90:	0003023c 	.word	0x0003023c

000bce94 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   bce94:	b508      	push	{r3, lr}
   bce96:	4b02      	ldr	r3, [pc, #8]	; (bcea0 <hal_usart_write+0xc>)
   bce98:	681b      	ldr	r3, [r3, #0]
   bce9a:	68db      	ldr	r3, [r3, #12]
   bce9c:	9301      	str	r3, [sp, #4]
   bce9e:	bd08      	pop	{r3, pc}
   bcea0:	0003023c 	.word	0x0003023c

000bcea4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   bcea4:	b508      	push	{r3, lr}
   bcea6:	4b02      	ldr	r3, [pc, #8]	; (bceb0 <hal_usart_available+0xc>)
   bcea8:	681b      	ldr	r3, [r3, #0]
   bceaa:	691b      	ldr	r3, [r3, #16]
   bceac:	9301      	str	r3, [sp, #4]
   bceae:	bd08      	pop	{r3, pc}
   bceb0:	0003023c 	.word	0x0003023c

000bceb4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   bceb4:	b508      	push	{r3, lr}
   bceb6:	4b02      	ldr	r3, [pc, #8]	; (bcec0 <hal_usart_read+0xc>)
   bceb8:	681b      	ldr	r3, [r3, #0]
   bceba:	695b      	ldr	r3, [r3, #20]
   bcebc:	9301      	str	r3, [sp, #4]
   bcebe:	bd08      	pop	{r3, pc}
   bcec0:	0003023c 	.word	0x0003023c

000bcec4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   bcec4:	b508      	push	{r3, lr}
   bcec6:	4b02      	ldr	r3, [pc, #8]	; (bced0 <hal_usart_peek+0xc>)
   bcec8:	681b      	ldr	r3, [r3, #0]
   bceca:	699b      	ldr	r3, [r3, #24]
   bcecc:	9301      	str	r3, [sp, #4]
   bcece:	bd08      	pop	{r3, pc}
   bced0:	0003023c 	.word	0x0003023c

000bced4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   bced4:	b508      	push	{r3, lr}
   bced6:	4b02      	ldr	r3, [pc, #8]	; (bcee0 <hal_usart_flush+0xc>)
   bced8:	681b      	ldr	r3, [r3, #0]
   bceda:	69db      	ldr	r3, [r3, #28]
   bcedc:	9301      	str	r3, [sp, #4]
   bcede:	bd08      	pop	{r3, pc}
   bcee0:	0003023c 	.word	0x0003023c

000bcee4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   bcee4:	b508      	push	{r3, lr}
   bcee6:	4b02      	ldr	r3, [pc, #8]	; (bcef0 <hal_usart_is_enabled+0xc>)
   bcee8:	681b      	ldr	r3, [r3, #0]
   bceea:	6a1b      	ldr	r3, [r3, #32]
   bceec:	9301      	str	r3, [sp, #4]
   bceee:	bd08      	pop	{r3, pc}
   bcef0:	0003023c 	.word	0x0003023c

000bcef4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   bcef4:	b508      	push	{r3, lr}
   bcef6:	4b02      	ldr	r3, [pc, #8]	; (bcf00 <hal_usart_available_data_for_write+0xc>)
   bcef8:	681b      	ldr	r3, [r3, #0]
   bcefa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bcefc:	9301      	str	r3, [sp, #4]
   bcefe:	bd08      	pop	{r3, pc}
   bcf00:	0003023c 	.word	0x0003023c

000bcf04 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   bcf04:	b508      	push	{r3, lr}
   bcf06:	4b02      	ldr	r3, [pc, #8]	; (bcf10 <hal_usart_begin_config+0xc>)
   bcf08:	681b      	ldr	r3, [r3, #0]
   bcf0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bcf0c:	9301      	str	r3, [sp, #4]
   bcf0e:	bd08      	pop	{r3, pc}
   bcf10:	0003023c 	.word	0x0003023c

000bcf14 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   bcf14:	b508      	push	{r3, lr}
   bcf16:	4b02      	ldr	r3, [pc, #8]	; (bcf20 <hal_usart_init_ex+0xc>)
   bcf18:	681b      	ldr	r3, [r3, #0]
   bcf1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bcf1c:	9301      	str	r3, [sp, #4]
   bcf1e:	bd08      	pop	{r3, pc}
   bcf20:	0003023c 	.word	0x0003023c

000bcf24 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   bcf24:	b508      	push	{r3, lr}
   bcf26:	4b02      	ldr	r3, [pc, #8]	; (bcf30 <HAL_USB_USART_Init+0xc>)
   bcf28:	681b      	ldr	r3, [r3, #0]
   bcf2a:	681b      	ldr	r3, [r3, #0]
   bcf2c:	9301      	str	r3, [sp, #4]
   bcf2e:	bd08      	pop	{r3, pc}
   bcf30:	0003024c 	.word	0x0003024c

000bcf34 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   bcf34:	b508      	push	{r3, lr}
   bcf36:	4b02      	ldr	r3, [pc, #8]	; (bcf40 <HAL_USB_USART_Begin+0xc>)
   bcf38:	681b      	ldr	r3, [r3, #0]
   bcf3a:	685b      	ldr	r3, [r3, #4]
   bcf3c:	9301      	str	r3, [sp, #4]
   bcf3e:	bd08      	pop	{r3, pc}
   bcf40:	0003024c 	.word	0x0003024c

000bcf44 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   bcf44:	b508      	push	{r3, lr}
   bcf46:	4b02      	ldr	r3, [pc, #8]	; (bcf50 <HAL_USB_USART_End+0xc>)
   bcf48:	681b      	ldr	r3, [r3, #0]
   bcf4a:	689b      	ldr	r3, [r3, #8]
   bcf4c:	9301      	str	r3, [sp, #4]
   bcf4e:	bd08      	pop	{r3, pc}
   bcf50:	0003024c 	.word	0x0003024c

000bcf54 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   bcf54:	b508      	push	{r3, lr}
   bcf56:	4b02      	ldr	r3, [pc, #8]	; (bcf60 <HAL_USB_USART_Available_Data+0xc>)
   bcf58:	681b      	ldr	r3, [r3, #0]
   bcf5a:	691b      	ldr	r3, [r3, #16]
   bcf5c:	9301      	str	r3, [sp, #4]
   bcf5e:	bd08      	pop	{r3, pc}
   bcf60:	0003024c 	.word	0x0003024c

000bcf64 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   bcf64:	b508      	push	{r3, lr}
   bcf66:	4b02      	ldr	r3, [pc, #8]	; (bcf70 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   bcf68:	681b      	ldr	r3, [r3, #0]
   bcf6a:	695b      	ldr	r3, [r3, #20]
   bcf6c:	9301      	str	r3, [sp, #4]
   bcf6e:	bd08      	pop	{r3, pc}
   bcf70:	0003024c 	.word	0x0003024c

000bcf74 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   bcf74:	b508      	push	{r3, lr}
   bcf76:	4b02      	ldr	r3, [pc, #8]	; (bcf80 <HAL_USB_USART_Receive_Data+0xc>)
   bcf78:	681b      	ldr	r3, [r3, #0]
   bcf7a:	699b      	ldr	r3, [r3, #24]
   bcf7c:	9301      	str	r3, [sp, #4]
   bcf7e:	bd08      	pop	{r3, pc}
   bcf80:	0003024c 	.word	0x0003024c

000bcf84 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   bcf84:	b508      	push	{r3, lr}
   bcf86:	4b02      	ldr	r3, [pc, #8]	; (bcf90 <HAL_USB_USART_Send_Data+0xc>)
   bcf88:	681b      	ldr	r3, [r3, #0]
   bcf8a:	69db      	ldr	r3, [r3, #28]
   bcf8c:	9301      	str	r3, [sp, #4]
   bcf8e:	bd08      	pop	{r3, pc}
   bcf90:	0003024c 	.word	0x0003024c

000bcf94 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   bcf94:	b508      	push	{r3, lr}
   bcf96:	4b02      	ldr	r3, [pc, #8]	; (bcfa0 <HAL_USB_USART_Flush_Data+0xc>)
   bcf98:	681b      	ldr	r3, [r3, #0]
   bcf9a:	6a1b      	ldr	r3, [r3, #32]
   bcf9c:	9301      	str	r3, [sp, #4]
   bcf9e:	bd08      	pop	{r3, pc}
   bcfa0:	0003024c 	.word	0x0003024c

000bcfa4 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   bcfa4:	b508      	push	{r3, lr}
   bcfa6:	4b02      	ldr	r3, [pc, #8]	; (bcfb0 <HAL_USB_USART_Is_Connected+0xc>)
   bcfa8:	681b      	ldr	r3, [r3, #0]
   bcfaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   bcfac:	9301      	str	r3, [sp, #4]
   bcfae:	bd08      	pop	{r3, pc}
   bcfb0:	0003024c 	.word	0x0003024c

000bcfb4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   bcfb4:	b508      	push	{r3, lr}
   bcfb6:	4b02      	ldr	r3, [pc, #8]	; (bcfc0 <panic_+0xc>)
   bcfb8:	681b      	ldr	r3, [r3, #0]
   bcfba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bcfbc:	9301      	str	r3, [sp, #4]
   bcfbe:	bd08      	pop	{r3, pc}
   bcfc0:	00030260 	.word	0x00030260

000bcfc4 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   bcfc4:	b508      	push	{r3, lr}
   bcfc6:	4b02      	ldr	r3, [pc, #8]	; (bcfd0 <log_message+0xc>)
   bcfc8:	681b      	ldr	r3, [r3, #0]
   bcfca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bcfcc:	9301      	str	r3, [sp, #4]
   bcfce:	bd08      	pop	{r3, pc}
   bcfd0:	00030260 	.word	0x00030260

000bcfd4 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   bcfd4:	b508      	push	{r3, lr}
   bcfd6:	4b02      	ldr	r3, [pc, #8]	; (bcfe0 <log_message_v+0xc>)
   bcfd8:	681b      	ldr	r3, [r3, #0]
   bcfda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bcfdc:	9301      	str	r3, [sp, #4]
   bcfde:	bd08      	pop	{r3, pc}
   bcfe0:	00030260 	.word	0x00030260

000bcfe4 <log_write>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
   bcfe4:	b508      	push	{r3, lr}
   bcfe6:	4b02      	ldr	r3, [pc, #8]	; (bcff0 <log_write+0xc>)
   bcfe8:	681b      	ldr	r3, [r3, #0]
   bcfea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bcfec:	9301      	str	r3, [sp, #4]
   bcfee:	bd08      	pop	{r3, pc}
   bcff0:	00030260 	.word	0x00030260

000bcff4 <log_dump>:
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
   bcff4:	b508      	push	{r3, lr}
   bcff6:	4b02      	ldr	r3, [pc, #8]	; (bd000 <log_dump+0xc>)
   bcff8:	681b      	ldr	r3, [r3, #0]
   bcffa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   bcffc:	9301      	str	r3, [sp, #4]
   bcffe:	bd08      	pop	{r3, pc}
   bd000:	00030260 	.word	0x00030260

000bd004 <log_level_name>:
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   bd004:	b508      	push	{r3, lr}
   bd006:	4b02      	ldr	r3, [pc, #8]	; (bd010 <log_level_name+0xc>)
   bd008:	681b      	ldr	r3, [r3, #0]
   bd00a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   bd00c:	9301      	str	r3, [sp, #4]
   bd00e:	bd08      	pop	{r3, pc}
   bd010:	00030260 	.word	0x00030260

000bd014 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   bd014:	b508      	push	{r3, lr}
   bd016:	4b02      	ldr	r3, [pc, #8]	; (bd020 <log_set_callbacks+0xc>)
   bd018:	681b      	ldr	r3, [r3, #0]
   bd01a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   bd01c:	9301      	str	r3, [sp, #4]
   bd01e:	bd08      	pop	{r3, pc}
   bd020:	00030260 	.word	0x00030260

000bd024 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   bd024:	b508      	push	{r3, lr}
   bd026:	4b03      	ldr	r3, [pc, #12]	; (bd034 <diag_get_source+0x10>)
   bd028:	681b      	ldr	r3, [r3, #0]
   bd02a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   bd02e:	9301      	str	r3, [sp, #4]
   bd030:	bd08      	pop	{r3, pc}
   bd032:	0000      	.short	0x0000
   bd034:	00030260 	.word	0x00030260

000bd038 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   bd038:	b508      	push	{r3, lr}
   bd03a:	4b02      	ldr	r3, [pc, #8]	; (bd044 <system_mode+0xc>)
   bd03c:	681b      	ldr	r3, [r3, #0]
   bd03e:	681b      	ldr	r3, [r3, #0]
   bd040:	9301      	str	r3, [sp, #4]
   bd042:	bd08      	pop	{r3, pc}
   bd044:	00030220 	.word	0x00030220

000bd048 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   bd048:	b508      	push	{r3, lr}
   bd04a:	4b02      	ldr	r3, [pc, #8]	; (bd054 <set_system_mode+0xc>)
   bd04c:	681b      	ldr	r3, [r3, #0]
   bd04e:	685b      	ldr	r3, [r3, #4]
   bd050:	9301      	str	r3, [sp, #4]
   bd052:	bd08      	pop	{r3, pc}
   bd054:	00030220 	.word	0x00030220

000bd058 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   bd058:	b508      	push	{r3, lr}
   bd05a:	4b02      	ldr	r3, [pc, #8]	; (bd064 <system_delay_ms+0xc>)
   bd05c:	681b      	ldr	r3, [r3, #0]
   bd05e:	695b      	ldr	r3, [r3, #20]
   bd060:	9301      	str	r3, [sp, #4]
   bd062:	bd08      	pop	{r3, pc}
   bd064:	00030220 	.word	0x00030220

000bd068 <system_subscribe_event>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
   bd068:	b508      	push	{r3, lr}
   bd06a:	4b02      	ldr	r3, [pc, #8]	; (bd074 <system_subscribe_event+0xc>)
   bd06c:	681b      	ldr	r3, [r3, #0]
   bd06e:	6a1b      	ldr	r3, [r3, #32]
   bd070:	9301      	str	r3, [sp, #4]
   bd072:	bd08      	pop	{r3, pc}
   bd074:	00030220 	.word	0x00030220

000bd078 <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   bd078:	b508      	push	{r3, lr}
   bd07a:	4b02      	ldr	r3, [pc, #8]	; (bd084 <system_thread_set_state+0xc>)
   bd07c:	681b      	ldr	r3, [r3, #0]
   bd07e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bd080:	9301      	str	r3, [sp, #4]
   bd082:	bd08      	pop	{r3, pc}
   bd084:	00030220 	.word	0x00030220

000bd088 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   bd088:	b508      	push	{r3, lr}
   bd08a:	4b02      	ldr	r3, [pc, #8]	; (bd094 <application_thread_current+0xc>)
   bd08c:	681b      	ldr	r3, [r3, #0]
   bd08e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bd090:	9301      	str	r3, [sp, #4]
   bd092:	bd08      	pop	{r3, pc}
   bd094:	00030220 	.word	0x00030220

000bd098 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   bd098:	b508      	push	{r3, lr}
   bd09a:	4b02      	ldr	r3, [pc, #8]	; (bd0a4 <application_thread_invoke+0xc>)
   bd09c:	681b      	ldr	r3, [r3, #0]
   bd09e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bd0a0:	9301      	str	r3, [sp, #4]
   bd0a2:	bd08      	pop	{r3, pc}
   bd0a4:	00030220 	.word	0x00030220

000bd0a8 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   bd0a8:	b508      	push	{r3, lr}
   bd0aa:	4b02      	ldr	r3, [pc, #8]	; (bd0b4 <system_thread_get_state+0xc>)
   bd0ac:	681b      	ldr	r3, [r3, #0]
   bd0ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   bd0b0:	9301      	str	r3, [sp, #4]
   bd0b2:	bd08      	pop	{r3, pc}
   bd0b4:	00030220 	.word	0x00030220

000bd0b8 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   bd0b8:	b508      	push	{r3, lr}
   bd0ba:	4b02      	ldr	r3, [pc, #8]	; (bd0c4 <system_notify_time_changed+0xc>)
   bd0bc:	681b      	ldr	r3, [r3, #0]
   bd0be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   bd0c0:	9301      	str	r3, [sp, #4]
   bd0c2:	bd08      	pop	{r3, pc}
   bd0c4:	00030220 	.word	0x00030220

000bd0c8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   bd0c8:	b508      	push	{r3, lr}
   bd0ca:	4b03      	ldr	r3, [pc, #12]	; (bd0d8 <system_ctrl_set_app_request_handler+0x10>)
   bd0cc:	681b      	ldr	r3, [r3, #0]
   bd0ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   bd0d2:	9301      	str	r3, [sp, #4]
   bd0d4:	bd08      	pop	{r3, pc}
   bd0d6:	0000      	.short	0x0000
   bd0d8:	00030220 	.word	0x00030220

000bd0dc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   bd0dc:	b508      	push	{r3, lr}
   bd0de:	4b03      	ldr	r3, [pc, #12]	; (bd0ec <system_ctrl_set_result+0x10>)
   bd0e0:	681b      	ldr	r3, [r3, #0]
   bd0e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   bd0e6:	9301      	str	r3, [sp, #4]
   bd0e8:	bd08      	pop	{r3, pc}
   bd0ea:	0000      	.short	0x0000
   bd0ec:	00030220 	.word	0x00030220

000bd0f0 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   bd0f0:	b508      	push	{r3, lr}
   bd0f2:	4b03      	ldr	r3, [pc, #12]	; (bd100 <system_power_management_set_config+0x10>)
   bd0f4:	681b      	ldr	r3, [r3, #0]
   bd0f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   bd0fa:	9301      	str	r3, [sp, #4]
   bd0fc:	bd08      	pop	{r3, pc}
   bd0fe:	0000      	.short	0x0000
   bd100:	00030220 	.word	0x00030220

000bd104 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   bd104:	b508      	push	{r3, lr}
   bd106:	4b03      	ldr	r3, [pc, #12]	; (bd114 <system_sleep_ext+0x10>)
   bd108:	681b      	ldr	r3, [r3, #0]
   bd10a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   bd10e:	9301      	str	r3, [sp, #4]
   bd110:	bd08      	pop	{r3, pc}
   bd112:	0000      	.short	0x0000
   bd114:	00030220 	.word	0x00030220

000bd118 <system_reset>:
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   bd118:	b508      	push	{r3, lr}
   bd11a:	4b03      	ldr	r3, [pc, #12]	; (bd128 <system_reset+0x10>)
   bd11c:	681b      	ldr	r3, [r3, #0]
   bd11e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   bd122:	9301      	str	r3, [sp, #4]
   bd124:	bd08      	pop	{r3, pc}
   bd126:	0000      	.short	0x0000
   bd128:	00030220 	.word	0x00030220

000bd12c <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   bd12c:	b508      	push	{r3, lr}
   bd12e:	4b02      	ldr	r3, [pc, #8]	; (bd138 <spark_function+0xc>)
   bd130:	681b      	ldr	r3, [r3, #0]
   bd132:	685b      	ldr	r3, [r3, #4]
   bd134:	9301      	str	r3, [sp, #4]
   bd136:	bd08      	pop	{r3, pc}
   bd138:	00030244 	.word	0x00030244

000bd13c <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   bd13c:	b508      	push	{r3, lr}
   bd13e:	4b02      	ldr	r3, [pc, #8]	; (bd148 <spark_process+0xc>)
   bd140:	681b      	ldr	r3, [r3, #0]
   bd142:	689b      	ldr	r3, [r3, #8]
   bd144:	9301      	str	r3, [sp, #4]
   bd146:	bd08      	pop	{r3, pc}
   bd148:	00030244 	.word	0x00030244

000bd14c <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   bd14c:	b508      	push	{r3, lr}
   bd14e:	4b02      	ldr	r3, [pc, #8]	; (bd158 <spark_cloud_flag_connect+0xc>)
   bd150:	681b      	ldr	r3, [r3, #0]
   bd152:	68db      	ldr	r3, [r3, #12]
   bd154:	9301      	str	r3, [sp, #4]
   bd156:	bd08      	pop	{r3, pc}
   bd158:	00030244 	.word	0x00030244

000bd15c <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   bd15c:	b508      	push	{r3, lr}
   bd15e:	4b02      	ldr	r3, [pc, #8]	; (bd168 <spark_cloud_flag_connected+0xc>)
   bd160:	681b      	ldr	r3, [r3, #0]
   bd162:	695b      	ldr	r3, [r3, #20]
   bd164:	9301      	str	r3, [sp, #4]
   bd166:	bd08      	pop	{r3, pc}
   bd168:	00030244 	.word	0x00030244

000bd16c <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   bd16c:	b508      	push	{r3, lr}
   bd16e:	4b02      	ldr	r3, [pc, #8]	; (bd178 <spark_deviceID+0xc>)
   bd170:	681b      	ldr	r3, [r3, #0]
   bd172:	69db      	ldr	r3, [r3, #28]
   bd174:	9301      	str	r3, [sp, #4]
   bd176:	bd08      	pop	{r3, pc}
   bd178:	00030244 	.word	0x00030244

000bd17c <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   bd17c:	b508      	push	{r3, lr}
   bd17e:	4b02      	ldr	r3, [pc, #8]	; (bd188 <spark_send_event+0xc>)
   bd180:	681b      	ldr	r3, [r3, #0]
   bd182:	6a1b      	ldr	r3, [r3, #32]
   bd184:	9301      	str	r3, [sp, #4]
   bd186:	bd08      	pop	{r3, pc}
   bd188:	00030244 	.word	0x00030244

000bd18c <spark_sync_time>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   bd18c:	b508      	push	{r3, lr}
   bd18e:	4b02      	ldr	r3, [pc, #8]	; (bd198 <spark_sync_time+0xc>)
   bd190:	681b      	ldr	r3, [r3, #0]
   bd192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bd194:	9301      	str	r3, [sp, #4]
   bd196:	bd08      	pop	{r3, pc}
   bd198:	00030244 	.word	0x00030244

000bd19c <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   bd19c:	b508      	push	{r3, lr}
   bd19e:	4b02      	ldr	r3, [pc, #8]	; (bd1a8 <spark_sync_time_pending+0xc>)
   bd1a0:	681b      	ldr	r3, [r3, #0]
   bd1a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bd1a4:	9301      	str	r3, [sp, #4]
   bd1a6:	bd08      	pop	{r3, pc}
   bd1a8:	00030244 	.word	0x00030244

000bd1ac <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   bd1ac:	b508      	push	{r3, lr}
   bd1ae:	4b02      	ldr	r3, [pc, #8]	; (bd1b8 <spark_sync_time_last+0xc>)
   bd1b0:	681b      	ldr	r3, [r3, #0]
   bd1b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bd1b4:	9301      	str	r3, [sp, #4]
   bd1b6:	bd08      	pop	{r3, pc}
   bd1b8:	00030244 	.word	0x00030244

000bd1bc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   bd1bc:	b508      	push	{r3, lr}
   bd1be:	4b02      	ldr	r3, [pc, #8]	; (bd1c8 <spark_set_random_seed_from_cloud_handler+0xc>)
   bd1c0:	681b      	ldr	r3, [r3, #0]
   bd1c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bd1c4:	9301      	str	r3, [sp, #4]
   bd1c6:	bd08      	pop	{r3, pc}
   bd1c8:	00030244 	.word	0x00030244

000bd1cc <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   bd1cc:	b508      	push	{r3, lr}
   bd1ce:	4b02      	ldr	r3, [pc, #8]	; (bd1d8 <spark_cloud_disconnect+0xc>)
   bd1d0:	681b      	ldr	r3, [r3, #0]
   bd1d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bd1d4:	9301      	str	r3, [sp, #4]
   bd1d6:	bd08      	pop	{r3, pc}
   bd1d8:	00030244 	.word	0x00030244

000bd1dc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   bd1dc:	b508      	push	{r3, lr}
   bd1de:	4b02      	ldr	r3, [pc, #8]	; (bd1e8 <network_connect+0xc>)
   bd1e0:	681b      	ldr	r3, [r3, #0]
   bd1e2:	685b      	ldr	r3, [r3, #4]
   bd1e4:	9301      	str	r3, [sp, #4]
   bd1e6:	bd08      	pop	{r3, pc}
   bd1e8:	00030240 	.word	0x00030240

000bd1ec <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   bd1ec:	b508      	push	{r3, lr}
   bd1ee:	4b02      	ldr	r3, [pc, #8]	; (bd1f8 <network_connecting+0xc>)
   bd1f0:	681b      	ldr	r3, [r3, #0]
   bd1f2:	689b      	ldr	r3, [r3, #8]
   bd1f4:	9301      	str	r3, [sp, #4]
   bd1f6:	bd08      	pop	{r3, pc}
   bd1f8:	00030240 	.word	0x00030240

000bd1fc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   bd1fc:	b508      	push	{r3, lr}
   bd1fe:	4b02      	ldr	r3, [pc, #8]	; (bd208 <network_disconnect+0xc>)
   bd200:	681b      	ldr	r3, [r3, #0]
   bd202:	68db      	ldr	r3, [r3, #12]
   bd204:	9301      	str	r3, [sp, #4]
   bd206:	bd08      	pop	{r3, pc}
   bd208:	00030240 	.word	0x00030240

000bd20c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   bd20c:	b508      	push	{r3, lr}
   bd20e:	4b02      	ldr	r3, [pc, #8]	; (bd218 <network_ready+0xc>)
   bd210:	681b      	ldr	r3, [r3, #0]
   bd212:	691b      	ldr	r3, [r3, #16]
   bd214:	9301      	str	r3, [sp, #4]
   bd216:	bd08      	pop	{r3, pc}
   bd218:	00030240 	.word	0x00030240

000bd21c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   bd21c:	b508      	push	{r3, lr}
   bd21e:	4b02      	ldr	r3, [pc, #8]	; (bd228 <network_on+0xc>)
   bd220:	681b      	ldr	r3, [r3, #0]
   bd222:	695b      	ldr	r3, [r3, #20]
   bd224:	9301      	str	r3, [sp, #4]
   bd226:	bd08      	pop	{r3, pc}
   bd228:	00030240 	.word	0x00030240

000bd22c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   bd22c:	b508      	push	{r3, lr}
   bd22e:	4b02      	ldr	r3, [pc, #8]	; (bd238 <network_off+0xc>)
   bd230:	681b      	ldr	r3, [r3, #0]
   bd232:	699b      	ldr	r3, [r3, #24]
   bd234:	9301      	str	r3, [sp, #4]
   bd236:	bd08      	pop	{r3, pc}
   bd238:	00030240 	.word	0x00030240

000bd23c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   bd23c:	b508      	push	{r3, lr}
   bd23e:	4b02      	ldr	r3, [pc, #8]	; (bd248 <network_listen+0xc>)
   bd240:	681b      	ldr	r3, [r3, #0]
   bd242:	69db      	ldr	r3, [r3, #28]
   bd244:	9301      	str	r3, [sp, #4]
   bd246:	bd08      	pop	{r3, pc}
   bd248:	00030240 	.word	0x00030240

000bd24c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   bd24c:	b508      	push	{r3, lr}
   bd24e:	4b02      	ldr	r3, [pc, #8]	; (bd258 <network_listening+0xc>)
   bd250:	681b      	ldr	r3, [r3, #0]
   bd252:	6a1b      	ldr	r3, [r3, #32]
   bd254:	9301      	str	r3, [sp, #4]
   bd256:	bd08      	pop	{r3, pc}
   bd258:	00030240 	.word	0x00030240

000bd25c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   bd25c:	b508      	push	{r3, lr}
   bd25e:	4b02      	ldr	r3, [pc, #8]	; (bd268 <network_set_listen_timeout+0xc>)
   bd260:	681b      	ldr	r3, [r3, #0]
   bd262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bd264:	9301      	str	r3, [sp, #4]
   bd266:	bd08      	pop	{r3, pc}
   bd268:	00030240 	.word	0x00030240

000bd26c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   bd26c:	b508      	push	{r3, lr}
   bd26e:	4b02      	ldr	r3, [pc, #8]	; (bd278 <network_get_listen_timeout+0xc>)
   bd270:	681b      	ldr	r3, [r3, #0]
   bd272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   bd274:	9301      	str	r3, [sp, #4]
   bd276:	bd08      	pop	{r3, pc}
   bd278:	00030240 	.word	0x00030240

000bd27c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   bd27c:	b508      	push	{r3, lr}
   bd27e:	4b02      	ldr	r3, [pc, #8]	; (bd288 <network_is_on+0xc>)
   bd280:	681b      	ldr	r3, [r3, #0]
   bd282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bd284:	9301      	str	r3, [sp, #4]
   bd286:	bd08      	pop	{r3, pc}
   bd288:	00030240 	.word	0x00030240

000bd28c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   bd28c:	b508      	push	{r3, lr}
   bd28e:	4b02      	ldr	r3, [pc, #8]	; (bd298 <network_is_off+0xc>)
   bd290:	681b      	ldr	r3, [r3, #0]
   bd292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bd294:	9301      	str	r3, [sp, #4]
   bd296:	bd08      	pop	{r3, pc}
   bd298:	00030240 	.word	0x00030240

000bd29c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   bd29c:	b508      	push	{r3, lr}
   bd29e:	4b02      	ldr	r3, [pc, #8]	; (bd2a8 <malloc+0xc>)
   bd2a0:	681b      	ldr	r3, [r3, #0]
   bd2a2:	681b      	ldr	r3, [r3, #0]
   bd2a4:	9301      	str	r3, [sp, #4]
   bd2a6:	bd08      	pop	{r3, pc}
   bd2a8:	0003021c 	.word	0x0003021c

000bd2ac <free>:
DYNALIB_FN(1, rt, free, void(void*))
   bd2ac:	b508      	push	{r3, lr}
   bd2ae:	4b02      	ldr	r3, [pc, #8]	; (bd2b8 <free+0xc>)
   bd2b0:	681b      	ldr	r3, [r3, #0]
   bd2b2:	685b      	ldr	r3, [r3, #4]
   bd2b4:	9301      	str	r3, [sp, #4]
   bd2b6:	bd08      	pop	{r3, pc}
   bd2b8:	0003021c 	.word	0x0003021c

000bd2bc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   bd2bc:	b508      	push	{r3, lr}
   bd2be:	4b02      	ldr	r3, [pc, #8]	; (bd2c8 <realloc+0xc>)
   bd2c0:	681b      	ldr	r3, [r3, #0]
   bd2c2:	689b      	ldr	r3, [r3, #8]
   bd2c4:	9301      	str	r3, [sp, #4]
   bd2c6:	bd08      	pop	{r3, pc}
   bd2c8:	0003021c 	.word	0x0003021c

000bd2cc <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   bd2cc:	b508      	push	{r3, lr}
   bd2ce:	4b02      	ldr	r3, [pc, #8]	; (bd2d8 <siprintf+0xc>)
   bd2d0:	681b      	ldr	r3, [r3, #0]
   bd2d2:	691b      	ldr	r3, [r3, #16]
   bd2d4:	9301      	str	r3, [sp, #4]
   bd2d6:	bd08      	pop	{r3, pc}
   bd2d8:	0003021c 	.word	0x0003021c

000bd2dc <sscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   bd2dc:	b508      	push	{r3, lr}
   bd2de:	4b02      	ldr	r3, [pc, #8]	; (bd2e8 <sscanf+0xc>)
   bd2e0:	681b      	ldr	r3, [r3, #0]
   bd2e2:	695b      	ldr	r3, [r3, #20]
   bd2e4:	9301      	str	r3, [sp, #4]
   bd2e6:	bd08      	pop	{r3, pc}
   bd2e8:	0003021c 	.word	0x0003021c

000bd2ec <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   bd2ec:	b508      	push	{r3, lr}
   bd2ee:	4b02      	ldr	r3, [pc, #8]	; (bd2f8 <snprintf+0xc>)
   bd2f0:	681b      	ldr	r3, [r3, #0]
   bd2f2:	69db      	ldr	r3, [r3, #28]
   bd2f4:	9301      	str	r3, [sp, #4]
   bd2f6:	bd08      	pop	{r3, pc}
   bd2f8:	0003021c 	.word	0x0003021c

000bd2fc <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   bd2fc:	b508      	push	{r3, lr}
   bd2fe:	4b02      	ldr	r3, [pc, #8]	; (bd308 <vsnprintf+0xc>)
   bd300:	681b      	ldr	r3, [r3, #0]
   bd302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   bd304:	9301      	str	r3, [sp, #4]
   bd306:	bd08      	pop	{r3, pc}
   bd308:	0003021c 	.word	0x0003021c

000bd30c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   bd30c:	b508      	push	{r3, lr}
   bd30e:	4b02      	ldr	r3, [pc, #8]	; (bd318 <abort+0xc>)
   bd310:	681b      	ldr	r3, [r3, #0]
   bd312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   bd314:	9301      	str	r3, [sp, #4]
   bd316:	bd08      	pop	{r3, pc}
   bd318:	0003021c 	.word	0x0003021c

000bd31c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   bd31c:	b508      	push	{r3, lr}
   bd31e:	4b02      	ldr	r3, [pc, #8]	; (bd328 <_malloc_r+0xc>)
   bd320:	681b      	ldr	r3, [r3, #0]
   bd322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   bd324:	9301      	str	r3, [sp, #4]
   bd326:	bd08      	pop	{r3, pc}
   bd328:	0003021c 	.word	0x0003021c

000bd32c <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   bd32c:	b508      	push	{r3, lr}
   bd32e:	4b02      	ldr	r3, [pc, #8]	; (bd338 <__errno+0xc>)
   bd330:	681b      	ldr	r3, [r3, #0]
   bd332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   bd334:	9301      	str	r3, [sp, #4]
   bd336:	bd08      	pop	{r3, pc}
   bd338:	0003021c 	.word	0x0003021c

000bd33c <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   bd33c:	b508      	push	{r3, lr}
   bd33e:	4b02      	ldr	r3, [pc, #8]	; (bd348 <__assert_func+0xc>)
   bd340:	681b      	ldr	r3, [r3, #0]
   bd342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   bd344:	9301      	str	r3, [sp, #4]
   bd346:	bd08      	pop	{r3, pc}
   bd348:	0003021c 	.word	0x0003021c

000bd34c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   bd34c:	b508      	push	{r3, lr}
   bd34e:	4b02      	ldr	r3, [pc, #8]	; (bd358 <newlib_impure_ptr_callback+0xc>)
   bd350:	681b      	ldr	r3, [r3, #0]
   bd352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   bd354:	9301      	str	r3, [sp, #4]
   bd356:	bd08      	pop	{r3, pc}
   bd358:	0003021c 	.word	0x0003021c

000bd35c <strftime>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   bd35c:	b508      	push	{r3, lr}
   bd35e:	4b02      	ldr	r3, [pc, #8]	; (bd368 <strftime+0xc>)
   bd360:	681b      	ldr	r3, [r3, #0]
   bd362:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   bd364:	9301      	str	r3, [sp, #4]
   bd366:	bd08      	pop	{r3, pc}
   bd368:	0003021c 	.word	0x0003021c

000bd36c <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   bd36c:	b508      	push	{r3, lr}
   bd36e:	4b02      	ldr	r3, [pc, #8]	; (bd378 <localtime_r+0xc>)
   bd370:	681b      	ldr	r3, [r3, #0]
   bd372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   bd374:	9301      	str	r3, [sp, #4]
   bd376:	bd08      	pop	{r3, pc}
   bd378:	0003021c 	.word	0x0003021c

000bd37c <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   bd37c:	b508      	push	{r3, lr}
   bd37e:	4b02      	ldr	r3, [pc, #8]	; (bd388 <gmtime_r+0xc>)
   bd380:	681b      	ldr	r3, [r3, #0]
   bd382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   bd384:	9301      	str	r3, [sp, #4]
   bd386:	bd08      	pop	{r3, pc}
   bd388:	0003021c 	.word	0x0003021c

000bd38c <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   bd38c:	b508      	push	{r3, lr}
   bd38e:	4b02      	ldr	r3, [pc, #8]	; (bd398 <mktime+0xc>)
   bd390:	681b      	ldr	r3, [r3, #0]
   bd392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   bd394:	9301      	str	r3, [sp, #4]
   bd396:	bd08      	pop	{r3, pc}
   bd398:	0003021c 	.word	0x0003021c

000bd39c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   bd39c:	2100      	movs	r1, #0
   bd39e:	f7ff be5b 	b.w	bd058 <system_delay_ms>

000bd3a2 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   bd3a2:	b510      	push	{r4, lr}
      if (_M_empty())
   bd3a4:	6883      	ldr	r3, [r0, #8]
   bd3a6:	4604      	mov	r4, r0
   bd3a8:	b90b      	cbnz	r3, bd3ae <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   bd3aa:	f003 f9ad 	bl	c0708 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bd3ae:	68c3      	ldr	r3, [r0, #12]
   bd3b0:	4798      	blx	r3
      if (_M_manager)
   bd3b2:	68a3      	ldr	r3, [r4, #8]
   bd3b4:	b11b      	cbz	r3, bd3be <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   bd3b6:	2203      	movs	r2, #3
   bd3b8:	4621      	mov	r1, r4
   bd3ba:	4620      	mov	r0, r4
   bd3bc:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   bd3be:	4620      	mov	r0, r4
   bd3c0:	2110      	movs	r1, #16
}
   bd3c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   bd3c6:	f7f6 be6a 	b.w	b409e <_ZdlPvj>

000bd3ca <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   bd3ca:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   bd3cc:	6843      	ldr	r3, [r0, #4]
   bd3ce:	3b01      	subs	r3, #1
    {
   bd3d0:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   bd3d2:	6043      	str	r3, [r0, #4]
   bd3d4:	b963      	cbnz	r3, bd3f0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   bd3d6:	6803      	ldr	r3, [r0, #0]
   bd3d8:	689b      	ldr	r3, [r3, #8]
   bd3da:	4798      	blx	r3
          if (--_M_weak_count == 0)
   bd3dc:	68a3      	ldr	r3, [r4, #8]
   bd3de:	3b01      	subs	r3, #1
   bd3e0:	60a3      	str	r3, [r4, #8]
   bd3e2:	b92b      	cbnz	r3, bd3f0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   bd3e4:	6823      	ldr	r3, [r4, #0]
   bd3e6:	4620      	mov	r0, r4
   bd3e8:	68db      	ldr	r3, [r3, #12]
    }
   bd3ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   bd3ee:	4718      	bx	r3
    }
   bd3f0:	bd10      	pop	{r4, pc}

000bd3f2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   bd3f2:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   bd3f4:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   bd3f8:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   bd3fa:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   bd3fe:	42ae      	cmp	r6, r5
   bd400:	d004      	beq.n	bd40c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   bd402:	4628      	mov	r0, r5
   bd404:	f002 faa4 	bl	bf950 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   bd408:	3510      	adds	r5, #16
   bd40a:	e7f8      	b.n	bd3fe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   bd40c:	6820      	ldr	r0, [r4, #0]
   bd40e:	f7ff ff4d 	bl	bd2ac <free>
    AllocatorT::free(data_);
}
   bd412:	4620      	mov	r0, r4
   bd414:	bd70      	pop	{r4, r5, r6, pc}
	...

000bd418 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   bd418:	4802      	ldr	r0, [pc, #8]	; (bd424 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   bd41a:	2300      	movs	r3, #0
   bd41c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   bd41e:	f7ff bb51 	b.w	bcac4 <os_mutex_recursive_create>
   bd422:	bf00      	nop
   bd424:	2003e608 	.word	0x2003e608

000bd428 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   bd428:	2200      	movs	r2, #0
   bd42a:	6840      	ldr	r0, [r0, #4]
   bd42c:	4611      	mov	r1, r2
   bd42e:	f7ff beed 	b.w	bd20c <network_ready>

000bd432 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   bd432:	2200      	movs	r2, #0
   bd434:	6840      	ldr	r0, [r0, #4]
   bd436:	4611      	mov	r1, r2
   bd438:	f7ff bf08 	b.w	bd24c <network_listening>

000bd43c <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bd43c:	2200      	movs	r2, #0
   bd43e:	6840      	ldr	r0, [r0, #4]
   bd440:	4611      	mov	r1, r2
   bd442:	f7ff bf13 	b.w	bd26c <network_get_listen_timeout>

000bd446 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bd446:	6840      	ldr	r0, [r0, #4]
   bd448:	2200      	movs	r2, #0
   bd44a:	f7ff bf07 	b.w	bd25c <network_set_listen_timeout>

000bd44e <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bd44e:	6840      	ldr	r0, [r0, #4]
   bd450:	2200      	movs	r2, #0
   bd452:	f081 0101 	eor.w	r1, r1, #1
   bd456:	f7ff bef1 	b.w	bd23c <network_listen>

000bd45a <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bd45a:	2300      	movs	r3, #0
   bd45c:	6840      	ldr	r0, [r0, #4]
   bd45e:	461a      	mov	r2, r3
   bd460:	4619      	mov	r1, r3
   bd462:	f7ff bee3 	b.w	bd22c <network_off>

000bd466 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bd466:	2300      	movs	r3, #0
   bd468:	6840      	ldr	r0, [r0, #4]
   bd46a:	461a      	mov	r2, r3
   bd46c:	4619      	mov	r1, r3
   bd46e:	f7ff bed5 	b.w	bd21c <network_on>

000bd472 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bd472:	2200      	movs	r2, #0
   bd474:	6840      	ldr	r0, [r0, #4]
   bd476:	4611      	mov	r1, r2
   bd478:	f7ff beb8 	b.w	bd1ec <network_connecting>

000bd47c <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bd47c:	6840      	ldr	r0, [r0, #4]
   bd47e:	2200      	movs	r2, #0
   bd480:	2102      	movs	r1, #2
   bd482:	f7ff bebb 	b.w	bd1fc <network_disconnect>

000bd486 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bd486:	2300      	movs	r3, #0
   bd488:	6840      	ldr	r0, [r0, #4]
   bd48a:	461a      	mov	r2, r3
   bd48c:	f7ff bea6 	b.w	bd1dc <network_connect>

000bd490 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
   bd490:	b570      	push	{r4, r5, r6, lr}
/*
 * CellularSignal
 */
class CellularSignal : public particle::Signal, public Printable {
public:
    CellularSignal() {}
   bd492:	4b13      	ldr	r3, [pc, #76]	; (bd4e0 <_ZN5spark13CellularClass4RSSIEv+0x50>)
   bd494:	6003      	str	r3, [r0, #0]
   bd496:	2518      	movs	r5, #24
   bd498:	3330      	adds	r3, #48	; 0x30
   bd49a:	b086      	sub	sp, #24
   bd49c:	460e      	mov	r6, r1
   bd49e:	6043      	str	r3, [r0, #4]
   bd4a0:	462a      	mov	r2, r5
   bd4a2:	2100      	movs	r1, #0
   bd4a4:	4604      	mov	r4, r0
   bd4a6:	3008      	adds	r0, #8
   bd4a8:	f003 fed6 	bl	c1258 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   bd4ac:	2200      	movs	r2, #0
   bd4ae:	6870      	ldr	r0, [r6, #4]
   bd4b0:	4611      	mov	r1, r2
   bd4b2:	f7ff feab 	bl	bd20c <network_ready>
   bd4b6:	b178      	cbz	r0, bd4d8 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }

        cellular_signal_t sigext = {};
   bd4b8:	2100      	movs	r1, #0
   bd4ba:	462a      	mov	r2, r5
   bd4bc:	4668      	mov	r0, sp
   bd4be:	f003 fecb 	bl	c1258 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(nullptr, &sigext) != 0) {
   bd4c2:	4669      	mov	r1, sp
   bd4c4:	2000      	movs	r0, #0
        sigext.size = sizeof(sigext);
   bd4c6:	f8ad 5000 	strh.w	r5, [sp]
        if (cellular_signal(nullptr, &sigext) != 0) {
   bd4ca:	f7ff fabb 	bl	bca44 <cellular_signal>
   bd4ce:	b918      	cbnz	r0, bd4d8 <_ZN5spark13CellularClass4RSSIEv+0x48>
            return sig;
        }
        sig.fromHalCellularSignal(sigext);
   bd4d0:	4669      	mov	r1, sp
   bd4d2:	4620      	mov	r0, r4
   bd4d4:	f000 f8b8 	bl	bd648 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
   bd4d8:	4620      	mov	r0, r4
   bd4da:	b006      	add	sp, #24
   bd4dc:	bd70      	pop	{r4, r5, r6, pc}
   bd4de:	bf00      	nop
   bd4e0:	000c532c 	.word	0x000c532c

000bd4e4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   bd4e4:	4b08      	ldr	r3, [pc, #32]	; (bd508 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   bd4e6:	b510      	push	{r4, lr}
   bd4e8:	2428      	movs	r4, #40	; 0x28
   bd4ea:	4622      	mov	r2, r4
   bd4ec:	4618      	mov	r0, r3
   bd4ee:	2100      	movs	r1, #0
   bd4f0:	f003 feb2 	bl	c1258 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   bd4f4:	4b05      	ldr	r3, [pc, #20]	; (bd50c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   bd4f6:	8004      	strh	r4, [r0, #0]
        cid = -1;
   bd4f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bd4fc:	6042      	str	r2, [r0, #4]
   bd4fe:	2204      	movs	r2, #4
   bd500:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   bd502:	4a03      	ldr	r2, [pc, #12]	; (bd510 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   bd504:	601a      	str	r2, [r3, #0]
   bd506:	bd10      	pop	{r4, pc}
   bd508:	2003e614 	.word	0x2003e614
   bd50c:	2003e60c 	.word	0x2003e60c
   bd510:	000c52f0 	.word	0x000c52f0

000bd514 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
   bd514:	4770      	bx	lr

000bd516 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
   bd516:	7b00      	ldrb	r0, [r0, #12]
   bd518:	4770      	bx	lr

000bd51a <_ZNK14CellularSignal7isValidEv>:
}

bool CellularSignal::isValid() const
{
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   bd51a:	7b03      	ldrb	r3, [r0, #12]
   bd51c:	b14b      	cbz	r3, bd532 <_ZNK14CellularSignal7isValidEv+0x18>
    return (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE &&
   bd51e:	6903      	ldr	r3, [r0, #16]
   bd520:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   bd524:	d005      	beq.n	bd532 <_ZNK14CellularSignal7isValidEv+0x18>
            sig_.rssi != std::numeric_limits<int32_t>::min() &&
   bd526:	6980      	ldr	r0, [r0, #24]
   bd528:	f1b0 4000 	subs.w	r0, r0, #2147483648	; 0x80000000
   bd52c:	bf18      	it	ne
   bd52e:	2001      	movne	r0, #1
   bd530:	4770      	bx	lr
   bd532:	2000      	movs	r0, #0
            sig_.qual != std::numeric_limits<int32_t>::min());
}
   bd534:	4770      	bx	lr

000bd536 <_ZNK14CellularSignalcvbEv>:

CellularSignal::operator bool() const
{
    return isValid();
   bd536:	6803      	ldr	r3, [r0, #0]
   bd538:	6a1b      	ldr	r3, [r3, #32]
   bd53a:	4718      	bx	r3

000bd53c <_ZNK14CellularSignal7printToER5Print>:
{
   bd53c:	b570      	push	{r4, r5, r6, lr}
    n += p.print(this->getStrengthValue(), 2);
   bd53e:	6803      	ldr	r3, [r0, #0]
{
   bd540:	460d      	mov	r5, r1
    n += p.print(this->getStrengthValue(), 2);
   bd542:	691b      	ldr	r3, [r3, #16]
{
   bd544:	4606      	mov	r6, r0
    n += p.print(this->getStrengthValue(), 2);
   bd546:	4798      	blx	r3
   bd548:	2102      	movs	r1, #2
   bd54a:	4628      	mov	r0, r5
   bd54c:	f002 f8de 	bl	bf70c <_ZN5Print5printEfi>
    n += p.print(',');
   bd550:	212c      	movs	r1, #44	; 0x2c
    n += p.print(this->getStrengthValue(), 2);
   bd552:	4604      	mov	r4, r0
    n += p.print(',');
   bd554:	4628      	mov	r0, r5
   bd556:	f001 ffe3 	bl	bf520 <_ZN5Print5printEc>
    n += p.print(this->getQualityValue(), 2);
   bd55a:	6833      	ldr	r3, [r6, #0]
    n += p.print(',');
   bd55c:	4404      	add	r4, r0
    n += p.print(this->getQualityValue(), 2);
   bd55e:	699b      	ldr	r3, [r3, #24]
   bd560:	4630      	mov	r0, r6
   bd562:	4798      	blx	r3
   bd564:	2102      	movs	r1, #2
   bd566:	4628      	mov	r0, r5
   bd568:	f002 f8d0 	bl	bf70c <_ZN5Print5printEfi>
}
   bd56c:	4420      	add	r0, r4
   bd56e:	bd70      	pop	{r4, r5, r6, pc}

000bd570 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
   bd570:	f1a0 0004 	sub.w	r0, r0, #4
   bd574:	f7ff bfe2 	b.w	bd53c <_ZNK14CellularSignal7printToER5Print>

000bd578 <_ZN14CellularSignalD0Ev>:
    virtual ~CellularSignal() {};
   bd578:	b510      	push	{r4, lr}
   bd57a:	2120      	movs	r1, #32
   bd57c:	4604      	mov	r4, r0
   bd57e:	f7f6 fd8e 	bl	b409e <_ZdlPvj>
   bd582:	4620      	mov	r0, r4
   bd584:	bd10      	pop	{r4, pc}
	...

000bd588 <_ZNK14CellularSignal11getStrengthEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
   bd588:	7b03      	ldrb	r3, [r0, #12]
   bd58a:	b17b      	cbz	r3, bd5ac <_ZNK14CellularSignal11getStrengthEv+0x24>
   bd58c:	6943      	ldr	r3, [r0, #20]
   bd58e:	2b00      	cmp	r3, #0
   bd590:	db0c      	blt.n	bd5ac <_ZNK14CellularSignal11getStrengthEv+0x24>
        return (float)sig_.strength / 65535.0f * 100.0f;
   bd592:	ee07 3a90 	vmov	s15, r3
   bd596:	ed9f 7a07 	vldr	s14, [pc, #28]	; bd5b4 <_ZNK14CellularSignal11getStrengthEv+0x2c>
   bd59a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bd59e:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bd5a2:	eddf 7a05 	vldr	s15, [pc, #20]	; bd5b8 <_ZNK14CellularSignal11getStrengthEv+0x30>
   bd5a6:	ee20 0a27 	vmul.f32	s0, s0, s15
   bd5aa:	4770      	bx	lr
    return -1.0f;
   bd5ac:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   bd5b0:	4770      	bx	lr
   bd5b2:	bf00      	nop
   bd5b4:	477fff00 	.word	0x477fff00
   bd5b8:	42c80000 	.word	0x42c80000

000bd5bc <_ZNK14CellularSignal16getStrengthValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
   bd5bc:	7b03      	ldrb	r3, [r0, #12]
   bd5be:	b163      	cbz	r3, bd5da <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
   bd5c0:	6903      	ldr	r3, [r0, #16]
   bd5c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   bd5c6:	d008      	beq.n	bd5da <_ZNK14CellularSignal16getStrengthValueEv+0x1e>
        return (float)sig_.rssi / 100.0f;
   bd5c8:	ee07 3a90 	vmov	s15, r3
   bd5cc:	ed9f 7a04 	vldr	s14, [pc, #16]	; bd5e0 <_ZNK14CellularSignal16getStrengthValueEv+0x24>
   bd5d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bd5d4:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bd5d8:	4770      	bx	lr
    return 0.0f;
   bd5da:	ed9f 0a02 	vldr	s0, [pc, #8]	; bd5e4 <_ZNK14CellularSignal16getStrengthValueEv+0x28>
}
   bd5de:	4770      	bx	lr
   bd5e0:	42c80000 	.word	0x42c80000
   bd5e4:	00000000 	.word	0x00000000

000bd5e8 <_ZNK14CellularSignal10getQualityEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
   bd5e8:	7b03      	ldrb	r3, [r0, #12]
   bd5ea:	b17b      	cbz	r3, bd60c <_ZNK14CellularSignal10getQualityEv+0x24>
   bd5ec:	69c3      	ldr	r3, [r0, #28]
   bd5ee:	2b00      	cmp	r3, #0
   bd5f0:	db0c      	blt.n	bd60c <_ZNK14CellularSignal10getQualityEv+0x24>
        return (float)sig_.quality / 65535.0f * 100.0f;
   bd5f2:	ee07 3a90 	vmov	s15, r3
   bd5f6:	ed9f 7a07 	vldr	s14, [pc, #28]	; bd614 <_ZNK14CellularSignal10getQualityEv+0x2c>
   bd5fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bd5fe:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bd602:	eddf 7a05 	vldr	s15, [pc, #20]	; bd618 <_ZNK14CellularSignal10getQualityEv+0x30>
   bd606:	ee20 0a27 	vmul.f32	s0, s0, s15
   bd60a:	4770      	bx	lr
    return -1.0f;
   bd60c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   bd610:	4770      	bx	lr
   bd612:	bf00      	nop
   bd614:	477fff00 	.word	0x477fff00
   bd618:	42c80000 	.word	0x42c80000

000bd61c <_ZNK14CellularSignal15getQualityValueEv>:
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
   bd61c:	7b03      	ldrb	r3, [r0, #12]
   bd61e:	b163      	cbz	r3, bd63a <_ZNK14CellularSignal15getQualityValueEv+0x1e>
   bd620:	6983      	ldr	r3, [r0, #24]
   bd622:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   bd626:	d008      	beq.n	bd63a <_ZNK14CellularSignal15getQualityValueEv+0x1e>
        return (float)sig_.qual / 100.0f;
   bd628:	ee07 3a90 	vmov	s15, r3
   bd62c:	ed9f 7a04 	vldr	s14, [pc, #16]	; bd640 <_ZNK14CellularSignal15getQualityValueEv+0x24>
   bd630:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   bd634:	ee87 0a87 	vdiv.f32	s0, s15, s14
   bd638:	4770      	bx	lr
    return 0.0f;
   bd63a:	ed9f 0a02 	vldr	s0, [pc, #8]	; bd644 <_ZNK14CellularSignal15getQualityValueEv+0x28>
}
   bd63e:	4770      	bx	lr
   bd640:	42c80000 	.word	0x42c80000
   bd644:	00000000 	.word	0x00000000

000bd648 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
{
   bd648:	b530      	push	{r4, r5, lr}
    sig_ = sig;
   bd64a:	460d      	mov	r5, r1
   bd64c:	f100 0408 	add.w	r4, r0, #8
   bd650:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bd652:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bd654:	e895 0003 	ldmia.w	r5, {r0, r1}
   bd658:	e884 0003 	stmia.w	r4, {r0, r1}
}
   bd65c:	2001      	movs	r0, #1
   bd65e:	bd30      	pop	{r4, r5, pc}

000bd660 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bd660:	4770      	bx	lr

000bd662 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   bd662:	2000      	movs	r0, #0
   bd664:	4770      	bx	lr

000bd666 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bd666:	b510      	push	{r4, lr}
   bd668:	2110      	movs	r1, #16
   bd66a:	4604      	mov	r4, r0
   bd66c:	f7f6 fd17 	bl	b409e <_ZdlPvj>
   bd670:	4620      	mov	r0, r4
   bd672:	bd10      	pop	{r4, pc}

000bd674 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   bd674:	b508      	push	{r3, lr}
      { delete this; }
   bd676:	f7ff fff6 	bl	bd666 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   bd67a:	bd08      	pop	{r3, pc}

000bd67c <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   bd67c:	b530      	push	{r4, r5, lr}
        type_(type) {
   bd67e:	2200      	movs	r2, #0
   bd680:	f64f 749c 	movw	r4, #65436	; 0xff9c
   bd684:	6002      	str	r2, [r0, #0]
   bd686:	8084      	strh	r4, [r0, #4]
   bd688:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   bd68a:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   bd68c:	680c      	ldr	r4, [r1, #0]
   bd68e:	8085      	strh	r5, [r0, #4]
   bd690:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bd692:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   bd694:	bd30      	pop	{r4, r5, pc}

000bd696 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   bd696:	b510      	push	{r4, lr}
   bd698:	4604      	mov	r4, r0
    free((void*)msg_);
   bd69a:	6800      	ldr	r0, [r0, #0]
   bd69c:	f7ff fe06 	bl	bd2ac <free>
}
   bd6a0:	4620      	mov	r0, r4
   bd6a2:	bd10      	pop	{r4, pc}

000bd6a4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   bd6a4:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   bd6a6:	68c4      	ldr	r4, [r0, #12]
   bd6a8:	b1f4      	cbz	r4, bd6e8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   bd6aa:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   bd6ac:	2b02      	cmp	r3, #2
   bd6ae:	d103      	bne.n	bd6b8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   bd6b0:	f104 000c 	add.w	r0, r4, #12
   bd6b4:	f7ff ffef 	bl	bd696 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   bd6b8:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   bd6ba:	b135      	cbz	r5, bd6ca <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   bd6bc:	4628      	mov	r0, r5
   bd6be:	f7f7 ff3c 	bl	b553a <_ZNSt14_Function_baseD1Ev>
   bd6c2:	2110      	movs	r1, #16
   bd6c4:	4628      	mov	r0, r5
   bd6c6:	f7f6 fcea 	bl	b409e <_ZdlPvj>
   bd6ca:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   bd6cc:	b135      	cbz	r5, bd6dc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   bd6ce:	4628      	mov	r0, r5
   bd6d0:	f7f7 ff33 	bl	b553a <_ZNSt14_Function_baseD1Ev>
   bd6d4:	2110      	movs	r1, #16
   bd6d6:	4628      	mov	r0, r5
   bd6d8:	f7f6 fce1 	bl	b409e <_ZdlPvj>
   bd6dc:	4620      	mov	r0, r4
   bd6de:	2114      	movs	r1, #20
   bd6e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bd6e4:	f7f6 bcdb 	b.w	b409e <_ZdlPvj>
   bd6e8:	bd38      	pop	{r3, r4, r5, pc}

000bd6ea <_ZN10CloudClass22call_std_user_functionEPvPKcS0_>:
    String p(param);
    return (*fn)(p);
}

int CloudClass::call_std_user_function(void* data, const char* param, void* reserved)
{
   bd6ea:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   bd6ec:	4604      	mov	r4, r0
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
   bd6ee:	4668      	mov	r0, sp
   bd6f0:	f002 f979 	bl	bf9e6 <_ZN6StringC1EPK19__FlashStringHelper>
      if (_M_empty())
   bd6f4:	68a3      	ldr	r3, [r4, #8]
   bd6f6:	b90b      	cbnz	r3, bd6fc <_ZN10CloudClass22call_std_user_functionEPvPKcS0_+0x12>
	__throw_bad_function_call();
   bd6f8:	f003 f806 	bl	c0708 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bd6fc:	68e3      	ldr	r3, [r4, #12]
   bd6fe:	4669      	mov	r1, sp
   bd700:	4620      	mov	r0, r4
   bd702:	4798      	blx	r3
   bd704:	4604      	mov	r4, r0
   bd706:	4668      	mov	r0, sp
   bd708:	f002 f922 	bl	bf950 <_ZN6StringD1Ev>
}
   bd70c:	4620      	mov	r0, r4
   bd70e:	b004      	add	sp, #16
   bd710:	bd10      	pop	{r4, pc}

000bd712 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   bd712:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   bd714:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   bd716:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   bd71a:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   bd71c:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   bd71e:	461a      	mov	r2, r3
   bd720:	4669      	mov	r1, sp
   bd722:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   bd724:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   bd728:	f8ad 4000 	strh.w	r4, [sp]
   bd72c:	f7ff fcfe 	bl	bd12c <spark_function>
}
   bd730:	b004      	add	sp, #16
   bd732:	bd10      	pop	{r4, pc}

000bd734 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   bd734:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   bd736:	230c      	movs	r3, #12
   bd738:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   bd73c:	6803      	ldr	r3, [r0, #0]
   bd73e:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   bd742:	7a03      	ldrb	r3, [r0, #8]
   bd744:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   bd748:	6843      	ldr	r3, [r0, #4]
   bd74a:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   bd74c:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   bd74e:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   bd750:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   bd754:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   bd756:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   bd75a:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   bd75e:	f7ff fd35 	bl	bd1cc <spark_cloud_disconnect>
}
   bd762:	b005      	add	sp, #20
   bd764:	f85d fb04 	ldr.w	pc, [sp], #4

000bd768 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bd768:	680b      	ldr	r3, [r1, #0]
   bd76a:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   bd76c:	684b      	ldr	r3, [r1, #4]
   bd76e:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   bd770:	b113      	cbz	r3, bd778 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   bd772:	685a      	ldr	r2, [r3, #4]
   bd774:	3201      	adds	r2, #1
   bd776:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bd778:	4770      	bx	lr

000bd77a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   bd77a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bd77c:	4604      	mov	r4, r0
   bd77e:	4668      	mov	r0, sp
   bd780:	460d      	mov	r5, r1
   bd782:	f7ff fff1 	bl	bd768 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   bd786:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bd788:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bd78a:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   bd78c:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   bd78e:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bd790:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   bd792:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   bd794:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   bd796:	f7f6 ff83 	bl	b46a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   bd79a:	b135      	cbz	r5, bd7aa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   bd79c:	1d28      	adds	r0, r5, #4
   bd79e:	f7f6 ff7f 	bl	b46a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bd7a2:	2108      	movs	r1, #8
   bd7a4:	4628      	mov	r0, r5
   bd7a6:	f7f6 fc7a 	bl	b409e <_ZdlPvj>
        return p;
    }
   bd7aa:	4620      	mov	r0, r4
   bd7ac:	b003      	add	sp, #12
   bd7ae:	bd30      	pop	{r4, r5, pc}

000bd7b0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   bd7b0:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bd7b2:	b510      	push	{r4, lr}
      if (_M_empty())
   bd7b4:	b90a      	cbnz	r2, bd7ba <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   bd7b6:	f002 ffa7 	bl	c0708 <_ZSt25__throw_bad_function_callv>
    }
   bd7ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bd7be:	68c3      	ldr	r3, [r0, #12]
   bd7c0:	4718      	bx	r3

000bd7c2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bd7c2:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bd7c4:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   bd7c6:	f100 0110 	add.w	r1, r0, #16
   bd7ca:	f7ff fff1 	bl	bd7b0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   bd7ce:	bd08      	pop	{r3, pc}

000bd7d0 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   bd7d0:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bd7d2:	b510      	push	{r4, lr}
      if (_M_empty())
   bd7d4:	b90a      	cbnz	r2, bd7da <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   bd7d6:	f002 ff97 	bl	c0708 <_ZSt25__throw_bad_function_callv>
    }
   bd7da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bd7de:	68c3      	ldr	r3, [r0, #12]
   bd7e0:	4718      	bx	r3

000bd7e2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bd7e2:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bd7e4:	6800      	ldr	r0, [r0, #0]
   bd7e6:	f100 0110 	add.w	r1, r0, #16
   bd7ea:	f7ff fff1 	bl	bd7d0 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   bd7ee:	bd08      	pop	{r3, pc}

000bd7f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   bd7f0:	b538      	push	{r3, r4, r5, lr}
   bd7f2:	2300      	movs	r3, #0
   bd7f4:	4604      	mov	r4, r0
   bd7f6:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bd7f8:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   bd7fa:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bd7fc:	f7f6 fc4b 	bl	b4096 <_Znwj>
   bd800:	b128      	cbz	r0, bd80e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   bd802:	2301      	movs	r3, #1
   bd804:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   bd808:	4b02      	ldr	r3, [pc, #8]	; (bd814 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   bd80a:	6003      	str	r3, [r0, #0]
   bd80c:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bd80e:	6020      	str	r0, [r4, #0]
	}
   bd810:	4620      	mov	r0, r4
   bd812:	bd38      	pop	{r3, r4, r5, pc}
   bd814:	000c5368 	.word	0x000c5368

000bd818 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   bd818:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bd81a:	2300      	movs	r3, #0
   bd81c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bd81e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bd820:	4604      	mov	r4, r0
   bd822:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bd824:	b12b      	cbz	r3, bd832 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bd826:	2202      	movs	r2, #2
   bd828:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bd82a:	68eb      	ldr	r3, [r5, #12]
   bd82c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bd82e:	68ab      	ldr	r3, [r5, #8]
   bd830:	60a3      	str	r3, [r4, #8]
    }
   bd832:	4620      	mov	r0, r4
   bd834:	bd38      	pop	{r3, r4, r5, pc}
	...

000bd838 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   bd838:	b5f0      	push	{r4, r5, r6, r7, lr}
   bd83a:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   bd83c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   bd83e:	4668      	mov	r0, sp
   bd840:	f7ff ff1c 	bl	bd67c <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bd844:	f04f 0302 	mov.w	r3, #2
   bd848:	e8d4 2f4f 	ldrexb	r2, [r4]
   bd84c:	2a00      	cmp	r2, #0
   bd84e:	d103      	bne.n	bd858 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   bd850:	e8c4 3f41 	strexb	r1, r3, [r4]
   bd854:	2900      	cmp	r1, #0
   bd856:	d1f7      	bne.n	bd848 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   bd858:	d125      	bne.n	bd8a6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   bd85a:	f104 050c 	add.w	r5, r4, #12
   bd85e:	4669      	mov	r1, sp
   bd860:	4628      	mov	r0, r5
   bd862:	f7ff ff0b 	bl	bd67c <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   bd866:	f3bf 8f5b 	dmb	ish
   bd86a:	2301      	movs	r3, #1
   bd86c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bd86e:	2000      	movs	r0, #0
   bd870:	f104 0308 	add.w	r3, r4, #8
   bd874:	f3bf 8f5b 	dmb	ish
   bd878:	e853 6f00 	ldrex	r6, [r3]
   bd87c:	e843 0200 	strex	r2, r0, [r3]
   bd880:	2a00      	cmp	r2, #0
   bd882:	d1f9      	bne.n	bd878 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   bd884:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bd888:	b16e      	cbz	r6, bd8a6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   bd88a:	f7ff fbfd 	bl	bd088 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bd88e:	b178      	cbz	r0, bd8b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bd890:	4629      	mov	r1, r5
   bd892:	4630      	mov	r0, r6
   bd894:	f7ff ff8c 	bl	bd7b0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   bd898:	4630      	mov	r0, r6
   bd89a:	f7f7 fe4e 	bl	b553a <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bd89e:	2110      	movs	r1, #16
   bd8a0:	4630      	mov	r0, r6
   bd8a2:	f7f6 fbfc 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   bd8a6:	4668      	mov	r0, sp
   bd8a8:	f7ff fef5 	bl	bd696 <_ZN8particle5ErrorD1Ev>
    }
   bd8ac:	b009      	add	sp, #36	; 0x24
   bd8ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bd8b0:	4631      	mov	r1, r6
   bd8b2:	a802      	add	r0, sp, #8
   bd8b4:	f7ff ffb0 	bl	bd818 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bd8b8:	68e0      	ldr	r0, [r4, #12]
   bd8ba:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bd8be:	b108      	cbz	r0, bd8c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   bd8c0:	f003 fd78 	bl	c13b4 <strdup>
        type_(type) {
   bd8c4:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bd8c6:	2010      	movs	r0, #16
   bd8c8:	f8ad 501c 	strh.w	r5, [sp, #28]
   bd8cc:	f7f6 fbe3 	bl	b4096 <_Znwj>
   bd8d0:	4605      	mov	r5, r0
   bd8d2:	b1e8      	cbz	r0, bd910 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   bd8d4:	2700      	movs	r7, #0
   bd8d6:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bd8d8:	2018      	movs	r0, #24
   bd8da:	f7f6 fbdc 	bl	b4096 <_Znwj>
   bd8de:	4604      	mov	r4, r0
   bd8e0:	b188      	cbz	r0, bd906 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   bd8e2:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   bd8e4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bd8e6:	a802      	add	r0, sp, #8
   bd8e8:	f7fa fee3 	bl	b86b2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bd8ec:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   bd8ee:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bd8f0:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bd8f2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bd8f4:	9204      	str	r2, [sp, #16]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bd8f6:	a906      	add	r1, sp, #24
   bd8f8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bd8fa:	60e3      	str	r3, [r4, #12]
   bd8fc:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   bd900:	9205      	str	r2, [sp, #20]
   bd902:	f7ff febb 	bl	bd67c <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   bd906:	4b08      	ldr	r3, [pc, #32]	; (bd928 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   bd908:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bd90a:	4b08      	ldr	r3, [pc, #32]	; (bd92c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bd90c:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bd90e:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   bd910:	a806      	add	r0, sp, #24
   bd912:	f7ff fec0 	bl	bd696 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bd916:	a802      	add	r0, sp, #8
   bd918:	f7f7 fe0f 	bl	b553a <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bd91c:	2200      	movs	r2, #0
   bd91e:	4629      	mov	r1, r5
   bd920:	4803      	ldr	r0, [pc, #12]	; (bd930 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   bd922:	f7ff fbb9 	bl	bd098 <application_thread_invoke>
   bd926:	e7b7      	b.n	bd898 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   bd928:	000bd7c3 	.word	0x000bd7c3
   bd92c:	000bda45 	.word	0x000bda45
   bd930:	000bd3a3 	.word	0x000bd3a3

000bd934 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   bd934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd938:	b08b      	sub	sp, #44	; 0x2c
   bd93a:	4605      	mov	r5, r0
   bd93c:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   bd940:	460f      	mov	r7, r1
   bd942:	4690      	mov	r8, r2
   bd944:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   bd946:	f7ff fc09 	bl	bd15c <spark_cloud_flag_connected>
   bd94a:	ae07      	add	r6, sp, #28
    if (!connected()) {
   bd94c:	4683      	mov	fp, r0
   bd94e:	bb38      	cbnz	r0, bd9a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   bd950:	f64f 732e 	movw	r3, #65326	; 0xff2e
   bd954:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bd956:	a905      	add	r1, sp, #20
   bd958:	4630      	mov	r0, r6
   bd95a:	f8ad 3018 	strh.w	r3, [sp, #24]
   bd95e:	f7ff fe8d 	bl	bd67c <_ZN8particle5ErrorC1EOS0_>
   bd962:	2014      	movs	r0, #20
   bd964:	f7f6 fb97 	bl	b4096 <_Znwj>
   bd968:	4604      	mov	r4, r0
   bd96a:	b148      	cbz	r0, bd980 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   bd96c:	2302      	movs	r3, #2
   bd96e:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bd970:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bd972:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bd976:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   bd978:	4631      	mov	r1, r6
   bd97a:	300c      	adds	r0, #12
   bd97c:	f7ff fe7e 	bl	bd67c <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bd980:	4628      	mov	r0, r5
	: __shared_count(__p)
   bd982:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bd984:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   bd988:	f7ff ff32 	bl	bd7f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bd98c:	4630      	mov	r0, r6
   bd98e:	f7ff fe82 	bl	bd696 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   bd992:	a805      	add	r0, sp, #20
   bd994:	f7ff fe7f 	bl	bd696 <_ZN8particle5ErrorD1Ev>
}
   bd998:	4628      	mov	r0, r5
   bd99a:	b00b      	add	sp, #44	; 0x2c
   bd99c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   bd9a0:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   bd9a2:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   bd9a4:	2014      	movs	r0, #20
   bd9a6:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   bd9aa:	9307      	str	r3, [sp, #28]
   bd9ac:	f7f6 fb73 	bl	b4096 <_Znwj>
   bd9b0:	4601      	mov	r1, r0
   bd9b2:	b118      	cbz	r0, bd9bc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bd9b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bd9b8:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bd9ba:	7044      	strb	r4, [r0, #1]
   bd9bc:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bd9be:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   bd9c0:	f7ff ff16 	bl	bd7f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   bd9c4:	4b1e      	ldr	r3, [pc, #120]	; (bda40 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   bd9c6:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   bd9c8:	2008      	movs	r0, #8
   bd9ca:	f7f6 fb64 	bl	b4096 <_Znwj>
   bd9ce:	4604      	mov	r4, r0
   bd9d0:	b110      	cbz	r0, bd9d8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   bd9d2:	a903      	add	r1, sp, #12
   bd9d4:	f7ff fec8 	bl	bd768 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bd9d8:	9600      	str	r6, [sp, #0]
   bd9da:	fa5f f38a 	uxtb.w	r3, sl
   bd9de:	464a      	mov	r2, r9
   bd9e0:	4641      	mov	r1, r8
   bd9e2:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   bd9e4:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bd9e6:	f7ff fbc9 	bl	bd17c <spark_send_event>
   bd9ea:	b9b8      	cbnz	r0, bda1c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   bd9ec:	9b03      	ldr	r3, [sp, #12]
   bd9ee:	785b      	ldrb	r3, [r3, #1]
   bd9f0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   bd9f4:	b993      	cbnz	r3, bda1c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   bd9f6:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   bd9fa:	a905      	add	r1, sp, #20
   bd9fc:	a803      	add	r0, sp, #12
   bd9fe:	9205      	str	r2, [sp, #20]
   bda00:	f8ad 3018 	strh.w	r3, [sp, #24]
   bda04:	f7ff ff18 	bl	bd838 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bda08:	a805      	add	r0, sp, #20
   bda0a:	f7ff fe44 	bl	bd696 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   bda0e:	a805      	add	r0, sp, #20
   bda10:	9909      	ldr	r1, [sp, #36]	; 0x24
   bda12:	f7ff feb2 	bl	bd77a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   bda16:	a806      	add	r0, sp, #24
   bda18:	f7f6 fe42 	bl	b46a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bda1c:	a903      	add	r1, sp, #12
   bda1e:	a805      	add	r0, sp, #20
   bda20:	f7ff fea2 	bl	bd768 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bda24:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bda26:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bda28:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   bda2a:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   bda2c:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bda2e:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   bda30:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   bda32:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   bda34:	f7f6 fe34 	bl	b46a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bda38:	a804      	add	r0, sp, #16
   bda3a:	f7f6 fe31 	bl	b46a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   bda3e:	e7ab      	b.n	bd998 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   bda40:	000bdac1 	.word	0x000bdac1

000bda44 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   bda44:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bda46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bda48:	4605      	mov	r5, r0
	switch (__op)
   bda4a:	d103      	bne.n	bda54 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bda4c:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bda4e:	6003      	str	r3, [r0, #0]
      }
   bda50:	2000      	movs	r0, #0
   bda52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   bda54:	2a02      	cmp	r2, #2
   bda56:	d010      	beq.n	bda7a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   bda58:	2a03      	cmp	r2, #3
   bda5a:	d1f9      	bne.n	bda50 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bda5c:	6804      	ldr	r4, [r0, #0]
   bda5e:	2c00      	cmp	r4, #0
   bda60:	d0f6      	beq.n	bda50 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   bda62:	f104 0010 	add.w	r0, r4, #16
   bda66:	f7ff fe16 	bl	bd696 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bda6a:	4620      	mov	r0, r4
   bda6c:	f7f7 fd65 	bl	b553a <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bda70:	2118      	movs	r1, #24
   bda72:	4620      	mov	r0, r4
   bda74:	f7f6 fb13 	bl	b409e <_ZdlPvj>
   bda78:	e7ea      	b.n	bda50 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bda7a:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   bda7c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bda7e:	f7f6 fb0a 	bl	b4096 <_Znwj>
   bda82:	4604      	mov	r4, r0
   bda84:	b150      	cbz	r0, bda9c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
   bda86:	4631      	mov	r1, r6
   bda88:	f7ff fec6 	bl	bd818 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bda8c:	6930      	ldr	r0, [r6, #16]
   bda8e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bda92:	b108      	cbz	r0, bda98 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   bda94:	f003 fc8e 	bl	c13b4 <strdup>
        type_(type) {
   bda98:	6120      	str	r0, [r4, #16]
   bda9a:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   bda9c:	602c      	str	r4, [r5, #0]
	}
   bda9e:	e7d7      	b.n	bda50 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000bdaa0 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   bdaa0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bdaa2:	2300      	movs	r3, #0
   bdaa4:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bdaa6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bdaa8:	4604      	mov	r4, r0
   bdaaa:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bdaac:	b12b      	cbz	r3, bdaba <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bdaae:	2202      	movs	r2, #2
   bdab0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bdab2:	68eb      	ldr	r3, [r5, #12]
   bdab4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bdab6:	68ab      	ldr	r3, [r5, #8]
   bdab8:	60a3      	str	r3, [r4, #8]
    }
   bdaba:	4620      	mov	r0, r4
   bdabc:	bd38      	pop	{r3, r4, r5, pc}
	...

000bdac0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   bdac0:	b5f0      	push	{r4, r5, r6, r7, lr}
   bdac2:	b089      	sub	sp, #36	; 0x24
   bdac4:	4604      	mov	r4, r0
   bdac6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   bdac8:	a801      	add	r0, sp, #4
   bdaca:	4611      	mov	r1, r2
   bdacc:	f7ff fe55 	bl	bd77a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   bdad0:	b1a4      	cbz	r4, bdafc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   bdad2:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bdad4:	b11d      	cbz	r5, bdade <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   bdad6:	4628      	mov	r0, r5
   bdad8:	f003 fc6c 	bl	c13b4 <strdup>
   bdadc:	4605      	mov	r5, r0
   bdade:	a801      	add	r0, sp, #4
   bdae0:	a903      	add	r1, sp, #12
        type_(type) {
   bdae2:	9503      	str	r5, [sp, #12]
   bdae4:	f8ad 4010 	strh.w	r4, [sp, #16]
   bdae8:	f7ff fea6 	bl	bd838 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bdaec:	a803      	add	r0, sp, #12
   bdaee:	f7ff fdd2 	bl	bd696 <_ZN8particle5ErrorD1Ev>
   bdaf2:	a802      	add	r0, sp, #8
   bdaf4:	f7f6 fdd4 	bl	b46a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bdaf8:	b009      	add	sp, #36	; 0x24
   bdafa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   bdafc:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bdafe:	2301      	movs	r3, #1
   bdb00:	e8d5 2f4f 	ldrexb	r2, [r5]
   bdb04:	2a00      	cmp	r2, #0
   bdb06:	d103      	bne.n	bdb10 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   bdb08:	e8c5 3f41 	strexb	r1, r3, [r5]
   bdb0c:	2900      	cmp	r1, #0
   bdb0e:	d1f7      	bne.n	bdb00 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   bdb10:	d1ef      	bne.n	bdaf2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   bdb12:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   bdb14:	f3bf 8f5b 	dmb	ish
   bdb18:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bdb1a:	1d2b      	adds	r3, r5, #4
   bdb1c:	f3bf 8f5b 	dmb	ish
   bdb20:	e853 6f00 	ldrex	r6, [r3]
   bdb24:	e843 4200 	strex	r2, r4, [r3]
   bdb28:	2a00      	cmp	r2, #0
   bdb2a:	d1f9      	bne.n	bdb20 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   bdb2c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bdb30:	2e00      	cmp	r6, #0
   bdb32:	d0de      	beq.n	bdaf2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   bdb34:	4620      	mov	r0, r4
   bdb36:	f7ff faa7 	bl	bd088 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bdb3a:	4607      	mov	r7, r0
   bdb3c:	b160      	cbz	r0, bdb58 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bdb3e:	f105 010c 	add.w	r1, r5, #12
   bdb42:	4630      	mov	r0, r6
   bdb44:	f7ff fe44 	bl	bd7d0 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   bdb48:	4630      	mov	r0, r6
   bdb4a:	f7f7 fcf6 	bl	b553a <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bdb4e:	2110      	movs	r1, #16
   bdb50:	4630      	mov	r0, r6
   bdb52:	f7f6 faa4 	bl	b409e <_ZdlPvj>
   bdb56:	e7cc      	b.n	bdaf2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bdb58:	4631      	mov	r1, r6
   bdb5a:	a803      	add	r0, sp, #12
   bdb5c:	f7ff ffa0 	bl	bdaa0 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bdb60:	7b2b      	ldrb	r3, [r5, #12]
   bdb62:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bdb66:	2010      	movs	r0, #16
   bdb68:	f7f6 fa95 	bl	b4096 <_Znwj>
   bdb6c:	4605      	mov	r5, r0
   bdb6e:	b1d0      	cbz	r0, bdba6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   bdb70:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bdb72:	2014      	movs	r0, #20
   bdb74:	f7f6 fa8f 	bl	b4096 <_Znwj>
   bdb78:	4604      	mov	r4, r0
   bdb7a:	b178      	cbz	r0, bdb9c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   bdb7c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bdb7e:	4601      	mov	r1, r0
   bdb80:	a803      	add	r0, sp, #12
   bdb82:	f7fa fd96 	bl	b86b2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bdb86:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bdb88:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bdb8a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bdb8c:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   bdb8e:	9205      	str	r2, [sp, #20]
   bdb90:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bdb92:	60e3      	str	r3, [r4, #12]
   bdb94:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   bdb98:	9206      	str	r2, [sp, #24]
   bdb9a:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   bdb9c:	4b06      	ldr	r3, [pc, #24]	; (bdbb8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   bdb9e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bdba0:	4b06      	ldr	r3, [pc, #24]	; (bdbbc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bdba2:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bdba4:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   bdba6:	a803      	add	r0, sp, #12
   bdba8:	f7f7 fcc7 	bl	b553a <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bdbac:	2200      	movs	r2, #0
   bdbae:	4629      	mov	r1, r5
   bdbb0:	4803      	ldr	r0, [pc, #12]	; (bdbc0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   bdbb2:	f7ff fa71 	bl	bd098 <application_thread_invoke>
   bdbb6:	e7c7      	b.n	bdb48 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   bdbb8:	000bd7e3 	.word	0x000bd7e3
   bdbbc:	000bdbc5 	.word	0x000bdbc5
   bdbc0:	000bd3a3 	.word	0x000bd3a3

000bdbc4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   bdbc4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bdbc6:	b570      	push	{r4, r5, r6, lr}
   bdbc8:	4604      	mov	r4, r0
	switch (__op)
   bdbca:	d103      	bne.n	bdbd4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bdbcc:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bdbce:	6003      	str	r3, [r0, #0]
      }
   bdbd0:	2000      	movs	r0, #0
   bdbd2:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   bdbd4:	2a02      	cmp	r2, #2
   bdbd6:	d00c      	beq.n	bdbf2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   bdbd8:	2a03      	cmp	r2, #3
   bdbda:	d1f9      	bne.n	bdbd0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bdbdc:	6804      	ldr	r4, [r0, #0]
   bdbde:	2c00      	cmp	r4, #0
   bdbe0:	d0f6      	beq.n	bdbd0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   bdbe2:	4620      	mov	r0, r4
   bdbe4:	f7f7 fca9 	bl	b553a <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bdbe8:	2114      	movs	r1, #20
   bdbea:	4620      	mov	r0, r4
   bdbec:	f7f6 fa57 	bl	b409e <_ZdlPvj>
   bdbf0:	e7ee      	b.n	bdbd0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bdbf2:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   bdbf4:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bdbf6:	f7f6 fa4e 	bl	b4096 <_Znwj>
   bdbfa:	4605      	mov	r5, r0
   bdbfc:	b120      	cbz	r0, bdc08 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   bdbfe:	4631      	mov	r1, r6
   bdc00:	f7ff ff4e 	bl	bdaa0 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   bdc04:	7c33      	ldrb	r3, [r6, #16]
   bdc06:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   bdc08:	6025      	str	r5, [r4, #0]
	}
   bdc0a:	e7e1      	b.n	bdbd0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000bdc0c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   bdc0c:	2200      	movs	r2, #0
   bdc0e:	6840      	ldr	r0, [r0, #4]
   bdc10:	4611      	mov	r1, r2
   bdc12:	f7ff bb1b 	b.w	bd24c <network_listening>

000bdc16 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bdc16:	2200      	movs	r2, #0
   bdc18:	6840      	ldr	r0, [r0, #4]
   bdc1a:	4611      	mov	r1, r2
   bdc1c:	f7ff bb26 	b.w	bd26c <network_get_listen_timeout>

000bdc20 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bdc20:	6840      	ldr	r0, [r0, #4]
   bdc22:	2200      	movs	r2, #0
   bdc24:	f7ff bb1a 	b.w	bd25c <network_set_listen_timeout>

000bdc28 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bdc28:	6840      	ldr	r0, [r0, #4]
   bdc2a:	2200      	movs	r2, #0
   bdc2c:	f081 0101 	eor.w	r1, r1, #1
   bdc30:	f7ff bb04 	b.w	bd23c <network_listen>

000bdc34 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bdc34:	2300      	movs	r3, #0
   bdc36:	6840      	ldr	r0, [r0, #4]
   bdc38:	461a      	mov	r2, r3
   bdc3a:	4619      	mov	r1, r3
   bdc3c:	f7ff baf6 	b.w	bd22c <network_off>

000bdc40 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bdc40:	2300      	movs	r3, #0
   bdc42:	6840      	ldr	r0, [r0, #4]
   bdc44:	461a      	mov	r2, r3
   bdc46:	4619      	mov	r1, r3
   bdc48:	f7ff bae8 	b.w	bd21c <network_on>

000bdc4c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   bdc4c:	2200      	movs	r2, #0
   bdc4e:	6840      	ldr	r0, [r0, #4]
   bdc50:	4611      	mov	r1, r2
   bdc52:	f7ff badb 	b.w	bd20c <network_ready>

000bdc56 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bdc56:	2200      	movs	r2, #0
   bdc58:	6840      	ldr	r0, [r0, #4]
   bdc5a:	4611      	mov	r1, r2
   bdc5c:	f7ff bac6 	b.w	bd1ec <network_connecting>

000bdc60 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bdc60:	6840      	ldr	r0, [r0, #4]
   bdc62:	2200      	movs	r2, #0
   bdc64:	2102      	movs	r1, #2
   bdc66:	f7ff bac9 	b.w	bd1fc <network_disconnect>

000bdc6a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bdc6a:	2300      	movs	r3, #0
   bdc6c:	6840      	ldr	r0, [r0, #4]
   bdc6e:	461a      	mov	r2, r3
   bdc70:	f7ff bab4 	b.w	bd1dc <network_connect>

000bdc74 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   bdc74:	4b02      	ldr	r3, [pc, #8]	; (bdc80 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   bdc76:	2203      	movs	r2, #3
   bdc78:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   bdc7a:	4a02      	ldr	r2, [pc, #8]	; (bdc84 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   bdc7c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   bdc7e:	4770      	bx	lr
   bdc80:	2003e63c 	.word	0x2003e63c
   bdc84:	000c5384 	.word	0x000c5384

000bdc88 <_ZN9FuelGauge4lockEv>:
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
    return SYSTEM_ERROR_NONE;
}

bool FuelGauge::lock() {
    return i2c_.lock();
   bdc88:	6800      	ldr	r0, [r0, #0]
   bdc8a:	f000 b8f3 	b.w	bde74 <_ZN7TwoWire4lockEv>

000bdc8e <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
   bdc8e:	b510      	push	{r4, lr}
   bdc90:	4604      	mov	r4, r0
      lock_(_lock) {
   bdc92:	6001      	str	r1, [r0, #0]
   bdc94:	7102      	strb	r2, [r0, #4]
    if (lock_) {
   bdc96:	b10a      	cbz	r2, bdc9c <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
   bdc98:	f7ff fff6 	bl	bdc88 <_ZN9FuelGauge4lockEv>
}
   bdc9c:	4620      	mov	r0, r4
   bdc9e:	bd10      	pop	{r4, pc}

000bdca0 <_ZN9FuelGaugeC1Eb>:
FuelGauge::FuelGauge(bool _lock)
   bdca0:	b513      	push	{r0, r1, r4, lr}
   bdca2:	4604      	mov	r4, r0
   bdca4:	9101      	str	r1, [sp, #4]
            return &Wire1;
   bdca6:	f002 fcc1 	bl	c062c <_Z20__fetch_global_Wire1v>
        : FuelGauge(*fuelWireInstance(), _lock)
   bdcaa:	9a01      	ldr	r2, [sp, #4]
            return &Wire1;
   bdcac:	4601      	mov	r1, r0
        : FuelGauge(*fuelWireInstance(), _lock)
   bdcae:	4620      	mov	r0, r4
   bdcb0:	f7ff ffed 	bl	bdc8e <_ZN9FuelGaugeC1ER7TwoWireb>
}
   bdcb4:	4620      	mov	r0, r4
   bdcb6:	b002      	add	sp, #8
   bdcb8:	bd10      	pop	{r4, pc}

000bdcba <_ZN9FuelGauge6unlockEv>:
}

bool FuelGauge::unlock() {
    return i2c_.unlock();
   bdcba:	6800      	ldr	r0, [r0, #0]
   bdcbc:	f000 b8e3 	b.w	bde86 <_ZN7TwoWire6unlockEv>

000bdcc0 <_ZN9FuelGauge13writeRegisterEhhh>:
int FuelGauge::writeRegister(byte address, byte MSB, byte LSB) {
   bdcc0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   bdcc4:	4604      	mov	r4, r0
   bdcc6:	461d      	mov	r5, r3
   bdcc8:	460f      	mov	r7, r1
   bdcca:	4616      	mov	r6, r2
      { _M_device.lock(); }
   bdccc:	f7ff ffdc 	bl	bdc88 <_ZN9FuelGauge4lockEv>
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bdcd0:	2236      	movs	r2, #54	; 0x36
   bdcd2:	2300      	movs	r3, #0
   bdcd4:	e9cd 2300 	strd	r2, r3, [sp]
    i2c_.beginTransmission(config);
   bdcd8:	6820      	ldr	r0, [r4, #0]
    size_ = size;
    return *this;
  }

  WireTransmission& timeout(system_tick_t ms) {
    timeout_ = ms;
   bdcda:	f04f 0801 	mov.w	r8, #1
   bdcde:	230a      	movs	r3, #10
   bdce0:	4669      	mov	r1, sp
   bdce2:	e9cd 8302 	strd	r8, r3, [sp, #8]
   bdce6:	f000 f8a9 	bl	bde3c <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
    i2c_.write(address);
   bdcea:	6820      	ldr	r0, [r4, #0]
   bdcec:	6803      	ldr	r3, [r0, #0]
   bdcee:	4639      	mov	r1, r7
   bdcf0:	689b      	ldr	r3, [r3, #8]
   bdcf2:	4798      	blx	r3
    i2c_.write(MSB);
   bdcf4:	6820      	ldr	r0, [r4, #0]
   bdcf6:	6803      	ldr	r3, [r0, #0]
   bdcf8:	4631      	mov	r1, r6
   bdcfa:	689b      	ldr	r3, [r3, #8]
   bdcfc:	4798      	blx	r3
    i2c_.write(LSB);
   bdcfe:	6820      	ldr	r0, [r4, #0]
   bdd00:	6803      	ldr	r3, [r0, #0]
   bdd02:	4629      	mov	r1, r5
   bdd04:	689b      	ldr	r3, [r3, #8]
   bdd06:	4798      	blx	r3
    CHECK_TRUE(i2c_.endTransmission(true) == 0, SYSTEM_ERROR_TIMEOUT);
   bdd08:	4641      	mov	r1, r8
   bdd0a:	6820      	ldr	r0, [r4, #0]
   bdd0c:	f000 f8ae 	bl	bde6c <_ZN7TwoWire15endTransmissionEh>
   bdd10:	2800      	cmp	r0, #0
      { _M_device.unlock(); }
   bdd12:	4620      	mov	r0, r4
   bdd14:	bf0c      	ite	eq
   bdd16:	2500      	moveq	r5, #0
   bdd18:	f06f 059f 	mvnne.w	r5, #159	; 0x9f
   bdd1c:	f7ff ffcd 	bl	bdcba <_ZN9FuelGauge6unlockEv>
}
   bdd20:	4628      	mov	r0, r5
   bdd22:	b004      	add	sp, #16
   bdd24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bdd28 <_ZN9FuelGauge10quickStartEv>:
int FuelGauge::quickStart() {
   bdd28:	b508      	push	{r3, lr}
    CHECK(writeRegister(MODE_REGISTER, 0x40, 0x00));
   bdd2a:	2240      	movs	r2, #64	; 0x40
   bdd2c:	2300      	movs	r3, #0
   bdd2e:	2106      	movs	r1, #6
   bdd30:	f7ff ffc6 	bl	bdcc0 <_ZN9FuelGauge13writeRegisterEhhh>
}
   bdd34:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   bdd38:	bd08      	pop	{r3, pc}

000bdd3a <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   bdd3a:	4770      	bx	lr

000bdd3c <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   bdd3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bdd3e:	4606      	mov	r6, r0
   bdd40:	4615      	mov	r5, r2
   bdd42:	460c      	mov	r4, r1
   bdd44:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   bdd46:	42bc      	cmp	r4, r7
   bdd48:	d006      	beq.n	bdd58 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   bdd4a:	6833      	ldr	r3, [r6, #0]
   bdd4c:	f814 1b01 	ldrb.w	r1, [r4], #1
   bdd50:	689b      	ldr	r3, [r3, #8]
   bdd52:	4630      	mov	r0, r6
   bdd54:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   bdd56:	e7f6      	b.n	bdd46 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   bdd58:	4628      	mov	r0, r5
   bdd5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bdd5c <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   bdd5c:	7c00      	ldrb	r0, [r0, #16]
   bdd5e:	2200      	movs	r2, #0
   bdd60:	f7fe bf80 	b.w	bcc64 <hal_i2c_write>

000bdd64 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   bdd64:	7c00      	ldrb	r0, [r0, #16]
   bdd66:	2100      	movs	r1, #0
   bdd68:	f7fe bf84 	b.w	bcc74 <hal_i2c_available>

000bdd6c <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   bdd6c:	7c00      	ldrb	r0, [r0, #16]
   bdd6e:	2100      	movs	r1, #0
   bdd70:	f7fe bf88 	b.w	bcc84 <hal_i2c_read>

000bdd74 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   bdd74:	7c00      	ldrb	r0, [r0, #16]
   bdd76:	2100      	movs	r1, #0
   bdd78:	f7fe bf8c 	b.w	bcc94 <hal_i2c_peek>

000bdd7c <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   bdd7c:	7c00      	ldrb	r0, [r0, #16]
   bdd7e:	2100      	movs	r1, #0
   bdd80:	f7fe bf90 	b.w	bcca4 <hal_i2c_flush>

000bdd84 <_ZN7TwoWireD0Ev>:
   bdd84:	b510      	push	{r4, lr}
   bdd86:	2114      	movs	r1, #20
   bdd88:	4604      	mov	r4, r0
   bdd8a:	f7f6 f988 	bl	b409e <_ZdlPvj>
   bdd8e:	4620      	mov	r0, r4
   bdd90:	bd10      	pop	{r4, pc}
	...

000bdd94 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bdd94:	b538      	push	{r3, r4, r5, lr}
   bdd96:	4604      	mov	r4, r0
   bdd98:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   bdd9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bdd9e:	2200      	movs	r2, #0
   bdda0:	e9c4 2301 	strd	r2, r3, [r4, #4]
   bdda4:	4b09      	ldr	r3, [pc, #36]	; (bddcc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   bdda6:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bdda8:	4608      	mov	r0, r1
   bddaa:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   bddac:	4629      	mov	r1, r5
   bddae:	f7fe ff89 	bl	bccc4 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   bddb2:	30bf      	adds	r0, #191	; 0xbf
   bddb4:	d108      	bne.n	bddc8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   bddb6:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   bddb8:	07db      	lsls	r3, r3, #31
   bddba:	d505      	bpl.n	bddc8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   bddbc:	6868      	ldr	r0, [r5, #4]
   bddbe:	f7ff fa75 	bl	bd2ac <free>
    free(conf.tx_buffer);
   bddc2:	68e8      	ldr	r0, [r5, #12]
   bddc4:	f7ff fa72 	bl	bd2ac <free>
}
   bddc8:	4620      	mov	r0, r4
   bddca:	bd38      	pop	{r3, r4, r5, pc}
   bddcc:	000c53c0 	.word	0x000c53c0

000bddd0 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   bddd0:	2300      	movs	r3, #0
   bddd2:	7c00      	ldrb	r0, [r0, #16]
   bddd4:	461a      	mov	r2, r3
   bddd6:	4619      	mov	r1, r3
   bddd8:	f7fe bf2c 	b.w	bcc34 <hal_i2c_begin>

000bdddc <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   bdddc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   bddde:	2200      	movs	r2, #0
   bdde0:	2314      	movs	r3, #20
   bdde2:	e9cd 2201 	strd	r2, r2, [sp, #4]
   bdde6:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   bddea:	780b      	ldrb	r3, [r1, #0]
   bddec:	f88d 3008 	strb.w	r3, [sp, #8]
   bddf0:	684b      	ldr	r3, [r1, #4]
   bddf2:	9303      	str	r3, [sp, #12]
   bddf4:	68cb      	ldr	r3, [r1, #12]
   bddf6:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   bddf8:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   bddfa:	7a0b      	ldrb	r3, [r1, #8]
   bddfc:	9305      	str	r3, [sp, #20]
   bddfe:	a901      	add	r1, sp, #4
   bde00:	f7fe ff78 	bl	bccf4 <hal_i2c_request_ex>
}
   bde04:	b007      	add	sp, #28
   bde06:	f85d fb04 	ldr.w	pc, [sp], #4

000bde0a <_ZN7TwoWire11requestFromEhjh>:
{
   bde0a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   bde0c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bde0e:	f88d 1000 	strb.w	r1, [sp]
   bde12:	f04f 0164 	mov.w	r1, #100	; 0x64
   bde16:	9103      	str	r1, [sp, #12]
   bde18:	bf18      	it	ne
   bde1a:	2301      	movne	r3, #1
   bde1c:	4669      	mov	r1, sp
    size_ = size;
   bde1e:	9201      	str	r2, [sp, #4]
   bde20:	f88d 3008 	strb.w	r3, [sp, #8]
   bde24:	f7ff ffda 	bl	bdddc <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   bde28:	b005      	add	sp, #20
   bde2a:	f85d fb04 	ldr.w	pc, [sp], #4

000bde2e <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   bde2e:	7c00      	ldrb	r0, [r0, #16]
   bde30:	2200      	movs	r2, #0
   bde32:	f7fe bf07 	b.w	bcc44 <hal_i2c_begin_transmission>

000bde36 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   bde36:	b2c9      	uxtb	r1, r1
   bde38:	f7ff bff9 	b.w	bde2e <_ZN7TwoWire17beginTransmissionEh>

000bde3c <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   bde3c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   bde3e:	2300      	movs	r3, #0
   bde40:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   bde44:	684a      	ldr	r2, [r1, #4]
   bde46:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   bde48:	2314      	movs	r3, #20
    };
   bde4a:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   bde4c:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   bde50:	780b      	ldrb	r3, [r1, #0]
    };
   bde52:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   bde54:	7a0a      	ldrb	r2, [r1, #8]
   bde56:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   bde58:	7c00      	ldrb	r0, [r0, #16]
    };
   bde5a:	f88d 3008 	strb.w	r3, [sp, #8]
   bde5e:	aa01      	add	r2, sp, #4
   bde60:	4619      	mov	r1, r3
   bde62:	f7fe feef 	bl	bcc44 <hal_i2c_begin_transmission>
}
   bde66:	b007      	add	sp, #28
   bde68:	f85d fb04 	ldr.w	pc, [sp], #4

000bde6c <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   bde6c:	7c00      	ldrb	r0, [r0, #16]
   bde6e:	2200      	movs	r2, #0
   bde70:	f7fe bef0 	b.w	bcc54 <hal_i2c_end_transmission>

000bde74 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   bde74:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   bde76:	2100      	movs	r1, #0
   bde78:	7c00      	ldrb	r0, [r0, #16]
   bde7a:	f7fe ff2b 	bl	bccd4 <hal_i2c_lock>
}
   bde7e:	fab0 f080 	clz	r0, r0
   bde82:	0940      	lsrs	r0, r0, #5
   bde84:	bd08      	pop	{r3, pc}

000bde86 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   bde86:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   bde88:	2100      	movs	r1, #0
   bde8a:	7c00      	ldrb	r0, [r0, #16]
   bde8c:	f7fe ff2a 	bl	bcce4 <hal_i2c_unlock>
}
   bde90:	fab0 f080 	clz	r0, r0
   bde94:	0940      	lsrs	r0, r0, #5
   bde96:	bd08      	pop	{r3, pc}

000bde98 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   bde98:	4700      	bx	r0
	...

000bde9c <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   bde9c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   bdea0:	2400      	movs	r4, #0
{
   bdea2:	461d      	mov	r5, r3
   bdea4:	460f      	mov	r7, r1
   bdea6:	4690      	mov	r8, r2
   bdea8:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   bdeaa:	f7fe feb3 	bl	bcc14 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   bdeae:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   bdeb0:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   bdeb4:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   bdeb8:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   bdebc:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   bdec0:	bfa2      	ittt	ge
   bdec2:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   bdec6:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   bdeca:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   bdecc:	4907      	ldr	r1, [pc, #28]	; (bdeec <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   bdece:	9400      	str	r4, [sp, #0]
   bded0:	4643      	mov	r3, r8
   bded2:	463a      	mov	r2, r7
   bded4:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   bded6:	bfa8      	it	ge
   bded8:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   bdedc:	f7fe fe92 	bl	bcc04 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   bdee0:	fab0 f080 	clz	r0, r0
   bdee4:	0940      	lsrs	r0, r0, #5
   bdee6:	b004      	add	sp, #16
   bdee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bdeec:	000bde99 	.word	0x000bde99

000bdef0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   bdef0:	4770      	bx	lr

000bdef2 <_ZN9IPAddressD0Ev>:
   bdef2:	b510      	push	{r4, lr}
   bdef4:	2118      	movs	r1, #24
   bdef6:	4604      	mov	r4, r0
   bdef8:	f7f6 f8d1 	bl	b409e <_ZdlPvj>
   bdefc:	4620      	mov	r0, r4
   bdefe:	bd10      	pop	{r4, pc}

000bdf00 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   bdf00:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   bdf02:	7d03      	ldrb	r3, [r0, #20]
   bdf04:	2b06      	cmp	r3, #6
{
   bdf06:	b08d      	sub	sp, #52	; 0x34
   bdf08:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bdf0a:	f100 0704 	add.w	r7, r0, #4
   bdf0e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   bdf12:	d012      	beq.n	bdf3a <_ZNK9IPAddress7printToER5Print+0x3a>
   bdf14:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   bdf18:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   bdf1c:	220a      	movs	r2, #10
   bdf1e:	4630      	mov	r0, r6
   bdf20:	f001 fb0d 	bl	bf53e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   bdf24:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   bdf26:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   bdf28:	d019      	beq.n	bdf5e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   bdf2a:	2c00      	cmp	r4, #0
   bdf2c:	d0f4      	beq.n	bdf18 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   bdf2e:	212e      	movs	r1, #46	; 0x2e
   bdf30:	4630      	mov	r0, r6
   bdf32:	f001 faf5 	bl	bf520 <_ZN5Print5printEc>
   bdf36:	4404      	add	r4, r0
   bdf38:	e7ee      	b.n	bdf18 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bdf3a:	232f      	movs	r3, #47	; 0x2f
   bdf3c:	466a      	mov	r2, sp
   bdf3e:	4639      	mov	r1, r7
   bdf40:	200a      	movs	r0, #10
		buf[0] = 0;
   bdf42:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bdf46:	f7fe fedd 	bl	bcd04 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   bdf4a:	4668      	mov	r0, sp
   bdf4c:	f003 fa4f 	bl	c13ee <strlen>
   bdf50:	6833      	ldr	r3, [r6, #0]
   bdf52:	4602      	mov	r2, r0
   bdf54:	68db      	ldr	r3, [r3, #12]
   bdf56:	4669      	mov	r1, sp
   bdf58:	4630      	mov	r0, r6
   bdf5a:	4798      	blx	r3
   bdf5c:	4604      	mov	r4, r0
    }
    return n;
}
   bdf5e:	4620      	mov	r0, r4
   bdf60:	b00d      	add	sp, #52	; 0x34
   bdf62:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bdf64 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   bdf64:	b510      	push	{r4, lr}
   bdf66:	4b05      	ldr	r3, [pc, #20]	; (bdf7c <_ZN9IPAddressC1Ev+0x18>)
   bdf68:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   bdf6a:	2211      	movs	r2, #17
   bdf6c:	f840 3b04 	str.w	r3, [r0], #4
   bdf70:	2100      	movs	r1, #0
   bdf72:	f003 f971 	bl	c1258 <memset>
}
   bdf76:	4620      	mov	r0, r4
   bdf78:	bd10      	pop	{r4, pc}
   bdf7a:	bf00      	nop
   bdf7c:	000c53e8 	.word	0x000c53e8

000bdf80 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   bdf80:	4603      	mov	r3, r0
   bdf82:	4a07      	ldr	r2, [pc, #28]	; (bdfa0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   bdf84:	b510      	push	{r4, lr}
   bdf86:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   bdf8a:	f101 0210 	add.w	r2, r1, #16
   bdf8e:	f851 4b04 	ldr.w	r4, [r1], #4
   bdf92:	f843 4b04 	str.w	r4, [r3], #4
   bdf96:	4291      	cmp	r1, r2
   bdf98:	d1f9      	bne.n	bdf8e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   bdf9a:	780a      	ldrb	r2, [r1, #0]
   bdf9c:	701a      	strb	r2, [r3, #0]
}
   bdf9e:	bd10      	pop	{r4, pc}
   bdfa0:	000c53e8 	.word	0x000c53e8

000bdfa4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   bdfa4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   bdfa6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   bdfaa:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   bdfae:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   bdfb2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   bdfb6:	2304      	movs	r3, #4
   bdfb8:	6041      	str	r1, [r0, #4]
   bdfba:	7503      	strb	r3, [r0, #20]
}
   bdfbc:	bd10      	pop	{r4, pc}
	...

000bdfc0 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   bdfc0:	b507      	push	{r0, r1, r2, lr}
   bdfc2:	4b06      	ldr	r3, [pc, #24]	; (bdfdc <_ZN9IPAddressC1EPKh+0x1c>)
   bdfc4:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   bdfc6:	78cb      	ldrb	r3, [r1, #3]
   bdfc8:	9300      	str	r3, [sp, #0]
   bdfca:	788b      	ldrb	r3, [r1, #2]
   bdfcc:	784a      	ldrb	r2, [r1, #1]
   bdfce:	7809      	ldrb	r1, [r1, #0]
   bdfd0:	f7ff ffe8 	bl	bdfa4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   bdfd4:	b003      	add	sp, #12
   bdfd6:	f85d fb04 	ldr.w	pc, [sp], #4
   bdfda:	bf00      	nop
   bdfdc:	000c53e8 	.word	0x000c53e8

000bdfe0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   bdfe0:	f100 0310 	add.w	r3, r0, #16
   bdfe4:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   bdfe6:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   bdfea:	2901      	cmp	r1, #1
   bdfec:	4618      	mov	r0, r3
   bdfee:	d108      	bne.n	be002 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   bdff0:	f853 1c04 	ldr.w	r1, [r3, #-4]
   bdff4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   bdff8:	3a01      	subs	r2, #1
   bdffa:	f103 0310 	add.w	r3, r3, #16
   bdffe:	d1f2      	bne.n	bdfe6 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   be000:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   be002:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   be004:	bf04      	itt	eq
   be006:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   be00a:	1852      	addeq	r2, r2, r1
   be00c:	e7f4      	b.n	bdff8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000be00e <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   be00e:	b40e      	push	{r1, r2, r3}
   be010:	b5f0      	push	{r4, r5, r6, r7, lr}
   be012:	b088      	sub	sp, #32
   be014:	af00      	add	r7, sp, #0
   be016:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   be01a:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   be01c:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   be020:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   be022:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   be024:	462b      	mov	r3, r5
   be026:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   be028:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   be02a:	f7ff f967 	bl	bd2fc <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   be02e:	280f      	cmp	r0, #15
   be030:	687a      	ldr	r2, [r7, #4]
   be032:	d91a      	bls.n	be06a <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   be034:	f100 0308 	add.w	r3, r0, #8
   be038:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   be03c:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   be03e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   be042:	1c41      	adds	r1, r0, #1
   be044:	462b      	mov	r3, r5
   be046:	4668      	mov	r0, sp
        va_start(args, fmt);
   be048:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   be04a:	f7ff f957 	bl	bd2fc <vsnprintf>
        if (n > 0) {
   be04e:	1e02      	subs	r2, r0, #0
   be050:	dd04      	ble.n	be05c <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   be052:	6823      	ldr	r3, [r4, #0]
   be054:	4669      	mov	r1, sp
   be056:	689b      	ldr	r3, [r3, #8]
   be058:	4620      	mov	r0, r4
   be05a:	4798      	blx	r3
   be05c:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   be05e:	3720      	adds	r7, #32
   be060:	46bd      	mov	sp, r7
   be062:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   be066:	b003      	add	sp, #12
   be068:	4770      	bx	lr
    } else if (n > 0) {
   be06a:	2800      	cmp	r0, #0
   be06c:	d0f7      	beq.n	be05e <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   be06e:	6823      	ldr	r3, [r4, #0]
   be070:	4602      	mov	r2, r0
   be072:	689b      	ldr	r3, [r3, #8]
   be074:	f107 0110 	add.w	r1, r7, #16
   be078:	4620      	mov	r0, r4
   be07a:	4798      	blx	r3
}
   be07c:	e7ef      	b.n	be05e <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000be07e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   be07e:	b538      	push	{r3, r4, r5, lr}
   be080:	680b      	ldr	r3, [r1, #0]
   be082:	6003      	str	r3, [r0, #0]
   be084:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   be086:	6843      	ldr	r3, [r0, #4]
   be088:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   be08a:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   be08c:	d008      	beq.n	be0a0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   be08e:	b115      	cbz	r5, be096 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   be090:	686b      	ldr	r3, [r5, #4]
   be092:	3301      	adds	r3, #1
   be094:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   be096:	6860      	ldr	r0, [r4, #4]
   be098:	b108      	cbz	r0, be09e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   be09a:	f7ff f996 	bl	bd3ca <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   be09e:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   be0a0:	bd38      	pop	{r3, r4, r5, pc}

000be0a2 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   be0a2:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   be0a4:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   be0a6:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   be0aa:	689b      	ldr	r3, [r3, #8]
   be0ac:	2201      	movs	r2, #1
   be0ae:	f10d 0107 	add.w	r1, sp, #7
   be0b2:	4798      	blx	r3
}
   be0b4:	b003      	add	sp, #12
   be0b6:	f85d fb04 	ldr.w	pc, [sp], #4

000be0ba <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   be0ba:	460b      	mov	r3, r1
   be0bc:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   be0be:	2200      	movs	r2, #0
   be0c0:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   be0c2:	e9c0 2200 	strd	r2, r2, [r0]
   be0c6:	4604      	mov	r4, r0
        t_ = t;
   be0c8:	6083      	str	r3, [r0, #8]
    if (t) {
   be0ca:	b90b      	cbnz	r3, be0d0 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   be0cc:	4620      	mov	r0, r4
   be0ce:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   be0d0:	f7ff ffd5 	bl	be07e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   be0d4:	e7fa      	b.n	be0cc <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000be0d6 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   be0d6:	6883      	ldr	r3, [r0, #8]
   be0d8:	b1eb      	cbz	r3, be116 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   be0da:	781a      	ldrb	r2, [r3, #0]
   be0dc:	2a03      	cmp	r2, #3
   be0de:	d81a      	bhi.n	be116 <_ZNK5spark9JSONValue4typeEv+0x40>
   be0e0:	e8df f002 	tbb	[pc, r2]
   be0e4:	1b021704 	.word	0x1b021704
   be0e8:	2005      	movs	r0, #5
   be0ea:	4770      	bx	lr
        const char c = d_->json[t_->start];
   be0ec:	6802      	ldr	r2, [r0, #0]
   be0ee:	685b      	ldr	r3, [r3, #4]
   be0f0:	6852      	ldr	r2, [r2, #4]
   be0f2:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   be0f4:	282d      	cmp	r0, #45	; 0x2d
   be0f6:	d012      	beq.n	be11e <_ZNK5spark9JSONValue4typeEv+0x48>
   be0f8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   be0fc:	2b09      	cmp	r3, #9
   be0fe:	d90e      	bls.n	be11e <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   be100:	2874      	cmp	r0, #116	; 0x74
   be102:	d00e      	beq.n	be122 <_ZNK5spark9JSONValue4typeEv+0x4c>
   be104:	2866      	cmp	r0, #102	; 0x66
   be106:	d00c      	beq.n	be122 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   be108:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   be10c:	4258      	negs	r0, r3
   be10e:	4158      	adcs	r0, r3
   be110:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   be112:	2006      	movs	r0, #6
   be114:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   be116:	2000      	movs	r0, #0
   be118:	4770      	bx	lr
        return JSON_TYPE_STRING;
   be11a:	2004      	movs	r0, #4
   be11c:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   be11e:	2003      	movs	r0, #3
   be120:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   be122:	2002      	movs	r0, #2
}
   be124:	4770      	bx	lr

000be126 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   be126:	b510      	push	{r4, lr}
   be128:	4604      	mov	r4, r0
    switch (type()) {
   be12a:	f7ff ffd4 	bl	be0d6 <_ZNK5spark9JSONValue4typeEv>
   be12e:	2802      	cmp	r0, #2
   be130:	d00e      	beq.n	be150 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   be132:	1ec3      	subs	r3, r0, #3
   be134:	b2db      	uxtb	r3, r3
   be136:	2b01      	cmp	r3, #1
   be138:	d814      	bhi.n	be164 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   be13a:	6822      	ldr	r2, [r4, #0]
   be13c:	68a3      	ldr	r3, [r4, #8]
   be13e:	6850      	ldr	r0, [r2, #4]
   be140:	685b      	ldr	r3, [r3, #4]
}
   be142:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   be146:	220a      	movs	r2, #10
   be148:	2100      	movs	r1, #0
   be14a:	4418      	add	r0, r3
   be14c:	f004 b8c0 	b.w	c22d0 <strtol>
        const char* const s = d_->json + t_->start;
   be150:	6822      	ldr	r2, [r4, #0]
   be152:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   be154:	6852      	ldr	r2, [r2, #4]
   be156:	685b      	ldr	r3, [r3, #4]
   be158:	5cd0      	ldrb	r0, [r2, r3]
   be15a:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   be15e:	4258      	negs	r0, r3
   be160:	4158      	adcs	r0, r3
}
   be162:	bd10      	pop	{r4, pc}
    switch (type()) {
   be164:	2000      	movs	r0, #0
   be166:	e7fc      	b.n	be162 <_ZNK5spark9JSONValue5toIntEv+0x3c>

000be168 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   be168:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   be16a:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   be16c:	e9c0 3300 	strd	r3, r3, [r0]
   be170:	4604      	mov	r4, r0
        n_(0) {
   be172:	480e      	ldr	r0, [pc, #56]	; (be1ac <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   be174:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   be178:	b1a9      	cbz	r1, be1a6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   be17a:	780b      	ldrb	r3, [r1, #0]
   be17c:	2b03      	cmp	r3, #3
   be17e:	d006      	beq.n	be18e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   be180:	b98b      	cbnz	r3, be1a6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   be182:	6813      	ldr	r3, [r2, #0]
   be184:	6858      	ldr	r0, [r3, #4]
   be186:	684b      	ldr	r3, [r1, #4]
   be188:	5cc3      	ldrb	r3, [r0, r3]
   be18a:	2b6e      	cmp	r3, #110	; 0x6e
   be18c:	d007      	beq.n	be19e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   be18e:	6813      	ldr	r3, [r2, #0]
   be190:	684d      	ldr	r5, [r1, #4]
   be192:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   be194:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   be196:	4428      	add	r0, r5
            n_ = t->end - t->start;
   be198:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   be19a:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   be19c:	60e3      	str	r3, [r4, #12]
   be19e:	4611      	mov	r1, r2
   be1a0:	4620      	mov	r0, r4
   be1a2:	f7ff ff6c 	bl	be07e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   be1a6:	4620      	mov	r0, r4
   be1a8:	bd38      	pop	{r3, r4, r5, pc}
   be1aa:	bf00      	nop
   be1ac:	000c5454 	.word	0x000c5454

000be1b0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   be1b0:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   be1b2:	2500      	movs	r5, #0
   be1b4:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   be1b6:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   be1ba:	e9c0 5502 	strd	r5, r5, [r0, #8]
   be1be:	e9c0 5504 	strd	r5, r5, [r0, #16]
   be1c2:	4604      	mov	r4, r0
   be1c4:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   be1c6:	b14b      	cbz	r3, be1dc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   be1c8:	781a      	ldrb	r2, [r3, #0]
   be1ca:	2a01      	cmp	r2, #1
   be1cc:	d106      	bne.n	be1dc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   be1ce:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   be1d2:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   be1d4:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   be1d6:	6143      	str	r3, [r0, #20]
   be1d8:	f7ff ff51 	bl	be07e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   be1dc:	4620      	mov	r0, r4
   be1de:	bd38      	pop	{r3, r4, r5, pc}

000be1e0 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   be1e0:	b510      	push	{r4, lr}
    if (!n_) {
   be1e2:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   be1e4:	4604      	mov	r4, r0
    if (!n_) {
   be1e6:	b163      	cbz	r3, be202 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   be1e8:	6880      	ldr	r0, [r0, #8]
   be1ea:	60e0      	str	r0, [r4, #12]
    --n_;
   be1ec:	3b01      	subs	r3, #1
    ++t_;
   be1ee:	3010      	adds	r0, #16
   be1f0:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   be1f2:	6120      	str	r0, [r4, #16]
    --n_;
   be1f4:	6163      	str	r3, [r4, #20]
    if (n_) {
   be1f6:	b113      	cbz	r3, be1fe <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   be1f8:	f7ff fef2 	bl	bdfe0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   be1fc:	60a0      	str	r0, [r4, #8]
    return true;
   be1fe:	2001      	movs	r0, #1
   be200:	e000      	b.n	be204 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   be202:	4618      	mov	r0, r3
}
   be204:	bd10      	pop	{r4, pc}

000be206 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   be206:	b510      	push	{r4, lr}
    write('}');
   be208:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   be20a:	4604      	mov	r4, r0
    write('}');
   be20c:	f7ff ff49 	bl	be0a2 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   be210:	2301      	movs	r3, #1
   be212:	7123      	strb	r3, [r4, #4]
}
   be214:	4620      	mov	r0, r4
   be216:	bd10      	pop	{r4, pc}

000be218 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   be218:	b508      	push	{r3, lr}
    switch (state_) {
   be21a:	7903      	ldrb	r3, [r0, #4]
   be21c:	2b01      	cmp	r3, #1
   be21e:	d002      	beq.n	be226 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   be220:	2b02      	cmp	r3, #2
   be222:	d004      	beq.n	be22e <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   be224:	bd08      	pop	{r3, pc}
        write(',');
   be226:	212c      	movs	r1, #44	; 0x2c
        write(':');
   be228:	f7ff ff3b 	bl	be0a2 <_ZN5spark10JSONWriter5writeEc>
}
   be22c:	e7fa      	b.n	be224 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   be22e:	213a      	movs	r1, #58	; 0x3a
   be230:	e7fa      	b.n	be228 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000be232 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   be232:	b510      	push	{r4, lr}
   be234:	4604      	mov	r4, r0
    writeSeparator();
   be236:	f7ff ffef 	bl	be218 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   be23a:	4620      	mov	r0, r4
   be23c:	217b      	movs	r1, #123	; 0x7b
   be23e:	f7ff ff30 	bl	be0a2 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   be242:	2300      	movs	r3, #0
   be244:	7123      	strb	r3, [r4, #4]
}
   be246:	4620      	mov	r0, r4
   be248:	bd10      	pop	{r4, pc}
	...

000be24c <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   be24c:	b513      	push	{r0, r1, r4, lr}
   be24e:	4604      	mov	r4, r0
   be250:	9101      	str	r1, [sp, #4]
    writeSeparator();
   be252:	f7ff ffe1 	bl	be218 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   be256:	6823      	ldr	r3, [r4, #0]
   be258:	9a01      	ldr	r2, [sp, #4]
   be25a:	68db      	ldr	r3, [r3, #12]
   be25c:	4903      	ldr	r1, [pc, #12]	; (be26c <_ZN5spark10JSONWriter5valueEi+0x20>)
   be25e:	4620      	mov	r0, r4
   be260:	4798      	blx	r3
    state_ = NEXT;
   be262:	2301      	movs	r3, #1
}
   be264:	4620      	mov	r0, r4
    state_ = NEXT;
   be266:	7123      	strb	r3, [r4, #4]
}
   be268:	b002      	add	sp, #8
   be26a:	bd10      	pop	{r4, pc}
   be26c:	000c3bbf 	.word	0x000c3bbf

000be270 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   be270:	b513      	push	{r0, r1, r4, lr}
   be272:	4604      	mov	r4, r0
   be274:	9101      	str	r1, [sp, #4]
    writeSeparator();
   be276:	f7ff ffcf 	bl	be218 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   be27a:	6823      	ldr	r3, [r4, #0]
   be27c:	9a01      	ldr	r2, [sp, #4]
   be27e:	68db      	ldr	r3, [r3, #12]
   be280:	4903      	ldr	r1, [pc, #12]	; (be290 <_ZN5spark10JSONWriter5valueEj+0x20>)
   be282:	4620      	mov	r0, r4
   be284:	4798      	blx	r3
    state_ = NEXT;
   be286:	2301      	movs	r3, #1
}
   be288:	4620      	mov	r0, r4
    state_ = NEXT;
   be28a:	7123      	strb	r3, [r4, #4]
}
   be28c:	b002      	add	sp, #8
   be28e:	bd10      	pop	{r4, pc}
   be290:	000c4cb6 	.word	0x000c4cb6

000be294 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   be294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   be298:	460d      	mov	r5, r1
    write('"');
   be29a:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   be29c:	4690      	mov	r8, r2
   be29e:	4604      	mov	r4, r0
    write('"');
   be2a0:	f7ff feff 	bl	be0a2 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   be2a4:	f8df 90a4 	ldr.w	r9, [pc, #164]	; be34c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   be2a8:	44a8      	add	r8, r5
    const char *s = str;
   be2aa:	462f      	mov	r7, r5
    while (s != end) {
   be2ac:	4547      	cmp	r7, r8
   be2ae:	46ba      	mov	sl, r7
   be2b0:	d03d      	beq.n	be32e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   be2b2:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   be2b6:	2e22      	cmp	r6, #34	; 0x22
   be2b8:	d006      	beq.n	be2c8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   be2ba:	2e5c      	cmp	r6, #92	; 0x5c
   be2bc:	d004      	beq.n	be2c8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   be2be:	4630      	mov	r0, r6
   be2c0:	f002 ff9a 	bl	c11f8 <isprint>
   be2c4:	2800      	cmp	r0, #0
   be2c6:	d1f1      	bne.n	be2ac <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   be2c8:	6823      	ldr	r3, [r4, #0]
   be2ca:	ebaa 0205 	sub.w	r2, sl, r5
   be2ce:	689b      	ldr	r3, [r3, #8]
   be2d0:	4629      	mov	r1, r5
   be2d2:	4620      	mov	r0, r4
   be2d4:	4798      	blx	r3
            write('\\');
   be2d6:	215c      	movs	r1, #92	; 0x5c
   be2d8:	4620      	mov	r0, r4
   be2da:	f7ff fee2 	bl	be0a2 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   be2de:	2e0d      	cmp	r6, #13
   be2e0:	d80a      	bhi.n	be2f8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   be2e2:	2e07      	cmp	r6, #7
   be2e4:	d91c      	bls.n	be320 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   be2e6:	f1a6 0308 	sub.w	r3, r6, #8
   be2ea:	2b05      	cmp	r3, #5
   be2ec:	d818      	bhi.n	be320 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   be2ee:	e8df f003 	tbb	[pc, r3]
   be2f2:	0f0d      	.short	0x0f0d
   be2f4:	15131711 	.word	0x15131711
   be2f8:	2e22      	cmp	r6, #34	; 0x22
   be2fa:	d001      	beq.n	be300 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   be2fc:	2e5c      	cmp	r6, #92	; 0x5c
   be2fe:	d10f      	bne.n	be320 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   be300:	4631      	mov	r1, r6
                write('b');
   be302:	4620      	mov	r0, r4
   be304:	f7ff fecd 	bl	be0a2 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   be308:	463d      	mov	r5, r7
    while (s != end) {
   be30a:	e7cf      	b.n	be2ac <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   be30c:	2162      	movs	r1, #98	; 0x62
   be30e:	e7f8      	b.n	be302 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   be310:	2174      	movs	r1, #116	; 0x74
   be312:	e7f6      	b.n	be302 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   be314:	216e      	movs	r1, #110	; 0x6e
   be316:	e7f4      	b.n	be302 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   be318:	2166      	movs	r1, #102	; 0x66
   be31a:	e7f2      	b.n	be302 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   be31c:	2172      	movs	r1, #114	; 0x72
   be31e:	e7f0      	b.n	be302 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   be320:	6823      	ldr	r3, [r4, #0]
   be322:	4632      	mov	r2, r6
   be324:	68db      	ldr	r3, [r3, #12]
   be326:	4649      	mov	r1, r9
   be328:	4620      	mov	r0, r4
   be32a:	4798      	blx	r3
                break;
   be32c:	e7ec      	b.n	be308 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   be32e:	42bd      	cmp	r5, r7
   be330:	d005      	beq.n	be33e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   be332:	6823      	ldr	r3, [r4, #0]
   be334:	1b7a      	subs	r2, r7, r5
   be336:	689b      	ldr	r3, [r3, #8]
   be338:	4629      	mov	r1, r5
   be33a:	4620      	mov	r0, r4
   be33c:	4798      	blx	r3
    }
    write('"');
   be33e:	2122      	movs	r1, #34	; 0x22
   be340:	4620      	mov	r0, r4
   be342:	f7ff feae 	bl	be0a2 <_ZN5spark10JSONWriter5writeEc>
}
   be346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   be34a:	bf00      	nop
   be34c:	000c53f4 	.word	0x000c53f4

000be350 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   be350:	b513      	push	{r0, r1, r4, lr}
   be352:	4604      	mov	r4, r0
   be354:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   be358:	f7ff ff5e 	bl	be218 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   be35c:	4620      	mov	r0, r4
   be35e:	e9dd 2100 	ldrd	r2, r1, [sp]
   be362:	f7ff ff97 	bl	be294 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   be366:	2302      	movs	r3, #2
}
   be368:	4620      	mov	r0, r4
    state_ = VALUE;
   be36a:	7123      	strb	r3, [r4, #4]
}
   be36c:	b002      	add	sp, #8
   be36e:	bd10      	pop	{r4, pc}

000be370 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   be370:	b513      	push	{r0, r1, r4, lr}
   be372:	4604      	mov	r4, r0
   be374:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   be378:	f7ff ff4e 	bl	be218 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   be37c:	4620      	mov	r0, r4
   be37e:	e9dd 2100 	ldrd	r2, r1, [sp]
   be382:	f7ff ff87 	bl	be294 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   be386:	2301      	movs	r3, #1
}
   be388:	4620      	mov	r0, r4
    state_ = NEXT;
   be38a:	7123      	strb	r3, [r4, #4]
}
   be38c:	b002      	add	sp, #8
   be38e:	bd10      	pop	{r4, pc}

000be390 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   be390:	6880      	ldr	r0, [r0, #8]
   be392:	6803      	ldr	r3, [r0, #0]
   be394:	68db      	ldr	r3, [r3, #12]
   be396:	4718      	bx	r3

000be398 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   be398:	4770      	bx	lr

000be39a <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   be39a:	4608      	mov	r0, r1
   be39c:	b111      	cbz	r1, be3a4 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   be39e:	680b      	ldr	r3, [r1, #0]
   be3a0:	685b      	ldr	r3, [r3, #4]
   be3a2:	4718      	bx	r3
}
   be3a4:	4770      	bx	lr

000be3a6 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   be3a6:	4770      	bx	lr

000be3a8 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   be3a8:	4770      	bx	lr

000be3aa <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   be3aa:	4770      	bx	lr

000be3ac <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   be3ac:	4770      	bx	lr

000be3ae <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   be3ae:	b538      	push	{r3, r4, r5, lr}
   be3b0:	4604      	mov	r4, r0
   be3b2:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   be3b4:	6800      	ldr	r0, [r0, #0]
   be3b6:	212e      	movs	r1, #46	; 0x2e
   be3b8:	f002 ffdf 	bl	c137a <strchrnul>
    size = s - category;
   be3bc:	6823      	ldr	r3, [r4, #0]
   be3be:	1ac3      	subs	r3, r0, r3
   be3c0:	602b      	str	r3, [r5, #0]
    if (size) {
   be3c2:	b123      	cbz	r3, be3ce <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   be3c4:	7803      	ldrb	r3, [r0, #0]
   be3c6:	b103      	cbz	r3, be3ca <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   be3c8:	3001      	adds	r0, #1
   be3ca:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   be3cc:	6020      	str	r0, [r4, #0]
}
   be3ce:	4618      	mov	r0, r3
   be3d0:	bd38      	pop	{r3, r4, r5, pc}

000be3d2 <_ZN5spark16JSONStreamWriterD0Ev>:
   be3d2:	b510      	push	{r4, lr}
   be3d4:	210c      	movs	r1, #12
   be3d6:	4604      	mov	r4, r0
   be3d8:	f7f5 fe61 	bl	b409e <_ZdlPvj>
   be3dc:	4620      	mov	r0, r4
   be3de:	bd10      	pop	{r4, pc}

000be3e0 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   be3e0:	b510      	push	{r4, lr}
   be3e2:	2104      	movs	r1, #4
   be3e4:	4604      	mov	r4, r0
   be3e6:	f7f5 fe5a 	bl	b409e <_ZdlPvj>
   be3ea:	4620      	mov	r0, r4
   be3ec:	bd10      	pop	{r4, pc}

000be3ee <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   be3ee:	b510      	push	{r4, lr}
   be3f0:	2104      	movs	r1, #4
   be3f2:	4604      	mov	r4, r0
   be3f4:	f7f5 fe53 	bl	b409e <_ZdlPvj>
   be3f8:	4620      	mov	r0, r4
   be3fa:	bd10      	pop	{r4, pc}

000be3fc <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   be3fc:	f7fe bb72 	b.w	bcae4 <os_mutex_recursive_lock>

000be400 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   be400:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   be402:	f002 ffc4 	bl	c138e <strcmp>
}
   be406:	fab0 f080 	clz	r0, r0
   be40a:	0940      	lsrs	r0, r0, #5
   be40c:	bd08      	pop	{r3, pc}

000be40e <__tcf_1>:
   be40e:	4770      	bx	lr

000be410 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   be410:	b510      	push	{r4, lr}
   be412:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   be414:	f001 ff44 	bl	c02a0 <_Z16_fetch_usbserialv>
   be418:	4284      	cmp	r4, r0
   be41a:	d010      	beq.n	be43e <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   be41c:	f002 f946 	bl	c06ac <_Z22__fetch_global_Serial1v>
   be420:	4284      	cmp	r4, r0
   be422:	d105      	bne.n	be430 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   be424:	f002 f942 	bl	c06ac <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   be428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   be42c:	f001 bed1 	b.w	c01d2 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   be430:	b12c      	cbz	r4, be43e <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   be432:	6823      	ldr	r3, [r4, #0]
   be434:	4620      	mov	r0, r4
   be436:	685b      	ldr	r3, [r3, #4]
}
   be438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   be43c:	4718      	bx	r3
   be43e:	bd10      	pop	{r4, pc}

000be440 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   be440:	b513      	push	{r0, r1, r4, lr}
   be442:	4604      	mov	r4, r0
    return value(val, strlen(val));
   be444:	4608      	mov	r0, r1
   be446:	9101      	str	r1, [sp, #4]
   be448:	f002 ffd1 	bl	c13ee <strlen>
   be44c:	9901      	ldr	r1, [sp, #4]
   be44e:	4602      	mov	r2, r0
   be450:	4620      	mov	r0, r4
}
   be452:	b002      	add	sp, #8
   be454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   be458:	f7ff bf8a 	b.w	be370 <_ZN5spark10JSONWriter5valueEPKcj>

000be45c <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   be45c:	b513      	push	{r0, r1, r4, lr}
   be45e:	4604      	mov	r4, r0
    write(str, strlen(str));
   be460:	4608      	mov	r0, r1
   be462:	9101      	str	r1, [sp, #4]
   be464:	f002 ffc3 	bl	c13ee <strlen>
   be468:	6823      	ldr	r3, [r4, #0]
   be46a:	9901      	ldr	r1, [sp, #4]
   be46c:	68db      	ldr	r3, [r3, #12]
   be46e:	4602      	mov	r2, r0
   be470:	4620      	mov	r0, r4
}
   be472:	b002      	add	sp, #8
   be474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   be478:	4718      	bx	r3

000be47a <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   be47a:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   be47c:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   be47e:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   be482:	68db      	ldr	r3, [r3, #12]
   be484:	2201      	movs	r2, #1
   be486:	f10d 0107 	add.w	r1, sp, #7
   be48a:	4798      	blx	r3
}
   be48c:	b003      	add	sp, #12
   be48e:	f85d fb04 	ldr.w	pc, [sp], #4

000be492 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   be492:	b40e      	push	{r1, r2, r3}
   be494:	b503      	push	{r0, r1, lr}
   be496:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   be498:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   be49a:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   be49e:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   be4a0:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   be4a2:	f001 f942 	bl	bf72a <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   be4a6:	b002      	add	sp, #8
   be4a8:	f85d eb04 	ldr.w	lr, [sp], #4
   be4ac:	b003      	add	sp, #12
   be4ae:	4770      	bx	lr

000be4b0 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   be4b0:	680a      	ldr	r2, [r1, #0]
   be4b2:	6002      	str	r2, [r0, #0]
   be4b4:	684a      	ldr	r2, [r1, #4]
   be4b6:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   be4b8:	2200      	movs	r2, #0
   be4ba:	e9c0 2202 	strd	r2, r2, [r0, #8]
   be4be:	b510      	push	{r4, lr}
   be4c0:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   be4c2:	688c      	ldr	r4, [r1, #8]
   be4c4:	6084      	str	r4, [r0, #8]
   be4c6:	68cc      	ldr	r4, [r1, #12]
   be4c8:	60c4      	str	r4, [r0, #12]
   be4ca:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   be4cc:	608a      	str	r2, [r1, #8]
   be4ce:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   be4d0:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   be4d2:	610a      	str	r2, [r1, #16]
   be4d4:	bd10      	pop	{r4, pc}
	...

000be4d8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   be4d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   be4dc:	e9d0 8400 	ldrd	r8, r4, [r0]
   be4e0:	f04f 0a14 	mov.w	sl, #20
   be4e4:	9300      	str	r3, [sp, #0]
   be4e6:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   be4ea:	4b18      	ldr	r3, [pc, #96]	; (be54c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   be4ec:	10a4      	asrs	r4, r4, #2
   be4ee:	4617      	mov	r7, r2
   be4f0:	435c      	muls	r4, r3
   be4f2:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   be4f4:	2c00      	cmp	r4, #0
   be4f6:	dd21      	ble.n	be53c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   be4f8:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   be4fa:	fb0a f006 	mul.w	r0, sl, r6
   be4fe:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   be502:	463a      	mov	r2, r7
   be504:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   be508:	5828      	ldr	r0, [r5, r0]
   be50a:	9101      	str	r1, [sp, #4]
   be50c:	455f      	cmp	r7, fp
   be50e:	bf28      	it	cs
   be510:	465a      	movcs	r2, fp
   be512:	f002 ff74 	bl	c13fe <strncmp>
                if (cmp == 0) {
   be516:	2800      	cmp	r0, #0
   be518:	9901      	ldr	r1, [sp, #4]
   be51a:	f04f 0301 	mov.w	r3, #1
   be51e:	d10b      	bne.n	be538 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   be520:	455f      	cmp	r7, fp
   be522:	d103      	bne.n	be52c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   be524:	9a00      	ldr	r2, [sp, #0]
   be526:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   be528:	4634      	mov	r4, r6
   be52a:	e7e3      	b.n	be4f4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   be52c:	d9fc      	bls.n	be528 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   be52e:	1ba6      	subs	r6, r4, r6
	      ++__first;
   be530:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   be534:	3e01      	subs	r6, #1
   be536:	e7f7      	b.n	be528 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   be538:	dbf9      	blt.n	be52e <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   be53a:	e7f5      	b.n	be528 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   be53c:	eba5 0508 	sub.w	r5, r5, r8
}
   be540:	4802      	ldr	r0, [pc, #8]	; (be54c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   be542:	10ad      	asrs	r5, r5, #2
   be544:	4368      	muls	r0, r5
   be546:	b003      	add	sp, #12
   be548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   be54c:	cccccccd 	.word	0xcccccccd

000be550 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   be550:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   be552:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   be554:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   be556:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   be558:	b303      	cbz	r3, be59c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   be55a:	b1f9      	cbz	r1, be59c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   be55c:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   be55e:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   be562:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   be564:	a903      	add	r1, sp, #12
   be566:	a801      	add	r0, sp, #4
   be568:	f7ff ff21 	bl	be3ae <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   be56c:	4601      	mov	r1, r0
   be56e:	b1a8      	cbz	r0, be59c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   be570:	f10d 030b 	add.w	r3, sp, #11
   be574:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   be576:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   be57a:	4620      	mov	r0, r4
   be57c:	f7ff ffac 	bl	be4d8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   be580:	f89d 300b 	ldrb.w	r3, [sp, #11]
   be584:	b153      	cbz	r3, be59c <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   be586:	6823      	ldr	r3, [r4, #0]
   be588:	2414      	movs	r4, #20
   be58a:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   be58e:	3408      	adds	r4, #8
            if (node.level >= 0) {
   be590:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   be594:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   be596:	bfa8      	it	ge
   be598:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   be59a:	e7e3      	b.n	be564 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   be59c:	4628      	mov	r0, r5
   be59e:	b004      	add	sp, #16
   be5a0:	bd70      	pop	{r4, r5, r6, pc}
	...

000be5a4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   be5a4:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   be5a6:	4c09      	ldr	r4, [pc, #36]	; (be5cc <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   be5a8:	7823      	ldrb	r3, [r4, #0]
   be5aa:	f3bf 8f5b 	dmb	ish
   be5ae:	07db      	lsls	r3, r3, #31
   be5b0:	d409      	bmi.n	be5c6 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   be5b2:	4620      	mov	r0, r4
   be5b4:	f7f5 fd82 	bl	b40bc <__cxa_guard_acquire>
   be5b8:	b128      	cbz	r0, be5c6 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   be5ba:	4620      	mov	r0, r4
   be5bc:	f7f5 fd83 	bl	b40c6 <__cxa_guard_release>
   be5c0:	4803      	ldr	r0, [pc, #12]	; (be5d0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   be5c2:	f002 fdf5 	bl	c11b0 <atexit>
}
   be5c6:	4803      	ldr	r0, [pc, #12]	; (be5d4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   be5c8:	bd10      	pop	{r4, pc}
   be5ca:	bf00      	nop
   be5cc:	2003e648 	.word	0x2003e648
   be5d0:	000be3a7 	.word	0x000be3a7
   be5d4:	2003d680 	.word	0x2003d680

000be5d8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   be5d8:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   be5da:	4c09      	ldr	r4, [pc, #36]	; (be600 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   be5dc:	7823      	ldrb	r3, [r4, #0]
   be5de:	f3bf 8f5b 	dmb	ish
   be5e2:	07db      	lsls	r3, r3, #31
   be5e4:	d409      	bmi.n	be5fa <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   be5e6:	4620      	mov	r0, r4
   be5e8:	f7f5 fd68 	bl	b40bc <__cxa_guard_acquire>
   be5ec:	b128      	cbz	r0, be5fa <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   be5ee:	4620      	mov	r0, r4
   be5f0:	f7f5 fd69 	bl	b40c6 <__cxa_guard_release>
   be5f4:	4803      	ldr	r0, [pc, #12]	; (be604 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   be5f6:	f002 fddb 	bl	c11b0 <atexit>
    return &factory;
}
   be5fa:	4803      	ldr	r0, [pc, #12]	; (be608 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   be5fc:	bd10      	pop	{r4, pc}
   be5fe:	bf00      	nop
   be600:	2003e64c 	.word	0x2003e64c
   be604:	000be40f 	.word	0x000be40f
   be608:	2003d684 	.word	0x2003d684

000be60c <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   be60c:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   be60e:	2500      	movs	r5, #0
   be610:	4604      	mov	r4, r0
   be612:	e9c0 5500 	strd	r5, r5, [r0]
   be616:	e9c0 5504 	strd	r5, r5, [r0, #16]
   be61a:	6085      	str	r5, [r0, #8]
   be61c:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   be61e:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   be622:	f7fe fa4f 	bl	bcac4 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   be626:	f7ff ffbd 	bl	be5a4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   be62a:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   be62c:	f7ff ffd4 	bl	be5d8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   be630:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   be632:	6220      	str	r0, [r4, #32]
}
   be634:	4620      	mov	r0, r4
   be636:	bd38      	pop	{r3, r4, r5, pc}

000be638 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   be638:	b510      	push	{r4, lr}
    static LogManager mgr;
   be63a:	4c0a      	ldr	r4, [pc, #40]	; (be664 <_ZN5spark10LogManager8instanceEv+0x2c>)
   be63c:	7823      	ldrb	r3, [r4, #0]
   be63e:	f3bf 8f5b 	dmb	ish
   be642:	07db      	lsls	r3, r3, #31
   be644:	d40c      	bmi.n	be660 <_ZN5spark10LogManager8instanceEv+0x28>
   be646:	4620      	mov	r0, r4
   be648:	f7f5 fd38 	bl	b40bc <__cxa_guard_acquire>
   be64c:	b140      	cbz	r0, be660 <_ZN5spark10LogManager8instanceEv+0x28>
   be64e:	4806      	ldr	r0, [pc, #24]	; (be668 <_ZN5spark10LogManager8instanceEv+0x30>)
   be650:	f7ff ffdc 	bl	be60c <_ZN5spark10LogManagerC1Ev>
   be654:	4620      	mov	r0, r4
   be656:	f7f5 fd36 	bl	b40c6 <__cxa_guard_release>
   be65a:	4804      	ldr	r0, [pc, #16]	; (be66c <_ZN5spark10LogManager8instanceEv+0x34>)
   be65c:	f002 fda8 	bl	c11b0 <atexit>
    return &mgr;
}
   be660:	4801      	ldr	r0, [pc, #4]	; (be668 <_ZN5spark10LogManager8instanceEv+0x30>)
   be662:	bd10      	pop	{r4, pc}
   be664:	2003e644 	.word	0x2003e644
   be668:	2003e654 	.word	0x2003e654
   be66c:	000beb25 	.word	0x000beb25

000be670 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   be670:	4a02      	ldr	r2, [pc, #8]	; (be67c <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   be672:	4903      	ldr	r1, [pc, #12]	; (be680 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   be674:	4803      	ldr	r0, [pc, #12]	; (be684 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   be676:	2300      	movs	r3, #0
   be678:	f7fe bccc 	b.w	bd014 <log_set_callbacks>
   be67c:	000be909 	.word	0x000be909
   be680:	000be895 	.word	0x000be895
   be684:	000be815 	.word	0x000be815

000be688 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   be688:	2300      	movs	r3, #0
   be68a:	461a      	mov	r2, r3
   be68c:	4619      	mov	r1, r3
   be68e:	4618      	mov	r0, r3
   be690:	f7fe bcc0 	b.w	bd014 <log_set_callbacks>

000be694 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   be694:	b570      	push	{r4, r5, r6, lr}
   be696:	b08a      	sub	sp, #40	; 0x28
   be698:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   be69a:	4601      	mov	r1, r0
   be69c:	a804      	add	r0, sp, #16
   be69e:	f7fb fbaa 	bl	b9df6 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   be6a2:	4e14      	ldr	r6, [pc, #80]	; (be6f4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   be6a4:	a804      	add	r0, sp, #16
   be6a6:	f7ff fd9b 	bl	be1e0 <_ZN5spark18JSONObjectIterator4nextEv>
   be6aa:	b1e8      	cbz	r0, be6e8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   be6ac:	a904      	add	r1, sp, #16
   be6ae:	4668      	mov	r0, sp
   be6b0:	f7fb fbb2 	bl	b9e18 <_ZNK5spark18JSONObjectIterator4nameEv>
   be6b4:	9802      	ldr	r0, [sp, #8]
   be6b6:	4631      	mov	r1, r6
   be6b8:	f7ff fea2 	bl	be400 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   be6bc:	4604      	mov	r4, r0
   be6be:	b110      	cbz	r0, be6c6 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   be6c0:	1e2c      	subs	r4, r5, #0
   be6c2:	bf18      	it	ne
   be6c4:	2401      	movne	r4, #1
      ~__shared_ptr() = default;
   be6c6:	a801      	add	r0, sp, #4
   be6c8:	f7f5 ffea 	bl	b46a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   be6cc:	2c00      	cmp	r4, #0
   be6ce:	d0e9      	beq.n	be6a4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   be6d0:	a904      	add	r1, sp, #16
   be6d2:	4668      	mov	r0, sp
   be6d4:	f7fb fbb1 	bl	b9e3a <_ZNK5spark18JSONObjectIterator5valueEv>
   be6d8:	4668      	mov	r0, sp
   be6da:	f7ff fd24 	bl	be126 <_ZNK5spark9JSONValue5toIntEv>
   be6de:	6028      	str	r0, [r5, #0]
   be6e0:	a801      	add	r0, sp, #4
   be6e2:	f7f5 ffdd 	bl	b46a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   be6e6:	e7dd      	b.n	be6a4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   be6e8:	a805      	add	r0, sp, #20
   be6ea:	f7f5 ffd9 	bl	b46a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   be6ee:	b00a      	add	sp, #40	; 0x28
   be6f0:	bd70      	pop	{r4, r5, r6, pc}
   be6f2:	bf00      	nop
   be6f4:	000c53fa 	.word	0x000c53fa

000be6f8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   be6f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   be6fa:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   be6fc:	4620      	mov	r0, r4
   be6fe:	4913      	ldr	r1, [pc, #76]	; (be74c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   be700:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   be702:	f002 fe44 	bl	c138e <strcmp>
   be706:	b950      	cbnz	r0, be71e <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   be708:	f001 fdca 	bl	c02a0 <_Z16_fetch_usbserialv>
   be70c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   be710:	f001 fdb4 	bl	c027c <_ZN9USBSerial5beginEl>
}
   be714:	b003      	add	sp, #12
   be716:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   be71a:	f001 bdc1 	b.w	c02a0 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   be71e:	490c      	ldr	r1, [pc, #48]	; (be750 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   be720:	4620      	mov	r0, r4
   be722:	f002 fe34 	bl	c138e <strcmp>
   be726:	b978      	cbnz	r0, be748 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   be728:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   be72c:	a901      	add	r1, sp, #4
   be72e:	4628      	mov	r0, r5
        int baud = 9600;
   be730:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   be732:	f7ff ffaf 	bl	be694 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   be736:	f001 ffb9 	bl	c06ac <_Z22__fetch_global_Serial1v>
   be73a:	9901      	ldr	r1, [sp, #4]
   be73c:	f001 fd46 	bl	c01cc <_ZN11USARTSerial5beginEm>
        return &Serial1;
   be740:	f001 ffb4 	bl	c06ac <_Z22__fetch_global_Serial1v>
}
   be744:	b003      	add	sp, #12
   be746:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   be748:	2000      	movs	r0, #0
   be74a:	e7fb      	b.n	be744 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   be74c:	000c53ff 	.word	0x000c53ff
   be750:	000c5406 	.word	0x000c5406

000be754 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   be754:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   be756:	e9d0 5300 	ldrd	r5, r3, [r0]
   be75a:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   be75c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   be75e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   be762:	42ae      	cmp	r6, r5
   be764:	d005      	beq.n	be772 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   be766:	f105 0008 	add.w	r0, r5, #8
   be76a:	f7ff fff3 	bl	be754 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   be76e:	3514      	adds	r5, #20
   be770:	e7f7      	b.n	be762 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   be772:	6820      	ldr	r0, [r4, #0]
   be774:	f7fe fd9a 	bl	bd2ac <free>
}
   be778:	4620      	mov	r0, r4
   be77a:	bd70      	pop	{r4, r5, r6, pc}

000be77c <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   be77c:	b510      	push	{r4, lr}
   be77e:	4604      	mov	r4, r0
   be780:	300c      	adds	r0, #12
   be782:	f7ff ffe7 	bl	be754 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   be786:	4620      	mov	r0, r4
   be788:	f7fe fe33 	bl	bd3f2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   be78c:	4620      	mov	r0, r4
   be78e:	bd10      	pop	{r4, pc}

000be790 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   be790:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   be792:	4b04      	ldr	r3, [pc, #16]	; (be7a4 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   be794:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   be796:	f840 3b04 	str.w	r3, [r0], #4
   be79a:	f7ff ffef 	bl	be77c <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   be79e:	4620      	mov	r0, r4
   be7a0:	bd10      	pop	{r4, pc}
   be7a2:	bf00      	nop
   be7a4:	000c477c 	.word	0x000c477c

000be7a8 <_ZN5spark16StreamLogHandlerD0Ev>:
   be7a8:	b510      	push	{r4, lr}
   be7aa:	4604      	mov	r4, r0
   be7ac:	f7ff fff0 	bl	be790 <_ZN5spark16StreamLogHandlerD1Ev>
   be7b0:	4620      	mov	r0, r4
   be7b2:	2124      	movs	r1, #36	; 0x24
   be7b4:	f7f5 fc73 	bl	b409e <_ZdlPvj>
   be7b8:	4620      	mov	r0, r4
   be7ba:	bd10      	pop	{r4, pc}

000be7bc <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   be7bc:	b510      	push	{r4, lr}
   be7be:	4b03      	ldr	r3, [pc, #12]	; (be7cc <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   be7c0:	6003      	str	r3, [r0, #0]
   be7c2:	4604      	mov	r4, r0
   be7c4:	f7ff ffe4 	bl	be790 <_ZN5spark16StreamLogHandlerD1Ev>
   be7c8:	4620      	mov	r0, r4
   be7ca:	bd10      	pop	{r4, pc}
   be7cc:	000c549c 	.word	0x000c549c

000be7d0 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   be7d0:	b510      	push	{r4, lr}
   be7d2:	4604      	mov	r4, r0
   be7d4:	f7ff fff2 	bl	be7bc <_ZN5spark20JSONStreamLogHandlerD1Ev>
   be7d8:	4620      	mov	r0, r4
   be7da:	2124      	movs	r1, #36	; 0x24
   be7dc:	f7f5 fc5f 	bl	b409e <_ZdlPvj>
   be7e0:	4620      	mov	r0, r4
   be7e2:	bd10      	pop	{r4, pc}

000be7e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   be7e4:	2200      	movs	r2, #0
   be7e6:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   be7ea:	b510      	push	{r4, lr}
        capacity_(0) {
   be7ec:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   be7ee:	680c      	ldr	r4, [r1, #0]
   be7f0:	6004      	str	r4, [r0, #0]
   be7f2:	684c      	ldr	r4, [r1, #4]
   be7f4:	6044      	str	r4, [r0, #4]
   be7f6:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   be7f8:	600a      	str	r2, [r1, #0]
   be7fa:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   be7fc:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   be7fe:	608a      	str	r2, [r1, #8]
}
   be800:	bd10      	pop	{r4, pc}

000be802 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   be802:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   be804:	6803      	ldr	r3, [r0, #0]
   be806:	4604      	mov	r4, r0
   be808:	6818      	ldr	r0, [r3, #0]
   be80a:	f7fe f973 	bl	bcaf4 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   be80e:	4620      	mov	r0, r4
   be810:	bd10      	pop	{r4, pc}
	...

000be814 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   be814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   be818:	b087      	sub	sp, #28
   be81a:	4680      	mov	r8, r0
   be81c:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   be81e:	4b1c      	ldr	r3, [pc, #112]	; (be890 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   be820:	685b      	ldr	r3, [r3, #4]
   be822:	f3c3 0308 	ubfx	r3, r3, #0, #9
   be826:	4689      	mov	r9, r1
   be828:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   be82a:	b96b      	cbnz	r3, be848 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   be82c:	f7ff ff04 	bl	be638 <_ZN5spark10LogManager8instanceEv>
   be830:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   be832:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   be836:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   be838:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   be83a:	f7ff fddf 	bl	be3fc <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   be83e:	7b23      	ldrb	r3, [r4, #12]
   be840:	b12b      	cbz	r3, be84e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   be842:	a805      	add	r0, sp, #20
   be844:	f7ff ffdd 	bl	be802 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   be848:	b007      	add	sp, #28
   be84a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   be84e:	2301      	movs	r3, #1
   be850:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   be852:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   be856:	fa5f f989 	uxtb.w	r9, r9
   be85a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   be85e:	45aa      	cmp	sl, r5
   be860:	d012      	beq.n	be888 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   be862:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   be866:	4631      	mov	r1, r6
   be868:	1d38      	adds	r0, r7, #4
   be86a:	f7ff fe71 	bl	be550 <_ZNK5spark6detail9LogFilter5levelEPKc>
   be86e:	4581      	cmp	r9, r0
   be870:	d3f5      	bcc.n	be85e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   be872:	683b      	ldr	r3, [r7, #0]
   be874:	9a03      	ldr	r2, [sp, #12]
   be876:	9200      	str	r2, [sp, #0]
   be878:	f8d3 b008 	ldr.w	fp, [r3, #8]
   be87c:	464a      	mov	r2, r9
   be87e:	4633      	mov	r3, r6
   be880:	4641      	mov	r1, r8
   be882:	4638      	mov	r0, r7
   be884:	47d8      	blx	fp
   be886:	e7ea      	b.n	be85e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   be888:	2300      	movs	r3, #0
   be88a:	7323      	strb	r3, [r4, #12]
   be88c:	e7d9      	b.n	be842 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   be88e:	bf00      	nop
   be890:	e000ed00 	.word	0xe000ed00

000be894 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   be894:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   be898:	469b      	mov	fp, r3
   be89a:	4b1a      	ldr	r3, [pc, #104]	; (be904 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   be89c:	685b      	ldr	r3, [r3, #4]
   be89e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   be8a2:	4680      	mov	r8, r0
   be8a4:	4689      	mov	r9, r1
   be8a6:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   be8a8:	b96b      	cbnz	r3, be8c6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   be8aa:	f7ff fec5 	bl	be638 <_ZN5spark10LogManager8instanceEv>
   be8ae:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   be8b0:	f100 0324 	add.w	r3, r0, #36	; 0x24
   be8b4:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   be8b6:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   be8b8:	f7ff fda0 	bl	be3fc <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   be8bc:	7b23      	ldrb	r3, [r4, #12]
   be8be:	b12b      	cbz	r3, be8cc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   be8c0:	a801      	add	r0, sp, #4
   be8c2:	f7ff ff9e 	bl	be802 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   be8c6:	b003      	add	sp, #12
   be8c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   be8cc:	2301      	movs	r3, #1
   be8ce:	7323      	strb	r3, [r4, #12]
   be8d0:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   be8d4:	b2f6      	uxtb	r6, r6
   be8d6:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   be8da:	4555      	cmp	r5, sl
   be8dc:	d00e      	beq.n	be8fc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   be8de:	f855 7b04 	ldr.w	r7, [r5], #4
   be8e2:	4659      	mov	r1, fp
   be8e4:	1d38      	adds	r0, r7, #4
   be8e6:	f7ff fe33 	bl	be550 <_ZNK5spark6detail9LogFilter5levelEPKc>
   be8ea:	4286      	cmp	r6, r0
   be8ec:	d3f5      	bcc.n	be8da <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   be8ee:	683b      	ldr	r3, [r7, #0]
   be8f0:	464a      	mov	r2, r9
   be8f2:	68db      	ldr	r3, [r3, #12]
   be8f4:	4641      	mov	r1, r8
   be8f6:	4638      	mov	r0, r7
   be8f8:	4798      	blx	r3
   be8fa:	e7ee      	b.n	be8da <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   be8fc:	2300      	movs	r3, #0
   be8fe:	7323      	strb	r3, [r4, #12]
   be900:	e7de      	b.n	be8c0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   be902:	bf00      	nop
   be904:	e000ed00 	.word	0xe000ed00

000be908 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   be908:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   be90c:	4b16      	ldr	r3, [pc, #88]	; (be968 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   be90e:	685b      	ldr	r3, [r3, #4]
   be910:	f3c3 0308 	ubfx	r3, r3, #0, #9
   be914:	4605      	mov	r5, r0
   be916:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   be918:	bb1b      	cbnz	r3, be962 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   be91a:	f7ff fe8d 	bl	be638 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   be91e:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   be922:	4604      	mov	r4, r0
   be924:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   be926:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   be928:	f7ff fd68 	bl	be3fc <_ZN14RecursiveMutex4lockEv.isra.0>
   be92c:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   be930:	2446      	movs	r4, #70	; 0x46
   be932:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   be936:	45b0      	cmp	r8, r6
   be938:	d109      	bne.n	be94e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   be93a:	a801      	add	r0, sp, #4
   be93c:	f7ff ff61 	bl	be802 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   be940:	42a5      	cmp	r5, r4
   be942:	bfb4      	ite	lt
   be944:	2000      	movlt	r0, #0
   be946:	2001      	movge	r0, #1
}
   be948:	b002      	add	sp, #8
   be94a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   be94e:	f856 0b04 	ldr.w	r0, [r6], #4
   be952:	4639      	mov	r1, r7
   be954:	3004      	adds	r0, #4
   be956:	f7ff fdfb 	bl	be550 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   be95a:	4284      	cmp	r4, r0
   be95c:	bfa8      	it	ge
   be95e:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   be960:	e7e9      	b.n	be936 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   be962:	2000      	movs	r0, #0
   be964:	e7f0      	b.n	be948 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   be966:	bf00      	nop
   be968:	e000ed00 	.word	0xe000ed00

000be96c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   be96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   be96e:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   be972:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   be974:	4604      	mov	r4, r0
   be976:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   be978:	db0d      	blt.n	be996 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   be97a:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   be97c:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   be97e:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   be980:	dd04      	ble.n	be98c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   be982:	00b9      	lsls	r1, r7, #2
   be984:	f7fe fc9a 	bl	bd2bc <realloc>
            if (!d) {
   be988:	b918      	cbnz	r0, be992 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   be98a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   be98c:	f7fe fc8e 	bl	bd2ac <free>
        T* d = nullptr;
   be990:	2000      	movs	r0, #0
        data_ = d;
   be992:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   be994:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   be996:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   be998:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   be99a:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   be99e:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   be9a0:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   be9a4:	1d08      	adds	r0, r1, #4
   be9a6:	f002 fc3d 	bl	c1224 <memmove>
    new(p) T(std::move(value));
   be9aa:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   be9ae:	6863      	ldr	r3, [r4, #4]
   be9b0:	3301      	adds	r3, #1
   be9b2:	6063      	str	r3, [r4, #4]
    return true;
   be9b4:	2001      	movs	r0, #1
   be9b6:	e7e8      	b.n	be98a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000be9b8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   be9b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   be9ba:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   be9be:	4604      	mov	r4, r0
   be9c0:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   be9c2:	9301      	str	r3, [sp, #4]
   be9c4:	460d      	mov	r5, r1
      { _M_device.lock(); }
   be9c6:	f7ff fd19 	bl	be3fc <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   be9ca:	e9d4 3200 	ldrd	r3, r2, [r4]
   be9ce:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   be9d2:	4293      	cmp	r3, r2
   be9d4:	4619      	mov	r1, r3
   be9d6:	d00b      	beq.n	be9f0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   be9d8:	6809      	ldr	r1, [r1, #0]
   be9da:	42a9      	cmp	r1, r5
   be9dc:	f103 0304 	add.w	r3, r3, #4
   be9e0:	d1f7      	bne.n	be9d2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   be9e2:	a801      	add	r0, sp, #4
   be9e4:	f7ff ff0d 	bl	be802 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   be9e8:	2500      	movs	r5, #0
}
   be9ea:	4628      	mov	r0, r5
   be9ec:	b003      	add	sp, #12
   be9ee:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   be9f0:	4629      	mov	r1, r5
   be9f2:	4620      	mov	r0, r4
   be9f4:	f7ff ffba 	bl	be96c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   be9f8:	4605      	mov	r5, r0
   be9fa:	2800      	cmp	r0, #0
   be9fc:	d0f1      	beq.n	be9e2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   be9fe:	6863      	ldr	r3, [r4, #4]
   bea00:	2b01      	cmp	r3, #1
   bea02:	d101      	bne.n	bea08 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   bea04:	f7ff fe34 	bl	be670 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bea08:	a801      	add	r0, sp, #4
   bea0a:	f7ff fefa 	bl	be802 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   bea0e:	e7ec      	b.n	be9ea <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000bea10 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bea10:	b570      	push	{r4, r5, r6, lr}
   bea12:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   bea14:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   bea18:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   bea1a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   bea1e:	4282      	cmp	r2, r0
   bea20:	d00f      	beq.n	bea42 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   bea22:	4601      	mov	r1, r0
            if (*p == value) {
   bea24:	681d      	ldr	r5, [r3, #0]
   bea26:	f851 6b04 	ldr.w	r6, [r1], #4
   bea2a:	42ae      	cmp	r6, r5
   bea2c:	d107      	bne.n	bea3e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   bea2e:	1a52      	subs	r2, r2, r1
   bea30:	f002 fbf8 	bl	c1224 <memmove>
    --size_;
   bea34:	6863      	ldr	r3, [r4, #4]
   bea36:	3b01      	subs	r3, #1
   bea38:	6063      	str	r3, [r4, #4]
    return true;
   bea3a:	2001      	movs	r0, #1
}
   bea3c:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   bea3e:	4608      	mov	r0, r1
   bea40:	e7ed      	b.n	bea1e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   bea42:	2000      	movs	r0, #0
   bea44:	e7fa      	b.n	bea3c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000bea46 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   bea46:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   bea48:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   bea4c:	4604      	mov	r4, r0
   bea4e:	6a40      	ldr	r0, [r0, #36]	; 0x24
   bea50:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bea52:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   bea54:	f7ff fcd2 	bl	be3fc <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   bea58:	a901      	add	r1, sp, #4
   bea5a:	4620      	mov	r0, r4
   bea5c:	f7ff ffd8 	bl	bea10 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   bea60:	b118      	cbz	r0, bea6a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   bea62:	6863      	ldr	r3, [r4, #4]
   bea64:	b90b      	cbnz	r3, bea6a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   bea66:	f7ff fe0f 	bl	be688 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bea6a:	a803      	add	r0, sp, #12
   bea6c:	f7ff fec9 	bl	be802 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   bea70:	b004      	add	sp, #16
   bea72:	bd10      	pop	{r4, pc}

000bea74 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   bea74:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   bea76:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   bea7a:	2318      	movs	r3, #24
   bea7c:	4604      	mov	r4, r0
   bea7e:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   bea82:	42ae      	cmp	r6, r5
   bea84:	d015      	beq.n	beab2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   bea86:	f105 0110 	add.w	r1, r5, #16
   bea8a:	4620      	mov	r0, r4
   bea8c:	f7ff ffc0 	bl	bea10 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   bea90:	6863      	ldr	r3, [r4, #4]
   bea92:	b90b      	cbnz	r3, bea98 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   bea94:	f7ff fdf8 	bl	be688 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   bea98:	69e0      	ldr	r0, [r4, #28]
   bea9a:	6929      	ldr	r1, [r5, #16]
   bea9c:	6803      	ldr	r3, [r0, #0]
   bea9e:	68db      	ldr	r3, [r3, #12]
   beaa0:	4798      	blx	r3
        if (h.stream) {
   beaa2:	6969      	ldr	r1, [r5, #20]
   beaa4:	b119      	cbz	r1, beaae <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   beaa6:	6a20      	ldr	r0, [r4, #32]
   beaa8:	6803      	ldr	r3, [r0, #0]
   beaaa:	68db      	ldr	r3, [r3, #12]
   beaac:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   beaae:	3518      	adds	r5, #24
   beab0:	e7e7      	b.n	bea82 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   beab2:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   beab6:	2618      	movs	r6, #24
   beab8:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   beabc:	42ae      	cmp	r6, r5
   beabe:	d004      	beq.n	beaca <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   beac0:	4628      	mov	r0, r5
   beac2:	f000 ff45 	bl	bf950 <_ZN6StringD1Ev>
   beac6:	3518      	adds	r5, #24
   beac8:	e7f8      	b.n	beabc <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   beaca:	2300      	movs	r3, #0
   beacc:	6163      	str	r3, [r4, #20]
}
   beace:	bd70      	pop	{r4, r5, r6, pc}

000bead0 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   bead0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bead2:	4604      	mov	r4, r0
    resetSystemCallbacks();
   bead4:	f7ff fdd8 	bl	be688 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   bead8:	f104 0324 	add.w	r3, r4, #36	; 0x24
   beadc:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   beade:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   beae0:	f7ff fc8c 	bl	be3fc <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   beae4:	4620      	mov	r0, r4
   beae6:	f7ff ffc5 	bl	bea74 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   beaea:	a801      	add	r0, sp, #4
   beaec:	f7ff fe89 	bl	be802 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   beaf0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   beaf2:	b108      	cbz	r0, beaf8 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   beaf4:	f7fd ffee 	bl	bcad4 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   beaf8:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   beafc:	2618      	movs	r6, #24
   beafe:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   beb02:	42ae      	cmp	r6, r5
   beb04:	d004      	beq.n	beb10 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   beb06:	4628      	mov	r0, r5
   beb08:	f000 ff22 	bl	bf950 <_ZN6StringD1Ev>
   beb0c:	3518      	adds	r5, #24
   beb0e:	e7f8      	b.n	beb02 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   beb10:	6920      	ldr	r0, [r4, #16]
   beb12:	f7fe fbcb 	bl	bd2ac <free>
   beb16:	6820      	ldr	r0, [r4, #0]
   beb18:	f7fe fbc8 	bl	bd2ac <free>
}
   beb1c:	4620      	mov	r0, r4
   beb1e:	b002      	add	sp, #8
   beb20:	bd70      	pop	{r4, r5, r6, pc}
	...

000beb24 <__tcf_2>:
    static LogManager mgr;
   beb24:	4801      	ldr	r0, [pc, #4]	; (beb2c <__tcf_2+0x8>)
   beb26:	f7ff bfd3 	b.w	bead0 <_ZN5spark10LogManagerD1Ev>
   beb2a:	bf00      	nop
   beb2c:	2003e654 	.word	0x2003e654

000beb30 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   beb30:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   beb32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   beb34:	4604      	mov	r4, r0
   beb36:	460d      	mov	r5, r1
   beb38:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   beb3a:	d915      	bls.n	beb68 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   beb3c:	4290      	cmp	r0, r2
   beb3e:	d214      	bcs.n	beb6a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   beb40:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   beb44:	1a75      	subs	r5, r6, r1
   beb46:	f1a1 0714 	sub.w	r7, r1, #20
   beb4a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   beb4c:	42b7      	cmp	r7, r6
   beb4e:	d01a      	beq.n	beb86 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   beb50:	b11c      	cbz	r4, beb5a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   beb52:	4631      	mov	r1, r6
   beb54:	4620      	mov	r0, r4
   beb56:	f7ff fcab 	bl	be4b0 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   beb5a:	f106 0008 	add.w	r0, r6, #8
   beb5e:	f7ff fdf9 	bl	be754 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   beb62:	3e14      	subs	r6, #20
   beb64:	3c14      	subs	r4, #20
   beb66:	e7f1      	b.n	beb4c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   beb68:	d00d      	beq.n	beb86 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   beb6a:	42b5      	cmp	r5, r6
   beb6c:	d00b      	beq.n	beb86 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   beb6e:	b11c      	cbz	r4, beb78 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   beb70:	4629      	mov	r1, r5
   beb72:	4620      	mov	r0, r4
   beb74:	f7ff fc9c 	bl	be4b0 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   beb78:	f105 0008 	add.w	r0, r5, #8
   beb7c:	f7ff fdea 	bl	be754 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   beb80:	3514      	adds	r5, #20
   beb82:	3414      	adds	r4, #20
   beb84:	e7f1      	b.n	beb6a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   beb86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000beb88 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   beb88:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   beb8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   beb8c:	4604      	mov	r4, r0
   beb8e:	460d      	mov	r5, r1
   beb90:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   beb92:	d914      	bls.n	bebbe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   beb94:	4290      	cmp	r0, r2
   beb96:	d213      	bcs.n	bebc0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   beb98:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   beb9c:	1a75      	subs	r5, r6, r1
   beb9e:	f1a1 0710 	sub.w	r7, r1, #16
   beba2:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   beba4:	42b7      	cmp	r7, r6
   beba6:	d018      	beq.n	bebda <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   beba8:	b11c      	cbz	r4, bebb2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   bebaa:	4631      	mov	r1, r6
   bebac:	4620      	mov	r0, r4
   bebae:	f000 ff4b 	bl	bfa48 <_ZN6StringC1EOS_>
                end->~T();
   bebb2:	4630      	mov	r0, r6
   bebb4:	f000 fecc 	bl	bf950 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   bebb8:	3e10      	subs	r6, #16
   bebba:	3c10      	subs	r4, #16
   bebbc:	e7f2      	b.n	beba4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   bebbe:	d00c      	beq.n	bebda <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   bebc0:	42b5      	cmp	r5, r6
   bebc2:	d00a      	beq.n	bebda <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   bebc4:	b11c      	cbz	r4, bebce <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   bebc6:	4629      	mov	r1, r5
   bebc8:	4620      	mov	r0, r4
   bebca:	f000 ff3d 	bl	bfa48 <_ZN6StringC1EOS_>
                p->~T();
   bebce:	4628      	mov	r0, r5
   bebd0:	f000 febe 	bl	bf950 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   bebd4:	3510      	adds	r5, #16
   bebd6:	3410      	adds	r4, #16
   bebd8:	e7f2      	b.n	bebc0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   bebda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bebdc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   bebdc:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   bebde:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bebe0:	4605      	mov	r5, r0
        if (n > 0) {
   bebe2:	dd11      	ble.n	bec08 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   bebe4:	0130      	lsls	r0, r6, #4
   bebe6:	f7fe fb59 	bl	bd29c <malloc>
            if (!d) {
   bebea:	4604      	mov	r4, r0
   bebec:	b158      	cbz	r0, bec06 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   bebee:	e9d5 1200 	ldrd	r1, r2, [r5]
   bebf2:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   bebf6:	f7ff ffc7 	bl	beb88 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   bebfa:	6828      	ldr	r0, [r5, #0]
   bebfc:	f7fe fb56 	bl	bd2ac <free>
        data_ = d;
   bec00:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bec02:	60ae      	str	r6, [r5, #8]
        return true;
   bec04:	2001      	movs	r0, #1
    }
   bec06:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   bec08:	2400      	movs	r4, #0
   bec0a:	e7f6      	b.n	bebfa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000bec0c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   bec0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bec10:	4690      	mov	r8, r2
   bec12:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   bec14:	2300      	movs	r3, #0
   bec16:	9103      	str	r1, [sp, #12]
    return size_;
   bec18:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   bec1c:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   bec1e:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   bec20:	4299      	cmp	r1, r3
        capacity_(0) {
   bec22:	e9c0 3300 	strd	r3, r3, [r0]
   bec26:	e9c0 3302 	strd	r3, r3, [r0, #8]
   bec2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
   bec2e:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   bec32:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   bec34:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   bec36:	dc23      	bgt.n	bec80 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   bec38:	e9d8 5700 	ldrd	r5, r7, [r8]
   bec3c:	2314      	movs	r3, #20
   bec3e:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   bec42:	42af      	cmp	r7, r5
   bec44:	d03b      	beq.n	becbe <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   bec46:	4629      	mov	r1, r5
   bec48:	a80b      	add	r0, sp, #44	; 0x2c
   bec4a:	f000 fefd 	bl	bfa48 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   bec4e:	a90b      	add	r1, sp, #44	; 0x2c
   bec50:	a80f      	add	r0, sp, #60	; 0x3c
   bec52:	9e09      	ldr	r6, [sp, #36]	; 0x24
   bec54:	f000 fef8 	bl	bfa48 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bec58:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   bec5c:	4299      	cmp	r1, r3
   bec5e:	da1b      	bge.n	bec98 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   bec60:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   bec62:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   bec64:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   bec68:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   bec6c:	4631      	mov	r1, r6
   bec6e:	f106 0010 	add.w	r0, r6, #16
   bec72:	f7ff ff89 	bl	beb88 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   bec76:	b9ee      	cbnz	r6, becb4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   bec78:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bec7a:	3301      	adds	r3, #1
   bec7c:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   bec7e:	e011      	b.n	beca4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   bec80:	a808      	add	r0, sp, #32
   bec82:	f7ff ffab 	bl	bebdc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   bec86:	2800      	cmp	r0, #0
   bec88:	d1d6      	bne.n	bec38 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   bec8a:	a808      	add	r0, sp, #32
   bec8c:	f7fe fbb1 	bl	bd3f2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   bec90:	4620      	mov	r0, r4
   bec92:	b015      	add	sp, #84	; 0x54
   bec94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bec98:	3101      	adds	r1, #1
   bec9a:	a808      	add	r0, sp, #32
   bec9c:	f7ff ff9e 	bl	bebdc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   beca0:	2800      	cmp	r0, #0
   beca2:	d1dd      	bne.n	bec60 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   beca4:	a80f      	add	r0, sp, #60	; 0x3c
   beca6:	f000 fe53 	bl	bf950 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   becaa:	a80b      	add	r0, sp, #44	; 0x2c
   becac:	f000 fe50 	bl	bf950 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   becb0:	3514      	adds	r5, #20
   becb2:	e7c6      	b.n	bec42 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   becb4:	a90f      	add	r1, sp, #60	; 0x3c
   becb6:	4630      	mov	r0, r6
   becb8:	f000 fec6 	bl	bfa48 <_ZN6StringC1EOS_>
   becbc:	e7dc      	b.n	bec78 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   becbe:	2600      	movs	r6, #0
   becc0:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   becc4:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   becc6:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   becca:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   becce:	429e      	cmp	r6, r3
   becd0:	da7c      	bge.n	bedcc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   becd2:	0133      	lsls	r3, r6, #4
   becd4:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   becd6:	9306      	str	r3, [sp, #24]
        if (!category) {
   becd8:	b90b      	cbnz	r3, becde <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   becda:	3601      	adds	r6, #1
   becdc:	e7f5      	b.n	becca <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   becde:	2300      	movs	r3, #0
   bece0:	9307      	str	r3, [sp, #28]
   bece2:	fb09 f306 	mul.w	r3, r9, r6
   bece6:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   bece8:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   becea:	a907      	add	r1, sp, #28
   becec:	a806      	add	r0, sp, #24
   becee:	f7ff fb5e 	bl	be3ae <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   becf2:	4682      	mov	sl, r0
   becf4:	2800      	cmp	r0, #0
   becf6:	d0f0      	beq.n	becda <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   becf8:	f04f 0300 	mov.w	r3, #0
   becfc:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   bed00:	4601      	mov	r1, r0
   bed02:	9a07      	ldr	r2, [sp, #28]
   bed04:	f10d 0317 	add.w	r3, sp, #23
   bed08:	4628      	mov	r0, r5
   bed0a:	f7ff fbe5 	bl	be4d8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bed0e:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   bed12:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bed14:	2f00      	cmp	r7, #0
   bed16:	d14a      	bne.n	bedae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   bed18:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   bed1c:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   bed20:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   bed24:	f64f 73ff 	movw	r3, #65535	; 0xffff
   bed28:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   bed2c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   bed30:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bed32:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   bed36:	4293      	cmp	r3, r2
   bed38:	db17      	blt.n	bed6a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   bed3a:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   bed3e:	f1ba 0f00 	cmp.w	sl, #0
   bed42:	dd30      	ble.n	beda6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   bed44:	fb09 f00a 	mul.w	r0, r9, sl
   bed48:	f7fe faa8 	bl	bd29c <malloc>
            if (!d) {
   bed4c:	4683      	mov	fp, r0
   bed4e:	b360      	cbz	r0, bedaa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   bed50:	e9d5 1200 	ldrd	r1, r2, [r5]
   bed54:	fb09 1202 	mla	r2, r9, r2, r1
   bed58:	f7ff feea 	bl	beb30 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   bed5c:	6828      	ldr	r0, [r5, #0]
   bed5e:	f7fe faa5 	bl	bd2ac <free>
        data_ = d;
   bed62:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   bed66:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   bed6a:	682b      	ldr	r3, [r5, #0]
   bed6c:	9a01      	ldr	r2, [sp, #4]
   bed6e:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   bed72:	686a      	ldr	r2, [r5, #4]
   bed74:	4651      	mov	r1, sl
   bed76:	fb09 3202 	mla	r2, r9, r2, r3
   bed7a:	f10a 0014 	add.w	r0, sl, #20
   bed7e:	f7ff fed7 	bl	beb30 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   bed82:	f1ba 0f00 	cmp.w	sl, #0
   bed86:	d003      	beq.n	bed90 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   bed88:	a90f      	add	r1, sp, #60	; 0x3c
   bed8a:	4650      	mov	r0, sl
   bed8c:	f7ff fb90 	bl	be4b0 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   bed90:	686b      	ldr	r3, [r5, #4]
   bed92:	3301      	adds	r3, #1
   bed94:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   bed96:	a811      	add	r0, sp, #68	; 0x44
   bed98:	f7ff fcdc 	bl	be754 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bed9c:	b13f      	cbz	r7, bedae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   bed9e:	a80b      	add	r0, sp, #44	; 0x2c
   beda0:	f7ff fcd8 	bl	be754 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   beda4:	e771      	b.n	bec8a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   beda6:	46bb      	mov	fp, r7
   beda8:	e7d8      	b.n	bed5c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   bedaa:	2701      	movs	r7, #1
   bedac:	e7f3      	b.n	bed96 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   bedae:	9b01      	ldr	r3, [sp, #4]
   bedb0:	682d      	ldr	r5, [r5, #0]
   bedb2:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   bedb6:	9b06      	ldr	r3, [sp, #24]
   bedb8:	781b      	ldrb	r3, [r3, #0]
   bedba:	b92b      	cbnz	r3, bedc8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   bedbc:	f8d8 3000 	ldr.w	r3, [r8]
   bedc0:	9a02      	ldr	r2, [sp, #8]
   bedc2:	4413      	add	r3, r2
   bedc4:	7c1b      	ldrb	r3, [r3, #16]
   bedc6:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   bedc8:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   bedca:	e78e      	b.n	becea <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bedcc:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   bedce:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bedd0:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   bedd2:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bedd4:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bedd6:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   bedd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   bedda:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   beddc:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   bedde:	60a2      	str	r2, [r4, #8]
   bede0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   bede2:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bede4:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   bede6:	60e2      	str	r2, [r4, #12]
   bede8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   bedea:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bedec:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   bedee:	6122      	str	r2, [r4, #16]
   bedf0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   bedf2:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   bedf4:	9b03      	ldr	r3, [sp, #12]
   bedf6:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   bedf8:	6162      	str	r2, [r4, #20]
   bedfa:	7623      	strb	r3, [r4, #24]
   bedfc:	e7cf      	b.n	bed9e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000bee00 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   bee00:	b5f0      	push	{r4, r5, r6, r7, lr}
   bee02:	4604      	mov	r4, r0
   bee04:	b087      	sub	sp, #28
   bee06:	460d      	mov	r5, r1
        filter_(level, filters) {
   bee08:	4626      	mov	r6, r4
        stream_(&stream) {
   bee0a:	4619      	mov	r1, r3
   bee0c:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   bee0e:	4617      	mov	r7, r2
        stream_(&stream) {
   bee10:	f7f8 faff 	bl	b7412 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   bee14:	4b0b      	ldr	r3, [pc, #44]	; (bee44 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   bee16:	f846 3b04 	str.w	r3, [r6], #4
   bee1a:	4669      	mov	r1, sp
   bee1c:	a803      	add	r0, sp, #12
   bee1e:	f7f8 faf8 	bl	b7412 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   bee22:	aa03      	add	r2, sp, #12
   bee24:	4639      	mov	r1, r7
   bee26:	4630      	mov	r0, r6
   bee28:	f7ff fef0 	bl	bec0c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   bee2c:	a803      	add	r0, sp, #12
   bee2e:	f7f8 faaf 	bl	b7390 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   bee32:	4668      	mov	r0, sp
   bee34:	f7f8 faac 	bl	b7390 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   bee38:	4b03      	ldr	r3, [pc, #12]	; (bee48 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   bee3a:	6023      	str	r3, [r4, #0]
}
   bee3c:	4620      	mov	r0, r4
        stream_(&stream) {
   bee3e:	6225      	str	r5, [r4, #32]
}
   bee40:	b007      	add	sp, #28
   bee42:	bdf0      	pop	{r4, r5, r6, r7, pc}
   bee44:	000c477c 	.word	0x000c477c
   bee48:	000c5484 	.word	0x000c5484

000bee4c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   bee4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   bee4e:	460f      	mov	r7, r1
   bee50:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   bee52:	491d      	ldr	r1, [pc, #116]	; (beec8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   bee54:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   bee56:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   bee58:	4616      	mov	r6, r2
   bee5a:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   bee5c:	f002 fa97 	bl	c138e <strcmp>
   bee60:	b9c0      	cbnz	r0, bee94 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   bee62:	b1a4      	cbz	r4, bee8e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   bee64:	4629      	mov	r1, r5
   bee66:	a801      	add	r0, sp, #4
   bee68:	f7ff fcbc 	bl	be7e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   bee6c:	4917      	ldr	r1, [pc, #92]	; (beecc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   bee6e:	2024      	movs	r0, #36	; 0x24
   bee70:	f001 fc40 	bl	c06f4 <_ZnwjRKSt9nothrow_t>
   bee74:	4605      	mov	r5, r0
   bee76:	b130      	cbz	r0, bee86 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   bee78:	ab01      	add	r3, sp, #4
   bee7a:	4632      	mov	r2, r6
   bee7c:	4621      	mov	r1, r4
   bee7e:	f7ff ffbf 	bl	bee00 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   bee82:	4b13      	ldr	r3, [pc, #76]	; (beed0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   bee84:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   bee86:	a801      	add	r0, sp, #4
   bee88:	f7f8 fa82 	bl	b7390 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   bee8c:	462c      	mov	r4, r5
}
   bee8e:	4620      	mov	r0, r4
   bee90:	b005      	add	sp, #20
   bee92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   bee94:	490f      	ldr	r1, [pc, #60]	; (beed4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   bee96:	4638      	mov	r0, r7
   bee98:	f002 fa79 	bl	c138e <strcmp>
   bee9c:	b990      	cbnz	r0, beec4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   bee9e:	2c00      	cmp	r4, #0
   beea0:	d0f5      	beq.n	bee8e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   beea2:	4629      	mov	r1, r5
   beea4:	a801      	add	r0, sp, #4
   beea6:	f7ff fc9d 	bl	be7e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   beeaa:	4908      	ldr	r1, [pc, #32]	; (beecc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   beeac:	2024      	movs	r0, #36	; 0x24
   beeae:	f001 fc21 	bl	c06f4 <_ZnwjRKSt9nothrow_t>
   beeb2:	4605      	mov	r5, r0
   beeb4:	2800      	cmp	r0, #0
   beeb6:	d0e6      	beq.n	bee86 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   beeb8:	ab01      	add	r3, sp, #4
   beeba:	4632      	mov	r2, r6
   beebc:	4621      	mov	r1, r4
   beebe:	f7ff ff9f 	bl	bee00 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   beec2:	e7e0      	b.n	bee86 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   beec4:	2400      	movs	r4, #0
   beec6:	e7e2      	b.n	bee8e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   beec8:	000c540e 	.word	0x000c540e
   beecc:	000c55d8 	.word	0x000c55d8
   beed0:	000c549c 	.word	0x000c549c
   beed4:	000c5412 	.word	0x000c5412

000beed8 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   beed8:	4b01      	ldr	r3, [pc, #4]	; (beee0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   beeda:	4a02      	ldr	r2, [pc, #8]	; (beee4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   beedc:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   beede:	4770      	bx	lr
   beee0:	2003e650 	.word	0x2003e650
   beee4:	000c5423 	.word	0x000c5423

000beee8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   beee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   beeec:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   beeee:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   beef2:	4604      	mov	r4, r0
   beef4:	460e      	mov	r6, r1
   beef6:	4617      	mov	r7, r2
   beef8:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   beefa:	f001 f9d1 	bl	c02a0 <_Z16_fetch_usbserialv>
   beefe:	4581      	cmp	r9, r0
   bef00:	d04c      	beq.n	bef9c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   bef02:	792b      	ldrb	r3, [r5, #4]
   bef04:	0719      	lsls	r1, r3, #28
   bef06:	d504      	bpl.n	bef12 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   bef08:	696a      	ldr	r2, [r5, #20]
   bef0a:	4954      	ldr	r1, [pc, #336]	; (bf05c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   bef0c:	4620      	mov	r0, r4
   bef0e:	f7ff fac0 	bl	be492 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   bef12:	f1b8 0f00 	cmp.w	r8, #0
   bef16:	d00d      	beq.n	bef34 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   bef18:	215b      	movs	r1, #91	; 0x5b
   bef1a:	4620      	mov	r0, r4
   bef1c:	f7ff faad 	bl	be47a <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   bef20:	4641      	mov	r1, r8
   bef22:	4620      	mov	r0, r4
   bef24:	f7ff fa9a 	bl	be45c <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   bef28:	6823      	ldr	r3, [r4, #0]
   bef2a:	494d      	ldr	r1, [pc, #308]	; (bf060 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   bef2c:	68db      	ldr	r3, [r3, #12]
   bef2e:	2202      	movs	r2, #2
   bef30:	4620      	mov	r0, r4
   bef32:	4798      	blx	r3
    if (attr.has_file) {
   bef34:	792b      	ldrb	r3, [r5, #4]
   bef36:	07da      	lsls	r2, r3, #31
   bef38:	d523      	bpl.n	bef82 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   bef3a:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   bef3e:	212f      	movs	r1, #47	; 0x2f
   bef40:	4640      	mov	r0, r8
   bef42:	f002 fa83 	bl	c144c <strrchr>
    if (s1) {
   bef46:	b108      	cbz	r0, bef4c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   bef48:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   bef4c:	4641      	mov	r1, r8
   bef4e:	4620      	mov	r0, r4
   bef50:	f7ff fa84 	bl	be45c <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   bef54:	792b      	ldrb	r3, [r5, #4]
   bef56:	079b      	lsls	r3, r3, #30
   bef58:	d508      	bpl.n	bef6c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   bef5a:	213a      	movs	r1, #58	; 0x3a
   bef5c:	4620      	mov	r0, r4
   bef5e:	f7ff fa8c 	bl	be47a <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   bef62:	68ea      	ldr	r2, [r5, #12]
   bef64:	493f      	ldr	r1, [pc, #252]	; (bf064 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   bef66:	4620      	mov	r0, r4
   bef68:	f7ff fa93 	bl	be492 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   bef6c:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   bef6e:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   bef70:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   bef74:	68db      	ldr	r3, [r3, #12]
   bef76:	bf14      	ite	ne
   bef78:	493b      	ldrne	r1, [pc, #236]	; (bf068 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   bef7a:	493c      	ldreq	r1, [pc, #240]	; (bf06c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   bef7c:	2202      	movs	r2, #2
            write(": ", 2);
   bef7e:	4620      	mov	r0, r4
   bef80:	4798      	blx	r3
    if (attr.has_function) {
   bef82:	792b      	ldrb	r3, [r5, #4]
   bef84:	0758      	lsls	r0, r3, #29
   bef86:	d51d      	bpl.n	befc4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   bef88:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   bef8a:	460b      	mov	r3, r1
   bef8c:	461a      	mov	r2, r3
    for (; *s; ++s) {
   bef8e:	f813 0b01 	ldrb.w	r0, [r3], #1
   bef92:	b160      	cbz	r0, befae <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   bef94:	2820      	cmp	r0, #32
   bef96:	d108      	bne.n	befaa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   bef98:	4619      	mov	r1, r3
   bef9a:	e7f7      	b.n	bef8c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   bef9c:	4834      	ldr	r0, [pc, #208]	; (bf070 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   bef9e:	f000 f966 	bl	bf26e <_ZN5spark12NetworkClass9listeningEv>
   befa2:	2800      	cmp	r0, #0
   befa4:	d0ad      	beq.n	bef02 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   befa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   befaa:	2828      	cmp	r0, #40	; 0x28
   befac:	d1ee      	bne.n	bef8c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   befae:	6823      	ldr	r3, [r4, #0]
   befb0:	1a52      	subs	r2, r2, r1
   befb2:	68db      	ldr	r3, [r3, #12]
   befb4:	4620      	mov	r0, r4
   befb6:	4798      	blx	r3
        write("(): ", 4);
   befb8:	6823      	ldr	r3, [r4, #0]
   befba:	492e      	ldr	r1, [pc, #184]	; (bf074 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   befbc:	68db      	ldr	r3, [r3, #12]
   befbe:	2204      	movs	r2, #4
   befc0:	4620      	mov	r0, r4
   befc2:	4798      	blx	r3
    return log_level_name(level, nullptr);
   befc4:	2100      	movs	r1, #0
   befc6:	4638      	mov	r0, r7
   befc8:	f7fe f81c 	bl	bd004 <log_level_name>
   befcc:	4601      	mov	r1, r0
    write(s);
   befce:	4620      	mov	r0, r4
   befd0:	f7ff fa44 	bl	be45c <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   befd4:	6823      	ldr	r3, [r4, #0]
   befd6:	4925      	ldr	r1, [pc, #148]	; (bf06c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   befd8:	68db      	ldr	r3, [r3, #12]
   befda:	2202      	movs	r2, #2
   befdc:	4620      	mov	r0, r4
   befde:	4798      	blx	r3
    if (msg) {
   befe0:	b11e      	cbz	r6, befea <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   befe2:	4631      	mov	r1, r6
   befe4:	4620      	mov	r0, r4
   befe6:	f7ff fa39 	bl	be45c <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   befea:	792b      	ldrb	r3, [r5, #4]
   befec:	f013 0f30 	tst.w	r3, #48	; 0x30
   beff0:	d02c      	beq.n	bf04c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   beff2:	6823      	ldr	r3, [r4, #0]
   beff4:	4920      	ldr	r1, [pc, #128]	; (bf078 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   beff6:	68db      	ldr	r3, [r3, #12]
   beff8:	2202      	movs	r2, #2
   beffa:	4620      	mov	r0, r4
   beffc:	4798      	blx	r3
        if (attr.has_code) {
   beffe:	792b      	ldrb	r3, [r5, #4]
   bf000:	06d9      	lsls	r1, r3, #27
   bf002:	d50a      	bpl.n	bf01a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   bf004:	6823      	ldr	r3, [r4, #0]
   bf006:	491d      	ldr	r1, [pc, #116]	; (bf07c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   bf008:	68db      	ldr	r3, [r3, #12]
   bf00a:	2207      	movs	r2, #7
   bf00c:	4620      	mov	r0, r4
   bf00e:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   bf010:	69aa      	ldr	r2, [r5, #24]
   bf012:	491b      	ldr	r1, [pc, #108]	; (bf080 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   bf014:	4620      	mov	r0, r4
   bf016:	f7ff fa3c 	bl	be492 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   bf01a:	792b      	ldrb	r3, [r5, #4]
   bf01c:	069a      	lsls	r2, r3, #26
   bf01e:	d511      	bpl.n	bf044 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   bf020:	06db      	lsls	r3, r3, #27
   bf022:	d505      	bpl.n	bf030 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   bf024:	6823      	ldr	r3, [r4, #0]
   bf026:	4910      	ldr	r1, [pc, #64]	; (bf068 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   bf028:	68db      	ldr	r3, [r3, #12]
   bf02a:	2202      	movs	r2, #2
   bf02c:	4620      	mov	r0, r4
   bf02e:	4798      	blx	r3
            write("details = ", 10);
   bf030:	6823      	ldr	r3, [r4, #0]
   bf032:	4914      	ldr	r1, [pc, #80]	; (bf084 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   bf034:	68db      	ldr	r3, [r3, #12]
   bf036:	4620      	mov	r0, r4
   bf038:	220a      	movs	r2, #10
   bf03a:	4798      	blx	r3
            write(attr.details);
   bf03c:	69e9      	ldr	r1, [r5, #28]
   bf03e:	4620      	mov	r0, r4
   bf040:	f7ff fa0c 	bl	be45c <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   bf044:	215d      	movs	r1, #93	; 0x5d
   bf046:	4620      	mov	r0, r4
   bf048:	f7ff fa17 	bl	be47a <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   bf04c:	6823      	ldr	r3, [r4, #0]
   bf04e:	490e      	ldr	r1, [pc, #56]	; (bf088 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   bf050:	68db      	ldr	r3, [r3, #12]
   bf052:	4620      	mov	r0, r4
   bf054:	2202      	movs	r2, #2
}
   bf056:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   bf05a:	4718      	bx	r3
   bf05c:	000c5427 	.word	0x000c5427
   bf060:	000c542e 	.word	0x000c542e
   bf064:	000c3bbf 	.word	0x000c3bbf
   bf068:	000c5431 	.word	0x000c5431
   bf06c:	000c5436 	.word	0x000c5436
   bf070:	2003e67c 	.word	0x2003e67c
   bf074:	000c5434 	.word	0x000c5434
   bf078:	000c5439 	.word	0x000c5439
   bf07c:	000c543c 	.word	0x000c543c
   bf080:	000c5444 	.word	0x000c5444
   bf084:	000c5447 	.word	0x000c5447
   bf088:	000c5452 	.word	0x000c5452

000bf08c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   bf08c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bf090:	b085      	sub	sp, #20
    return stream_;
   bf092:	f8d0 9020 	ldr.w	r9, [r0, #32]
   bf096:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   bf098:	4605      	mov	r5, r0
   bf09a:	460f      	mov	r7, r1
   bf09c:	4690      	mov	r8, r2
   bf09e:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   bf0a0:	f001 f8fe 	bl	c02a0 <_Z16_fetch_usbserialv>
   bf0a4:	4581      	cmp	r9, r0
   bf0a6:	d105      	bne.n	bf0b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   bf0a8:	4849      	ldr	r0, [pc, #292]	; (bf1d0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   bf0aa:	f000 f8e0 	bl	bf26e <_ZN5spark12NetworkClass9listeningEv>
   bf0ae:	2800      	cmp	r0, #0
   bf0b0:	f040 808a 	bne.w	bf1c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   bf0b4:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   bf0b6:	4a47      	ldr	r2, [pc, #284]	; (bf1d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   bf0b8:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   bf0ba:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   bf0be:	a801      	add	r0, sp, #4
        strm_(stream) {
   bf0c0:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   bf0c2:	f88d 9008 	strb.w	r9, [sp, #8]
   bf0c6:	f7ff f8b4 	bl	be232 <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   bf0ca:	4649      	mov	r1, r9
   bf0cc:	4640      	mov	r0, r8
   bf0ce:	f7fd ff99 	bl	bd004 <log_level_name>
    json.name("l", 1).value(s);
   bf0d2:	4941      	ldr	r1, [pc, #260]	; (bf1d8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   bf0d4:	4680      	mov	r8, r0
   bf0d6:	2201      	movs	r2, #1
   bf0d8:	a801      	add	r0, sp, #4
   bf0da:	f7ff f939 	bl	be350 <_ZN5spark10JSONWriter4nameEPKcj>
   bf0de:	4641      	mov	r1, r8
   bf0e0:	f7ff f9ae 	bl	be440 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   bf0e4:	b13f      	cbz	r7, bf0f6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   bf0e6:	493d      	ldr	r1, [pc, #244]	; (bf1dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   bf0e8:	2201      	movs	r2, #1
   bf0ea:	a801      	add	r0, sp, #4
   bf0ec:	f7ff f930 	bl	be350 <_ZN5spark10JSONWriter4nameEPKcj>
   bf0f0:	4639      	mov	r1, r7
   bf0f2:	f7ff f9a5 	bl	be440 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   bf0f6:	b13e      	cbz	r6, bf108 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   bf0f8:	4939      	ldr	r1, [pc, #228]	; (bf1e0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   bf0fa:	2201      	movs	r2, #1
   bf0fc:	a801      	add	r0, sp, #4
   bf0fe:	f7ff f927 	bl	be350 <_ZN5spark10JSONWriter4nameEPKcj>
   bf102:	4631      	mov	r1, r6
   bf104:	f7ff f99c 	bl	be440 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   bf108:	7923      	ldrb	r3, [r4, #4]
   bf10a:	07df      	lsls	r7, r3, #31
   bf10c:	d50e      	bpl.n	bf12c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   bf10e:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   bf110:	212f      	movs	r1, #47	; 0x2f
   bf112:	4630      	mov	r0, r6
   bf114:	f002 f99a 	bl	c144c <strrchr>
    if (s1) {
   bf118:	b100      	cbz	r0, bf11c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   bf11a:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   bf11c:	4931      	ldr	r1, [pc, #196]	; (bf1e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   bf11e:	2201      	movs	r2, #1
   bf120:	a801      	add	r0, sp, #4
   bf122:	f7ff f915 	bl	be350 <_ZN5spark10JSONWriter4nameEPKcj>
   bf126:	4631      	mov	r1, r6
   bf128:	f7ff f98a 	bl	be440 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   bf12c:	7923      	ldrb	r3, [r4, #4]
   bf12e:	079e      	lsls	r6, r3, #30
   bf130:	d507      	bpl.n	bf142 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   bf132:	492d      	ldr	r1, [pc, #180]	; (bf1e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   bf134:	2202      	movs	r2, #2
   bf136:	a801      	add	r0, sp, #4
   bf138:	f7ff f90a 	bl	be350 <_ZN5spark10JSONWriter4nameEPKcj>
   bf13c:	68e1      	ldr	r1, [r4, #12]
   bf13e:	f7ff f885 	bl	be24c <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   bf142:	7923      	ldrb	r3, [r4, #4]
   bf144:	0758      	lsls	r0, r3, #29
   bf146:	d514      	bpl.n	bf172 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   bf148:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   bf14a:	4633      	mov	r3, r6
   bf14c:	461f      	mov	r7, r3
    for (; *s; ++s) {
   bf14e:	f813 2b01 	ldrb.w	r2, [r3], #1
   bf152:	b12a      	cbz	r2, bf160 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   bf154:	2a20      	cmp	r2, #32
   bf156:	d101      	bne.n	bf15c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   bf158:	461e      	mov	r6, r3
   bf15a:	e7f7      	b.n	bf14c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   bf15c:	2a28      	cmp	r2, #40	; 0x28
   bf15e:	d1f5      	bne.n	bf14c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   bf160:	4922      	ldr	r1, [pc, #136]	; (bf1ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   bf162:	2202      	movs	r2, #2
   bf164:	a801      	add	r0, sp, #4
   bf166:	f7ff f8f3 	bl	be350 <_ZN5spark10JSONWriter4nameEPKcj>
   bf16a:	1bba      	subs	r2, r7, r6
   bf16c:	4631      	mov	r1, r6
   bf16e:	f7ff f8ff 	bl	be370 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   bf172:	7923      	ldrb	r3, [r4, #4]
   bf174:	0719      	lsls	r1, r3, #28
   bf176:	d507      	bpl.n	bf188 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   bf178:	491d      	ldr	r1, [pc, #116]	; (bf1f0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   bf17a:	2201      	movs	r2, #1
   bf17c:	a801      	add	r0, sp, #4
   bf17e:	f7ff f8e7 	bl	be350 <_ZN5spark10JSONWriter4nameEPKcj>
   bf182:	6961      	ldr	r1, [r4, #20]
   bf184:	f7ff f874 	bl	be270 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   bf188:	7923      	ldrb	r3, [r4, #4]
   bf18a:	06da      	lsls	r2, r3, #27
   bf18c:	d508      	bpl.n	bf1a0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   bf18e:	2204      	movs	r2, #4
   bf190:	4918      	ldr	r1, [pc, #96]	; (bf1f4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   bf192:	eb0d 0002 	add.w	r0, sp, r2
   bf196:	f7ff f8db 	bl	be350 <_ZN5spark10JSONWriter4nameEPKcj>
   bf19a:	69a1      	ldr	r1, [r4, #24]
   bf19c:	f7ff f856 	bl	be24c <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   bf1a0:	7923      	ldrb	r3, [r4, #4]
   bf1a2:	069b      	lsls	r3, r3, #26
   bf1a4:	d507      	bpl.n	bf1b6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   bf1a6:	4914      	ldr	r1, [pc, #80]	; (bf1f8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   bf1a8:	2206      	movs	r2, #6
   bf1aa:	a801      	add	r0, sp, #4
   bf1ac:	f7ff f8d0 	bl	be350 <_ZN5spark10JSONWriter4nameEPKcj>
   bf1b0:	69e1      	ldr	r1, [r4, #28]
   bf1b2:	f7ff f945 	bl	be440 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   bf1b6:	a801      	add	r0, sp, #4
   bf1b8:	f7ff f825 	bl	be206 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   bf1bc:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   bf1be:	490f      	ldr	r1, [pc, #60]	; (bf1fc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   bf1c0:	6803      	ldr	r3, [r0, #0]
   bf1c2:	2202      	movs	r2, #2
   bf1c4:	68db      	ldr	r3, [r3, #12]
   bf1c6:	4798      	blx	r3
}
   bf1c8:	b005      	add	sp, #20
   bf1ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bf1ce:	bf00      	nop
   bf1d0:	2003e67c 	.word	0x2003e67c
   bf1d4:	000c546c 	.word	0x000c546c
   bf1d8:	000c5404 	.word	0x000c5404
   bf1dc:	000c4d28 	.word	0x000c4d28
   bf1e0:	000c5938 	.word	0x000c5938
   bf1e4:	000c4b3d 	.word	0x000c4b3d
   bf1e8:	000c5455 	.word	0x000c5455
   bf1ec:	000c43b1 	.word	0x000c43b1
   bf1f0:	000c4412 	.word	0x000c4412
   bf1f4:	000c5458 	.word	0x000c5458
   bf1f8:	000c545d 	.word	0x000c545d
   bf1fc:	000c5452 	.word	0x000c5452

000bf200 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   bf200:	2300      	movs	r3, #0
   bf202:	6840      	ldr	r0, [r0, #4]
   bf204:	461a      	mov	r2, r3
   bf206:	f7fd bfe9 	b.w	bd1dc <network_connect>

000bf20a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   bf20a:	6840      	ldr	r0, [r0, #4]
   bf20c:	2200      	movs	r2, #0
   bf20e:	2102      	movs	r1, #2
   bf210:	f7fd bff4 	b.w	bd1fc <network_disconnect>

000bf214 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   bf214:	2200      	movs	r2, #0
   bf216:	6840      	ldr	r0, [r0, #4]
   bf218:	4611      	mov	r1, r2
   bf21a:	f7fd bfe7 	b.w	bd1ec <network_connecting>

000bf21e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   bf21e:	2200      	movs	r2, #0
   bf220:	6840      	ldr	r0, [r0, #4]
   bf222:	4611      	mov	r1, r2
   bf224:	f7fd bff2 	b.w	bd20c <network_ready>

000bf228 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   bf228:	2300      	movs	r3, #0
   bf22a:	6840      	ldr	r0, [r0, #4]
   bf22c:	461a      	mov	r2, r3
   bf22e:	4619      	mov	r1, r3
   bf230:	f7fd bff4 	b.w	bd21c <network_on>

000bf234 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   bf234:	2300      	movs	r3, #0
   bf236:	6840      	ldr	r0, [r0, #4]
   bf238:	461a      	mov	r2, r3
   bf23a:	4619      	mov	r1, r3
   bf23c:	f7fd bff6 	b.w	bd22c <network_off>

000bf240 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   bf240:	6840      	ldr	r0, [r0, #4]
   bf242:	2100      	movs	r1, #0
   bf244:	f7fe b81a 	b.w	bd27c <network_is_on>

000bf248 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   bf248:	6840      	ldr	r0, [r0, #4]
   bf24a:	2100      	movs	r1, #0
   bf24c:	f7fe b81e 	b.w	bd28c <network_is_off>

000bf250 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   bf250:	6840      	ldr	r0, [r0, #4]
   bf252:	2200      	movs	r2, #0
   bf254:	f081 0101 	eor.w	r1, r1, #1
   bf258:	f7fd bff0 	b.w	bd23c <network_listen>

000bf25c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   bf25c:	6840      	ldr	r0, [r0, #4]
   bf25e:	2200      	movs	r2, #0
   bf260:	f7fd bffc 	b.w	bd25c <network_set_listen_timeout>

000bf264 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   bf264:	2200      	movs	r2, #0
   bf266:	6840      	ldr	r0, [r0, #4]
   bf268:	4611      	mov	r1, r2
   bf26a:	f7fd bfff 	b.w	bd26c <network_get_listen_timeout>

000bf26e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   bf26e:	2200      	movs	r2, #0
   bf270:	6840      	ldr	r0, [r0, #4]
   bf272:	4611      	mov	r1, r2
   bf274:	f7fd bfea 	b.w	bd24c <network_listening>

000bf278 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   bf278:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bf27c:	b095      	sub	sp, #84	; 0x54
   bf27e:	4614      	mov	r4, r2
   bf280:	460d      	mov	r5, r1
   bf282:	4607      	mov	r7, r0
    IPAddress addr;
   bf284:	f7fe fe6e 	bl	bdf64 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   bf288:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   bf28a:	221c      	movs	r2, #28
   bf28c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   bf28e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   bf290:	f001 ffe2 	bl	c1258 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   bf294:	2340      	movs	r3, #64	; 0x40
   bf296:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   bf298:	4620      	mov	r0, r4
   bf29a:	466b      	mov	r3, sp
   bf29c:	aa0c      	add	r2, sp, #48	; 0x30
   bf29e:	2100      	movs	r1, #0
   bf2a0:	f7fd fd40 	bl	bcd24 <netdb_getaddrinfo>
    if (!r) {
   bf2a4:	4604      	mov	r4, r0
   bf2a6:	2800      	cmp	r0, #0
   bf2a8:	d14b      	bne.n	bf342 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bf2aa:	4602      	mov	r2, r0
   bf2ac:	2101      	movs	r1, #1
   bf2ae:	6868      	ldr	r0, [r5, #4]
   bf2b0:	f7fd ffac 	bl	bd20c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bf2b4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bf2b6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bf2b8:	4622      	mov	r2, r4
   bf2ba:	6868      	ldr	r0, [r5, #4]
   bf2bc:	f7fd ffa6 	bl	bd20c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bf2c0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bf2c2:	4681      	mov	r9, r0
        bool ok = false;
   bf2c4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bf2c6:	2e00      	cmp	r6, #0
   bf2c8:	d03b      	beq.n	bf342 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   bf2ca:	2900      	cmp	r1, #0
   bf2cc:	d139      	bne.n	bf342 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   bf2ce:	6873      	ldr	r3, [r6, #4]
   bf2d0:	2b02      	cmp	r3, #2
   bf2d2:	d003      	beq.n	bf2dc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   bf2d4:	2b0a      	cmp	r3, #10
   bf2d6:	d011      	beq.n	bf2fc <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bf2d8:	69f6      	ldr	r6, [r6, #28]
   bf2da:	e7f4      	b.n	bf2c6 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   bf2dc:	f1b8 0f00 	cmp.w	r8, #0
   bf2e0:	d0fa      	beq.n	bf2d8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   bf2e2:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   bf2e4:	a806      	add	r0, sp, #24
   bf2e6:	3104      	adds	r1, #4
class IPAddress : public Printable {
   bf2e8:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   bf2ea:	f7fe fe69 	bl	bdfc0 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   bf2ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bf2f0:	1d3c      	adds	r4, r7, #4
   bf2f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bf2f4:	682b      	ldr	r3, [r5, #0]
   bf2f6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bf2f8:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   bf2fa:	e7ed      	b.n	bf2d8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   bf2fc:	f1b9 0f00 	cmp.w	r9, #0
   bf300:	d0ea      	beq.n	bf2d8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   bf302:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   bf304:	2210      	movs	r2, #16
   bf306:	a801      	add	r0, sp, #4
   bf308:	f001 ffa6 	bl	c1258 <memset>
                    a.v = 6;
   bf30c:	2306      	movs	r3, #6
   bf30e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   bf312:	ad01      	add	r5, sp, #4
   bf314:	f104 0308 	add.w	r3, r4, #8
   bf318:	3418      	adds	r4, #24
   bf31a:	6818      	ldr	r0, [r3, #0]
   bf31c:	6859      	ldr	r1, [r3, #4]
   bf31e:	462a      	mov	r2, r5
   bf320:	c203      	stmia	r2!, {r0, r1}
   bf322:	3308      	adds	r3, #8
   bf324:	42a3      	cmp	r3, r4
   bf326:	4615      	mov	r5, r2
   bf328:	d1f7      	bne.n	bf31a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   bf32a:	a901      	add	r1, sp, #4
   bf32c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   bf32e:	ad07      	add	r5, sp, #28
   bf330:	f7fe fe26 	bl	bdf80 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   bf334:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bf336:	1d3c      	adds	r4, r7, #4
   bf338:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bf33a:	682b      	ldr	r3, [r5, #0]
   bf33c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bf33e:	4649      	mov	r1, r9
   bf340:	e7ca      	b.n	bf2d8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   bf342:	9800      	ldr	r0, [sp, #0]
   bf344:	f7fd fce6 	bl	bcd14 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   bf348:	4638      	mov	r0, r7
   bf34a:	b015      	add	sp, #84	; 0x54
   bf34c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000bf350 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   bf350:	4b02      	ldr	r3, [pc, #8]	; (bf35c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   bf352:	4a03      	ldr	r2, [pc, #12]	; (bf360 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   bf354:	601a      	str	r2, [r3, #0]
   bf356:	2200      	movs	r2, #0
   bf358:	605a      	str	r2, [r3, #4]

} // spark
   bf35a:	4770      	bx	lr
   bf35c:	2003e67c 	.word	0x2003e67c
   bf360:	000c54e4 	.word	0x000c54e4

000bf364 <_ZN4PMIC4lockEv.constprop.0.isra.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   bf364:	b508      	push	{r3, lr}
            return &Wire1;
   bf366:	f001 f961 	bl	c062c <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   bf36a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   bf36e:	f7fe bd81 	b.w	bde74 <_ZN7TwoWire4lockEv>

000bf372 <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   bf372:	b510      	push	{r4, lr}
   bf374:	4604      	mov	r4, r0
    lock_(_lock)
   bf376:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   bf378:	b109      	cbz	r1, bf37e <_ZN4PMICC1Eb+0xc>
        lock();
   bf37a:	f7ff fff3 	bl	bf364 <_ZN4PMIC4lockEv.constprop.0.isra.0>
}
   bf37e:	4620      	mov	r0, r4
   bf380:	bd10      	pop	{r4, pc}

000bf382 <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
   bf382:	b508      	push	{r3, lr}
            return &Wire1;
   bf384:	f001 f952 	bl	c062c <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->unlock();
}
   bf388:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
   bf38c:	f7fe bd7b 	b.w	bde86 <_ZN7TwoWire6unlockEv>

000bf390 <_ZN4PMICD1Ev>:
PMIC::~PMIC()
   bf390:	b510      	push	{r4, lr}
    if (lock_) {
   bf392:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
   bf394:	4604      	mov	r4, r0
    if (lock_) {
   bf396:	b10b      	cbz	r3, bf39c <_ZN4PMICD1Ev+0xc>
        unlock();
   bf398:	f7ff fff3 	bl	bf382 <_ZN4PMIC6unlockEv>
}
   bf39c:	4620      	mov	r0, r4
   bf39e:	bd10      	pop	{r4, pc}

000bf3a0 <_ZNSt10lock_guardI4PMICED1Ev>:
      ~lock_guard()
   bf3a0:	b510      	push	{r4, lr}
   bf3a2:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   bf3a4:	6800      	ldr	r0, [r0, #0]
   bf3a6:	f7ff ffec 	bl	bf382 <_ZN4PMIC6unlockEv>
   bf3aa:	4620      	mov	r0, r4
   bf3ac:	bd10      	pop	{r4, pc}

000bf3ae <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
   bf3ae:	b530      	push	{r4, r5, lr}
   bf3b0:	b087      	sub	sp, #28
   bf3b2:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bf3b4:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bf3b6:	f7ff ffd5 	bl	bf364 <_ZN4PMIC4lockEv.constprop.0.isra.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bf3ba:	226b      	movs	r2, #107	; 0x6b
   bf3bc:	2300      	movs	r3, #0
   bf3be:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
   bf3c2:	2401      	movs	r4, #1
   bf3c4:	230a      	movs	r3, #10
   bf3c6:	e9cd 4304 	strd	r4, r3, [sp, #16]
            return &Wire1;
   bf3ca:	f001 f92f 	bl	c062c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   bf3ce:	a902      	add	r1, sp, #8
   bf3d0:	f7fe fd34 	bl	bde3c <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   bf3d4:	f001 f92a 	bl	c062c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(startAddress);
   bf3d8:	6803      	ldr	r3, [r0, #0]
   bf3da:	4629      	mov	r1, r5
   bf3dc:	689b      	ldr	r3, [r3, #8]
   bf3de:	4798      	blx	r3
            return &Wire1;
   bf3e0:	f001 f924 	bl	c062c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   bf3e4:	4621      	mov	r1, r4
   bf3e6:	f7fe fd41 	bl	bde6c <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
   bf3ea:	9403      	str	r4, [sp, #12]
            return &Wire1;
   bf3ec:	f001 f91e 	bl	c062c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->requestFrom(config);
   bf3f0:	a902      	add	r1, sp, #8
   bf3f2:	f7fe fcf3 	bl	bdddc <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire1;
   bf3f6:	f001 f919 	bl	c062c <_Z20__fetch_global_Wire1v>
    DATA = pmicWireInstance()->read();
   bf3fa:	6803      	ldr	r3, [r0, #0]
   bf3fc:	695b      	ldr	r3, [r3, #20]
   bf3fe:	4798      	blx	r3
   bf400:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
   bf402:	a801      	add	r0, sp, #4
   bf404:	f7ff ffcc 	bl	bf3a0 <_ZNSt10lock_guardI4PMICED1Ev>
}
   bf408:	b2e0      	uxtb	r0, r4
   bf40a:	b007      	add	sp, #28
   bf40c:	bd30      	pop	{r4, r5, pc}

000bf40e <_ZN4PMIC13writeRegisterEhh>:
void PMIC::writeRegister(byte address, byte DATA) {
   bf40e:	b570      	push	{r4, r5, r6, lr}
   bf410:	b086      	sub	sp, #24
   bf412:	460d      	mov	r5, r1
   bf414:	4614      	mov	r4, r2
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bf416:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bf418:	f7ff ffa4 	bl	bf364 <_ZN4PMIC4lockEv.constprop.0.isra.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   bf41c:	226b      	movs	r2, #107	; 0x6b
   bf41e:	2300      	movs	r3, #0
   bf420:	e9cd 2302 	strd	r2, r3, [sp, #8]
    timeout_ = ms;
   bf424:	2601      	movs	r6, #1
   bf426:	230a      	movs	r3, #10
   bf428:	e9cd 6304 	strd	r6, r3, [sp, #16]
            return &Wire1;
   bf42c:	f001 f8fe 	bl	c062c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   bf430:	a902      	add	r1, sp, #8
   bf432:	f7fe fd03 	bl	bde3c <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   bf436:	f001 f8f9 	bl	c062c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(address);
   bf43a:	6803      	ldr	r3, [r0, #0]
   bf43c:	4629      	mov	r1, r5
   bf43e:	689b      	ldr	r3, [r3, #8]
   bf440:	4798      	blx	r3
            return &Wire1;
   bf442:	f001 f8f3 	bl	c062c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(DATA);
   bf446:	6803      	ldr	r3, [r0, #0]
   bf448:	4621      	mov	r1, r4
   bf44a:	689b      	ldr	r3, [r3, #8]
   bf44c:	4798      	blx	r3
            return &Wire1;
   bf44e:	f001 f8ed 	bl	c062c <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   bf452:	4631      	mov	r1, r6
   bf454:	f7fe fd0a 	bl	bde6c <_ZN7TwoWire15endTransmissionEh>
    std::lock_guard<PMIC> l(*this);
   bf458:	a801      	add	r0, sp, #4
   bf45a:	f7ff ffa1 	bl	bf3a0 <_ZNSt10lock_guardI4PMICED1Ev>
}
   bf45e:	b006      	add	sp, #24
   bf460:	bd70      	pop	{r4, r5, r6, pc}

000bf462 <_ZN4PMIC14enableChargingEv>:
bool PMIC::enableCharging() {
   bf462:	b513      	push	{r0, r1, r4, lr}
   bf464:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bf466:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bf468:	f7ff ff7c 	bl	bf364 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   bf46c:	2101      	movs	r1, #1
   bf46e:	4620      	mov	r0, r4
   bf470:	f7ff ff9d 	bl	bf3ae <_ZN4PMIC12readRegisterEh>
    if ((DATA & 0b00110000) != 0b00010000) {
   bf474:	f000 0330 	and.w	r3, r0, #48	; 0x30
   bf478:	2b10      	cmp	r3, #16
   bf47a:	d007      	beq.n	bf48c <_ZN4PMIC14enableChargingEv+0x2a>
        DATA = DATA & 0b11001111;
   bf47c:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
        writeRegister(POWERON_CONFIG_REGISTER, DATA);
   bf480:	f042 0210 	orr.w	r2, r2, #16
   bf484:	2101      	movs	r1, #1
   bf486:	4620      	mov	r0, r4
   bf488:	f7ff ffc1 	bl	bf40e <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   bf48c:	a801      	add	r0, sp, #4
   bf48e:	f7ff ff87 	bl	bf3a0 <_ZNSt10lock_guardI4PMICED1Ev>
}
   bf492:	2001      	movs	r0, #1
   bf494:	b002      	add	sp, #8
   bf496:	bd10      	pop	{r4, pc}

000bf498 <_ZN4PMIC15disableChargingEv>:
bool PMIC::disableCharging() {
   bf498:	b513      	push	{r0, r1, r4, lr}
   bf49a:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   bf49c:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   bf49e:	f7ff ff61 	bl	bf364 <_ZN4PMIC4lockEv.constprop.0.isra.0>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
   bf4a2:	2101      	movs	r1, #1
   bf4a4:	4620      	mov	r0, r4
   bf4a6:	f7ff ff82 	bl	bf3ae <_ZN4PMIC12readRegisterEh>
    if ((DATA & 0b00110000) != 0) {
   bf4aa:	f010 0f30 	tst.w	r0, #48	; 0x30
   bf4ae:	d005      	beq.n	bf4bc <_ZN4PMIC15disableChargingEv+0x24>
        writeRegister(POWERON_CONFIG_REGISTER, (DATA & 0b11001111));
   bf4b0:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
   bf4b4:	2101      	movs	r1, #1
   bf4b6:	4620      	mov	r0, r4
   bf4b8:	f7ff ffa9 	bl	bf40e <_ZN4PMIC13writeRegisterEhh>
    std::lock_guard<PMIC> l(*this);
   bf4bc:	a801      	add	r0, sp, #4
   bf4be:	f7ff ff6f 	bl	bf3a0 <_ZNSt10lock_guardI4PMICED1Ev>
}
   bf4c2:	2001      	movs	r0, #1
   bf4c4:	b002      	add	sp, #8
   bf4c6:	bd10      	pop	{r4, pc}

000bf4c8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   bf4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bf4ca:	4606      	mov	r6, r0
   bf4cc:	460d      	mov	r5, r1
  size_t n = 0;
   bf4ce:	188f      	adds	r7, r1, r2
   bf4d0:	2400      	movs	r4, #0
  while (size--) {
   bf4d2:	42bd      	cmp	r5, r7
   bf4d4:	d00c      	beq.n	bf4f0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   bf4d6:	6833      	ldr	r3, [r6, #0]
   bf4d8:	f815 1b01 	ldrb.w	r1, [r5], #1
   bf4dc:	689b      	ldr	r3, [r3, #8]
   bf4de:	4630      	mov	r0, r6
   bf4e0:	4798      	blx	r3
     if (chunk>=0)
   bf4e2:	1e03      	subs	r3, r0, #0
   bf4e4:	db01      	blt.n	bf4ea <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   bf4e6:	441c      	add	r4, r3
  while (size--) {
   bf4e8:	e7f3      	b.n	bf4d2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   bf4ea:	2c00      	cmp	r4, #0
   bf4ec:	bf08      	it	eq
   bf4ee:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   bf4f0:	4620      	mov	r0, r4
   bf4f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bf4f4 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   bf4f4:	b513      	push	{r0, r1, r4, lr}
   bf4f6:	4604      	mov	r4, r0
    }
   bf4f8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   bf4fa:	b159      	cbz	r1, bf514 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   bf4fc:	9101      	str	r1, [sp, #4]
   bf4fe:	f001 ff76 	bl	c13ee <strlen>
   bf502:	6823      	ldr	r3, [r4, #0]
   bf504:	9901      	ldr	r1, [sp, #4]
   bf506:	68db      	ldr	r3, [r3, #12]
   bf508:	4602      	mov	r2, r0
   bf50a:	4620      	mov	r0, r4
    }
   bf50c:	b002      	add	sp, #8
   bf50e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   bf512:	4718      	bx	r3
    }
   bf514:	b002      	add	sp, #8
   bf516:	bd10      	pop	{r4, pc}

000bf518 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   bf518:	b508      	push	{r3, lr}
  return write(str);
   bf51a:	f7ff ffeb 	bl	bf4f4 <_ZN5Print5writeEPKc>
}
   bf51e:	bd08      	pop	{r3, pc}

000bf520 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   bf520:	6803      	ldr	r3, [r0, #0]
   bf522:	689b      	ldr	r3, [r3, #8]
   bf524:	4718      	bx	r3

000bf526 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   bf526:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   bf528:	210d      	movs	r1, #13
{
   bf52a:	4605      	mov	r5, r0
  size_t n = print('\r');
   bf52c:	f7ff fff8 	bl	bf520 <_ZN5Print5printEc>
  n += print('\n');
   bf530:	210a      	movs	r1, #10
  size_t n = print('\r');
   bf532:	4604      	mov	r4, r0
  n += print('\n');
   bf534:	4628      	mov	r0, r5
   bf536:	f7ff fff3 	bl	bf520 <_ZN5Print5printEc>
  return n;
}
   bf53a:	4420      	add	r0, r4
   bf53c:	bd38      	pop	{r3, r4, r5, pc}

000bf53e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   bf53e:	b530      	push	{r4, r5, lr}
   bf540:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   bf542:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   bf544:	2a01      	cmp	r2, #1
  *str = '\0';
   bf546:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   bf54a:	bf98      	it	ls
   bf54c:	220a      	movls	r2, #10
   bf54e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   bf550:	460d      	mov	r5, r1
   bf552:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   bf556:	fb01 5312 	mls	r3, r1, r2, r5
   bf55a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bf55e:	2b09      	cmp	r3, #9
   bf560:	bf94      	ite	ls
   bf562:	3330      	addls	r3, #48	; 0x30
   bf564:	3337      	addhi	r3, #55	; 0x37
   bf566:	b2db      	uxtb	r3, r3
  } while(n);
   bf568:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bf56a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   bf56e:	d9ef      	bls.n	bf550 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   bf570:	4621      	mov	r1, r4
   bf572:	f7ff ffbf 	bl	bf4f4 <_ZN5Print5writeEPKc>
}
   bf576:	b00b      	add	sp, #44	; 0x2c
   bf578:	bd30      	pop	{r4, r5, pc}
	...

000bf57c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   bf57c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bf580:	ec55 4b10 	vmov	r4, r5, d0
   bf584:	4606      	mov	r6, r0
   bf586:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   bf588:	ee10 2a10 	vmov	r2, s0
   bf58c:	ee10 0a10 	vmov	r0, s0
   bf590:	462b      	mov	r3, r5
   bf592:	4629      	mov	r1, r5
   bf594:	f001 fd1a 	bl	c0fcc <__aeabi_dcmpun>
   bf598:	b140      	cbz	r0, bf5ac <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   bf59a:	4953      	ldr	r1, [pc, #332]	; (bf6e8 <_ZN5Print10printFloatEdh+0x16c>)
   bf59c:	4630      	mov	r0, r6
   bf59e:	f7ff ffa9 	bl	bf4f4 <_ZN5Print5writeEPKc>
   bf5a2:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   bf5a4:	4650      	mov	r0, sl
   bf5a6:	b003      	add	sp, #12
   bf5a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   bf5ac:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   bf5b0:	4b4e      	ldr	r3, [pc, #312]	; (bf6ec <_ZN5Print10printFloatEdh+0x170>)
   bf5b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bf5b6:	4620      	mov	r0, r4
   bf5b8:	4649      	mov	r1, r9
   bf5ba:	f001 fd07 	bl	c0fcc <__aeabi_dcmpun>
   bf5be:	b948      	cbnz	r0, bf5d4 <_ZN5Print10printFloatEdh+0x58>
   bf5c0:	4b4a      	ldr	r3, [pc, #296]	; (bf6ec <_ZN5Print10printFloatEdh+0x170>)
   bf5c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bf5c6:	4620      	mov	r0, r4
   bf5c8:	4649      	mov	r1, r9
   bf5ca:	f001 fce1 	bl	c0f90 <__aeabi_dcmple>
   bf5ce:	b908      	cbnz	r0, bf5d4 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   bf5d0:	4947      	ldr	r1, [pc, #284]	; (bf6f0 <_ZN5Print10printFloatEdh+0x174>)
   bf5d2:	e7e3      	b.n	bf59c <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   bf5d4:	4b47      	ldr	r3, [pc, #284]	; (bf6f4 <_ZN5Print10printFloatEdh+0x178>)
   bf5d6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   bf5da:	4620      	mov	r0, r4
   bf5dc:	4629      	mov	r1, r5
   bf5de:	f001 fceb 	bl	c0fb8 <__aeabi_dcmpgt>
   bf5e2:	b108      	cbz	r0, bf5e8 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   bf5e4:	4944      	ldr	r1, [pc, #272]	; (bf6f8 <_ZN5Print10printFloatEdh+0x17c>)
   bf5e6:	e7d9      	b.n	bf59c <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   bf5e8:	4b44      	ldr	r3, [pc, #272]	; (bf6fc <_ZN5Print10printFloatEdh+0x180>)
   bf5ea:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   bf5ee:	4620      	mov	r0, r4
   bf5f0:	4629      	mov	r1, r5
   bf5f2:	f001 fcc3 	bl	c0f7c <__aeabi_dcmplt>
   bf5f6:	2800      	cmp	r0, #0
   bf5f8:	d1f4      	bne.n	bf5e4 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   bf5fa:	2200      	movs	r2, #0
   bf5fc:	2300      	movs	r3, #0
   bf5fe:	4620      	mov	r0, r4
   bf600:	4629      	mov	r1, r5
   bf602:	f001 fcbb 	bl	c0f7c <__aeabi_dcmplt>
   bf606:	b1d0      	cbz	r0, bf63e <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   bf608:	212d      	movs	r1, #45	; 0x2d
   bf60a:	4630      	mov	r0, r6
   bf60c:	f7ff ff88 	bl	bf520 <_ZN5Print5printEc>
     number = -number;
   bf610:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   bf614:	4682      	mov	sl, r0
     number = -number;
   bf616:	461d      	mov	r5, r3
  double rounding = 0.5;
   bf618:	4939      	ldr	r1, [pc, #228]	; (bf700 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   bf61a:	f8df 90ec 	ldr.w	r9, [pc, #236]	; bf708 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   bf61e:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   bf622:	2000      	movs	r0, #0
    rounding /= 10.0;
   bf624:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   bf628:	fa5f f38b 	uxtb.w	r3, fp
   bf62c:	429f      	cmp	r7, r3
   bf62e:	d908      	bls.n	bf642 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   bf630:	4642      	mov	r2, r8
   bf632:	464b      	mov	r3, r9
   bf634:	f001 fb5a 	bl	c0cec <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   bf638:	f10b 0b01 	add.w	fp, fp, #1
   bf63c:	e7f4      	b.n	bf628 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   bf63e:	4682      	mov	sl, r0
   bf640:	e7ea      	b.n	bf618 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   bf642:	4622      	mov	r2, r4
   bf644:	462b      	mov	r3, r5
   bf646:	f001 f871 	bl	c072c <__adddf3>
   bf64a:	460d      	mov	r5, r1
   bf64c:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   bf64e:	f001 fcfb 	bl	c1048 <__aeabi_d2uiz>
   bf652:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   bf654:	f001 f9a6 	bl	c09a4 <__aeabi_ui2d>
   bf658:	4602      	mov	r2, r0
   bf65a:	460b      	mov	r3, r1
   bf65c:	4620      	mov	r0, r4
   bf65e:	4629      	mov	r1, r5
   bf660:	f001 f862 	bl	c0728 <__aeabi_dsub>
        return printNumber(val, base) + t;
   bf664:	220a      	movs	r2, #10
   bf666:	4604      	mov	r4, r0
   bf668:	460d      	mov	r5, r1
   bf66a:	4630      	mov	r0, r6
   bf66c:	4641      	mov	r1, r8
   bf66e:	f7ff ff66 	bl	bf53e <_ZN5Print11printNumberEmh>
  n += print(int_part);
   bf672:	4482      	add	sl, r0
  if (digits > 0) {
   bf674:	2f00      	cmp	r7, #0
   bf676:	d095      	beq.n	bf5a4 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   bf678:	4922      	ldr	r1, [pc, #136]	; (bf704 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   bf67a:	f8df 908c 	ldr.w	r9, [pc, #140]	; bf708 <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   bf67e:	4630      	mov	r0, r6
   bf680:	f7ff ff38 	bl	bf4f4 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   bf684:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   bf688:	4482      	add	sl, r0
  while (digits-- > 0)
   bf68a:	2f00      	cmp	r7, #0
   bf68c:	d08a      	beq.n	bf5a4 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   bf68e:	4642      	mov	r2, r8
   bf690:	464b      	mov	r3, r9
   bf692:	4620      	mov	r0, r4
   bf694:	4629      	mov	r1, r5
   bf696:	f001 f9ff 	bl	c0a98 <__aeabi_dmul>
   bf69a:	4604      	mov	r4, r0
   bf69c:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   bf69e:	f001 fcab 	bl	c0ff8 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   bf6a2:	f1b0 0b00 	subs.w	fp, r0, #0
   bf6a6:	da1c      	bge.n	bf6e2 <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   bf6a8:	212d      	movs	r1, #45	; 0x2d
   bf6aa:	4630      	mov	r0, r6
   bf6ac:	f7ff ff38 	bl	bf520 <_ZN5Print5printEc>
            val = -n;
   bf6b0:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   bf6b4:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   bf6b6:	220a      	movs	r2, #10
   bf6b8:	4630      	mov	r0, r6
   bf6ba:	9301      	str	r3, [sp, #4]
   bf6bc:	f7ff ff3f 	bl	bf53e <_ZN5Print11printNumberEmh>
   bf6c0:	9b01      	ldr	r3, [sp, #4]
   bf6c2:	4418      	add	r0, r3
    n += print(toPrint);
   bf6c4:	4482      	add	sl, r0
    remainder -= toPrint;
   bf6c6:	4658      	mov	r0, fp
   bf6c8:	f001 f97c 	bl	c09c4 <__aeabi_i2d>
   bf6cc:	4602      	mov	r2, r0
   bf6ce:	460b      	mov	r3, r1
   bf6d0:	4620      	mov	r0, r4
   bf6d2:	4629      	mov	r1, r5
   bf6d4:	f001 f828 	bl	c0728 <__aeabi_dsub>
   bf6d8:	3f01      	subs	r7, #1
   bf6da:	4604      	mov	r4, r0
   bf6dc:	460d      	mov	r5, r1
   bf6de:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   bf6e0:	e7d3      	b.n	bf68a <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   bf6e2:	4659      	mov	r1, fp
        size_t t = 0;
   bf6e4:	2300      	movs	r3, #0
   bf6e6:	e7e6      	b.n	bf6b6 <_ZN5Print10printFloatEdh+0x13a>
   bf6e8:	000c5518 	.word	0x000c5518
   bf6ec:	7fefffff 	.word	0x7fefffff
   bf6f0:	000c551c 	.word	0x000c551c
   bf6f4:	41efffff 	.word	0x41efffff
   bf6f8:	000c5520 	.word	0x000c5520
   bf6fc:	c1efffff 	.word	0xc1efffff
   bf700:	3fe00000 	.word	0x3fe00000
   bf704:	000c5558 	.word	0x000c5558
   bf708:	40240000 	.word	0x40240000

000bf70c <_ZN5Print5printEfi>:
{
   bf70c:	b538      	push	{r3, r4, r5, lr}
   bf70e:	4604      	mov	r4, r0
   bf710:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   bf714:	b2cd      	uxtb	r5, r1
   bf716:	f001 f967 	bl	c09e8 <__aeabi_f2d>
   bf71a:	ec41 0b10 	vmov	d0, r0, r1
   bf71e:	4629      	mov	r1, r5
   bf720:	4620      	mov	r0, r4
}
   bf722:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   bf726:	f7ff bf29 	b.w	bf57c <_ZN5Print10printFloatEdh>

000bf72a <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   bf72a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bf72e:	b086      	sub	sp, #24
   bf730:	af00      	add	r7, sp, #0
   bf732:	4605      	mov	r5, r0
   bf734:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   bf736:	1d38      	adds	r0, r7, #4
   bf738:	2114      	movs	r1, #20
{
   bf73a:	4614      	mov	r4, r2
    va_copy(args2, args);
   bf73c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   bf73e:	f7fd fddd 	bl	bd2fc <vsnprintf>

    if (n<bufsize)
   bf742:	2813      	cmp	r0, #19
   bf744:	d80e      	bhi.n	bf764 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   bf746:	1d39      	adds	r1, r7, #4
   bf748:	4628      	mov	r0, r5
   bf74a:	f7ff fed3 	bl	bf4f4 <_ZN5Print5writeEPKc>
   bf74e:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   bf750:	b11e      	cbz	r6, bf75a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   bf752:	4628      	mov	r0, r5
   bf754:	f7ff fee7 	bl	bf526 <_ZN5Print7printlnEv>
   bf758:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   bf75a:	4620      	mov	r0, r4
   bf75c:	3718      	adds	r7, #24
   bf75e:	46bd      	mov	sp, r7
   bf760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   bf764:	f100 0308 	add.w	r3, r0, #8
   bf768:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   bf76c:	46e8      	mov	r8, sp
        char bigger[n+1];
   bf76e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   bf772:	4622      	mov	r2, r4
   bf774:	1c41      	adds	r1, r0, #1
   bf776:	683b      	ldr	r3, [r7, #0]
   bf778:	4668      	mov	r0, sp
   bf77a:	f7fd fdbf 	bl	bd2fc <vsnprintf>
  return write(str);
   bf77e:	4669      	mov	r1, sp
   bf780:	4628      	mov	r0, r5
   bf782:	f7ff feb7 	bl	bf4f4 <_ZN5Print5writeEPKc>
   bf786:	4604      	mov	r4, r0
   bf788:	46c5      	mov	sp, r8
   bf78a:	e7e1      	b.n	bf750 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000bf78c <_Z6randomi>:
#include "spark_wiring_random.h"
#include <stdlib.h>

int random(int max)
{
   bf78c:	b510      	push	{r4, lr}
  if (0 == max) {
   bf78e:	4604      	mov	r4, r0
   bf790:	b128      	cbz	r0, bf79e <_Z6randomi+0x12>
    return 0;
  }
  return rand() % max;
   bf792:	f001 fda7 	bl	c12e4 <rand>
   bf796:	fb90 f3f4 	sdiv	r3, r0, r4
   bf79a:	fb03 0414 	mls	r4, r3, r4, r0
}
   bf79e:	4620      	mov	r0, r4
   bf7a0:	bd10      	pop	{r4, pc}

000bf7a2 <_Z6randomii>:

int random(int min, int max)
{
  if (min >= max) {
   bf7a2:	4288      	cmp	r0, r1
{
   bf7a4:	b510      	push	{r4, lr}
   bf7a6:	4604      	mov	r4, r0
  if (min >= max) {
   bf7a8:	da03      	bge.n	bf7b2 <_Z6randomii+0x10>
    return min;
  }
  return random(max - min) + min;
   bf7aa:	1a08      	subs	r0, r1, r0
   bf7ac:	f7ff ffee 	bl	bf78c <_Z6randomi>
   bf7b0:	4404      	add	r4, r0
}
   bf7b2:	4620      	mov	r0, r4
   bf7b4:	bd10      	pop	{r4, pc}
	...

000bf7b8 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   bf7b8:	4b01      	ldr	r3, [pc, #4]	; (bf7c0 <_GLOBAL__sub_I_RGB+0x8>)
   bf7ba:	2200      	movs	r2, #0
   bf7bc:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   bf7be:	4770      	bx	lr
   bf7c0:	2003e684 	.word	0x2003e684

000bf7c4 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   bf7c4:	2100      	movs	r1, #0
   bf7c6:	f7fd baf5 	b.w	bcdb4 <hal_spi_release>

000bf7ca <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   bf7ca:	2100      	movs	r1, #0
   bf7cc:	f7fd baea 	b.w	bcda4 <hal_spi_acquire>

000bf7d0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   bf7d0:	b510      	push	{r4, lr}
   bf7d2:	4604      	mov	r4, r0
   bf7d4:	4608      	mov	r0, r1
{
    _spi = spi;
   bf7d6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   bf7d8:	f7fd fac4 	bl	bcd64 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   bf7dc:	2300      	movs	r3, #0
   bf7de:	6063      	str	r3, [r4, #4]
}
   bf7e0:	4620      	mov	r0, r4
   bf7e2:	bd10      	pop	{r4, pc}

000bf7e4 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   bf7e4:	b513      	push	{r0, r1, r4, lr}
   bf7e6:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   bf7e8:	7800      	ldrb	r0, [r0, #0]
   bf7ea:	f7ff ffee 	bl	bf7ca <_ZN8SPIClass4lockEv.isra.0>
   bf7ee:	b958      	cbnz	r0, bf808 <_ZN8SPIClass5beginEv+0x24>
   bf7f0:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   bf7f2:	9001      	str	r0, [sp, #4]
   bf7f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   bf7f8:	f7fd fa9c 	bl	bcd34 <hal_spi_begin>
        unlock();
   bf7fc:	9801      	ldr	r0, [sp, #4]
    }
}
   bf7fe:	b002      	add	sp, #8
   bf800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bf804:	f7ff bfde 	b.w	bf7c4 <_ZN8SPIClass6unlockEv.isra.0>
   bf808:	b002      	add	sp, #8
   bf80a:	bd10      	pop	{r4, pc}

000bf80c <_ZN8SPIClass3endEv>:
        unlock();
    }
}

void SPIClass::end()
{
   bf80c:	b513      	push	{r0, r1, r4, lr}
   bf80e:	4604      	mov	r4, r0
    if (!lock())
   bf810:	7800      	ldrb	r0, [r0, #0]
   bf812:	f7ff ffda 	bl	bf7ca <_ZN8SPIClass4lockEv.isra.0>
   bf816:	b948      	cbnz	r0, bf82c <_ZN8SPIClass3endEv+0x20>
   bf818:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_end(_spi);
   bf81a:	9001      	str	r0, [sp, #4]
   bf81c:	f7fd fa92 	bl	bcd44 <hal_spi_end>
        unlock();
   bf820:	9801      	ldr	r0, [sp, #4]
    }
}
   bf822:	b002      	add	sp, #8
   bf824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   bf828:	f7ff bfcc 	b.w	bf7c4 <_ZN8SPIClass6unlockEv.isra.0>
   bf82c:	b002      	add	sp, #8
   bf82e:	bd10      	pop	{r4, pc}

000bf830 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   bf830:	7800      	ldrb	r0, [r0, #0]
   bf832:	f7ff bfc7 	b.w	bf7c4 <_ZN8SPIClass6unlockEv.isra.0>
	...

000bf838 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   bf838:	0840      	lsrs	r0, r0, #1
{
   bf83a:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   bf83c:	6018      	str	r0, [r3, #0]
   bf83e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   bf840:	6818      	ldr	r0, [r3, #0]
   bf842:	4288      	cmp	r0, r1
   bf844:	b2e5      	uxtb	r5, r4
   bf846:	d906      	bls.n	bf856 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   bf848:	3401      	adds	r4, #1
   bf84a:	2c08      	cmp	r4, #8
   bf84c:	d002      	beq.n	bf854 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   bf84e:	0840      	lsrs	r0, r0, #1
   bf850:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   bf852:	e7f5      	b.n	bf840 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   bf854:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   bf856:	4b02      	ldr	r3, [pc, #8]	; (bf860 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   bf858:	5d5b      	ldrb	r3, [r3, r5]
   bf85a:	7013      	strb	r3, [r2, #0]
}
   bf85c:	bd30      	pop	{r4, r5, pc}
   bf85e:	bf00      	nop
   bf860:	000c5524 	.word	0x000c5524

000bf864 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   bf864:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bf868:	4606      	mov	r6, r0
   bf86a:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   bf86c:	7800      	ldrb	r0, [r0, #0]
{
   bf86e:	460c      	mov	r4, r1
    CHECK(lock());
   bf870:	f7ff ffab 	bl	bf7ca <_ZN8SPIClass4lockEv.isra.0>
   bf874:	2800      	cmp	r0, #0
   bf876:	db1b      	blt.n	bf8b0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   bf878:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   bf87a:	2214      	movs	r2, #20
   bf87c:	2100      	movs	r1, #0
   bf87e:	a809      	add	r0, sp, #36	; 0x24
   bf880:	f001 fcea 	bl	c1258 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   bf884:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   bf886:	2200      	movs	r2, #0
   bf888:	a909      	add	r1, sp, #36	; 0x24
   bf88a:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   bf88c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   bf890:	f7fd fa78 	bl	bcd84 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   bf894:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   bf898:	b113      	cbz	r3, bf8a0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   bf89a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   bf89e:	b155      	cbz	r5, bf8b6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   bf8a0:	2700      	movs	r7, #0
   bf8a2:	46b9      	mov	r9, r7
   bf8a4:	46b8      	mov	r8, r7
   bf8a6:	2501      	movs	r5, #1
    if (default_ && other.default_)
   bf8a8:	7923      	ldrb	r3, [r4, #4]
   bf8aa:	b15d      	cbz	r5, bf8c4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   bf8ac:	b1c3      	cbz	r3, bf8e0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   bf8ae:	2000      	movs	r0, #0
}
   bf8b0:	b00f      	add	sp, #60	; 0x3c
   bf8b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   bf8b6:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   bf8ba:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   bf8be:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   bf8c2:	e7f1      	b.n	bf8a8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   bf8c4:	2b00      	cmp	r3, #0
   bf8c6:	d135      	bne.n	bf934 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   bf8c8:	68a3      	ldr	r3, [r4, #8]
   bf8ca:	4543      	cmp	r3, r8
   bf8cc:	d108      	bne.n	bf8e0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   bf8ce:	f88d 9020 	strb.w	r9, [sp, #32]
   bf8d2:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   bf8d6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   bf8da:	89a3      	ldrh	r3, [r4, #12]
   bf8dc:	429a      	cmp	r2, r3
   bf8de:	d0e6      	beq.n	bf8ae <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   bf8e0:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   bf8e2:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   bf8e4:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   bf8e8:	980a      	ldr	r0, [sp, #40]	; 0x28
   bf8ea:	ab04      	add	r3, sp, #16
   bf8ec:	f10d 020f 	add.w	r2, sp, #15
   bf8f0:	f7ff ffa2 	bl	bf838 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   bf8f4:	7921      	ldrb	r1, [r4, #4]
   bf8f6:	b985      	cbnz	r5, bf91a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   bf8f8:	b989      	cbnz	r1, bf91e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   bf8fa:	68a3      	ldr	r3, [r4, #8]
   bf8fc:	4543      	cmp	r3, r8
   bf8fe:	d30e      	bcc.n	bf91e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   bf900:	f88d 9020 	strb.w	r9, [sp, #32]
   bf904:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   bf908:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   bf90c:	89a3      	ldrh	r3, [r4, #12]
   bf90e:	429a      	cmp	r2, r3
   bf910:	d105      	bne.n	bf91e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   bf912:	9b04      	ldr	r3, [sp, #16]
   bf914:	4543      	cmp	r3, r8
   bf916:	d102      	bne.n	bf91e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   bf918:	e7c9      	b.n	bf8ae <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   bf91a:	2900      	cmp	r1, #0
   bf91c:	d1f9      	bne.n	bf912 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   bf91e:	2300      	movs	r3, #0
   bf920:	9301      	str	r3, [sp, #4]
   bf922:	7b63      	ldrb	r3, [r4, #13]
   bf924:	9300      	str	r3, [sp, #0]
   bf926:	f89d 200f 	ldrb.w	r2, [sp, #15]
   bf92a:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   bf92c:	7830      	ldrb	r0, [r6, #0]
   bf92e:	f7fd fa31 	bl	bcd94 <hal_spi_set_settings>
   bf932:	e7bc      	b.n	bf8ae <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   bf934:	e9cd 5500 	strd	r5, r5, [sp]
   bf938:	462b      	mov	r3, r5
   bf93a:	462a      	mov	r2, r5
   bf93c:	2101      	movs	r1, #1
   bf93e:	e7f5      	b.n	bf92c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000bf940 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   bf940:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   bf942:	7800      	ldrb	r0, [r0, #0]
   bf944:	f7fd fa06 	bl	bcd54 <hal_spi_transfer>
}
   bf948:	b2c0      	uxtb	r0, r0
   bf94a:	bd08      	pop	{r3, pc}

000bf94c <_ZN8SPIClass15attachInterruptEv>:
}

void SPIClass::attachInterrupt()
{
    // TODO: Implement
}
   bf94c:	4770      	bx	lr

000bf94e <_ZN8SPIClass15detachInterruptEv>:
   bf94e:	4770      	bx	lr

000bf950 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   bf950:	b510      	push	{r4, lr}
   bf952:	4604      	mov	r4, r0
{
	free(buffer);
   bf954:	6800      	ldr	r0, [r0, #0]
   bf956:	f7fd fca9 	bl	bd2ac <free>
}
   bf95a:	4620      	mov	r0, r4
   bf95c:	bd10      	pop	{r4, pc}

000bf95e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   bf95e:	b510      	push	{r4, lr}
   bf960:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   bf962:	6800      	ldr	r0, [r0, #0]
   bf964:	b108      	cbz	r0, bf96a <_ZN6String10invalidateEv+0xc>
   bf966:	f7fd fca1 	bl	bd2ac <free>
	buffer = NULL;
   bf96a:	2300      	movs	r3, #0
	capacity = len = 0;
   bf96c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   bf970:	6023      	str	r3, [r4, #0]
}
   bf972:	bd10      	pop	{r4, pc}

000bf974 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   bf974:	b538      	push	{r3, r4, r5, lr}
   bf976:	4604      	mov	r4, r0
   bf978:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   bf97a:	6800      	ldr	r0, [r0, #0]
   bf97c:	3101      	adds	r1, #1
   bf97e:	f7fd fc9d 	bl	bd2bc <realloc>
	if (newbuffer) {
   bf982:	b110      	cbz	r0, bf98a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   bf984:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   bf988:	2001      	movs	r0, #1
	}
	return 0;
}
   bf98a:	bd38      	pop	{r3, r4, r5, pc}

000bf98c <_ZN6String7reserveEj>:
{
   bf98c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   bf98e:	6803      	ldr	r3, [r0, #0]
{
   bf990:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   bf992:	b123      	cbz	r3, bf99e <_ZN6String7reserveEj+0x12>
   bf994:	6843      	ldr	r3, [r0, #4]
   bf996:	428b      	cmp	r3, r1
   bf998:	d301      	bcc.n	bf99e <_ZN6String7reserveEj+0x12>
   bf99a:	2001      	movs	r0, #1
}
   bf99c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   bf99e:	4620      	mov	r0, r4
   bf9a0:	f7ff ffe8 	bl	bf974 <_ZN6String12changeBufferEj>
   bf9a4:	2800      	cmp	r0, #0
   bf9a6:	d0f9      	beq.n	bf99c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   bf9a8:	68a3      	ldr	r3, [r4, #8]
   bf9aa:	2b00      	cmp	r3, #0
   bf9ac:	d1f5      	bne.n	bf99a <_ZN6String7reserveEj+0xe>
   bf9ae:	6822      	ldr	r2, [r4, #0]
   bf9b0:	7013      	strb	r3, [r2, #0]
   bf9b2:	e7f2      	b.n	bf99a <_ZN6String7reserveEj+0xe>

000bf9b4 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   bf9b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bf9b6:	460d      	mov	r5, r1
	if (!reserve(length)) {
   bf9b8:	4611      	mov	r1, r2
   bf9ba:	9201      	str	r2, [sp, #4]
{
   bf9bc:	4604      	mov	r4, r0
	if (!reserve(length)) {
   bf9be:	f7ff ffe5 	bl	bf98c <_ZN6String7reserveEj>
   bf9c2:	9a01      	ldr	r2, [sp, #4]
   bf9c4:	b928      	cbnz	r0, bf9d2 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   bf9c6:	4620      	mov	r0, r4
   bf9c8:	f7ff ffc9 	bl	bf95e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   bf9cc:	4620      	mov	r0, r4
   bf9ce:	b003      	add	sp, #12
   bf9d0:	bd30      	pop	{r4, r5, pc}
	len = length;
   bf9d2:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   bf9d4:	4629      	mov	r1, r5
   bf9d6:	6820      	ldr	r0, [r4, #0]
   bf9d8:	f001 fc16 	bl	c1208 <memcpy>
	buffer[len] = 0;
   bf9dc:	6822      	ldr	r2, [r4, #0]
   bf9de:	68a3      	ldr	r3, [r4, #8]
   bf9e0:	2100      	movs	r1, #0
   bf9e2:	54d1      	strb	r1, [r2, r3]
	return *this;
   bf9e4:	e7f2      	b.n	bf9cc <_ZN6String4copyEPKcj+0x18>

000bf9e6 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   bf9e6:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   bf9e8:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   bf9ea:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   bf9ee:	4604      	mov	r4, r0
	len = 0;
   bf9f0:	6083      	str	r3, [r0, #8]
	flags = 0;
   bf9f2:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   bf9f4:	b141      	cbz	r1, bfa08 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   bf9f6:	4608      	mov	r0, r1
   bf9f8:	9101      	str	r1, [sp, #4]
   bf9fa:	f001 fcf8 	bl	c13ee <strlen>
   bf9fe:	9901      	ldr	r1, [sp, #4]
   bfa00:	4602      	mov	r2, r0
   bfa02:	4620      	mov	r0, r4
   bfa04:	f7ff ffd6 	bl	bf9b4 <_ZN6String4copyEPKcj>
}
   bfa08:	4620      	mov	r0, r4
   bfa0a:	b002      	add	sp, #8
   bfa0c:	bd10      	pop	{r4, pc}

000bfa0e <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   bfa0e:	b538      	push	{r3, r4, r5, lr}
   bfa10:	4605      	mov	r5, r0
	if (buffer) {
   bfa12:	6800      	ldr	r0, [r0, #0]
{
   bfa14:	460c      	mov	r4, r1
	if (buffer) {
   bfa16:	b168      	cbz	r0, bfa34 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   bfa18:	686a      	ldr	r2, [r5, #4]
   bfa1a:	688b      	ldr	r3, [r1, #8]
   bfa1c:	429a      	cmp	r2, r3
   bfa1e:	d307      	bcc.n	bfa30 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   bfa20:	6809      	ldr	r1, [r1, #0]
   bfa22:	f001 fcbe 	bl	c13a2 <strcpy>
			len = rhs.len;
   bfa26:	68a3      	ldr	r3, [r4, #8]
   bfa28:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   bfa2a:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   bfa2c:	60a3      	str	r3, [r4, #8]
}
   bfa2e:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   bfa30:	f7fd fc3c 	bl	bd2ac <free>
	buffer = rhs.buffer;
   bfa34:	6823      	ldr	r3, [r4, #0]
   bfa36:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   bfa38:	6863      	ldr	r3, [r4, #4]
   bfa3a:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   bfa3c:	68a3      	ldr	r3, [r4, #8]
   bfa3e:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   bfa40:	2300      	movs	r3, #0
	rhs.capacity = 0;
   bfa42:	e9c4 3300 	strd	r3, r3, [r4]
   bfa46:	e7f1      	b.n	bfa2c <_ZN6String4moveERS_+0x1e>

000bfa48 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   bfa48:	b510      	push	{r4, lr}
	buffer = NULL;
   bfa4a:	2300      	movs	r3, #0
	capacity = 0;
   bfa4c:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   bfa50:	4604      	mov	r4, r0
	len = 0;
   bfa52:	6083      	str	r3, [r0, #8]
	flags = 0;
   bfa54:	7303      	strb	r3, [r0, #12]
	move(rval);
   bfa56:	f7ff ffda 	bl	bfa0e <_ZN6String4moveERS_>
}
   bfa5a:	4620      	mov	r0, r4
   bfa5c:	bd10      	pop	{r4, pc}

000bfa5e <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   bfa5e:	4288      	cmp	r0, r1
{
   bfa60:	b510      	push	{r4, lr}
   bfa62:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   bfa64:	d005      	beq.n	bfa72 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   bfa66:	680b      	ldr	r3, [r1, #0]
   bfa68:	b12b      	cbz	r3, bfa76 <_ZN6StringaSERKS_+0x18>
   bfa6a:	688a      	ldr	r2, [r1, #8]
   bfa6c:	4619      	mov	r1, r3
   bfa6e:	f7ff ffa1 	bl	bf9b4 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   bfa72:	4620      	mov	r0, r4
   bfa74:	bd10      	pop	{r4, pc}
	else invalidate();
   bfa76:	f7ff ff72 	bl	bf95e <_ZN6String10invalidateEv>
   bfa7a:	e7fa      	b.n	bfa72 <_ZN6StringaSERKS_+0x14>

000bfa7c <_ZN6StringC1ERKS_>:
String::String(const String &value)
   bfa7c:	b510      	push	{r4, lr}
	buffer = NULL;
   bfa7e:	2300      	movs	r3, #0
String::String(const String &value)
   bfa80:	4604      	mov	r4, r0
	capacity = 0;
   bfa82:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   bfa86:	6083      	str	r3, [r0, #8]
	flags = 0;
   bfa88:	7303      	strb	r3, [r0, #12]
	*this = value;
   bfa8a:	f7ff ffe8 	bl	bfa5e <_ZN6StringaSERKS_>
}
   bfa8e:	4620      	mov	r0, r4
   bfa90:	bd10      	pop	{r4, pc}

000bfa92 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   bfa92:	4288      	cmp	r0, r1
{
   bfa94:	b510      	push	{r4, lr}
   bfa96:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   bfa98:	d001      	beq.n	bfa9e <_ZN6StringaSEOS_+0xc>
   bfa9a:	f7ff ffb8 	bl	bfa0e <_ZN6String4moveERS_>
	return *this;
}
   bfa9e:	4620      	mov	r0, r4
   bfaa0:	bd10      	pop	{r4, pc}

000bfaa2 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   bfaa2:	b513      	push	{r0, r1, r4, lr}
   bfaa4:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   bfaa6:	b159      	cbz	r1, bfac0 <_ZN6StringaSEPKc+0x1e>
   bfaa8:	4608      	mov	r0, r1
   bfaaa:	9101      	str	r1, [sp, #4]
   bfaac:	f001 fc9f 	bl	c13ee <strlen>
   bfab0:	9901      	ldr	r1, [sp, #4]
   bfab2:	4602      	mov	r2, r0
   bfab4:	4620      	mov	r0, r4
   bfab6:	f7ff ff7d 	bl	bf9b4 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   bfaba:	4620      	mov	r0, r4
   bfabc:	b002      	add	sp, #8
   bfabe:	bd10      	pop	{r4, pc}
	else invalidate();
   bfac0:	f7ff ff4d 	bl	bf95e <_ZN6String10invalidateEv>
   bfac4:	e7f9      	b.n	bfaba <_ZN6StringaSEPKc+0x18>

000bfac6 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   bfac6:	b570      	push	{r4, r5, r6, lr}
   bfac8:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   bfaca:	460e      	mov	r6, r1
   bfacc:	b909      	cbnz	r1, bfad2 <_ZN6String6concatEPKcj+0xc>
   bface:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   bfad0:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   bfad2:	b16a      	cbz	r2, bfaf0 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   bfad4:	6884      	ldr	r4, [r0, #8]
   bfad6:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   bfad8:	4621      	mov	r1, r4
   bfada:	f7ff ff57 	bl	bf98c <_ZN6String7reserveEj>
   bfade:	2800      	cmp	r0, #0
   bfae0:	d0f5      	beq.n	bface <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   bfae2:	6828      	ldr	r0, [r5, #0]
   bfae4:	68ab      	ldr	r3, [r5, #8]
   bfae6:	4631      	mov	r1, r6
   bfae8:	4418      	add	r0, r3
   bfaea:	f001 fc5a 	bl	c13a2 <strcpy>
	len = newlen;
   bfaee:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   bfaf0:	2001      	movs	r0, #1
   bfaf2:	e7ed      	b.n	bfad0 <_ZN6String6concatEPKcj+0xa>

000bfaf4 <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
   bfaf4:	b513      	push	{r0, r1, r4, lr}
   bfaf6:	4604      	mov	r4, r0
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}
   bfaf8:	4608      	mov	r0, r1
	if (!cstr) return 0;
   bfafa:	b151      	cbz	r1, bfb12 <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
   bfafc:	9101      	str	r1, [sp, #4]
   bfafe:	f001 fc76 	bl	c13ee <strlen>
   bfb02:	9901      	ldr	r1, [sp, #4]
   bfb04:	4602      	mov	r2, r0
   bfb06:	4620      	mov	r0, r4
}
   bfb08:	b002      	add	sp, #8
   bfb0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return concat(cstr, strlen(cstr));
   bfb0e:	f7ff bfda 	b.w	bfac6 <_ZN6String6concatEPKcj>
}
   bfb12:	b002      	add	sp, #8
   bfb14:	bd10      	pop	{r4, pc}

000bfb16 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   bfb16:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   bfb18:	2300      	movs	r3, #0
	buf[0] = c;
   bfb1a:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   bfb1e:	2201      	movs	r2, #1
   bfb20:	a901      	add	r1, sp, #4
	buf[1] = 0;
   bfb22:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   bfb26:	f7ff ffce 	bl	bfac6 <_ZN6String6concatEPKcj>
}
   bfb2a:	b003      	add	sp, #12
   bfb2c:	f85d fb04 	ldr.w	pc, [sp], #4

000bfb30 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   bfb30:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   bfb32:	688a      	ldr	r2, [r1, #8]
   bfb34:	6809      	ldr	r1, [r1, #0]
{
   bfb36:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   bfb38:	f7ff ffc5 	bl	bfac6 <_ZN6String6concatEPKcj>
   bfb3c:	b910      	cbnz	r0, bfb44 <_ZplRK15StringSumHelperRK6String+0x14>
   bfb3e:	4620      	mov	r0, r4
   bfb40:	f7ff ff0d 	bl	bf95e <_ZN6String10invalidateEv>
	return a;
}
   bfb44:	4620      	mov	r0, r4
   bfb46:	bd10      	pop	{r4, pc}

000bfb48 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   bfb48:	b513      	push	{r0, r1, r4, lr}
   bfb4a:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   bfb4c:	b929      	cbnz	r1, bfb5a <_ZplRK15StringSumHelperPKc+0x12>
   bfb4e:	4620      	mov	r0, r4
   bfb50:	f7ff ff05 	bl	bf95e <_ZN6String10invalidateEv>
	return a;
}
   bfb54:	4620      	mov	r0, r4
   bfb56:	b002      	add	sp, #8
   bfb58:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   bfb5a:	4608      	mov	r0, r1
   bfb5c:	9101      	str	r1, [sp, #4]
   bfb5e:	f001 fc46 	bl	c13ee <strlen>
   bfb62:	9901      	ldr	r1, [sp, #4]
   bfb64:	4602      	mov	r2, r0
   bfb66:	4620      	mov	r0, r4
   bfb68:	f7ff ffad 	bl	bfac6 <_ZN6String6concatEPKcj>
   bfb6c:	2800      	cmp	r0, #0
   bfb6e:	d0ee      	beq.n	bfb4e <_ZplRK15StringSumHelperPKc+0x6>
   bfb70:	e7f0      	b.n	bfb54 <_ZplRK15StringSumHelperPKc+0xc>

000bfb72 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   bfb72:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   bfb74:	6882      	ldr	r2, [r0, #8]
   bfb76:	b93a      	cbnz	r2, bfb88 <_ZNK6String6equalsEPKc+0x16>
   bfb78:	b121      	cbz	r1, bfb84 <_ZNK6String6equalsEPKc+0x12>
   bfb7a:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   bfb7c:	fab0 f080 	clz	r0, r0
   bfb80:	0940      	lsrs	r0, r0, #5
   bfb82:	e000      	b.n	bfb86 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   bfb84:	2001      	movs	r0, #1
}
   bfb86:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   bfb88:	6800      	ldr	r0, [r0, #0]
   bfb8a:	b909      	cbnz	r1, bfb90 <_ZNK6String6equalsEPKc+0x1e>
   bfb8c:	7800      	ldrb	r0, [r0, #0]
   bfb8e:	e7f5      	b.n	bfb7c <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   bfb90:	f001 fbfd 	bl	c138e <strcmp>
   bfb94:	e7f2      	b.n	bfb7c <_ZNK6String6equalsEPKc+0xa>

000bfb96 <_ZNK6String8endsWithERKS_>:
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
   bfb96:	b508      	push	{r3, lr}
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   bfb98:	6883      	ldr	r3, [r0, #8]
   bfb9a:	688a      	ldr	r2, [r1, #8]
   bfb9c:	4293      	cmp	r3, r2
   bfb9e:	d30b      	bcc.n	bfbb8 <_ZNK6String8endsWithERKS_+0x22>
   bfba0:	6800      	ldr	r0, [r0, #0]
   bfba2:	b140      	cbz	r0, bfbb6 <_ZNK6String8endsWithERKS_+0x20>
   bfba4:	6809      	ldr	r1, [r1, #0]
   bfba6:	b149      	cbz	r1, bfbbc <_ZNK6String8endsWithERKS_+0x26>
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
   bfba8:	1a9b      	subs	r3, r3, r2
   bfbaa:	4418      	add	r0, r3
   bfbac:	f001 fbef 	bl	c138e <strcmp>
   bfbb0:	fab0 f080 	clz	r0, r0
   bfbb4:	0940      	lsrs	r0, r0, #5
}
   bfbb6:	bd08      	pop	{r3, pc}
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   bfbb8:	2000      	movs	r0, #0
   bfbba:	e7fc      	b.n	bfbb6 <_ZNK6String8endsWithERKS_+0x20>
   bfbbc:	4608      	mov	r0, r1
   bfbbe:	e7fa      	b.n	bfbb6 <_ZNK6String8endsWithERKS_+0x20>

000bfbc0 <_ZN6StringixEj>:
}

char & String::operator[](unsigned int index)
{
	static char dummy_writable_char;
	if (index >= len || !buffer) {
   bfbc0:	6883      	ldr	r3, [r0, #8]
   bfbc2:	428b      	cmp	r3, r1
   bfbc4:	d901      	bls.n	bfbca <_ZN6StringixEj+0xa>
   bfbc6:	6800      	ldr	r0, [r0, #0]
   bfbc8:	b918      	cbnz	r0, bfbd2 <_ZN6StringixEj+0x12>
		dummy_writable_char = 0;
   bfbca:	4803      	ldr	r0, [pc, #12]	; (bfbd8 <_ZN6StringixEj+0x18>)
   bfbcc:	2300      	movs	r3, #0
   bfbce:	7003      	strb	r3, [r0, #0]
		return dummy_writable_char;
   bfbd0:	4770      	bx	lr
	}
	return buffer[index];
   bfbd2:	4408      	add	r0, r1
}
   bfbd4:	4770      	bx	lr
   bfbd6:	bf00      	nop
   bfbd8:	2003e694 	.word	0x2003e694

000bfbdc <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   bfbdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   bfbde:	429a      	cmp	r2, r3
{
   bfbe0:	460f      	mov	r7, r1
   bfbe2:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   bfbe4:	490c      	ldr	r1, [pc, #48]	; (bfc18 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   bfbe6:	bf88      	it	hi
   bfbe8:	4613      	movhi	r3, r2
{
   bfbea:	4614      	mov	r4, r2
   bfbec:	4606      	mov	r6, r0
	if (left > right) {
   bfbee:	bf84      	itt	hi
   bfbf0:	462c      	movhi	r4, r5
   bfbf2:	461d      	movhi	r5, r3
	String out;
   bfbf4:	f7ff fef7 	bl	bf9e6 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   bfbf8:	68bb      	ldr	r3, [r7, #8]
   bfbfa:	42a3      	cmp	r3, r4
   bfbfc:	d30a      	bcc.n	bfc14 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   bfbfe:	6839      	ldr	r1, [r7, #0]
   bfc00:	42ab      	cmp	r3, r5
   bfc02:	bf94      	ite	ls
   bfc04:	ebc4 0203 	rsbls	r2, r4, r3
   bfc08:	ebc4 0205 	rsbhi	r2, r4, r5
   bfc0c:	4421      	add	r1, r4
   bfc0e:	4630      	mov	r0, r6
   bfc10:	f7ff fed0 	bl	bf9b4 <_ZN6String4copyEPKcj>
	return out;
}
   bfc14:	4630      	mov	r0, r6
   bfc16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bfc18:	000c5454 	.word	0x000c5454

000bfc1c <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   bfc1c:	b40e      	push	{r1, r2, r3}
   bfc1e:	b570      	push	{r4, r5, r6, lr}
   bfc20:	b087      	sub	sp, #28
   bfc22:	ad0b      	add	r5, sp, #44	; 0x2c
   bfc24:	4604      	mov	r4, r0
   bfc26:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bfc2a:	9201      	str	r2, [sp, #4]
   bfc2c:	462b      	mov	r3, r5
   bfc2e:	2105      	movs	r1, #5
   bfc30:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   bfc32:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bfc34:	f7fd fb62 	bl	bd2fc <vsnprintf>
    va_end(marker);

    String result;
   bfc38:	490b      	ldr	r1, [pc, #44]	; (bfc68 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   bfc3a:	4606      	mov	r6, r0
    String result;
   bfc3c:	4620      	mov	r0, r4
   bfc3e:	f7ff fed2 	bl	bf9e6 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   bfc42:	4631      	mov	r1, r6
   bfc44:	4620      	mov	r0, r4
   bfc46:	f7ff fea1 	bl	bf98c <_ZN6String7reserveEj>
    if (result.buffer) {
   bfc4a:	6820      	ldr	r0, [r4, #0]
   bfc4c:	b130      	cbz	r0, bfc5c <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   bfc4e:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   bfc50:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   bfc52:	462b      	mov	r3, r5
   bfc54:	1c71      	adds	r1, r6, #1
   bfc56:	f7fd fb51 	bl	bd2fc <vsnprintf>
        va_end(marker);
        result.len = n;
   bfc5a:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   bfc5c:	4620      	mov	r0, r4
   bfc5e:	b007      	add	sp, #28
   bfc60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bfc64:	b003      	add	sp, #12
   bfc66:	4770      	bx	lr
   bfc68:	000c5454 	.word	0x000c5454

000bfc6c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   bfc6c:	b510      	push	{r4, lr}
   bfc6e:	4604      	mov	r4, r0
        if (wakeupSource_) {
   bfc70:	6800      	ldr	r0, [r0, #0]
   bfc72:	b118      	cbz	r0, bfc7c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv+0x10>
            free(wakeupSource_);
   bfc74:	f7fd fb1a 	bl	bd2ac <free>
            wakeupSource_ = nullptr;
   bfc78:	2300      	movs	r3, #0
   bfc7a:	6023      	str	r3, [r4, #0]
        }
    }
   bfc7c:	bd10      	pop	{r4, pc}

000bfc7e <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   bfc7e:	b538      	push	{r3, r4, r5, lr}
   bfc80:	460c      	mov	r4, r1
   bfc82:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   bfc84:	f7ff fff2 	bl	bfc6c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (source) {
   bfc88:	b154      	cbz	r4, bfca0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   bfc8a:	8820      	ldrh	r0, [r4, #0]
   bfc8c:	f7fd fb06 	bl	bd29c <malloc>
   bfc90:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   bfc92:	b128      	cbz	r0, bfca0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
                memcpy(wakeupSource_, source, source->size);
   bfc94:	8822      	ldrh	r2, [r4, #0]
   bfc96:	4621      	mov	r1, r4
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   bfc98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                memcpy(wakeupSource_, source, source->size);
   bfc9c:	f001 bab4 	b.w	c1208 <memcpy>
    }
   bfca0:	bd38      	pop	{r3, r4, r5, pc}

000bfca2 <_ZN17SystemSleepResultaSEOS_.isra.0>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   bfca2:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   bfca4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   bfca8:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   bfcaa:	f8d1 3006 	ldr.w	r3, [r1, #6]
   bfcae:	f8c0 3006 	str.w	r3, [r0, #6]
   bfcb2:	894b      	ldrh	r3, [r1, #10]
   bfcb4:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   bfcb6:	460c      	mov	r4, r1
   bfcb8:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   bfcba:	f7ff ffd7 	bl	bfc6c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (result.wakeupSource_) {
   bfcbe:	6823      	ldr	r3, [r4, #0]
   bfcc0:	b113      	cbz	r3, bfcc8 <_ZN17SystemSleepResultaSEOS_.isra.0+0x26>
            wakeupSource_ = result.wakeupSource_;
   bfcc2:	602b      	str	r3, [r5, #0]
            result.wakeupSource_ = nullptr;
   bfcc4:	2300      	movs	r3, #0
   bfcc6:	6023      	str	r3, [r4, #0]
    }
   bfcc8:	bd38      	pop	{r3, r4, r5, pc}

000bfcca <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   bfcca:	b507      	push	{r0, r1, r2, lr}
   bfccc:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   bfcce:	2100      	movs	r1, #0
{
   bfcd0:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   bfcd2:	9100      	str	r1, [sp, #0]
   bfcd4:	2001      	movs	r0, #1
   bfcd6:	218c      	movs	r1, #140	; 0x8c
   bfcd8:	f7fd fa1e 	bl	bd118 <system_reset>
}
   bfcdc:	b003      	add	sp, #12
   bfcde:	f85d fb04 	ldr.w	pc, [sp], #4

000bfce2 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   bfce2:	4601      	mov	r1, r0
    reset(0, flags);
   bfce4:	2000      	movs	r0, #0
   bfce6:	f7ff bff0 	b.w	bfcca <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000bfcea <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   bfcea:	2000      	movs	r0, #0
   bfcec:	f7ff bff9 	b.w	bfce2 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

000bfcf0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   bfcf0:	b5f0      	push	{r4, r5, r6, r7, lr}
   bfcf2:	4d2b      	ldr	r5, [pc, #172]	; (bfda0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   bfcf4:	7d0b      	ldrb	r3, [r1, #20]
   bfcf6:	4604      	mov	r4, r0
   bfcf8:	b08b      	sub	sp, #44	; 0x2c
   bfcfa:	4608      	mov	r0, r1
   bfcfc:	1daf      	adds	r7, r5, #6
   bfcfe:	2b00      	cmp	r3, #0
   bfd00:	d036      	beq.n	bfd70 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
        return static_cast<SystemSleepMode>(config_->mode);
   bfd02:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   bfd04:	791b      	ldrb	r3, [r3, #4]
   bfd06:	2b00      	cmp	r3, #0
   bfd08:	d032      	beq.n	bfd70 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
    SleepResult() {}
   bfd0a:	4b26      	ldr	r3, [pc, #152]	; (bfda4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
   bfd0c:	9304      	str	r3, [sp, #16]
              error_(SYSTEM_ERROR_NONE) {
   bfd0e:	2200      	movs	r2, #0
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   bfd10:	a902      	add	r1, sp, #8
   bfd12:	3004      	adds	r0, #4
   bfd14:	e9cd 2202 	strd	r2, r2, [sp, #8]
   bfd18:	f7fd f9f4 	bl	bd104 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   bfd1c:	f8dd 300e 	ldr.w	r3, [sp, #14]
   bfd20:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   bfd24:	b200      	sxth	r0, r0
   bfd26:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   bfd2a:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   bfd2e:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   bfd30:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   bfd32:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   bfd34:	4628      	mov	r0, r5
   bfd36:	f7ff ffa2 	bl	bfc7e <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        freeWakeupSourceMemory();
   bfd3a:	a802      	add	r0, sp, #8
   bfd3c:	f7ff ff96 	bl	bfc6c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
              error_(SYSTEM_ERROR_NONE) {
   bfd40:	2300      	movs	r3, #0
   bfd42:	6023      	str	r3, [r4, #0]
   bfd44:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   bfd46:	71a3      	strb	r3, [r4, #6]
   bfd48:	8123      	strh	r3, [r4, #8]
   bfd4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   bfd4e:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   bfd50:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   bfd54:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   bfd56:	f8d5 3006 	ldr.w	r3, [r5, #6]
   bfd5a:	f8c4 3006 	str.w	r3, [r4, #6]
   bfd5e:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   bfd60:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   bfd62:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   bfd64:	4620      	mov	r0, r4
   bfd66:	f7ff ff8a 	bl	bfc7e <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   bfd6a:	4620      	mov	r0, r4
   bfd6c:	b00b      	add	sp, #44	; 0x2c
   bfd6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   bfd70:	2600      	movs	r6, #0
   bfd72:	2320      	movs	r3, #32
   bfd74:	e9cd 3602 	strd	r3, r6, [sp, #8]
   bfd78:	4b0b      	ldr	r3, [pc, #44]	; (bfda8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
   bfd7a:	9300      	str	r3, [sp, #0]
   bfd7c:	aa02      	add	r2, sp, #8
   bfd7e:	4633      	mov	r3, r6
   bfd80:	490a      	ldr	r1, [pc, #40]	; (bfdac <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   bfd82:	2032      	movs	r0, #50	; 0x32
   bfd84:	f7fd f91e 	bl	bcfc4 <log_message>
            : wakeupSource_(nullptr),
   bfd88:	4b06      	ldr	r3, [pc, #24]	; (bfda4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   bfd8a:	4805      	ldr	r0, [pc, #20]	; (bfda0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
              error_(SYSTEM_ERROR_NONE) {
   bfd8c:	9602      	str	r6, [sp, #8]
            : wakeupSource_(nullptr),
   bfd8e:	f64f 62f2 	movw	r2, #65266	; 0xfef2
   bfd92:	a902      	add	r1, sp, #8
   bfd94:	e9cd 2303 	strd	r2, r3, [sp, #12]
   bfd98:	f7ff ff83 	bl	bfca2 <_ZN17SystemSleepResultaSEOS_.isra.0>
   bfd9c:	e7cd      	b.n	bfd3a <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x4a>
   bfd9e:	bf00      	nop
   bfda0:	2003e698 	.word	0x2003e698
   bfda4:	ffff0000 	.word	0xffff0000
   bfda8:	000c5533 	.word	0x000c5533
   bfdac:	000c552c 	.word	0x000c552c

000bfdb0 <_ZN11SystemClass10freeMemoryEv>:
    System.systemSleepResult_ = SystemSleepResult(SleepResult(ret, pins, pins_count));
    return System.systemSleepResult_;
}

uint32_t SystemClass::freeMemory()
{
   bfdb0:	b510      	push	{r4, lr}
    runtime_info_t info;
    memset(&info, 0, sizeof(info));
   bfdb2:	2420      	movs	r4, #32
{
   bfdb4:	b088      	sub	sp, #32
    memset(&info, 0, sizeof(info));
   bfdb6:	4622      	mov	r2, r4
   bfdb8:	2100      	movs	r1, #0
   bfdba:	4668      	mov	r0, sp
   bfdbc:	f001 fa4c 	bl	c1258 <memset>
    info.size = sizeof(info);
    HAL_Core_Runtime_Info(&info, NULL);
   bfdc0:	2100      	movs	r1, #0
   bfdc2:	4668      	mov	r0, sp
    info.size = sizeof(info);
   bfdc4:	f8ad 4000 	strh.w	r4, [sp]
    HAL_Core_Runtime_Info(&info, NULL);
   bfdc8:	f7fc fea4 	bl	bcb14 <HAL_Core_Runtime_Info>
    return info.freeheap;
}
   bfdcc:	9801      	ldr	r0, [sp, #4]
   bfdce:	b008      	add	sp, #32
   bfdd0:	bd10      	pop	{r4, pc}
	...

000bfdd4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   bfdd4:	4b05      	ldr	r3, [pc, #20]	; (bfdec <_GLOBAL__sub_I_System+0x18>)
   bfdd6:	2202      	movs	r2, #2
   bfdd8:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   bfdda:	4b05      	ldr	r3, [pc, #20]	; (bfdf0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   bfddc:	4a05      	ldr	r2, [pc, #20]	; (bfdf4 <_GLOBAL__sub_I_System+0x20>)
   bfdde:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   bfde0:	2000      	movs	r0, #0
   bfde2:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   bfde6:	f7fd b92f 	b.w	bd048 <set_system_mode>
   bfdea:	bf00      	nop
   bfdec:	2003e6a4 	.word	0x2003e6a4
   bfdf0:	2003e698 	.word	0x2003e698
   bfdf4:	ffff0000 	.word	0xffff0000

000bfdf8 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   bfdf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   bfdfc:	4a15      	ldr	r2, [pc, #84]	; (bfe54 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   bfdfe:	f8df 8060 	ldr.w	r8, [pc, #96]	; bfe60 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   bfe02:	e9d2 6300 	ldrd	r6, r3, [r2]
   bfe06:	1980      	adds	r0, r0, r6
   bfe08:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   bfe0c:	4b12      	ldr	r3, [pc, #72]	; (bfe58 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   bfe0e:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   bfe12:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   bfe16:	1986      	adds	r6, r0, r6
   bfe18:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   bfe1c:	42bb      	cmp	r3, r7
   bfe1e:	bf08      	it	eq
   bfe20:	42b2      	cmpeq	r2, r6
{
   bfe22:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   bfe24:	d013      	beq.n	bfe4e <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   bfe26:	a903      	add	r1, sp, #12
   bfe28:	4668      	mov	r0, sp
   bfe2a:	e9cd 6700 	strd	r6, r7, [sp]
   bfe2e:	f7fd fa9d 	bl	bd36c <localtime_r>
	calendar_time.tm_year += 1900;
   bfe32:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bfe34:	4d09      	ldr	r5, [pc, #36]	; (bfe5c <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   bfe36:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bfe3a:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   bfe3c:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bfe3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bfe40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   bfe42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bfe44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   bfe46:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bfe4a:	6823      	ldr	r3, [r4, #0]
   bfe4c:	602b      	str	r3, [r5, #0]
    }
}
   bfe4e:	b00c      	add	sp, #48	; 0x30
   bfe50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bfe54:	2003e6e0 	.word	0x2003e6e0
   bfe58:	2003e6d8 	.word	0x2003e6d8
   bfe5c:	2003e6b0 	.word	0x2003e6b0
   bfe60:	2003e6e8 	.word	0x2003e6e8

000bfe64 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   bfe64:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   bfe66:	2000      	movs	r0, #0
   bfe68:	f7fd f998 	bl	bd19c <spark_sync_time_pending>
   bfe6c:	b128      	cbz	r0, bfe7a <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   bfe6e:	f7fd f975 	bl	bd15c <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   bfe72:	f080 0001 	eor.w	r0, r0, #1
   bfe76:	b2c0      	uxtb	r0, r0
    }
   bfe78:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   bfe7a:	2001      	movs	r0, #1
   bfe7c:	e7fc      	b.n	bfe78 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000bfe80 <_ZN9TimeClass4hourEx>:
	return hour(now());
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
   bfe80:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   bfe82:	f7ff ffb9 	bl	bfdf8 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_hour;
}
   bfe86:	4b01      	ldr	r3, [pc, #4]	; (bfe8c <_ZN9TimeClass4hourEx+0xc>)
   bfe88:	6898      	ldr	r0, [r3, #8]
   bfe8a:	bd08      	pop	{r3, pc}
   bfe8c:	2003e6b0 	.word	0x2003e6b0

000bfe90 <_ZN9TimeClass3dayEx>:
	return day(now());
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
   bfe90:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   bfe92:	f7ff ffb1 	bl	bfdf8 <_ZL22Refresh_UnixTime_Cachex>
	return calendar_time_cache.tm_mday;
}
   bfe96:	4b01      	ldr	r3, [pc, #4]	; (bfe9c <_ZN9TimeClass3dayEx+0xc>)
   bfe98:	68d8      	ldr	r0, [r3, #12]
   bfe9a:	bd08      	pop	{r3, pc}
   bfe9c:	2003e6b0 	.word	0x2003e6b0

000bfea0 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   bfea0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   bfea2:	4602      	mov	r2, r0
   bfea4:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   bfea6:	4668      	mov	r0, sp
    struct timeval tv = {
   bfea8:	2100      	movs	r1, #0
    };
   bfeaa:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   bfeae:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   bfeb2:	f7fc fe77 	bl	bcba4 <hal_rtc_set_time>
   bfeb6:	4602      	mov	r2, r0
   bfeb8:	b910      	cbnz	r0, bfec0 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   bfeba:	4601      	mov	r1, r0
   bfebc:	f7fd f8fc 	bl	bd0b8 <system_notify_time_changed>
    }
}
   bfec0:	b005      	add	sp, #20
   bfec2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bfec8 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   bfec8:	b530      	push	{r4, r5, lr}
   bfeca:	b093      	sub	sp, #76	; 0x4c
   bfecc:	e9cd 2300 	strd	r2, r3, [sp]
    t += time_zone_cache;
   bfed0:	4b19      	ldr	r3, [pc, #100]	; (bff38 <_ZN9TimeClass7timeStrEx+0x70>)
{
   bfed2:	4604      	mov	r4, r0
    t += time_zone_cache;
   bfed4:	e9d3 1000 	ldrd	r1, r0, [r3]
   bfed8:	9b01      	ldr	r3, [sp, #4]
   bfeda:	1852      	adds	r2, r2, r1
   bfedc:	eb43 0300 	adc.w	r3, r3, r0
    t += dst_current_cache;
   bfee0:	4816      	ldr	r0, [pc, #88]	; (bff3c <_ZN9TimeClass7timeStrEx+0x74>)
   bfee2:	e9d0 1000 	ldrd	r1, r0, [r0]
   bfee6:	1852      	adds	r2, r2, r1
   bfee8:	eb43 0300 	adc.w	r3, r3, r0
   bfeec:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   bfef0:	2224      	movs	r2, #36	; 0x24
   bfef2:	eb0d 0002 	add.w	r0, sp, r2
   bfef6:	2100      	movs	r1, #0
   bfef8:	f001 f9ae 	bl	c1258 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   bfefc:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   bfefe:	a909      	add	r1, sp, #36	; 0x24
   bff00:	4668      	mov	r0, sp
   bff02:	f7fd fa33 	bl	bd36c <localtime_r>
    char ascstr[26] = {};
   bff06:	2216      	movs	r2, #22
   bff08:	4629      	mov	r1, r5
   bff0a:	a803      	add	r0, sp, #12
   bff0c:	9502      	str	r5, [sp, #8]
   bff0e:	f001 f9a3 	bl	c1258 <memset>
    asctime_r(&calendar_time, ascstr);
   bff12:	a902      	add	r1, sp, #8
   bff14:	a809      	add	r0, sp, #36	; 0x24
   bff16:	f001 f925 	bl	c1164 <asctime_r>
    int len = strlen(ascstr);
   bff1a:	a802      	add	r0, sp, #8
   bff1c:	f001 fa67 	bl	c13ee <strlen>
    ascstr[len-1] = 0; // remove final newline
   bff20:	ab12      	add	r3, sp, #72	; 0x48
   bff22:	4418      	add	r0, r3
    return String(ascstr);
   bff24:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   bff26:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   bff2a:	4620      	mov	r0, r4
   bff2c:	f7ff fd5b 	bl	bf9e6 <_ZN6StringC1EPK19__FlashStringHelper>
}
   bff30:	4620      	mov	r0, r4
   bff32:	b013      	add	sp, #76	; 0x4c
   bff34:	bd30      	pop	{r4, r5, pc}
   bff36:	bf00      	nop
   bff38:	2003e6e0 	.word	0x2003e6e0
   bff3c:	2003e6d8 	.word	0x2003e6d8

000bff40 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   bff40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bff44:	b0a4      	sub	sp, #144	; 0x90
   bff46:	4607      	mov	r7, r0
   bff48:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bff4a:	a814      	add	r0, sp, #80	; 0x50
{
   bff4c:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bff4e:	223f      	movs	r2, #63	; 0x3f
{
   bff50:	461c      	mov	r4, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   bff52:	f001 fa68 	bl	c1426 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   bff56:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   bff58:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   bff5a:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   bff5e:	f001 fa46 	bl	c13ee <strlen>
   bff62:	4605      	mov	r5, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   bff64:	bb4c      	cbnz	r4, bffba <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7a>
        strcpy(time_zone_str, "Z");
   bff66:	4929      	ldr	r1, [pc, #164]	; (c000c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xcc>)
   bff68:	a803      	add	r0, sp, #12
   bff6a:	f001 fa1a 	bl	c13a2 <strcpy>
   bff6e:	ac14      	add	r4, sp, #80	; 0x50
{
   bff70:	2600      	movs	r6, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   bff72:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   bff76:	45b1      	cmp	r9, r6
   bff78:	d934      	bls.n	bffe4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa4>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   bff7a:	7823      	ldrb	r3, [r4, #0]
   bff7c:	2b25      	cmp	r3, #37	; 0x25
   bff7e:	f106 0a01 	add.w	sl, r6, #1
   bff82:	d117      	bne.n	bffb4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
   bff84:	7863      	ldrb	r3, [r4, #1]
   bff86:	2b7a      	cmp	r3, #122	; 0x7a
   bff88:	d114      	bne.n	bffb4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x74>
        {
            size_t tzlen = strlen(time_zone_str);
   bff8a:	a803      	add	r0, sp, #12
   bff8c:	f001 fa2f 	bl	c13ee <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   bff90:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   bff92:	4605      	mov	r5, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   bff94:	1830      	adds	r0, r6, r0
   bff96:	4418      	add	r0, r3
   bff98:	eba9 0206 	sub.w	r2, r9, r6
   bff9c:	1ca1      	adds	r1, r4, #2
   bff9e:	f001 f933 	bl	c1208 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   bffa2:	462a      	mov	r2, r5
   bffa4:	a903      	add	r1, sp, #12
   bffa6:	4620      	mov	r0, r4
   bffa8:	f001 f92e 	bl	c1208 <memcpy>
            len = strlen(format_str);
   bffac:	a814      	add	r0, sp, #80	; 0x50
   bffae:	f001 fa1e 	bl	c13ee <strlen>
   bffb2:	4605      	mov	r5, r0
    for (size_t i=0; i<len-1; i++)
   bffb4:	3401      	adds	r4, #1
   bffb6:	4656      	mov	r6, sl
   bffb8:	e7db      	b.n	bff72 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   bffba:	233c      	movs	r3, #60	; 0x3c
   bffbc:	fb94 f2f3 	sdiv	r2, r4, r3
   bffc0:	2a00      	cmp	r2, #0
   bffc2:	bfb8      	it	lt
   bffc4:	4252      	neglt	r2, r2
   bffc6:	fbb2 f1f3 	udiv	r1, r2, r3
   bffca:	fb03 2211 	mls	r2, r3, r1, r2
   bffce:	9200      	str	r2, [sp, #0]
   bffd0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   bffd4:	4a0e      	ldr	r2, [pc, #56]	; (c0010 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   bffd6:	fb94 f3f3 	sdiv	r3, r4, r3
   bffda:	2110      	movs	r1, #16
   bffdc:	a803      	add	r0, sp, #12
   bffde:	f7fd f985 	bl	bd2ec <snprintf>
   bffe2:	e7c4      	b.n	bff6e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   bffe4:	2100      	movs	r1, #0
   bffe6:	222e      	movs	r2, #46	; 0x2e
   bffe8:	a808      	add	r0, sp, #32
   bffea:	9107      	str	r1, [sp, #28]
   bffec:	f001 f934 	bl	c1258 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   bfff0:	4643      	mov	r3, r8
   bfff2:	aa14      	add	r2, sp, #80	; 0x50
   bfff4:	2132      	movs	r1, #50	; 0x32
   bfff6:	a807      	add	r0, sp, #28
   bfff8:	f7fd f9b0 	bl	bd35c <strftime>
    return String(buf);
   bfffc:	a907      	add	r1, sp, #28
   bfffe:	4638      	mov	r0, r7
   c0000:	f7ff fcf1 	bl	bf9e6 <_ZN6StringC1EPK19__FlashStringHelper>
}
   c0004:	4638      	mov	r0, r7
   c0006:	b024      	add	sp, #144	; 0x90
   c0008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c000c:	000c4ba7 	.word	0x000c4ba7
   c0010:	000c4ba9 	.word	0x000c4ba9

000c0014 <_ZN9TimeClass6formatExPKc>:
{
   c0014:	b5f0      	push	{r4, r5, r6, r7, lr}
   c0016:	b08d      	sub	sp, #52	; 0x34
   c0018:	e9cd 2300 	strd	r2, r3, [sp]
   c001c:	9d12      	ldr	r5, [sp, #72]	; 0x48
   c001e:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   c0020:	b915      	cbnz	r5, c0028 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   c0022:	4b19      	ldr	r3, [pc, #100]	; (c0088 <_ZN9TimeClass6formatExPKc+0x74>)
   c0024:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   c0026:	b12d      	cbz	r5, c0034 <_ZN9TimeClass6formatExPKc+0x20>
   c0028:	4b18      	ldr	r3, [pc, #96]	; (c008c <_ZN9TimeClass6formatExPKc+0x78>)
   c002a:	4628      	mov	r0, r5
   c002c:	6819      	ldr	r1, [r3, #0]
   c002e:	f001 f9ae 	bl	c138e <strcmp>
   c0032:	b938      	cbnz	r0, c0044 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   c0034:	e9dd 2300 	ldrd	r2, r3, [sp]
   c0038:	4620      	mov	r0, r4
   c003a:	f7ff ff45 	bl	bfec8 <_ZN9TimeClass7timeStrEx>
}
   c003e:	4620      	mov	r0, r4
   c0040:	b00d      	add	sp, #52	; 0x34
   c0042:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   c0044:	4e12      	ldr	r6, [pc, #72]	; (c0090 <_ZN9TimeClass6formatExPKc+0x7c>)
   c0046:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   c0048:	4f12      	ldr	r7, [pc, #72]	; (c0094 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   c004a:	e9d6 3200 	ldrd	r3, r2, [r6]
   c004e:	185b      	adds	r3, r3, r1
   c0050:	9901      	ldr	r1, [sp, #4]
   c0052:	eb42 0201 	adc.w	r2, r2, r1
    t += dst_current_cache;
   c0056:	e9d7 0100 	ldrd	r0, r1, [r7]
   c005a:	181b      	adds	r3, r3, r0
   c005c:	eb42 0201 	adc.w	r2, r2, r1
   c0060:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   c0064:	2100      	movs	r1, #0
   c0066:	2224      	movs	r2, #36	; 0x24
   c0068:	a803      	add	r0, sp, #12
   c006a:	f001 f8f5 	bl	c1258 <memset>
    localtime_r(&t, &calendar_time);
   c006e:	a903      	add	r1, sp, #12
   c0070:	4668      	mov	r0, sp
   c0072:	f7fd f97b 	bl	bd36c <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   c0076:	6832      	ldr	r2, [r6, #0]
   c0078:	683b      	ldr	r3, [r7, #0]
   c007a:	a903      	add	r1, sp, #12
   c007c:	4413      	add	r3, r2
   c007e:	4620      	mov	r0, r4
   c0080:	462a      	mov	r2, r5
   c0082:	f7ff ff5d 	bl	bff40 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   c0086:	e7da      	b.n	c003e <_ZN9TimeClass6formatExPKc+0x2a>
   c0088:	2003e6ac 	.word	0x2003e6ac
   c008c:	2003d688 	.word	0x2003d688
   c0090:	2003e6e0 	.word	0x2003e6e0
   c0094:	2003e6d8 	.word	0x2003e6d8

000c0098 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   c0098:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   c009a:	2000      	movs	r0, #0
   c009c:	f7fc fd6a 	bl	bcb74 <hal_rtc_time_is_valid>
    if (rtcstate)
   c00a0:	4604      	mov	r4, r0
   c00a2:	b9a0      	cbnz	r0, c00ce <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   c00a4:	f7fc ffc8 	bl	bd038 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   c00a8:	2801      	cmp	r0, #1
   c00aa:	d110      	bne.n	c00ce <_ZN9TimeClass7isValidEv+0x36>
   c00ac:	4620      	mov	r0, r4
   c00ae:	f7fc fffb 	bl	bd0a8 <system_thread_get_state>
   c00b2:	b960      	cbnz	r0, c00ce <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   c00b4:	f7ff fed6 	bl	bfe64 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   c00b8:	b910      	cbnz	r0, c00c0 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   c00ba:	f7fd f83f 	bl	bd13c <spark_process>
        while (_while() && !_condition()) {
   c00be:	e7f9      	b.n	c00b4 <_ZN9TimeClass7isValidEv+0x1c>
   c00c0:	f7ff fed0 	bl	bfe64 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   c00c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   c00c8:	2000      	movs	r0, #0
   c00ca:	f7fc bd53 	b.w	bcb74 <hal_rtc_time_is_valid>
}
   c00ce:	4620      	mov	r0, r4
   c00d0:	bd10      	pop	{r4, pc}

000c00d2 <_ZN9TimeClass3nowEv>:
{
   c00d2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   c00d4:	f7ff ffe0 	bl	c0098 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   c00d8:	2210      	movs	r2, #16
   c00da:	2100      	movs	r1, #0
   c00dc:	4668      	mov	r0, sp
   c00de:	f001 f8bb 	bl	c1258 <memset>
    hal_rtc_get_time(&tv, nullptr);
   c00e2:	2100      	movs	r1, #0
   c00e4:	4668      	mov	r0, sp
   c00e6:	f7fc fd55 	bl	bcb94 <hal_rtc_get_time>
}
   c00ea:	9800      	ldr	r0, [sp, #0]
   c00ec:	b005      	add	sp, #20
   c00ee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000c00f4 <_ZN9TimeClass4hourEv>:
{
   c00f4:	b508      	push	{r3, lr}
	return hour(now());
   c00f6:	f7ff ffec 	bl	c00d2 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   c00fa:	17c1      	asrs	r1, r0, #31
   c00fc:	f7ff fe7c 	bl	bfdf8 <_ZL22Refresh_UnixTime_Cachex>
}
   c0100:	4b01      	ldr	r3, [pc, #4]	; (c0108 <_ZN9TimeClass4hourEv+0x14>)
   c0102:	6898      	ldr	r0, [r3, #8]
   c0104:	bd08      	pop	{r3, pc}
   c0106:	bf00      	nop
   c0108:	2003e6b0 	.word	0x2003e6b0

000c010c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   c010c:	4b02      	ldr	r3, [pc, #8]	; (c0118 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   c010e:	681a      	ldr	r2, [r3, #0]
   c0110:	4b02      	ldr	r3, [pc, #8]	; (c011c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   c0112:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   c0114:	4770      	bx	lr
   c0116:	bf00      	nop
   c0118:	2003d688 	.word	0x2003d688
   c011c:	2003e6ac 	.word	0x2003e6ac

000c0120 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   c0120:	4770      	bx	lr

000c0122 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   c0122:	7441      	strb	r1, [r0, #17]
}
   c0124:	4770      	bx	lr

000c0126 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   c0126:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   c0128:	7c00      	ldrb	r0, [r0, #16]
   c012a:	f7fc fee3 	bl	bcef4 <hal_usart_available_data_for_write>
}
   c012e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c0132:	bd08      	pop	{r3, pc}

000c0134 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   c0134:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   c0136:	7c00      	ldrb	r0, [r0, #16]
   c0138:	f7fc feb4 	bl	bcea4 <hal_usart_available>
}
   c013c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c0140:	bd08      	pop	{r3, pc}

000c0142 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   c0142:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   c0144:	7c00      	ldrb	r0, [r0, #16]
   c0146:	f7fc febd 	bl	bcec4 <hal_usart_peek>
}
   c014a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c014e:	bd08      	pop	{r3, pc}

000c0150 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   c0150:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   c0152:	7c00      	ldrb	r0, [r0, #16]
   c0154:	f7fc feae 	bl	bceb4 <hal_usart_read>
}
   c0158:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c015c:	bd08      	pop	{r3, pc}

000c015e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   c015e:	7c00      	ldrb	r0, [r0, #16]
   c0160:	f7fc beb8 	b.w	bced4 <hal_usart_flush>

000c0164 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   c0164:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c0166:	7c45      	ldrb	r5, [r0, #17]
{
   c0168:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c016a:	b12d      	cbz	r5, c0178 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   c016c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   c016e:	b003      	add	sp, #12
   c0170:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   c0174:	f7fc be8e 	b.w	bce94 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   c0178:	7c00      	ldrb	r0, [r0, #16]
   c017a:	9101      	str	r1, [sp, #4]
   c017c:	f7fc feba 	bl	bcef4 <hal_usart_available_data_for_write>
   c0180:	2800      	cmp	r0, #0
   c0182:	9901      	ldr	r1, [sp, #4]
   c0184:	dcf2      	bgt.n	c016c <_ZN11USARTSerial5writeEh+0x8>
}
   c0186:	4628      	mov	r0, r5
   c0188:	b003      	add	sp, #12
   c018a:	bd30      	pop	{r4, r5, pc}

000c018c <_ZN11USARTSerialD0Ev>:
   c018c:	b510      	push	{r4, lr}
   c018e:	2114      	movs	r1, #20
   c0190:	4604      	mov	r4, r0
   c0192:	f7f3 ff84 	bl	b409e <_ZdlPvj>
   c0196:	4620      	mov	r0, r4
   c0198:	bd10      	pop	{r4, pc}
	...

000c019c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   c019c:	b510      	push	{r4, lr}
   c019e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   c01a2:	4604      	mov	r4, r0
   c01a4:	4608      	mov	r0, r1
   c01a6:	4611      	mov	r1, r2
   c01a8:	2200      	movs	r2, #0
   c01aa:	e9c4 2301 	strd	r2, r3, [r4, #4]
   c01ae:	4b04      	ldr	r3, [pc, #16]	; (c01c0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   c01b0:	6023      	str	r3, [r4, #0]
  _blocking = true;
   c01b2:	2301      	movs	r3, #1
  _serial = serial;
   c01b4:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   c01b6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   c01b8:	f7fc feac 	bl	bcf14 <hal_usart_init_ex>
}
   c01bc:	4620      	mov	r0, r4
   c01be:	bd10      	pop	{r4, pc}
   c01c0:	000c5580 	.word	0x000c5580

000c01c4 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   c01c4:	7c00      	ldrb	r0, [r0, #16]
   c01c6:	2300      	movs	r3, #0
   c01c8:	f7fc be9c 	b.w	bcf04 <hal_usart_begin_config>

000c01cc <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   c01cc:	2200      	movs	r2, #0
   c01ce:	f7ff bff9 	b.w	c01c4 <_ZN11USARTSerial5beginEmm>

000c01d2 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   c01d2:	7c00      	ldrb	r0, [r0, #16]
   c01d4:	f7fc be56 	b.w	bce84 <hal_usart_end>

000c01d8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   c01d8:	7441      	strb	r1, [r0, #17]
}
   c01da:	4770      	bx	lr

000c01dc <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c01dc:	4770      	bx	lr

000c01de <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   c01de:	4770      	bx	lr

000c01e0 <_ZN9USBSerial4readEv>:
{
   c01e0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   c01e2:	2100      	movs	r1, #0
   c01e4:	7c00      	ldrb	r0, [r0, #16]
   c01e6:	f7fc fec5 	bl	bcf74 <HAL_USB_USART_Receive_Data>
}
   c01ea:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c01ee:	bd08      	pop	{r3, pc}

000c01f0 <_ZN9USBSerial4peekEv>:
{
   c01f0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   c01f2:	2101      	movs	r1, #1
   c01f4:	7c00      	ldrb	r0, [r0, #16]
   c01f6:	f7fc febd 	bl	bcf74 <HAL_USB_USART_Receive_Data>
}
   c01fa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   c01fe:	bd08      	pop	{r3, pc}

000c0200 <_ZN9USBSerial17availableForWriteEv>:
{
   c0200:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   c0202:	7c00      	ldrb	r0, [r0, #16]
   c0204:	f7fc feae 	bl	bcf64 <HAL_USB_USART_Available_Data_For_Write>
}
   c0208:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c020c:	bd08      	pop	{r3, pc}

000c020e <_ZN9USBSerial9availableEv>:
{
   c020e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   c0210:	7c00      	ldrb	r0, [r0, #16]
   c0212:	f7fc fe9f 	bl	bcf54 <HAL_USB_USART_Available_Data>
}
   c0216:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   c021a:	bd08      	pop	{r3, pc}

000c021c <_ZN9USBSerial5writeEh>:
{
   c021c:	b513      	push	{r0, r1, r4, lr}
   c021e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   c0220:	7c00      	ldrb	r0, [r0, #16]
{
   c0222:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   c0224:	f7fc fe9e 	bl	bcf64 <HAL_USB_USART_Available_Data_For_Write>
   c0228:	2800      	cmp	r0, #0
   c022a:	9901      	ldr	r1, [sp, #4]
   c022c:	dc01      	bgt.n	c0232 <_ZN9USBSerial5writeEh+0x16>
   c022e:	7c60      	ldrb	r0, [r4, #17]
   c0230:	b120      	cbz	r0, c023c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   c0232:	7c20      	ldrb	r0, [r4, #16]
   c0234:	f7fc fea6 	bl	bcf84 <HAL_USB_USART_Send_Data>
   c0238:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   c023c:	b002      	add	sp, #8
   c023e:	bd10      	pop	{r4, pc}

000c0240 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   c0240:	7c00      	ldrb	r0, [r0, #16]
   c0242:	f7fc bea7 	b.w	bcf94 <HAL_USB_USART_Flush_Data>

000c0246 <_ZN9USBSerialD0Ev>:
   c0246:	b510      	push	{r4, lr}
   c0248:	2114      	movs	r1, #20
   c024a:	4604      	mov	r4, r0
   c024c:	f7f3 ff27 	bl	b409e <_ZdlPvj>
   c0250:	4620      	mov	r0, r4
   c0252:	bd10      	pop	{r4, pc}

000c0254 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   c0254:	b510      	push	{r4, lr}
   c0256:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   c025a:	4604      	mov	r4, r0
   c025c:	4608      	mov	r0, r1
   c025e:	2100      	movs	r1, #0
   c0260:	e9c4 1301 	strd	r1, r3, [r4, #4]
   c0264:	4b04      	ldr	r3, [pc, #16]	; (c0278 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   c0266:	6023      	str	r3, [r4, #0]
  _blocking = true;
   c0268:	2301      	movs	r3, #1
  _serial = serial;
   c026a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   c026c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   c026e:	4611      	mov	r1, r2
   c0270:	f7fc fe58 	bl	bcf24 <HAL_USB_USART_Init>
}
   c0274:	4620      	mov	r0, r4
   c0276:	bd10      	pop	{r4, pc}
   c0278:	000c55b0 	.word	0x000c55b0

000c027c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   c027c:	7c00      	ldrb	r0, [r0, #16]
   c027e:	2200      	movs	r2, #0
   c0280:	f7fc be58 	b.w	bcf34 <HAL_USB_USART_Begin>

000c0284 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   c0284:	7c00      	ldrb	r0, [r0, #16]
   c0286:	f7fc be5d 	b.w	bcf44 <HAL_USB_USART_End>

000c028a <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   c028a:	7c00      	ldrb	r0, [r0, #16]
   c028c:	f7fc be8a 	b.w	bcfa4 <HAL_USB_USART_Is_Connected>

000c0290 <_Z19acquireSerialBufferv>:
{
   c0290:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   c0292:	2214      	movs	r2, #20
{
   c0294:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   c0296:	2100      	movs	r1, #0
   c0298:	f000 ffde 	bl	c1258 <memset>
}
   c029c:	4620      	mov	r0, r4
   c029e:	bd10      	pop	{r4, pc}

000c02a0 <_Z16_fetch_usbserialv>:
{
   c02a0:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c02a2:	4c0f      	ldr	r4, [pc, #60]	; (c02e0 <_Z16_fetch_usbserialv+0x40>)
{
   c02a4:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   c02a6:	a803      	add	r0, sp, #12
   c02a8:	f7ff fff2 	bl	c0290 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   c02ac:	7821      	ldrb	r1, [r4, #0]
   c02ae:	f3bf 8f5b 	dmb	ish
   c02b2:	f011 0101 	ands.w	r1, r1, #1
   c02b6:	d10f      	bne.n	c02d8 <_Z16_fetch_usbserialv+0x38>
   c02b8:	4620      	mov	r0, r4
   c02ba:	9101      	str	r1, [sp, #4]
   c02bc:	f7f3 fefe 	bl	b40bc <__cxa_guard_acquire>
   c02c0:	9901      	ldr	r1, [sp, #4]
   c02c2:	b148      	cbz	r0, c02d8 <_Z16_fetch_usbserialv+0x38>
   c02c4:	aa03      	add	r2, sp, #12
   c02c6:	4807      	ldr	r0, [pc, #28]	; (c02e4 <_Z16_fetch_usbserialv+0x44>)
   c02c8:	f7ff ffc4 	bl	c0254 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   c02cc:	4620      	mov	r0, r4
   c02ce:	f7f3 fefa 	bl	b40c6 <__cxa_guard_release>
   c02d2:	4805      	ldr	r0, [pc, #20]	; (c02e8 <_Z16_fetch_usbserialv+0x48>)
   c02d4:	f000 ff6c 	bl	c11b0 <atexit>
	return _usbserial;
}
   c02d8:	4802      	ldr	r0, [pc, #8]	; (c02e4 <_Z16_fetch_usbserialv+0x44>)
   c02da:	b008      	add	sp, #32
   c02dc:	bd10      	pop	{r4, pc}
   c02de:	bf00      	nop
   c02e0:	2003e6f0 	.word	0x2003e6f0
   c02e4:	2003e6f4 	.word	0x2003e6f4
   c02e8:	000c01dd 	.word	0x000c01dd

000c02ec <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   c02ec:	4b01      	ldr	r3, [pc, #4]	; (c02f4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   c02ee:	6018      	str	r0, [r3, #0]
    }, nullptr);
   c02f0:	4770      	bx	lr
   c02f2:	bf00      	nop
   c02f4:	2003d68c 	.word	0x2003d68c

000c02f8 <serialEventRun>:
{
   c02f8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   c02fa:	4b0b      	ldr	r3, [pc, #44]	; (c0328 <serialEventRun+0x30>)
   c02fc:	b143      	cbz	r3, c0310 <serialEventRun+0x18>
   c02fe:	f7ff ffcf 	bl	c02a0 <_Z16_fetch_usbserialv>
   c0302:	6803      	ldr	r3, [r0, #0]
   c0304:	691b      	ldr	r3, [r3, #16]
   c0306:	4798      	blx	r3
   c0308:	2800      	cmp	r0, #0
   c030a:	dd01      	ble.n	c0310 <serialEventRun+0x18>
        serialEvent();
   c030c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   c0310:	4b06      	ldr	r3, [pc, #24]	; (c032c <serialEventRun+0x34>)
   c0312:	b143      	cbz	r3, c0326 <serialEventRun+0x2e>
   c0314:	f000 f9ca 	bl	c06ac <_Z22__fetch_global_Serial1v>
   c0318:	6803      	ldr	r3, [r0, #0]
   c031a:	691b      	ldr	r3, [r3, #16]
   c031c:	4798      	blx	r3
   c031e:	2800      	cmp	r0, #0
   c0320:	dd01      	ble.n	c0326 <serialEventRun+0x2e>
        serialEvent1();
   c0322:	f3af 8000 	nop.w
}
   c0326:	bd08      	pop	{r3, pc}
	...

000c0330 <_post_loop>:
{
   c0330:	b508      	push	{r3, lr}
	serialEventRun();
   c0332:	f7ff ffe1 	bl	c02f8 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   c0336:	f7fc fc15 	bl	bcb64 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   c033a:	4b01      	ldr	r3, [pc, #4]	; (c0340 <_post_loop+0x10>)
   c033c:	6018      	str	r0, [r3, #0]
}
   c033e:	bd08      	pop	{r3, pc}
   c0340:	2003e710 	.word	0x2003e710

000c0344 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   c0344:	4805      	ldr	r0, [pc, #20]	; (c035c <_Z33system_initialize_user_backup_ramv+0x18>)
   c0346:	4a06      	ldr	r2, [pc, #24]	; (c0360 <_Z33system_initialize_user_backup_ramv+0x1c>)
   c0348:	4906      	ldr	r1, [pc, #24]	; (c0364 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   c034a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   c034c:	1a12      	subs	r2, r2, r0
   c034e:	f000 ff5b 	bl	c1208 <memcpy>
    __backup_sram_signature = signature;
   c0352:	4b05      	ldr	r3, [pc, #20]	; (c0368 <_Z33system_initialize_user_backup_ramv+0x24>)
   c0354:	4a05      	ldr	r2, [pc, #20]	; (c036c <_Z33system_initialize_user_backup_ramv+0x28>)
   c0356:	601a      	str	r2, [r3, #0]
}
   c0358:	bd08      	pop	{r3, pc}
   c035a:	bf00      	nop
   c035c:	2003f400 	.word	0x2003f400
   c0360:	2003f404 	.word	0x2003f404
   c0364:	000c5aa4 	.word	0x000c5aa4
   c0368:	2003f400 	.word	0x2003f400
   c036c:	9a271c1e 	.word	0x9a271c1e

000c0370 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   c0370:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   c0372:	2300      	movs	r3, #0
   c0374:	9300      	str	r3, [sp, #0]
   c0376:	461a      	mov	r2, r3
   c0378:	f06f 0177 	mvn.w	r1, #119	; 0x77
   c037c:	f7fc feae 	bl	bd0dc <system_ctrl_set_result>
}
   c0380:	b003      	add	sp, #12
   c0382:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000c0388 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   c0388:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   c038a:	8843      	ldrh	r3, [r0, #2]
   c038c:	2b0a      	cmp	r3, #10
   c038e:	d008      	beq.n	c03a2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   c0390:	2b50      	cmp	r3, #80	; 0x50
   c0392:	d10b      	bne.n	c03ac <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   c0394:	4b09      	ldr	r3, [pc, #36]	; (c03bc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   c0396:	681b      	ldr	r3, [r3, #0]
   c0398:	b14b      	cbz	r3, c03ae <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   c039a:	b003      	add	sp, #12
   c039c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   c03a0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   c03a2:	f7ff ffe5 	bl	c0370 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   c03a6:	b003      	add	sp, #12
   c03a8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   c03ac:	2300      	movs	r3, #0
   c03ae:	9300      	str	r3, [sp, #0]
   c03b0:	461a      	mov	r2, r3
   c03b2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   c03b6:	f7fc fe91 	bl	bd0dc <system_ctrl_set_result>
}
   c03ba:	e7f4      	b.n	c03a6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   c03bc:	2003e70c 	.word	0x2003e70c

000c03c0 <module_user_init_hook>:
{
   c03c0:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   c03c2:	4812      	ldr	r0, [pc, #72]	; (c040c <module_user_init_hook+0x4c>)
   c03c4:	2100      	movs	r1, #0
   c03c6:	f7fc ffc1 	bl	bd34c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   c03ca:	4b11      	ldr	r3, [pc, #68]	; (c0410 <module_user_init_hook+0x50>)
   c03cc:	681a      	ldr	r2, [r3, #0]
   c03ce:	4b11      	ldr	r3, [pc, #68]	; (c0414 <module_user_init_hook+0x54>)
   c03d0:	429a      	cmp	r2, r3
   c03d2:	4b11      	ldr	r3, [pc, #68]	; (c0418 <module_user_init_hook+0x58>)
   c03d4:	bf0c      	ite	eq
   c03d6:	2201      	moveq	r2, #1
   c03d8:	2200      	movne	r2, #0
   c03da:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   c03dc:	d001      	beq.n	c03e2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   c03de:	f7ff ffb1 	bl	c0344 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   c03e2:	f7fc fba7 	bl	bcb34 <HAL_RNG_GetRandomNumber>
   c03e6:	4604      	mov	r4, r0
    srand(seed);
   c03e8:	f000 ff4e 	bl	c1288 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   c03ec:	4b0b      	ldr	r3, [pc, #44]	; (c041c <module_user_init_hook+0x5c>)
   c03ee:	b113      	cbz	r3, c03f6 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   c03f0:	4620      	mov	r0, r4
   c03f2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   c03f6:	2100      	movs	r1, #0
   c03f8:	4808      	ldr	r0, [pc, #32]	; (c041c <module_user_init_hook+0x5c>)
   c03fa:	f7fc fedf 	bl	bd1bc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   c03fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   c0402:	4807      	ldr	r0, [pc, #28]	; (c0420 <module_user_init_hook+0x60>)
   c0404:	2100      	movs	r1, #0
   c0406:	f7fc be5f 	b.w	bd0c8 <system_ctrl_set_app_request_handler>
   c040a:	bf00      	nop
   c040c:	000c02ed 	.word	0x000c02ed
   c0410:	2003f400 	.word	0x2003f400
   c0414:	9a271c1e 	.word	0x9a271c1e
   c0418:	2003e708 	.word	0x2003e708
   c041c:	00000000 	.word	0x00000000
   c0420:	000c0389 	.word	0x000c0389

000c0424 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   c0424:	b508      	push	{r3, lr}
   c0426:	4b02      	ldr	r3, [pc, #8]	; (c0430 <spark_protocol_instance+0xc>)
   c0428:	681b      	ldr	r3, [r3, #0]
   c042a:	681b      	ldr	r3, [r3, #0]
   c042c:	9301      	str	r3, [sp, #4]
   c042e:	bd08      	pop	{r3, pc}
   c0430:	0003025c 	.word	0x0003025c

000c0434 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   c0434:	b508      	push	{r3, lr}
   c0436:	4b02      	ldr	r3, [pc, #8]	; (c0440 <spark_protocol_set_product_id+0xc>)
   c0438:	681b      	ldr	r3, [r3, #0]
   c043a:	685b      	ldr	r3, [r3, #4]
   c043c:	9301      	str	r3, [sp, #4]
   c043e:	bd08      	pop	{r3, pc}
   c0440:	0003025c 	.word	0x0003025c

000c0444 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   c0444:	b508      	push	{r3, lr}
   c0446:	4b02      	ldr	r3, [pc, #8]	; (c0450 <spark_protocol_set_product_firmware_version+0xc>)
   c0448:	681b      	ldr	r3, [r3, #0]
   c044a:	689b      	ldr	r3, [r3, #8]
   c044c:	9301      	str	r3, [sp, #4]
   c044e:	bd08      	pop	{r3, pc}
   c0450:	0003025c 	.word	0x0003025c

000c0454 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   c0454:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   c0456:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   c0458:	d902      	bls.n	c0460 <pinAvailable+0xc>
    return false;
   c045a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   c045c:	b002      	add	sp, #8
   c045e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   c0460:	f1a0 030b 	sub.w	r3, r0, #11
   c0464:	2b02      	cmp	r3, #2
   c0466:	d81a      	bhi.n	c049e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   c0468:	4c17      	ldr	r4, [pc, #92]	; (c04c8 <pinAvailable+0x74>)
   c046a:	7821      	ldrb	r1, [r4, #0]
   c046c:	f3bf 8f5b 	dmb	ish
   c0470:	f011 0101 	ands.w	r1, r1, #1
   c0474:	d10b      	bne.n	c048e <pinAvailable+0x3a>
   c0476:	4620      	mov	r0, r4
   c0478:	9101      	str	r1, [sp, #4]
   c047a:	f7f3 fe1f 	bl	b40bc <__cxa_guard_acquire>
   c047e:	9901      	ldr	r1, [sp, #4]
   c0480:	b128      	cbz	r0, c048e <pinAvailable+0x3a>
   c0482:	4812      	ldr	r0, [pc, #72]	; (c04cc <pinAvailable+0x78>)
   c0484:	f7ff f9a4 	bl	bf7d0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   c0488:	4620      	mov	r0, r4
   c048a:	f7f3 fe1c 	bl	b40c6 <__cxa_guard_release>
   c048e:	4b0f      	ldr	r3, [pc, #60]	; (c04cc <pinAvailable+0x78>)
   c0490:	7818      	ldrb	r0, [r3, #0]
   c0492:	f7fc fc6f 	bl	bcd74 <hal_spi_is_enabled>
   c0496:	2800      	cmp	r0, #0
   c0498:	d1df      	bne.n	c045a <pinAvailable+0x6>
  return true; // 'pin' is available
   c049a:	2001      	movs	r0, #1
   c049c:	e7de      	b.n	c045c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   c049e:	2801      	cmp	r0, #1
   c04a0:	d809      	bhi.n	c04b6 <pinAvailable+0x62>
   c04a2:	f000 f89f 	bl	c05e4 <_Z19__fetch_global_Wirev>
   c04a6:	2100      	movs	r1, #0
   c04a8:	7c00      	ldrb	r0, [r0, #16]
   c04aa:	f7fc fc03 	bl	bccb4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   c04ae:	f080 0001 	eor.w	r0, r0, #1
   c04b2:	b2c0      	uxtb	r0, r0
   c04b4:	e7d2      	b.n	c045c <pinAvailable+0x8>
   c04b6:	3809      	subs	r0, #9
   c04b8:	2801      	cmp	r0, #1
   c04ba:	d8ee      	bhi.n	c049a <pinAvailable+0x46>
   c04bc:	f000 f8f6 	bl	c06ac <_Z22__fetch_global_Serial1v>
   c04c0:	7c00      	ldrb	r0, [r0, #16]
   c04c2:	f7fc fd0f 	bl	bcee4 <hal_usart_is_enabled>
   c04c6:	e7f2      	b.n	c04ae <pinAvailable+0x5a>
   c04c8:	2003e4d8 	.word	0x2003e4d8
   c04cc:	2003e4dc 	.word	0x2003e4dc

000c04d0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   c04d0:	2823      	cmp	r0, #35	; 0x23
{
   c04d2:	b538      	push	{r3, r4, r5, lr}
   c04d4:	4604      	mov	r4, r0
   c04d6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   c04d8:	d80a      	bhi.n	c04f0 <pinMode+0x20>
   c04da:	29ff      	cmp	r1, #255	; 0xff
   c04dc:	d008      	beq.n	c04f0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   c04de:	f7ff ffb9 	bl	c0454 <pinAvailable>
   c04e2:	b128      	cbz	r0, c04f0 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   c04e4:	4629      	mov	r1, r5
   c04e6:	4620      	mov	r0, r4
}
   c04e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   c04ec:	f7fc bb6a 	b.w	bcbc4 <HAL_Pin_Mode>
}
   c04f0:	bd38      	pop	{r3, r4, r5, pc}

000c04f2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   c04f2:	b538      	push	{r3, r4, r5, lr}
   c04f4:	4604      	mov	r4, r0
   c04f6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   c04f8:	f7fc fb6c 	bl	bcbd4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   c04fc:	28ff      	cmp	r0, #255	; 0xff
   c04fe:	d010      	beq.n	c0522 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   c0500:	2806      	cmp	r0, #6
   c0502:	d804      	bhi.n	c050e <digitalWrite+0x1c>
   c0504:	234d      	movs	r3, #77	; 0x4d
   c0506:	fa23 f000 	lsr.w	r0, r3, r0
   c050a:	07c3      	lsls	r3, r0, #31
   c050c:	d409      	bmi.n	c0522 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   c050e:	4620      	mov	r0, r4
   c0510:	f7ff ffa0 	bl	c0454 <pinAvailable>
   c0514:	b128      	cbz	r0, c0522 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   c0516:	4629      	mov	r1, r5
   c0518:	4620      	mov	r0, r4
}
   c051a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   c051e:	f7fc bb61 	b.w	bcbe4 <HAL_GPIO_Write>
}
   c0522:	bd38      	pop	{r3, r4, r5, pc}

000c0524 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   c0524:	b510      	push	{r4, lr}
   c0526:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   c0528:	f7fc fb54 	bl	bcbd4 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   c052c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   c052e:	b2db      	uxtb	r3, r3
   c0530:	2b01      	cmp	r3, #1
   c0532:	d908      	bls.n	c0546 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   c0534:	4620      	mov	r0, r4
   c0536:	f7ff ff8d 	bl	c0454 <pinAvailable>
   c053a:	b120      	cbz	r0, c0546 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   c053c:	4620      	mov	r0, r4
}
   c053e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   c0542:	f7fc bb57 	b.w	bcbf4 <HAL_GPIO_Read>
}
   c0546:	2000      	movs	r0, #0
   c0548:	bd10      	pop	{r4, pc}

000c054a <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   c054a:	280d      	cmp	r0, #13
{
   c054c:	b510      	push	{r4, lr}
   c054e:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   c0550:	bf9c      	itt	ls
   c0552:	340e      	addls	r4, #14
   c0554:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   c0556:	4620      	mov	r0, r4
   c0558:	f7ff ff7c 	bl	c0454 <pinAvailable>
   c055c:	b150      	cbz	r0, c0574 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   c055e:	2103      	movs	r1, #3
   c0560:	4620      	mov	r0, r4
   c0562:	f7fc fb27 	bl	bcbb4 <HAL_Validate_Pin_Function>
   c0566:	2803      	cmp	r0, #3
   c0568:	d104      	bne.n	c0574 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   c056a:	4620      	mov	r0, r4
}
   c056c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   c0570:	f7fc bb58 	b.w	bcc24 <hal_adc_read>
}
   c0574:	2000      	movs	r0, #0
   c0576:	bd10      	pop	{r4, pc}

000c0578 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c0578:	4770      	bx	lr

000c057a <__tcf_1>:
   c057a:	4770      	bx	lr

000c057c <_Z17acquireWireBufferv>:
{
   c057c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   c057e:	4b0a      	ldr	r3, [pc, #40]	; (c05a8 <_Z17acquireWireBufferv+0x2c>)
   c0580:	6003      	str	r3, [r0, #0]
   c0582:	2301      	movs	r3, #1
{
   c0584:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   c0586:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   c0588:	4908      	ldr	r1, [pc, #32]	; (c05ac <_Z17acquireWireBufferv+0x30>)
   c058a:	2020      	movs	r0, #32
   c058c:	f000 f8b4 	bl	c06f8 <_ZnajRKSt9nothrow_t>
	};
   c0590:	2520      	movs	r5, #32
   c0592:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   c0594:	4905      	ldr	r1, [pc, #20]	; (c05ac <_Z17acquireWireBufferv+0x30>)
	};
   c0596:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   c0598:	4628      	mov	r0, r5
   c059a:	f000 f8ad 	bl	c06f8 <_ZnajRKSt9nothrow_t>
	};
   c059e:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   c05a2:	4620      	mov	r0, r4
   c05a4:	bd38      	pop	{r3, r4, r5, pc}
   c05a6:	bf00      	nop
   c05a8:	00010018 	.word	0x00010018
   c05ac:	000c55d8 	.word	0x000c55d8

000c05b0 <_Z18acquireWire1Bufferv>:
{
   c05b0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   c05b2:	4b0a      	ldr	r3, [pc, #40]	; (c05dc <_Z18acquireWire1Bufferv+0x2c>)
   c05b4:	6003      	str	r3, [r0, #0]
   c05b6:	2301      	movs	r3, #1
{
   c05b8:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   c05ba:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   c05bc:	4908      	ldr	r1, [pc, #32]	; (c05e0 <_Z18acquireWire1Bufferv+0x30>)
   c05be:	2020      	movs	r0, #32
   c05c0:	f000 f89a 	bl	c06f8 <_ZnajRKSt9nothrow_t>
	};
   c05c4:	2520      	movs	r5, #32
   c05c6:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   c05c8:	4905      	ldr	r1, [pc, #20]	; (c05e0 <_Z18acquireWire1Bufferv+0x30>)
	};
   c05ca:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   c05cc:	4628      	mov	r0, r5
   c05ce:	f000 f893 	bl	c06f8 <_ZnajRKSt9nothrow_t>
	};
   c05d2:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   c05d6:	4620      	mov	r0, r4
   c05d8:	bd38      	pop	{r3, r4, r5, pc}
   c05da:	bf00      	nop
   c05dc:	00010018 	.word	0x00010018
   c05e0:	000c55d8 	.word	0x000c55d8

000c05e4 <_Z19__fetch_global_Wirev>:
{
   c05e4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c05e6:	4d0e      	ldr	r5, [pc, #56]	; (c0620 <_Z19__fetch_global_Wirev+0x3c>)
   c05e8:	7829      	ldrb	r1, [r5, #0]
   c05ea:	f3bf 8f5b 	dmb	ish
   c05ee:	f011 0401 	ands.w	r4, r1, #1
{
   c05f2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   c05f4:	d111      	bne.n	c061a <_Z19__fetch_global_Wirev+0x36>
   c05f6:	4628      	mov	r0, r5
   c05f8:	f7f3 fd60 	bl	b40bc <__cxa_guard_acquire>
   c05fc:	b168      	cbz	r0, c061a <_Z19__fetch_global_Wirev+0x36>
   c05fe:	4668      	mov	r0, sp
   c0600:	f7ff ffbc 	bl	c057c <_Z17acquireWireBufferv>
   c0604:	466a      	mov	r2, sp
   c0606:	4621      	mov	r1, r4
   c0608:	4806      	ldr	r0, [pc, #24]	; (c0624 <_Z19__fetch_global_Wirev+0x40>)
   c060a:	f7fd fbc3 	bl	bdd94 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   c060e:	4628      	mov	r0, r5
   c0610:	f7f3 fd59 	bl	b40c6 <__cxa_guard_release>
   c0614:	4804      	ldr	r0, [pc, #16]	; (c0628 <_Z19__fetch_global_Wirev+0x44>)
   c0616:	f000 fdcb 	bl	c11b0 <atexit>
	return wire;
}
   c061a:	4802      	ldr	r0, [pc, #8]	; (c0624 <_Z19__fetch_global_Wirev+0x40>)
   c061c:	b007      	add	sp, #28
   c061e:	bd30      	pop	{r4, r5, pc}
   c0620:	2003e714 	.word	0x2003e714
   c0624:	2003e71c 	.word	0x2003e71c
   c0628:	000c0579 	.word	0x000c0579

000c062c <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   c062c:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   c062e:	4c0e      	ldr	r4, [pc, #56]	; (c0668 <_Z20__fetch_global_Wire1v+0x3c>)
   c0630:	7823      	ldrb	r3, [r4, #0]
   c0632:	f3bf 8f5b 	dmb	ish
   c0636:	07db      	lsls	r3, r3, #31
{
   c0638:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   c063a:	d411      	bmi.n	c0660 <_Z20__fetch_global_Wire1v+0x34>
   c063c:	4620      	mov	r0, r4
   c063e:	f7f3 fd3d 	bl	b40bc <__cxa_guard_acquire>
   c0642:	b168      	cbz	r0, c0660 <_Z20__fetch_global_Wire1v+0x34>
   c0644:	4668      	mov	r0, sp
   c0646:	f7ff ffb3 	bl	c05b0 <_Z18acquireWire1Bufferv>
   c064a:	466a      	mov	r2, sp
   c064c:	2101      	movs	r1, #1
   c064e:	4807      	ldr	r0, [pc, #28]	; (c066c <_Z20__fetch_global_Wire1v+0x40>)
   c0650:	f7fd fba0 	bl	bdd94 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   c0654:	4620      	mov	r0, r4
   c0656:	f7f3 fd36 	bl	b40c6 <__cxa_guard_release>
   c065a:	4805      	ldr	r0, [pc, #20]	; (c0670 <_Z20__fetch_global_Wire1v+0x44>)
   c065c:	f000 fda8 	bl	c11b0 <atexit>
	return wire;
}
   c0660:	4802      	ldr	r0, [pc, #8]	; (c066c <_Z20__fetch_global_Wire1v+0x40>)
   c0662:	b006      	add	sp, #24
   c0664:	bd10      	pop	{r4, pc}
   c0666:	bf00      	nop
   c0668:	2003e718 	.word	0x2003e718
   c066c:	2003e730 	.word	0x2003e730
   c0670:	000c057b 	.word	0x000c057b

000c0674 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c0674:	4770      	bx	lr
	...

000c0678 <_Z20acquireSerial1Bufferv>:
{
   c0678:	b538      	push	{r3, r4, r5, lr}
   c067a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   c067c:	2514      	movs	r5, #20
   c067e:	462a      	mov	r2, r5
   c0680:	2100      	movs	r1, #0
   c0682:	f000 fde9 	bl	c1258 <memset>
   c0686:	8025      	strh	r5, [r4, #0]
   c0688:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c068a:	4907      	ldr	r1, [pc, #28]	; (c06a8 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   c068c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c068e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   c0690:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c0692:	f000 f831 	bl	c06f8 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c0696:	4904      	ldr	r1, [pc, #16]	; (c06a8 <_Z20acquireSerial1Bufferv+0x30>)
    };
   c0698:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   c069a:	4628      	mov	r0, r5
   c069c:	f000 f82c 	bl	c06f8 <_ZnajRKSt9nothrow_t>
    };
   c06a0:	60e0      	str	r0, [r4, #12]
}
   c06a2:	4620      	mov	r0, r4
   c06a4:	bd38      	pop	{r3, r4, r5, pc}
   c06a6:	bf00      	nop
   c06a8:	000c55d8 	.word	0x000c55d8

000c06ac <_Z22__fetch_global_Serial1v>:
{
   c06ac:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c06ae:	4d0e      	ldr	r5, [pc, #56]	; (c06e8 <_Z22__fetch_global_Serial1v+0x3c>)
   c06b0:	7829      	ldrb	r1, [r5, #0]
   c06b2:	f3bf 8f5b 	dmb	ish
   c06b6:	f011 0401 	ands.w	r4, r1, #1
{
   c06ba:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   c06bc:	d111      	bne.n	c06e2 <_Z22__fetch_global_Serial1v+0x36>
   c06be:	4628      	mov	r0, r5
   c06c0:	f7f3 fcfc 	bl	b40bc <__cxa_guard_acquire>
   c06c4:	b168      	cbz	r0, c06e2 <_Z22__fetch_global_Serial1v+0x36>
   c06c6:	a801      	add	r0, sp, #4
   c06c8:	f7ff ffd6 	bl	c0678 <_Z20acquireSerial1Bufferv>
   c06cc:	aa01      	add	r2, sp, #4
   c06ce:	4621      	mov	r1, r4
   c06d0:	4806      	ldr	r0, [pc, #24]	; (c06ec <_Z22__fetch_global_Serial1v+0x40>)
   c06d2:	f7ff fd63 	bl	c019c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   c06d6:	4628      	mov	r0, r5
   c06d8:	f7f3 fcf5 	bl	b40c6 <__cxa_guard_release>
   c06dc:	4804      	ldr	r0, [pc, #16]	; (c06f0 <_Z22__fetch_global_Serial1v+0x44>)
   c06de:	f000 fd67 	bl	c11b0 <atexit>
    return serial1;
}
   c06e2:	4802      	ldr	r0, [pc, #8]	; (c06ec <_Z22__fetch_global_Serial1v+0x40>)
   c06e4:	b007      	add	sp, #28
   c06e6:	bd30      	pop	{r4, r5, pc}
   c06e8:	2003e744 	.word	0x2003e744
   c06ec:	2003e748 	.word	0x2003e748
   c06f0:	000c0675 	.word	0x000c0675

000c06f4 <_ZnwjRKSt9nothrow_t>:
   c06f4:	f7f3 bccf 	b.w	b4096 <_Znwj>

000c06f8 <_ZnajRKSt9nothrow_t>:
   c06f8:	f7f3 bccf 	b.w	b409a <_Znaj>

000c06fc <_ZSt17__throw_bad_allocv>:
   c06fc:	b508      	push	{r3, lr}
   c06fe:	f7fc fe05 	bl	bd30c <abort>

000c0702 <_ZSt20__throw_length_errorPKc>:
   c0702:	b508      	push	{r3, lr}
   c0704:	f7fc fe02 	bl	bd30c <abort>

000c0708 <_ZSt25__throw_bad_function_callv>:
   c0708:	b508      	push	{r3, lr}
   c070a:	f7fc fdff 	bl	bd30c <abort>
	...

000c0710 <nan>:
   c0710:	ed9f 0b01 	vldr	d0, [pc, #4]	; c0718 <nan+0x8>
   c0714:	4770      	bx	lr
   c0716:	bf00      	nop
   c0718:	00000000 	.word	0x00000000
   c071c:	7ff80000 	.word	0x7ff80000

000c0720 <__aeabi_drsub>:
   c0720:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   c0724:	e002      	b.n	c072c <__adddf3>
   c0726:	bf00      	nop

000c0728 <__aeabi_dsub>:
   c0728:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000c072c <__adddf3>:
   c072c:	b530      	push	{r4, r5, lr}
   c072e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   c0732:	ea4f 0543 	mov.w	r5, r3, lsl #1
   c0736:	ea94 0f05 	teq	r4, r5
   c073a:	bf08      	it	eq
   c073c:	ea90 0f02 	teqeq	r0, r2
   c0740:	bf1f      	itttt	ne
   c0742:	ea54 0c00 	orrsne.w	ip, r4, r0
   c0746:	ea55 0c02 	orrsne.w	ip, r5, r2
   c074a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   c074e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   c0752:	f000 80e2 	beq.w	c091a <__adddf3+0x1ee>
   c0756:	ea4f 5454 	mov.w	r4, r4, lsr #21
   c075a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   c075e:	bfb8      	it	lt
   c0760:	426d      	neglt	r5, r5
   c0762:	dd0c      	ble.n	c077e <__adddf3+0x52>
   c0764:	442c      	add	r4, r5
   c0766:	ea80 0202 	eor.w	r2, r0, r2
   c076a:	ea81 0303 	eor.w	r3, r1, r3
   c076e:	ea82 0000 	eor.w	r0, r2, r0
   c0772:	ea83 0101 	eor.w	r1, r3, r1
   c0776:	ea80 0202 	eor.w	r2, r0, r2
   c077a:	ea81 0303 	eor.w	r3, r1, r3
   c077e:	2d36      	cmp	r5, #54	; 0x36
   c0780:	bf88      	it	hi
   c0782:	bd30      	pophi	{r4, r5, pc}
   c0784:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   c0788:	ea4f 3101 	mov.w	r1, r1, lsl #12
   c078c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   c0790:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   c0794:	d002      	beq.n	c079c <__adddf3+0x70>
   c0796:	4240      	negs	r0, r0
   c0798:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c079c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   c07a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   c07a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   c07a8:	d002      	beq.n	c07b0 <__adddf3+0x84>
   c07aa:	4252      	negs	r2, r2
   c07ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   c07b0:	ea94 0f05 	teq	r4, r5
   c07b4:	f000 80a7 	beq.w	c0906 <__adddf3+0x1da>
   c07b8:	f1a4 0401 	sub.w	r4, r4, #1
   c07bc:	f1d5 0e20 	rsbs	lr, r5, #32
   c07c0:	db0d      	blt.n	c07de <__adddf3+0xb2>
   c07c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   c07c6:	fa22 f205 	lsr.w	r2, r2, r5
   c07ca:	1880      	adds	r0, r0, r2
   c07cc:	f141 0100 	adc.w	r1, r1, #0
   c07d0:	fa03 f20e 	lsl.w	r2, r3, lr
   c07d4:	1880      	adds	r0, r0, r2
   c07d6:	fa43 f305 	asr.w	r3, r3, r5
   c07da:	4159      	adcs	r1, r3
   c07dc:	e00e      	b.n	c07fc <__adddf3+0xd0>
   c07de:	f1a5 0520 	sub.w	r5, r5, #32
   c07e2:	f10e 0e20 	add.w	lr, lr, #32
   c07e6:	2a01      	cmp	r2, #1
   c07e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   c07ec:	bf28      	it	cs
   c07ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   c07f2:	fa43 f305 	asr.w	r3, r3, r5
   c07f6:	18c0      	adds	r0, r0, r3
   c07f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   c07fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c0800:	d507      	bpl.n	c0812 <__adddf3+0xe6>
   c0802:	f04f 0e00 	mov.w	lr, #0
   c0806:	f1dc 0c00 	rsbs	ip, ip, #0
   c080a:	eb7e 0000 	sbcs.w	r0, lr, r0
   c080e:	eb6e 0101 	sbc.w	r1, lr, r1
   c0812:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   c0816:	d31b      	bcc.n	c0850 <__adddf3+0x124>
   c0818:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   c081c:	d30c      	bcc.n	c0838 <__adddf3+0x10c>
   c081e:	0849      	lsrs	r1, r1, #1
   c0820:	ea5f 0030 	movs.w	r0, r0, rrx
   c0824:	ea4f 0c3c 	mov.w	ip, ip, rrx
   c0828:	f104 0401 	add.w	r4, r4, #1
   c082c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   c0830:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   c0834:	f080 809a 	bcs.w	c096c <__adddf3+0x240>
   c0838:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   c083c:	bf08      	it	eq
   c083e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   c0842:	f150 0000 	adcs.w	r0, r0, #0
   c0846:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c084a:	ea41 0105 	orr.w	r1, r1, r5
   c084e:	bd30      	pop	{r4, r5, pc}
   c0850:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   c0854:	4140      	adcs	r0, r0
   c0856:	eb41 0101 	adc.w	r1, r1, r1
   c085a:	3c01      	subs	r4, #1
   c085c:	bf28      	it	cs
   c085e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   c0862:	d2e9      	bcs.n	c0838 <__adddf3+0x10c>
   c0864:	f091 0f00 	teq	r1, #0
   c0868:	bf04      	itt	eq
   c086a:	4601      	moveq	r1, r0
   c086c:	2000      	moveq	r0, #0
   c086e:	fab1 f381 	clz	r3, r1
   c0872:	bf08      	it	eq
   c0874:	3320      	addeq	r3, #32
   c0876:	f1a3 030b 	sub.w	r3, r3, #11
   c087a:	f1b3 0220 	subs.w	r2, r3, #32
   c087e:	da0c      	bge.n	c089a <__adddf3+0x16e>
   c0880:	320c      	adds	r2, #12
   c0882:	dd08      	ble.n	c0896 <__adddf3+0x16a>
   c0884:	f102 0c14 	add.w	ip, r2, #20
   c0888:	f1c2 020c 	rsb	r2, r2, #12
   c088c:	fa01 f00c 	lsl.w	r0, r1, ip
   c0890:	fa21 f102 	lsr.w	r1, r1, r2
   c0894:	e00c      	b.n	c08b0 <__adddf3+0x184>
   c0896:	f102 0214 	add.w	r2, r2, #20
   c089a:	bfd8      	it	le
   c089c:	f1c2 0c20 	rsble	ip, r2, #32
   c08a0:	fa01 f102 	lsl.w	r1, r1, r2
   c08a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   c08a8:	bfdc      	itt	le
   c08aa:	ea41 010c 	orrle.w	r1, r1, ip
   c08ae:	4090      	lslle	r0, r2
   c08b0:	1ae4      	subs	r4, r4, r3
   c08b2:	bfa2      	ittt	ge
   c08b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   c08b8:	4329      	orrge	r1, r5
   c08ba:	bd30      	popge	{r4, r5, pc}
   c08bc:	ea6f 0404 	mvn.w	r4, r4
   c08c0:	3c1f      	subs	r4, #31
   c08c2:	da1c      	bge.n	c08fe <__adddf3+0x1d2>
   c08c4:	340c      	adds	r4, #12
   c08c6:	dc0e      	bgt.n	c08e6 <__adddf3+0x1ba>
   c08c8:	f104 0414 	add.w	r4, r4, #20
   c08cc:	f1c4 0220 	rsb	r2, r4, #32
   c08d0:	fa20 f004 	lsr.w	r0, r0, r4
   c08d4:	fa01 f302 	lsl.w	r3, r1, r2
   c08d8:	ea40 0003 	orr.w	r0, r0, r3
   c08dc:	fa21 f304 	lsr.w	r3, r1, r4
   c08e0:	ea45 0103 	orr.w	r1, r5, r3
   c08e4:	bd30      	pop	{r4, r5, pc}
   c08e6:	f1c4 040c 	rsb	r4, r4, #12
   c08ea:	f1c4 0220 	rsb	r2, r4, #32
   c08ee:	fa20 f002 	lsr.w	r0, r0, r2
   c08f2:	fa01 f304 	lsl.w	r3, r1, r4
   c08f6:	ea40 0003 	orr.w	r0, r0, r3
   c08fa:	4629      	mov	r1, r5
   c08fc:	bd30      	pop	{r4, r5, pc}
   c08fe:	fa21 f004 	lsr.w	r0, r1, r4
   c0902:	4629      	mov	r1, r5
   c0904:	bd30      	pop	{r4, r5, pc}
   c0906:	f094 0f00 	teq	r4, #0
   c090a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   c090e:	bf06      	itte	eq
   c0910:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   c0914:	3401      	addeq	r4, #1
   c0916:	3d01      	subne	r5, #1
   c0918:	e74e      	b.n	c07b8 <__adddf3+0x8c>
   c091a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   c091e:	bf18      	it	ne
   c0920:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   c0924:	d029      	beq.n	c097a <__adddf3+0x24e>
   c0926:	ea94 0f05 	teq	r4, r5
   c092a:	bf08      	it	eq
   c092c:	ea90 0f02 	teqeq	r0, r2
   c0930:	d005      	beq.n	c093e <__adddf3+0x212>
   c0932:	ea54 0c00 	orrs.w	ip, r4, r0
   c0936:	bf04      	itt	eq
   c0938:	4619      	moveq	r1, r3
   c093a:	4610      	moveq	r0, r2
   c093c:	bd30      	pop	{r4, r5, pc}
   c093e:	ea91 0f03 	teq	r1, r3
   c0942:	bf1e      	ittt	ne
   c0944:	2100      	movne	r1, #0
   c0946:	2000      	movne	r0, #0
   c0948:	bd30      	popne	{r4, r5, pc}
   c094a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   c094e:	d105      	bne.n	c095c <__adddf3+0x230>
   c0950:	0040      	lsls	r0, r0, #1
   c0952:	4149      	adcs	r1, r1
   c0954:	bf28      	it	cs
   c0956:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   c095a:	bd30      	pop	{r4, r5, pc}
   c095c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   c0960:	bf3c      	itt	cc
   c0962:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   c0966:	bd30      	popcc	{r4, r5, pc}
   c0968:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c096c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   c0970:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   c0974:	f04f 0000 	mov.w	r0, #0
   c0978:	bd30      	pop	{r4, r5, pc}
   c097a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   c097e:	bf1a      	itte	ne
   c0980:	4619      	movne	r1, r3
   c0982:	4610      	movne	r0, r2
   c0984:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   c0988:	bf1c      	itt	ne
   c098a:	460b      	movne	r3, r1
   c098c:	4602      	movne	r2, r0
   c098e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   c0992:	bf06      	itte	eq
   c0994:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   c0998:	ea91 0f03 	teqeq	r1, r3
   c099c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   c09a0:	bd30      	pop	{r4, r5, pc}
   c09a2:	bf00      	nop

000c09a4 <__aeabi_ui2d>:
   c09a4:	f090 0f00 	teq	r0, #0
   c09a8:	bf04      	itt	eq
   c09aa:	2100      	moveq	r1, #0
   c09ac:	4770      	bxeq	lr
   c09ae:	b530      	push	{r4, r5, lr}
   c09b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c09b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c09b8:	f04f 0500 	mov.w	r5, #0
   c09bc:	f04f 0100 	mov.w	r1, #0
   c09c0:	e750      	b.n	c0864 <__adddf3+0x138>
   c09c2:	bf00      	nop

000c09c4 <__aeabi_i2d>:
   c09c4:	f090 0f00 	teq	r0, #0
   c09c8:	bf04      	itt	eq
   c09ca:	2100      	moveq	r1, #0
   c09cc:	4770      	bxeq	lr
   c09ce:	b530      	push	{r4, r5, lr}
   c09d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c09d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c09d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   c09dc:	bf48      	it	mi
   c09de:	4240      	negmi	r0, r0
   c09e0:	f04f 0100 	mov.w	r1, #0
   c09e4:	e73e      	b.n	c0864 <__adddf3+0x138>
   c09e6:	bf00      	nop

000c09e8 <__aeabi_f2d>:
   c09e8:	0042      	lsls	r2, r0, #1
   c09ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   c09ee:	ea4f 0131 	mov.w	r1, r1, rrx
   c09f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   c09f6:	bf1f      	itttt	ne
   c09f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   c09fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   c0a00:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   c0a04:	4770      	bxne	lr
   c0a06:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   c0a0a:	bf08      	it	eq
   c0a0c:	4770      	bxeq	lr
   c0a0e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   c0a12:	bf04      	itt	eq
   c0a14:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   c0a18:	4770      	bxeq	lr
   c0a1a:	b530      	push	{r4, r5, lr}
   c0a1c:	f44f 7460 	mov.w	r4, #896	; 0x380
   c0a20:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   c0a24:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   c0a28:	e71c      	b.n	c0864 <__adddf3+0x138>
   c0a2a:	bf00      	nop

000c0a2c <__aeabi_ul2d>:
   c0a2c:	ea50 0201 	orrs.w	r2, r0, r1
   c0a30:	bf08      	it	eq
   c0a32:	4770      	bxeq	lr
   c0a34:	b530      	push	{r4, r5, lr}
   c0a36:	f04f 0500 	mov.w	r5, #0
   c0a3a:	e00a      	b.n	c0a52 <__aeabi_l2d+0x16>

000c0a3c <__aeabi_l2d>:
   c0a3c:	ea50 0201 	orrs.w	r2, r0, r1
   c0a40:	bf08      	it	eq
   c0a42:	4770      	bxeq	lr
   c0a44:	b530      	push	{r4, r5, lr}
   c0a46:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   c0a4a:	d502      	bpl.n	c0a52 <__aeabi_l2d+0x16>
   c0a4c:	4240      	negs	r0, r0
   c0a4e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c0a52:	f44f 6480 	mov.w	r4, #1024	; 0x400
   c0a56:	f104 0432 	add.w	r4, r4, #50	; 0x32
   c0a5a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   c0a5e:	f43f aed8 	beq.w	c0812 <__adddf3+0xe6>
   c0a62:	f04f 0203 	mov.w	r2, #3
   c0a66:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   c0a6a:	bf18      	it	ne
   c0a6c:	3203      	addne	r2, #3
   c0a6e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   c0a72:	bf18      	it	ne
   c0a74:	3203      	addne	r2, #3
   c0a76:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   c0a7a:	f1c2 0320 	rsb	r3, r2, #32
   c0a7e:	fa00 fc03 	lsl.w	ip, r0, r3
   c0a82:	fa20 f002 	lsr.w	r0, r0, r2
   c0a86:	fa01 fe03 	lsl.w	lr, r1, r3
   c0a8a:	ea40 000e 	orr.w	r0, r0, lr
   c0a8e:	fa21 f102 	lsr.w	r1, r1, r2
   c0a92:	4414      	add	r4, r2
   c0a94:	e6bd      	b.n	c0812 <__adddf3+0xe6>
   c0a96:	bf00      	nop

000c0a98 <__aeabi_dmul>:
   c0a98:	b570      	push	{r4, r5, r6, lr}
   c0a9a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   c0a9e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   c0aa2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   c0aa6:	bf1d      	ittte	ne
   c0aa8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   c0aac:	ea94 0f0c 	teqne	r4, ip
   c0ab0:	ea95 0f0c 	teqne	r5, ip
   c0ab4:	f000 f8de 	bleq	c0c74 <__aeabi_dmul+0x1dc>
   c0ab8:	442c      	add	r4, r5
   c0aba:	ea81 0603 	eor.w	r6, r1, r3
   c0abe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   c0ac2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   c0ac6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   c0aca:	bf18      	it	ne
   c0acc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   c0ad0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c0ad4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c0ad8:	d038      	beq.n	c0b4c <__aeabi_dmul+0xb4>
   c0ada:	fba0 ce02 	umull	ip, lr, r0, r2
   c0ade:	f04f 0500 	mov.w	r5, #0
   c0ae2:	fbe1 e502 	umlal	lr, r5, r1, r2
   c0ae6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   c0aea:	fbe0 e503 	umlal	lr, r5, r0, r3
   c0aee:	f04f 0600 	mov.w	r6, #0
   c0af2:	fbe1 5603 	umlal	r5, r6, r1, r3
   c0af6:	f09c 0f00 	teq	ip, #0
   c0afa:	bf18      	it	ne
   c0afc:	f04e 0e01 	orrne.w	lr, lr, #1
   c0b00:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   c0b04:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   c0b08:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   c0b0c:	d204      	bcs.n	c0b18 <__aeabi_dmul+0x80>
   c0b0e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   c0b12:	416d      	adcs	r5, r5
   c0b14:	eb46 0606 	adc.w	r6, r6, r6
   c0b18:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   c0b1c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   c0b20:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   c0b24:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   c0b28:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   c0b2c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   c0b30:	bf88      	it	hi
   c0b32:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   c0b36:	d81e      	bhi.n	c0b76 <__aeabi_dmul+0xde>
   c0b38:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   c0b3c:	bf08      	it	eq
   c0b3e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   c0b42:	f150 0000 	adcs.w	r0, r0, #0
   c0b46:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c0b4a:	bd70      	pop	{r4, r5, r6, pc}
   c0b4c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   c0b50:	ea46 0101 	orr.w	r1, r6, r1
   c0b54:	ea40 0002 	orr.w	r0, r0, r2
   c0b58:	ea81 0103 	eor.w	r1, r1, r3
   c0b5c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   c0b60:	bfc2      	ittt	gt
   c0b62:	ebd4 050c 	rsbsgt	r5, r4, ip
   c0b66:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   c0b6a:	bd70      	popgt	{r4, r5, r6, pc}
   c0b6c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c0b70:	f04f 0e00 	mov.w	lr, #0
   c0b74:	3c01      	subs	r4, #1
   c0b76:	f300 80ab 	bgt.w	c0cd0 <__aeabi_dmul+0x238>
   c0b7a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   c0b7e:	bfde      	ittt	le
   c0b80:	2000      	movle	r0, #0
   c0b82:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   c0b86:	bd70      	pople	{r4, r5, r6, pc}
   c0b88:	f1c4 0400 	rsb	r4, r4, #0
   c0b8c:	3c20      	subs	r4, #32
   c0b8e:	da35      	bge.n	c0bfc <__aeabi_dmul+0x164>
   c0b90:	340c      	adds	r4, #12
   c0b92:	dc1b      	bgt.n	c0bcc <__aeabi_dmul+0x134>
   c0b94:	f104 0414 	add.w	r4, r4, #20
   c0b98:	f1c4 0520 	rsb	r5, r4, #32
   c0b9c:	fa00 f305 	lsl.w	r3, r0, r5
   c0ba0:	fa20 f004 	lsr.w	r0, r0, r4
   c0ba4:	fa01 f205 	lsl.w	r2, r1, r5
   c0ba8:	ea40 0002 	orr.w	r0, r0, r2
   c0bac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   c0bb0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   c0bb4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   c0bb8:	fa21 f604 	lsr.w	r6, r1, r4
   c0bbc:	eb42 0106 	adc.w	r1, r2, r6
   c0bc0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c0bc4:	bf08      	it	eq
   c0bc6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c0bca:	bd70      	pop	{r4, r5, r6, pc}
   c0bcc:	f1c4 040c 	rsb	r4, r4, #12
   c0bd0:	f1c4 0520 	rsb	r5, r4, #32
   c0bd4:	fa00 f304 	lsl.w	r3, r0, r4
   c0bd8:	fa20 f005 	lsr.w	r0, r0, r5
   c0bdc:	fa01 f204 	lsl.w	r2, r1, r4
   c0be0:	ea40 0002 	orr.w	r0, r0, r2
   c0be4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c0be8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   c0bec:	f141 0100 	adc.w	r1, r1, #0
   c0bf0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c0bf4:	bf08      	it	eq
   c0bf6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c0bfa:	bd70      	pop	{r4, r5, r6, pc}
   c0bfc:	f1c4 0520 	rsb	r5, r4, #32
   c0c00:	fa00 f205 	lsl.w	r2, r0, r5
   c0c04:	ea4e 0e02 	orr.w	lr, lr, r2
   c0c08:	fa20 f304 	lsr.w	r3, r0, r4
   c0c0c:	fa01 f205 	lsl.w	r2, r1, r5
   c0c10:	ea43 0302 	orr.w	r3, r3, r2
   c0c14:	fa21 f004 	lsr.w	r0, r1, r4
   c0c18:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c0c1c:	fa21 f204 	lsr.w	r2, r1, r4
   c0c20:	ea20 0002 	bic.w	r0, r0, r2
   c0c24:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   c0c28:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   c0c2c:	bf08      	it	eq
   c0c2e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   c0c32:	bd70      	pop	{r4, r5, r6, pc}
   c0c34:	f094 0f00 	teq	r4, #0
   c0c38:	d10f      	bne.n	c0c5a <__aeabi_dmul+0x1c2>
   c0c3a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   c0c3e:	0040      	lsls	r0, r0, #1
   c0c40:	eb41 0101 	adc.w	r1, r1, r1
   c0c44:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c0c48:	bf08      	it	eq
   c0c4a:	3c01      	subeq	r4, #1
   c0c4c:	d0f7      	beq.n	c0c3e <__aeabi_dmul+0x1a6>
   c0c4e:	ea41 0106 	orr.w	r1, r1, r6
   c0c52:	f095 0f00 	teq	r5, #0
   c0c56:	bf18      	it	ne
   c0c58:	4770      	bxne	lr
   c0c5a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   c0c5e:	0052      	lsls	r2, r2, #1
   c0c60:	eb43 0303 	adc.w	r3, r3, r3
   c0c64:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   c0c68:	bf08      	it	eq
   c0c6a:	3d01      	subeq	r5, #1
   c0c6c:	d0f7      	beq.n	c0c5e <__aeabi_dmul+0x1c6>
   c0c6e:	ea43 0306 	orr.w	r3, r3, r6
   c0c72:	4770      	bx	lr
   c0c74:	ea94 0f0c 	teq	r4, ip
   c0c78:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   c0c7c:	bf18      	it	ne
   c0c7e:	ea95 0f0c 	teqne	r5, ip
   c0c82:	d00c      	beq.n	c0c9e <__aeabi_dmul+0x206>
   c0c84:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c0c88:	bf18      	it	ne
   c0c8a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c0c8e:	d1d1      	bne.n	c0c34 <__aeabi_dmul+0x19c>
   c0c90:	ea81 0103 	eor.w	r1, r1, r3
   c0c94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c0c98:	f04f 0000 	mov.w	r0, #0
   c0c9c:	bd70      	pop	{r4, r5, r6, pc}
   c0c9e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c0ca2:	bf06      	itte	eq
   c0ca4:	4610      	moveq	r0, r2
   c0ca6:	4619      	moveq	r1, r3
   c0ca8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c0cac:	d019      	beq.n	c0ce2 <__aeabi_dmul+0x24a>
   c0cae:	ea94 0f0c 	teq	r4, ip
   c0cb2:	d102      	bne.n	c0cba <__aeabi_dmul+0x222>
   c0cb4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   c0cb8:	d113      	bne.n	c0ce2 <__aeabi_dmul+0x24a>
   c0cba:	ea95 0f0c 	teq	r5, ip
   c0cbe:	d105      	bne.n	c0ccc <__aeabi_dmul+0x234>
   c0cc0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   c0cc4:	bf1c      	itt	ne
   c0cc6:	4610      	movne	r0, r2
   c0cc8:	4619      	movne	r1, r3
   c0cca:	d10a      	bne.n	c0ce2 <__aeabi_dmul+0x24a>
   c0ccc:	ea81 0103 	eor.w	r1, r1, r3
   c0cd0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   c0cd4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   c0cd8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   c0cdc:	f04f 0000 	mov.w	r0, #0
   c0ce0:	bd70      	pop	{r4, r5, r6, pc}
   c0ce2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   c0ce6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   c0cea:	bd70      	pop	{r4, r5, r6, pc}

000c0cec <__aeabi_ddiv>:
   c0cec:	b570      	push	{r4, r5, r6, lr}
   c0cee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   c0cf2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   c0cf6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   c0cfa:	bf1d      	ittte	ne
   c0cfc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   c0d00:	ea94 0f0c 	teqne	r4, ip
   c0d04:	ea95 0f0c 	teqne	r5, ip
   c0d08:	f000 f8a7 	bleq	c0e5a <__aeabi_ddiv+0x16e>
   c0d0c:	eba4 0405 	sub.w	r4, r4, r5
   c0d10:	ea81 0e03 	eor.w	lr, r1, r3
   c0d14:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   c0d18:	ea4f 3101 	mov.w	r1, r1, lsl #12
   c0d1c:	f000 8088 	beq.w	c0e30 <__aeabi_ddiv+0x144>
   c0d20:	ea4f 3303 	mov.w	r3, r3, lsl #12
   c0d24:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   c0d28:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   c0d2c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   c0d30:	ea4f 2202 	mov.w	r2, r2, lsl #8
   c0d34:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   c0d38:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   c0d3c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   c0d40:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   c0d44:	429d      	cmp	r5, r3
   c0d46:	bf08      	it	eq
   c0d48:	4296      	cmpeq	r6, r2
   c0d4a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   c0d4e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   c0d52:	d202      	bcs.n	c0d5a <__aeabi_ddiv+0x6e>
   c0d54:	085b      	lsrs	r3, r3, #1
   c0d56:	ea4f 0232 	mov.w	r2, r2, rrx
   c0d5a:	1ab6      	subs	r6, r6, r2
   c0d5c:	eb65 0503 	sbc.w	r5, r5, r3
   c0d60:	085b      	lsrs	r3, r3, #1
   c0d62:	ea4f 0232 	mov.w	r2, r2, rrx
   c0d66:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   c0d6a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   c0d6e:	ebb6 0e02 	subs.w	lr, r6, r2
   c0d72:	eb75 0e03 	sbcs.w	lr, r5, r3
   c0d76:	bf22      	ittt	cs
   c0d78:	1ab6      	subcs	r6, r6, r2
   c0d7a:	4675      	movcs	r5, lr
   c0d7c:	ea40 000c 	orrcs.w	r0, r0, ip
   c0d80:	085b      	lsrs	r3, r3, #1
   c0d82:	ea4f 0232 	mov.w	r2, r2, rrx
   c0d86:	ebb6 0e02 	subs.w	lr, r6, r2
   c0d8a:	eb75 0e03 	sbcs.w	lr, r5, r3
   c0d8e:	bf22      	ittt	cs
   c0d90:	1ab6      	subcs	r6, r6, r2
   c0d92:	4675      	movcs	r5, lr
   c0d94:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   c0d98:	085b      	lsrs	r3, r3, #1
   c0d9a:	ea4f 0232 	mov.w	r2, r2, rrx
   c0d9e:	ebb6 0e02 	subs.w	lr, r6, r2
   c0da2:	eb75 0e03 	sbcs.w	lr, r5, r3
   c0da6:	bf22      	ittt	cs
   c0da8:	1ab6      	subcs	r6, r6, r2
   c0daa:	4675      	movcs	r5, lr
   c0dac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   c0db0:	085b      	lsrs	r3, r3, #1
   c0db2:	ea4f 0232 	mov.w	r2, r2, rrx
   c0db6:	ebb6 0e02 	subs.w	lr, r6, r2
   c0dba:	eb75 0e03 	sbcs.w	lr, r5, r3
   c0dbe:	bf22      	ittt	cs
   c0dc0:	1ab6      	subcs	r6, r6, r2
   c0dc2:	4675      	movcs	r5, lr
   c0dc4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   c0dc8:	ea55 0e06 	orrs.w	lr, r5, r6
   c0dcc:	d018      	beq.n	c0e00 <__aeabi_ddiv+0x114>
   c0dce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   c0dd2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   c0dd6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   c0dda:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   c0dde:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   c0de2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   c0de6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   c0dea:	d1c0      	bne.n	c0d6e <__aeabi_ddiv+0x82>
   c0dec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c0df0:	d10b      	bne.n	c0e0a <__aeabi_ddiv+0x11e>
   c0df2:	ea41 0100 	orr.w	r1, r1, r0
   c0df6:	f04f 0000 	mov.w	r0, #0
   c0dfa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   c0dfe:	e7b6      	b.n	c0d6e <__aeabi_ddiv+0x82>
   c0e00:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   c0e04:	bf04      	itt	eq
   c0e06:	4301      	orreq	r1, r0
   c0e08:	2000      	moveq	r0, #0
   c0e0a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   c0e0e:	bf88      	it	hi
   c0e10:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   c0e14:	f63f aeaf 	bhi.w	c0b76 <__aeabi_dmul+0xde>
   c0e18:	ebb5 0c03 	subs.w	ip, r5, r3
   c0e1c:	bf04      	itt	eq
   c0e1e:	ebb6 0c02 	subseq.w	ip, r6, r2
   c0e22:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   c0e26:	f150 0000 	adcs.w	r0, r0, #0
   c0e2a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   c0e2e:	bd70      	pop	{r4, r5, r6, pc}
   c0e30:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   c0e34:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   c0e38:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   c0e3c:	bfc2      	ittt	gt
   c0e3e:	ebd4 050c 	rsbsgt	r5, r4, ip
   c0e42:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   c0e46:	bd70      	popgt	{r4, r5, r6, pc}
   c0e48:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c0e4c:	f04f 0e00 	mov.w	lr, #0
   c0e50:	3c01      	subs	r4, #1
   c0e52:	e690      	b.n	c0b76 <__aeabi_dmul+0xde>
   c0e54:	ea45 0e06 	orr.w	lr, r5, r6
   c0e58:	e68d      	b.n	c0b76 <__aeabi_dmul+0xde>
   c0e5a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   c0e5e:	ea94 0f0c 	teq	r4, ip
   c0e62:	bf08      	it	eq
   c0e64:	ea95 0f0c 	teqeq	r5, ip
   c0e68:	f43f af3b 	beq.w	c0ce2 <__aeabi_dmul+0x24a>
   c0e6c:	ea94 0f0c 	teq	r4, ip
   c0e70:	d10a      	bne.n	c0e88 <__aeabi_ddiv+0x19c>
   c0e72:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   c0e76:	f47f af34 	bne.w	c0ce2 <__aeabi_dmul+0x24a>
   c0e7a:	ea95 0f0c 	teq	r5, ip
   c0e7e:	f47f af25 	bne.w	c0ccc <__aeabi_dmul+0x234>
   c0e82:	4610      	mov	r0, r2
   c0e84:	4619      	mov	r1, r3
   c0e86:	e72c      	b.n	c0ce2 <__aeabi_dmul+0x24a>
   c0e88:	ea95 0f0c 	teq	r5, ip
   c0e8c:	d106      	bne.n	c0e9c <__aeabi_ddiv+0x1b0>
   c0e8e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   c0e92:	f43f aefd 	beq.w	c0c90 <__aeabi_dmul+0x1f8>
   c0e96:	4610      	mov	r0, r2
   c0e98:	4619      	mov	r1, r3
   c0e9a:	e722      	b.n	c0ce2 <__aeabi_dmul+0x24a>
   c0e9c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   c0ea0:	bf18      	it	ne
   c0ea2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   c0ea6:	f47f aec5 	bne.w	c0c34 <__aeabi_dmul+0x19c>
   c0eaa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   c0eae:	f47f af0d 	bne.w	c0ccc <__aeabi_dmul+0x234>
   c0eb2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   c0eb6:	f47f aeeb 	bne.w	c0c90 <__aeabi_dmul+0x1f8>
   c0eba:	e712      	b.n	c0ce2 <__aeabi_dmul+0x24a>

000c0ebc <__gedf2>:
   c0ebc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   c0ec0:	e006      	b.n	c0ed0 <__cmpdf2+0x4>
   c0ec2:	bf00      	nop

000c0ec4 <__ledf2>:
   c0ec4:	f04f 0c01 	mov.w	ip, #1
   c0ec8:	e002      	b.n	c0ed0 <__cmpdf2+0x4>
   c0eca:	bf00      	nop

000c0ecc <__cmpdf2>:
   c0ecc:	f04f 0c01 	mov.w	ip, #1
   c0ed0:	f84d cd04 	str.w	ip, [sp, #-4]!
   c0ed4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c0ed8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c0edc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c0ee0:	bf18      	it	ne
   c0ee2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   c0ee6:	d01b      	beq.n	c0f20 <__cmpdf2+0x54>
   c0ee8:	b001      	add	sp, #4
   c0eea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   c0eee:	bf0c      	ite	eq
   c0ef0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   c0ef4:	ea91 0f03 	teqne	r1, r3
   c0ef8:	bf02      	ittt	eq
   c0efa:	ea90 0f02 	teqeq	r0, r2
   c0efe:	2000      	moveq	r0, #0
   c0f00:	4770      	bxeq	lr
   c0f02:	f110 0f00 	cmn.w	r0, #0
   c0f06:	ea91 0f03 	teq	r1, r3
   c0f0a:	bf58      	it	pl
   c0f0c:	4299      	cmppl	r1, r3
   c0f0e:	bf08      	it	eq
   c0f10:	4290      	cmpeq	r0, r2
   c0f12:	bf2c      	ite	cs
   c0f14:	17d8      	asrcs	r0, r3, #31
   c0f16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   c0f1a:	f040 0001 	orr.w	r0, r0, #1
   c0f1e:	4770      	bx	lr
   c0f20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c0f24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c0f28:	d102      	bne.n	c0f30 <__cmpdf2+0x64>
   c0f2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   c0f2e:	d107      	bne.n	c0f40 <__cmpdf2+0x74>
   c0f30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c0f34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c0f38:	d1d6      	bne.n	c0ee8 <__cmpdf2+0x1c>
   c0f3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   c0f3e:	d0d3      	beq.n	c0ee8 <__cmpdf2+0x1c>
   c0f40:	f85d 0b04 	ldr.w	r0, [sp], #4
   c0f44:	4770      	bx	lr
   c0f46:	bf00      	nop

000c0f48 <__aeabi_cdrcmple>:
   c0f48:	4684      	mov	ip, r0
   c0f4a:	4610      	mov	r0, r2
   c0f4c:	4662      	mov	r2, ip
   c0f4e:	468c      	mov	ip, r1
   c0f50:	4619      	mov	r1, r3
   c0f52:	4663      	mov	r3, ip
   c0f54:	e000      	b.n	c0f58 <__aeabi_cdcmpeq>
   c0f56:	bf00      	nop

000c0f58 <__aeabi_cdcmpeq>:
   c0f58:	b501      	push	{r0, lr}
   c0f5a:	f7ff ffb7 	bl	c0ecc <__cmpdf2>
   c0f5e:	2800      	cmp	r0, #0
   c0f60:	bf48      	it	mi
   c0f62:	f110 0f00 	cmnmi.w	r0, #0
   c0f66:	bd01      	pop	{r0, pc}

000c0f68 <__aeabi_dcmpeq>:
   c0f68:	f84d ed08 	str.w	lr, [sp, #-8]!
   c0f6c:	f7ff fff4 	bl	c0f58 <__aeabi_cdcmpeq>
   c0f70:	bf0c      	ite	eq
   c0f72:	2001      	moveq	r0, #1
   c0f74:	2000      	movne	r0, #0
   c0f76:	f85d fb08 	ldr.w	pc, [sp], #8
   c0f7a:	bf00      	nop

000c0f7c <__aeabi_dcmplt>:
   c0f7c:	f84d ed08 	str.w	lr, [sp, #-8]!
   c0f80:	f7ff ffea 	bl	c0f58 <__aeabi_cdcmpeq>
   c0f84:	bf34      	ite	cc
   c0f86:	2001      	movcc	r0, #1
   c0f88:	2000      	movcs	r0, #0
   c0f8a:	f85d fb08 	ldr.w	pc, [sp], #8
   c0f8e:	bf00      	nop

000c0f90 <__aeabi_dcmple>:
   c0f90:	f84d ed08 	str.w	lr, [sp, #-8]!
   c0f94:	f7ff ffe0 	bl	c0f58 <__aeabi_cdcmpeq>
   c0f98:	bf94      	ite	ls
   c0f9a:	2001      	movls	r0, #1
   c0f9c:	2000      	movhi	r0, #0
   c0f9e:	f85d fb08 	ldr.w	pc, [sp], #8
   c0fa2:	bf00      	nop

000c0fa4 <__aeabi_dcmpge>:
   c0fa4:	f84d ed08 	str.w	lr, [sp, #-8]!
   c0fa8:	f7ff ffce 	bl	c0f48 <__aeabi_cdrcmple>
   c0fac:	bf94      	ite	ls
   c0fae:	2001      	movls	r0, #1
   c0fb0:	2000      	movhi	r0, #0
   c0fb2:	f85d fb08 	ldr.w	pc, [sp], #8
   c0fb6:	bf00      	nop

000c0fb8 <__aeabi_dcmpgt>:
   c0fb8:	f84d ed08 	str.w	lr, [sp, #-8]!
   c0fbc:	f7ff ffc4 	bl	c0f48 <__aeabi_cdrcmple>
   c0fc0:	bf34      	ite	cc
   c0fc2:	2001      	movcc	r0, #1
   c0fc4:	2000      	movcs	r0, #0
   c0fc6:	f85d fb08 	ldr.w	pc, [sp], #8
   c0fca:	bf00      	nop

000c0fcc <__aeabi_dcmpun>:
   c0fcc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   c0fd0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c0fd4:	d102      	bne.n	c0fdc <__aeabi_dcmpun+0x10>
   c0fd6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   c0fda:	d10a      	bne.n	c0ff2 <__aeabi_dcmpun+0x26>
   c0fdc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   c0fe0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   c0fe4:	d102      	bne.n	c0fec <__aeabi_dcmpun+0x20>
   c0fe6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   c0fea:	d102      	bne.n	c0ff2 <__aeabi_dcmpun+0x26>
   c0fec:	f04f 0000 	mov.w	r0, #0
   c0ff0:	4770      	bx	lr
   c0ff2:	f04f 0001 	mov.w	r0, #1
   c0ff6:	4770      	bx	lr

000c0ff8 <__aeabi_d2iz>:
   c0ff8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   c0ffc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   c1000:	d215      	bcs.n	c102e <__aeabi_d2iz+0x36>
   c1002:	d511      	bpl.n	c1028 <__aeabi_d2iz+0x30>
   c1004:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   c1008:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   c100c:	d912      	bls.n	c1034 <__aeabi_d2iz+0x3c>
   c100e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c1012:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   c1016:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   c101a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   c101e:	fa23 f002 	lsr.w	r0, r3, r2
   c1022:	bf18      	it	ne
   c1024:	4240      	negne	r0, r0
   c1026:	4770      	bx	lr
   c1028:	f04f 0000 	mov.w	r0, #0
   c102c:	4770      	bx	lr
   c102e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   c1032:	d105      	bne.n	c1040 <__aeabi_d2iz+0x48>
   c1034:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   c1038:	bf08      	it	eq
   c103a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   c103e:	4770      	bx	lr
   c1040:	f04f 0000 	mov.w	r0, #0
   c1044:	4770      	bx	lr
   c1046:	bf00      	nop

000c1048 <__aeabi_d2uiz>:
   c1048:	004a      	lsls	r2, r1, #1
   c104a:	d211      	bcs.n	c1070 <__aeabi_d2uiz+0x28>
   c104c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   c1050:	d211      	bcs.n	c1076 <__aeabi_d2uiz+0x2e>
   c1052:	d50d      	bpl.n	c1070 <__aeabi_d2uiz+0x28>
   c1054:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   c1058:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   c105c:	d40e      	bmi.n	c107c <__aeabi_d2uiz+0x34>
   c105e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c1062:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   c1066:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   c106a:	fa23 f002 	lsr.w	r0, r3, r2
   c106e:	4770      	bx	lr
   c1070:	f04f 0000 	mov.w	r0, #0
   c1074:	4770      	bx	lr
   c1076:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   c107a:	d102      	bne.n	c1082 <__aeabi_d2uiz+0x3a>
   c107c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   c1080:	4770      	bx	lr
   c1082:	f04f 0000 	mov.w	r0, #0
   c1086:	4770      	bx	lr

000c1088 <__aeabi_d2f>:
   c1088:	ea4f 0241 	mov.w	r2, r1, lsl #1
   c108c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   c1090:	bf24      	itt	cs
   c1092:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   c1096:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   c109a:	d90d      	bls.n	c10b8 <__aeabi_d2f+0x30>
   c109c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   c10a0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   c10a4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   c10a8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   c10ac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   c10b0:	bf08      	it	eq
   c10b2:	f020 0001 	biceq.w	r0, r0, #1
   c10b6:	4770      	bx	lr
   c10b8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   c10bc:	d121      	bne.n	c1102 <__aeabi_d2f+0x7a>
   c10be:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   c10c2:	bfbc      	itt	lt
   c10c4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   c10c8:	4770      	bxlt	lr
   c10ca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   c10ce:	ea4f 5252 	mov.w	r2, r2, lsr #21
   c10d2:	f1c2 0218 	rsb	r2, r2, #24
   c10d6:	f1c2 0c20 	rsb	ip, r2, #32
   c10da:	fa10 f30c 	lsls.w	r3, r0, ip
   c10de:	fa20 f002 	lsr.w	r0, r0, r2
   c10e2:	bf18      	it	ne
   c10e4:	f040 0001 	orrne.w	r0, r0, #1
   c10e8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   c10ec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   c10f0:	fa03 fc0c 	lsl.w	ip, r3, ip
   c10f4:	ea40 000c 	orr.w	r0, r0, ip
   c10f8:	fa23 f302 	lsr.w	r3, r3, r2
   c10fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   c1100:	e7cc      	b.n	c109c <__aeabi_d2f+0x14>
   c1102:	ea7f 5362 	mvns.w	r3, r2, asr #21
   c1106:	d107      	bne.n	c1118 <__aeabi_d2f+0x90>
   c1108:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   c110c:	bf1e      	ittt	ne
   c110e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   c1112:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   c1116:	4770      	bxne	lr
   c1118:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   c111c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   c1120:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   c1124:	4770      	bx	lr
   c1126:	bf00      	nop

000c1128 <__aeabi_d2ulz>:
   c1128:	b5d0      	push	{r4, r6, r7, lr}
   c112a:	4b0c      	ldr	r3, [pc, #48]	; (c115c <__aeabi_d2ulz+0x34>)
   c112c:	2200      	movs	r2, #0
   c112e:	4606      	mov	r6, r0
   c1130:	460f      	mov	r7, r1
   c1132:	f7ff fcb1 	bl	c0a98 <__aeabi_dmul>
   c1136:	f7ff ff87 	bl	c1048 <__aeabi_d2uiz>
   c113a:	4604      	mov	r4, r0
   c113c:	f7ff fc32 	bl	c09a4 <__aeabi_ui2d>
   c1140:	4b07      	ldr	r3, [pc, #28]	; (c1160 <__aeabi_d2ulz+0x38>)
   c1142:	2200      	movs	r2, #0
   c1144:	f7ff fca8 	bl	c0a98 <__aeabi_dmul>
   c1148:	4602      	mov	r2, r0
   c114a:	460b      	mov	r3, r1
   c114c:	4630      	mov	r0, r6
   c114e:	4639      	mov	r1, r7
   c1150:	f7ff faea 	bl	c0728 <__aeabi_dsub>
   c1154:	f7ff ff78 	bl	c1048 <__aeabi_d2uiz>
   c1158:	4621      	mov	r1, r4
   c115a:	bdd0      	pop	{r4, r6, r7, pc}
   c115c:	3df00000 	.word	0x3df00000
   c1160:	41f00000 	.word	0x41f00000

000c1164 <asctime_r>:
   c1164:	b510      	push	{r4, lr}
   c1166:	460c      	mov	r4, r1
   c1168:	6941      	ldr	r1, [r0, #20]
   c116a:	6903      	ldr	r3, [r0, #16]
   c116c:	6982      	ldr	r2, [r0, #24]
   c116e:	b086      	sub	sp, #24
   c1170:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   c1174:	9104      	str	r1, [sp, #16]
   c1176:	6801      	ldr	r1, [r0, #0]
   c1178:	9103      	str	r1, [sp, #12]
   c117a:	6841      	ldr	r1, [r0, #4]
   c117c:	9102      	str	r1, [sp, #8]
   c117e:	6881      	ldr	r1, [r0, #8]
   c1180:	9101      	str	r1, [sp, #4]
   c1182:	68c1      	ldr	r1, [r0, #12]
   c1184:	9100      	str	r1, [sp, #0]
   c1186:	4907      	ldr	r1, [pc, #28]	; (c11a4 <asctime_r+0x40>)
   c1188:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   c118c:	440b      	add	r3, r1
   c118e:	4906      	ldr	r1, [pc, #24]	; (c11a8 <asctime_r+0x44>)
   c1190:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   c1194:	440a      	add	r2, r1
   c1196:	4620      	mov	r0, r4
   c1198:	4904      	ldr	r1, [pc, #16]	; (c11ac <asctime_r+0x48>)
   c119a:	f7fc f897 	bl	bd2cc <siprintf>
   c119e:	4620      	mov	r0, r4
   c11a0:	b006      	add	sp, #24
   c11a2:	bd10      	pop	{r4, pc}
   c11a4:	000c560e 	.word	0x000c560e
   c11a8:	000c55f9 	.word	0x000c55f9
   c11ac:	000c55d9 	.word	0x000c55d9

000c11b0 <atexit>:
   c11b0:	2300      	movs	r3, #0
   c11b2:	4601      	mov	r1, r0
   c11b4:	461a      	mov	r2, r3
   c11b6:	4618      	mov	r0, r3
   c11b8:	f001 b900 	b.w	c23bc <__register_exitproc>

000c11bc <gmtime>:
   c11bc:	b538      	push	{r3, r4, r5, lr}
   c11be:	4b0b      	ldr	r3, [pc, #44]	; (c11ec <gmtime+0x30>)
   c11c0:	681d      	ldr	r5, [r3, #0]
   c11c2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   c11c4:	4604      	mov	r4, r0
   c11c6:	b953      	cbnz	r3, c11de <gmtime+0x22>
   c11c8:	2024      	movs	r0, #36	; 0x24
   c11ca:	f7fc f867 	bl	bd29c <malloc>
   c11ce:	4602      	mov	r2, r0
   c11d0:	63e8      	str	r0, [r5, #60]	; 0x3c
   c11d2:	b920      	cbnz	r0, c11de <gmtime+0x22>
   c11d4:	4b06      	ldr	r3, [pc, #24]	; (c11f0 <gmtime+0x34>)
   c11d6:	4807      	ldr	r0, [pc, #28]	; (c11f4 <gmtime+0x38>)
   c11d8:	2139      	movs	r1, #57	; 0x39
   c11da:	f7fc f8af 	bl	bd33c <__assert_func>
   c11de:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   c11e0:	4620      	mov	r0, r4
   c11e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c11e6:	f7fc b8c9 	b.w	bd37c <gmtime_r>
   c11ea:	bf00      	nop
   c11ec:	2003d68c 	.word	0x2003d68c
   c11f0:	000c5632 	.word	0x000c5632
   c11f4:	000c5649 	.word	0x000c5649

000c11f8 <isprint>:
   c11f8:	4b02      	ldr	r3, [pc, #8]	; (c1204 <isprint+0xc>)
   c11fa:	4418      	add	r0, r3
   c11fc:	7840      	ldrb	r0, [r0, #1]
   c11fe:	f000 0097 	and.w	r0, r0, #151	; 0x97
   c1202:	4770      	bx	lr
   c1204:	000c5758 	.word	0x000c5758

000c1208 <memcpy>:
   c1208:	440a      	add	r2, r1
   c120a:	4291      	cmp	r1, r2
   c120c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   c1210:	d100      	bne.n	c1214 <memcpy+0xc>
   c1212:	4770      	bx	lr
   c1214:	b510      	push	{r4, lr}
   c1216:	f811 4b01 	ldrb.w	r4, [r1], #1
   c121a:	f803 4f01 	strb.w	r4, [r3, #1]!
   c121e:	4291      	cmp	r1, r2
   c1220:	d1f9      	bne.n	c1216 <memcpy+0xe>
   c1222:	bd10      	pop	{r4, pc}

000c1224 <memmove>:
   c1224:	4288      	cmp	r0, r1
   c1226:	b510      	push	{r4, lr}
   c1228:	eb01 0402 	add.w	r4, r1, r2
   c122c:	d902      	bls.n	c1234 <memmove+0x10>
   c122e:	4284      	cmp	r4, r0
   c1230:	4623      	mov	r3, r4
   c1232:	d807      	bhi.n	c1244 <memmove+0x20>
   c1234:	1e43      	subs	r3, r0, #1
   c1236:	42a1      	cmp	r1, r4
   c1238:	d008      	beq.n	c124c <memmove+0x28>
   c123a:	f811 2b01 	ldrb.w	r2, [r1], #1
   c123e:	f803 2f01 	strb.w	r2, [r3, #1]!
   c1242:	e7f8      	b.n	c1236 <memmove+0x12>
   c1244:	4402      	add	r2, r0
   c1246:	4601      	mov	r1, r0
   c1248:	428a      	cmp	r2, r1
   c124a:	d100      	bne.n	c124e <memmove+0x2a>
   c124c:	bd10      	pop	{r4, pc}
   c124e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   c1252:	f802 4d01 	strb.w	r4, [r2, #-1]!
   c1256:	e7f7      	b.n	c1248 <memmove+0x24>

000c1258 <memset>:
   c1258:	4402      	add	r2, r0
   c125a:	4603      	mov	r3, r0
   c125c:	4293      	cmp	r3, r2
   c125e:	d100      	bne.n	c1262 <memset+0xa>
   c1260:	4770      	bx	lr
   c1262:	f803 1b01 	strb.w	r1, [r3], #1
   c1266:	e7f9      	b.n	c125c <memset+0x4>

000c1268 <_calloc_r>:
   c1268:	b513      	push	{r0, r1, r4, lr}
   c126a:	434a      	muls	r2, r1
   c126c:	4611      	mov	r1, r2
   c126e:	9201      	str	r2, [sp, #4]
   c1270:	f7fc f854 	bl	bd31c <_malloc_r>
   c1274:	4604      	mov	r4, r0
   c1276:	b118      	cbz	r0, c1280 <_calloc_r+0x18>
   c1278:	9a01      	ldr	r2, [sp, #4]
   c127a:	2100      	movs	r1, #0
   c127c:	f7ff ffec 	bl	c1258 <memset>
   c1280:	4620      	mov	r0, r4
   c1282:	b002      	add	sp, #8
   c1284:	bd10      	pop	{r4, pc}
	...

000c1288 <srand>:
   c1288:	b538      	push	{r3, r4, r5, lr}
   c128a:	4b10      	ldr	r3, [pc, #64]	; (c12cc <srand+0x44>)
   c128c:	681d      	ldr	r5, [r3, #0]
   c128e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   c1290:	4604      	mov	r4, r0
   c1292:	b9b3      	cbnz	r3, c12c2 <srand+0x3a>
   c1294:	2018      	movs	r0, #24
   c1296:	f7fc f801 	bl	bd29c <malloc>
   c129a:	4602      	mov	r2, r0
   c129c:	63a8      	str	r0, [r5, #56]	; 0x38
   c129e:	b920      	cbnz	r0, c12aa <srand+0x22>
   c12a0:	4b0b      	ldr	r3, [pc, #44]	; (c12d0 <srand+0x48>)
   c12a2:	480c      	ldr	r0, [pc, #48]	; (c12d4 <srand+0x4c>)
   c12a4:	2142      	movs	r1, #66	; 0x42
   c12a6:	f7fc f849 	bl	bd33c <__assert_func>
   c12aa:	490b      	ldr	r1, [pc, #44]	; (c12d8 <srand+0x50>)
   c12ac:	4b0b      	ldr	r3, [pc, #44]	; (c12dc <srand+0x54>)
   c12ae:	e9c0 1300 	strd	r1, r3, [r0]
   c12b2:	4b0b      	ldr	r3, [pc, #44]	; (c12e0 <srand+0x58>)
   c12b4:	6083      	str	r3, [r0, #8]
   c12b6:	230b      	movs	r3, #11
   c12b8:	8183      	strh	r3, [r0, #12]
   c12ba:	2100      	movs	r1, #0
   c12bc:	2001      	movs	r0, #1
   c12be:	e9c2 0104 	strd	r0, r1, [r2, #16]
   c12c2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   c12c4:	2200      	movs	r2, #0
   c12c6:	611c      	str	r4, [r3, #16]
   c12c8:	615a      	str	r2, [r3, #20]
   c12ca:	bd38      	pop	{r3, r4, r5, pc}
   c12cc:	2003d68c 	.word	0x2003d68c
   c12d0:	000c5632 	.word	0x000c5632
   c12d4:	000c56a2 	.word	0x000c56a2
   c12d8:	abcd330e 	.word	0xabcd330e
   c12dc:	e66d1234 	.word	0xe66d1234
   c12e0:	0005deec 	.word	0x0005deec

000c12e4 <rand>:
   c12e4:	4b16      	ldr	r3, [pc, #88]	; (c1340 <rand+0x5c>)
   c12e6:	b510      	push	{r4, lr}
   c12e8:	681c      	ldr	r4, [r3, #0]
   c12ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   c12ec:	b9b3      	cbnz	r3, c131c <rand+0x38>
   c12ee:	2018      	movs	r0, #24
   c12f0:	f7fb ffd4 	bl	bd29c <malloc>
   c12f4:	63a0      	str	r0, [r4, #56]	; 0x38
   c12f6:	b928      	cbnz	r0, c1304 <rand+0x20>
   c12f8:	4602      	mov	r2, r0
   c12fa:	4b12      	ldr	r3, [pc, #72]	; (c1344 <rand+0x60>)
   c12fc:	4812      	ldr	r0, [pc, #72]	; (c1348 <rand+0x64>)
   c12fe:	214e      	movs	r1, #78	; 0x4e
   c1300:	f7fc f81c 	bl	bd33c <__assert_func>
   c1304:	4a11      	ldr	r2, [pc, #68]	; (c134c <rand+0x68>)
   c1306:	4b12      	ldr	r3, [pc, #72]	; (c1350 <rand+0x6c>)
   c1308:	e9c0 2300 	strd	r2, r3, [r0]
   c130c:	4b11      	ldr	r3, [pc, #68]	; (c1354 <rand+0x70>)
   c130e:	6083      	str	r3, [r0, #8]
   c1310:	230b      	movs	r3, #11
   c1312:	8183      	strh	r3, [r0, #12]
   c1314:	2201      	movs	r2, #1
   c1316:	2300      	movs	r3, #0
   c1318:	e9c0 2304 	strd	r2, r3, [r0, #16]
   c131c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   c131e:	4a0e      	ldr	r2, [pc, #56]	; (c1358 <rand+0x74>)
   c1320:	6920      	ldr	r0, [r4, #16]
   c1322:	6963      	ldr	r3, [r4, #20]
   c1324:	490d      	ldr	r1, [pc, #52]	; (c135c <rand+0x78>)
   c1326:	4342      	muls	r2, r0
   c1328:	fb01 2203 	mla	r2, r1, r3, r2
   c132c:	fba0 0101 	umull	r0, r1, r0, r1
   c1330:	1c43      	adds	r3, r0, #1
   c1332:	eb42 0001 	adc.w	r0, r2, r1
   c1336:	e9c4 3004 	strd	r3, r0, [r4, #16]
   c133a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   c133e:	bd10      	pop	{r4, pc}
   c1340:	2003d68c 	.word	0x2003d68c
   c1344:	000c5632 	.word	0x000c5632
   c1348:	000c56a2 	.word	0x000c56a2
   c134c:	abcd330e 	.word	0xabcd330e
   c1350:	e66d1234 	.word	0xe66d1234
   c1354:	0005deec 	.word	0x0005deec
   c1358:	5851f42d 	.word	0x5851f42d
   c135c:	4c957f2d 	.word	0x4c957f2d

000c1360 <strchr>:
   c1360:	b2c9      	uxtb	r1, r1
   c1362:	4603      	mov	r3, r0
   c1364:	f810 2b01 	ldrb.w	r2, [r0], #1
   c1368:	b11a      	cbz	r2, c1372 <strchr+0x12>
   c136a:	428a      	cmp	r2, r1
   c136c:	d1f9      	bne.n	c1362 <strchr+0x2>
   c136e:	4618      	mov	r0, r3
   c1370:	4770      	bx	lr
   c1372:	2900      	cmp	r1, #0
   c1374:	bf18      	it	ne
   c1376:	2300      	movne	r3, #0
   c1378:	e7f9      	b.n	c136e <strchr+0xe>

000c137a <strchrnul>:
   c137a:	b510      	push	{r4, lr}
   c137c:	4604      	mov	r4, r0
   c137e:	f7ff ffef 	bl	c1360 <strchr>
   c1382:	b918      	cbnz	r0, c138c <strchrnul+0x12>
   c1384:	4620      	mov	r0, r4
   c1386:	f000 f832 	bl	c13ee <strlen>
   c138a:	4420      	add	r0, r4
   c138c:	bd10      	pop	{r4, pc}

000c138e <strcmp>:
   c138e:	f810 2b01 	ldrb.w	r2, [r0], #1
   c1392:	f811 3b01 	ldrb.w	r3, [r1], #1
   c1396:	2a01      	cmp	r2, #1
   c1398:	bf28      	it	cs
   c139a:	429a      	cmpcs	r2, r3
   c139c:	d0f7      	beq.n	c138e <strcmp>
   c139e:	1ad0      	subs	r0, r2, r3
   c13a0:	4770      	bx	lr

000c13a2 <strcpy>:
   c13a2:	4603      	mov	r3, r0
   c13a4:	f811 2b01 	ldrb.w	r2, [r1], #1
   c13a8:	f803 2b01 	strb.w	r2, [r3], #1
   c13ac:	2a00      	cmp	r2, #0
   c13ae:	d1f9      	bne.n	c13a4 <strcpy+0x2>
   c13b0:	4770      	bx	lr
	...

000c13b4 <strdup>:
   c13b4:	4b02      	ldr	r3, [pc, #8]	; (c13c0 <strdup+0xc>)
   c13b6:	4601      	mov	r1, r0
   c13b8:	6818      	ldr	r0, [r3, #0]
   c13ba:	f000 b803 	b.w	c13c4 <_strdup_r>
   c13be:	bf00      	nop
   c13c0:	2003d68c 	.word	0x2003d68c

000c13c4 <_strdup_r>:
   c13c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   c13c6:	4604      	mov	r4, r0
   c13c8:	4608      	mov	r0, r1
   c13ca:	460d      	mov	r5, r1
   c13cc:	f000 f80f 	bl	c13ee <strlen>
   c13d0:	1c42      	adds	r2, r0, #1
   c13d2:	4611      	mov	r1, r2
   c13d4:	4620      	mov	r0, r4
   c13d6:	9201      	str	r2, [sp, #4]
   c13d8:	f7fb ffa0 	bl	bd31c <_malloc_r>
   c13dc:	4604      	mov	r4, r0
   c13de:	b118      	cbz	r0, c13e8 <_strdup_r+0x24>
   c13e0:	9a01      	ldr	r2, [sp, #4]
   c13e2:	4629      	mov	r1, r5
   c13e4:	f7ff ff10 	bl	c1208 <memcpy>
   c13e8:	4620      	mov	r0, r4
   c13ea:	b003      	add	sp, #12
   c13ec:	bd30      	pop	{r4, r5, pc}

000c13ee <strlen>:
   c13ee:	4603      	mov	r3, r0
   c13f0:	f813 2b01 	ldrb.w	r2, [r3], #1
   c13f4:	2a00      	cmp	r2, #0
   c13f6:	d1fb      	bne.n	c13f0 <strlen+0x2>
   c13f8:	1a18      	subs	r0, r3, r0
   c13fa:	3801      	subs	r0, #1
   c13fc:	4770      	bx	lr

000c13fe <strncmp>:
   c13fe:	b510      	push	{r4, lr}
   c1400:	b17a      	cbz	r2, c1422 <strncmp+0x24>
   c1402:	4603      	mov	r3, r0
   c1404:	3901      	subs	r1, #1
   c1406:	1884      	adds	r4, r0, r2
   c1408:	f813 0b01 	ldrb.w	r0, [r3], #1
   c140c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   c1410:	4290      	cmp	r0, r2
   c1412:	d101      	bne.n	c1418 <strncmp+0x1a>
   c1414:	42a3      	cmp	r3, r4
   c1416:	d101      	bne.n	c141c <strncmp+0x1e>
   c1418:	1a80      	subs	r0, r0, r2
   c141a:	bd10      	pop	{r4, pc}
   c141c:	2800      	cmp	r0, #0
   c141e:	d1f3      	bne.n	c1408 <strncmp+0xa>
   c1420:	e7fa      	b.n	c1418 <strncmp+0x1a>
   c1422:	4610      	mov	r0, r2
   c1424:	e7f9      	b.n	c141a <strncmp+0x1c>

000c1426 <strncpy>:
   c1426:	b510      	push	{r4, lr}
   c1428:	3901      	subs	r1, #1
   c142a:	4603      	mov	r3, r0
   c142c:	b132      	cbz	r2, c143c <strncpy+0x16>
   c142e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   c1432:	f803 4b01 	strb.w	r4, [r3], #1
   c1436:	3a01      	subs	r2, #1
   c1438:	2c00      	cmp	r4, #0
   c143a:	d1f7      	bne.n	c142c <strncpy+0x6>
   c143c:	441a      	add	r2, r3
   c143e:	2100      	movs	r1, #0
   c1440:	4293      	cmp	r3, r2
   c1442:	d100      	bne.n	c1446 <strncpy+0x20>
   c1444:	bd10      	pop	{r4, pc}
   c1446:	f803 1b01 	strb.w	r1, [r3], #1
   c144a:	e7f9      	b.n	c1440 <strncpy+0x1a>

000c144c <strrchr>:
   c144c:	b538      	push	{r3, r4, r5, lr}
   c144e:	4603      	mov	r3, r0
   c1450:	460c      	mov	r4, r1
   c1452:	b969      	cbnz	r1, c1470 <strrchr+0x24>
   c1454:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c1458:	f7ff bf82 	b.w	c1360 <strchr>
   c145c:	1c43      	adds	r3, r0, #1
   c145e:	4605      	mov	r5, r0
   c1460:	4621      	mov	r1, r4
   c1462:	4618      	mov	r0, r3
   c1464:	f7ff ff7c 	bl	c1360 <strchr>
   c1468:	2800      	cmp	r0, #0
   c146a:	d1f7      	bne.n	c145c <strrchr+0x10>
   c146c:	4628      	mov	r0, r5
   c146e:	bd38      	pop	{r3, r4, r5, pc}
   c1470:	2500      	movs	r5, #0
   c1472:	e7f5      	b.n	c1460 <strrchr+0x14>

000c1474 <sulp>:
   c1474:	b570      	push	{r4, r5, r6, lr}
   c1476:	4604      	mov	r4, r0
   c1478:	460d      	mov	r5, r1
   c147a:	ec45 4b10 	vmov	d0, r4, r5
   c147e:	4616      	mov	r6, r2
   c1480:	f001 ff2a 	bl	c32d8 <__ulp>
   c1484:	ec51 0b10 	vmov	r0, r1, d0
   c1488:	b17e      	cbz	r6, c14aa <sulp+0x36>
   c148a:	f3c5 530a 	ubfx	r3, r5, #20, #11
   c148e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   c1492:	2b00      	cmp	r3, #0
   c1494:	dd09      	ble.n	c14aa <sulp+0x36>
   c1496:	051b      	lsls	r3, r3, #20
   c1498:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   c149c:	2400      	movs	r4, #0
   c149e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   c14a2:	4622      	mov	r2, r4
   c14a4:	462b      	mov	r3, r5
   c14a6:	f7ff faf7 	bl	c0a98 <__aeabi_dmul>
   c14aa:	bd70      	pop	{r4, r5, r6, pc}
   c14ac:	0000      	movs	r0, r0
	...

000c14b0 <_strtod_l>:
   c14b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c14b4:	ed2d 8b02 	vpush	{d8}
   c14b8:	b09d      	sub	sp, #116	; 0x74
   c14ba:	461f      	mov	r7, r3
   c14bc:	2300      	movs	r3, #0
   c14be:	9318      	str	r3, [sp, #96]	; 0x60
   c14c0:	4ba2      	ldr	r3, [pc, #648]	; (c174c <_strtod_l+0x29c>)
   c14c2:	9213      	str	r2, [sp, #76]	; 0x4c
   c14c4:	681b      	ldr	r3, [r3, #0]
   c14c6:	9305      	str	r3, [sp, #20]
   c14c8:	4604      	mov	r4, r0
   c14ca:	4618      	mov	r0, r3
   c14cc:	4688      	mov	r8, r1
   c14ce:	f7ff ff8e 	bl	c13ee <strlen>
   c14d2:	f04f 0a00 	mov.w	sl, #0
   c14d6:	4605      	mov	r5, r0
   c14d8:	f04f 0b00 	mov.w	fp, #0
   c14dc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c14e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c14e2:	781a      	ldrb	r2, [r3, #0]
   c14e4:	2a2b      	cmp	r2, #43	; 0x2b
   c14e6:	d04e      	beq.n	c1586 <_strtod_l+0xd6>
   c14e8:	d83b      	bhi.n	c1562 <_strtod_l+0xb2>
   c14ea:	2a0d      	cmp	r2, #13
   c14ec:	d834      	bhi.n	c1558 <_strtod_l+0xa8>
   c14ee:	2a08      	cmp	r2, #8
   c14f0:	d834      	bhi.n	c155c <_strtod_l+0xac>
   c14f2:	2a00      	cmp	r2, #0
   c14f4:	d03e      	beq.n	c1574 <_strtod_l+0xc4>
   c14f6:	2300      	movs	r3, #0
   c14f8:	930a      	str	r3, [sp, #40]	; 0x28
   c14fa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   c14fc:	7833      	ldrb	r3, [r6, #0]
   c14fe:	2b30      	cmp	r3, #48	; 0x30
   c1500:	f040 80b0 	bne.w	c1664 <_strtod_l+0x1b4>
   c1504:	7873      	ldrb	r3, [r6, #1]
   c1506:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   c150a:	2b58      	cmp	r3, #88	; 0x58
   c150c:	d168      	bne.n	c15e0 <_strtod_l+0x130>
   c150e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c1510:	9301      	str	r3, [sp, #4]
   c1512:	ab18      	add	r3, sp, #96	; 0x60
   c1514:	9702      	str	r7, [sp, #8]
   c1516:	9300      	str	r3, [sp, #0]
   c1518:	4a8d      	ldr	r2, [pc, #564]	; (c1750 <_strtod_l+0x2a0>)
   c151a:	ab19      	add	r3, sp, #100	; 0x64
   c151c:	a917      	add	r1, sp, #92	; 0x5c
   c151e:	4620      	mov	r0, r4
   c1520:	f001 f838 	bl	c2594 <__gethex>
   c1524:	f010 0707 	ands.w	r7, r0, #7
   c1528:	4605      	mov	r5, r0
   c152a:	d005      	beq.n	c1538 <_strtod_l+0x88>
   c152c:	2f06      	cmp	r7, #6
   c152e:	d12c      	bne.n	c158a <_strtod_l+0xda>
   c1530:	3601      	adds	r6, #1
   c1532:	2300      	movs	r3, #0
   c1534:	9617      	str	r6, [sp, #92]	; 0x5c
   c1536:	930a      	str	r3, [sp, #40]	; 0x28
   c1538:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   c153a:	2b00      	cmp	r3, #0
   c153c:	f040 8590 	bne.w	c2060 <_strtod_l+0xbb0>
   c1540:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   c1542:	b1eb      	cbz	r3, c1580 <_strtod_l+0xd0>
   c1544:	4652      	mov	r2, sl
   c1546:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   c154a:	ec43 2b10 	vmov	d0, r2, r3
   c154e:	b01d      	add	sp, #116	; 0x74
   c1550:	ecbd 8b02 	vpop	{d8}
   c1554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c1558:	2a20      	cmp	r2, #32
   c155a:	d1cc      	bne.n	c14f6 <_strtod_l+0x46>
   c155c:	3301      	adds	r3, #1
   c155e:	9317      	str	r3, [sp, #92]	; 0x5c
   c1560:	e7be      	b.n	c14e0 <_strtod_l+0x30>
   c1562:	2a2d      	cmp	r2, #45	; 0x2d
   c1564:	d1c7      	bne.n	c14f6 <_strtod_l+0x46>
   c1566:	2201      	movs	r2, #1
   c1568:	920a      	str	r2, [sp, #40]	; 0x28
   c156a:	1c5a      	adds	r2, r3, #1
   c156c:	9217      	str	r2, [sp, #92]	; 0x5c
   c156e:	785b      	ldrb	r3, [r3, #1]
   c1570:	2b00      	cmp	r3, #0
   c1572:	d1c2      	bne.n	c14fa <_strtod_l+0x4a>
   c1574:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   c1576:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c157a:	2b00      	cmp	r3, #0
   c157c:	f040 856e 	bne.w	c205c <_strtod_l+0xbac>
   c1580:	4652      	mov	r2, sl
   c1582:	465b      	mov	r3, fp
   c1584:	e7e1      	b.n	c154a <_strtod_l+0x9a>
   c1586:	2200      	movs	r2, #0
   c1588:	e7ee      	b.n	c1568 <_strtod_l+0xb8>
   c158a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   c158c:	b13a      	cbz	r2, c159e <_strtod_l+0xee>
   c158e:	2135      	movs	r1, #53	; 0x35
   c1590:	a81a      	add	r0, sp, #104	; 0x68
   c1592:	f001 ffac 	bl	c34ee <__copybits>
   c1596:	9918      	ldr	r1, [sp, #96]	; 0x60
   c1598:	4620      	mov	r0, r4
   c159a:	f001 fb6b 	bl	c2c74 <_Bfree>
   c159e:	3f01      	subs	r7, #1
   c15a0:	2f04      	cmp	r7, #4
   c15a2:	d806      	bhi.n	c15b2 <_strtod_l+0x102>
   c15a4:	e8df f007 	tbb	[pc, r7]
   c15a8:	1714030a 	.word	0x1714030a
   c15ac:	0a          	.byte	0x0a
   c15ad:	00          	.byte	0x00
   c15ae:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   c15b2:	0728      	lsls	r0, r5, #28
   c15b4:	d5c0      	bpl.n	c1538 <_strtod_l+0x88>
   c15b6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   c15ba:	e7bd      	b.n	c1538 <_strtod_l+0x88>
   c15bc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   c15c0:	9a19      	ldr	r2, [sp, #100]	; 0x64
   c15c2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   c15c6:	f202 4233 	addw	r2, r2, #1075	; 0x433
   c15ca:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   c15ce:	e7f0      	b.n	c15b2 <_strtod_l+0x102>
   c15d0:	f8df b180 	ldr.w	fp, [pc, #384]	; c1754 <_strtod_l+0x2a4>
   c15d4:	e7ed      	b.n	c15b2 <_strtod_l+0x102>
   c15d6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   c15da:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   c15de:	e7e8      	b.n	c15b2 <_strtod_l+0x102>
   c15e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c15e2:	1c5a      	adds	r2, r3, #1
   c15e4:	9217      	str	r2, [sp, #92]	; 0x5c
   c15e6:	785b      	ldrb	r3, [r3, #1]
   c15e8:	2b30      	cmp	r3, #48	; 0x30
   c15ea:	d0f9      	beq.n	c15e0 <_strtod_l+0x130>
   c15ec:	2b00      	cmp	r3, #0
   c15ee:	d0a3      	beq.n	c1538 <_strtod_l+0x88>
   c15f0:	2301      	movs	r3, #1
   c15f2:	f04f 0900 	mov.w	r9, #0
   c15f6:	9304      	str	r3, [sp, #16]
   c15f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c15fa:	9308      	str	r3, [sp, #32]
   c15fc:	f8cd 901c 	str.w	r9, [sp, #28]
   c1600:	464f      	mov	r7, r9
   c1602:	220a      	movs	r2, #10
   c1604:	9817      	ldr	r0, [sp, #92]	; 0x5c
   c1606:	7806      	ldrb	r6, [r0, #0]
   c1608:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   c160c:	b2d9      	uxtb	r1, r3
   c160e:	2909      	cmp	r1, #9
   c1610:	d92a      	bls.n	c1668 <_strtod_l+0x1b8>
   c1612:	9905      	ldr	r1, [sp, #20]
   c1614:	462a      	mov	r2, r5
   c1616:	f7ff fef2 	bl	c13fe <strncmp>
   c161a:	b398      	cbz	r0, c1684 <_strtod_l+0x1d4>
   c161c:	2000      	movs	r0, #0
   c161e:	4632      	mov	r2, r6
   c1620:	463d      	mov	r5, r7
   c1622:	9005      	str	r0, [sp, #20]
   c1624:	4603      	mov	r3, r0
   c1626:	2a65      	cmp	r2, #101	; 0x65
   c1628:	d001      	beq.n	c162e <_strtod_l+0x17e>
   c162a:	2a45      	cmp	r2, #69	; 0x45
   c162c:	d118      	bne.n	c1660 <_strtod_l+0x1b0>
   c162e:	b91d      	cbnz	r5, c1638 <_strtod_l+0x188>
   c1630:	9a04      	ldr	r2, [sp, #16]
   c1632:	4302      	orrs	r2, r0
   c1634:	d09e      	beq.n	c1574 <_strtod_l+0xc4>
   c1636:	2500      	movs	r5, #0
   c1638:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   c163c:	f108 0201 	add.w	r2, r8, #1
   c1640:	9217      	str	r2, [sp, #92]	; 0x5c
   c1642:	f898 2001 	ldrb.w	r2, [r8, #1]
   c1646:	2a2b      	cmp	r2, #43	; 0x2b
   c1648:	d075      	beq.n	c1736 <_strtod_l+0x286>
   c164a:	2a2d      	cmp	r2, #45	; 0x2d
   c164c:	d07b      	beq.n	c1746 <_strtod_l+0x296>
   c164e:	f04f 0c00 	mov.w	ip, #0
   c1652:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   c1656:	2909      	cmp	r1, #9
   c1658:	f240 8082 	bls.w	c1760 <_strtod_l+0x2b0>
   c165c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   c1660:	2600      	movs	r6, #0
   c1662:	e09d      	b.n	c17a0 <_strtod_l+0x2f0>
   c1664:	2300      	movs	r3, #0
   c1666:	e7c4      	b.n	c15f2 <_strtod_l+0x142>
   c1668:	2f08      	cmp	r7, #8
   c166a:	bfd8      	it	le
   c166c:	9907      	ldrle	r1, [sp, #28]
   c166e:	f100 0001 	add.w	r0, r0, #1
   c1672:	bfda      	itte	le
   c1674:	fb02 3301 	mlale	r3, r2, r1, r3
   c1678:	9307      	strle	r3, [sp, #28]
   c167a:	fb02 3909 	mlagt	r9, r2, r9, r3
   c167e:	3701      	adds	r7, #1
   c1680:	9017      	str	r0, [sp, #92]	; 0x5c
   c1682:	e7bf      	b.n	c1604 <_strtod_l+0x154>
   c1684:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c1686:	195a      	adds	r2, r3, r5
   c1688:	9217      	str	r2, [sp, #92]	; 0x5c
   c168a:	5d5a      	ldrb	r2, [r3, r5]
   c168c:	2f00      	cmp	r7, #0
   c168e:	d037      	beq.n	c1700 <_strtod_l+0x250>
   c1690:	9005      	str	r0, [sp, #20]
   c1692:	463d      	mov	r5, r7
   c1694:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   c1698:	2b09      	cmp	r3, #9
   c169a:	d912      	bls.n	c16c2 <_strtod_l+0x212>
   c169c:	2301      	movs	r3, #1
   c169e:	e7c2      	b.n	c1626 <_strtod_l+0x176>
   c16a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c16a2:	1c5a      	adds	r2, r3, #1
   c16a4:	9217      	str	r2, [sp, #92]	; 0x5c
   c16a6:	785a      	ldrb	r2, [r3, #1]
   c16a8:	3001      	adds	r0, #1
   c16aa:	2a30      	cmp	r2, #48	; 0x30
   c16ac:	d0f8      	beq.n	c16a0 <_strtod_l+0x1f0>
   c16ae:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   c16b2:	2b08      	cmp	r3, #8
   c16b4:	f200 84d9 	bhi.w	c206a <_strtod_l+0xbba>
   c16b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c16ba:	9005      	str	r0, [sp, #20]
   c16bc:	2000      	movs	r0, #0
   c16be:	9308      	str	r3, [sp, #32]
   c16c0:	4605      	mov	r5, r0
   c16c2:	3a30      	subs	r2, #48	; 0x30
   c16c4:	f100 0301 	add.w	r3, r0, #1
   c16c8:	d014      	beq.n	c16f4 <_strtod_l+0x244>
   c16ca:	9905      	ldr	r1, [sp, #20]
   c16cc:	4419      	add	r1, r3
   c16ce:	9105      	str	r1, [sp, #20]
   c16d0:	462b      	mov	r3, r5
   c16d2:	eb00 0e05 	add.w	lr, r0, r5
   c16d6:	210a      	movs	r1, #10
   c16d8:	4573      	cmp	r3, lr
   c16da:	d113      	bne.n	c1704 <_strtod_l+0x254>
   c16dc:	182b      	adds	r3, r5, r0
   c16de:	2b08      	cmp	r3, #8
   c16e0:	f105 0501 	add.w	r5, r5, #1
   c16e4:	4405      	add	r5, r0
   c16e6:	dc1c      	bgt.n	c1722 <_strtod_l+0x272>
   c16e8:	9907      	ldr	r1, [sp, #28]
   c16ea:	230a      	movs	r3, #10
   c16ec:	fb03 2301 	mla	r3, r3, r1, r2
   c16f0:	9307      	str	r3, [sp, #28]
   c16f2:	2300      	movs	r3, #0
   c16f4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c16f6:	1c51      	adds	r1, r2, #1
   c16f8:	9117      	str	r1, [sp, #92]	; 0x5c
   c16fa:	7852      	ldrb	r2, [r2, #1]
   c16fc:	4618      	mov	r0, r3
   c16fe:	e7c9      	b.n	c1694 <_strtod_l+0x1e4>
   c1700:	4638      	mov	r0, r7
   c1702:	e7d2      	b.n	c16aa <_strtod_l+0x1fa>
   c1704:	2b08      	cmp	r3, #8
   c1706:	dc04      	bgt.n	c1712 <_strtod_l+0x262>
   c1708:	9e07      	ldr	r6, [sp, #28]
   c170a:	434e      	muls	r6, r1
   c170c:	9607      	str	r6, [sp, #28]
   c170e:	3301      	adds	r3, #1
   c1710:	e7e2      	b.n	c16d8 <_strtod_l+0x228>
   c1712:	f103 0c01 	add.w	ip, r3, #1
   c1716:	f1bc 0f10 	cmp.w	ip, #16
   c171a:	bfd8      	it	le
   c171c:	fb01 f909 	mulle.w	r9, r1, r9
   c1720:	e7f5      	b.n	c170e <_strtod_l+0x25e>
   c1722:	2d10      	cmp	r5, #16
   c1724:	bfdc      	itt	le
   c1726:	230a      	movle	r3, #10
   c1728:	fb03 2909 	mlale	r9, r3, r9, r2
   c172c:	e7e1      	b.n	c16f2 <_strtod_l+0x242>
   c172e:	2300      	movs	r3, #0
   c1730:	9305      	str	r3, [sp, #20]
   c1732:	2301      	movs	r3, #1
   c1734:	e77c      	b.n	c1630 <_strtod_l+0x180>
   c1736:	f04f 0c00 	mov.w	ip, #0
   c173a:	f108 0202 	add.w	r2, r8, #2
   c173e:	9217      	str	r2, [sp, #92]	; 0x5c
   c1740:	f898 2002 	ldrb.w	r2, [r8, #2]
   c1744:	e785      	b.n	c1652 <_strtod_l+0x1a2>
   c1746:	f04f 0c01 	mov.w	ip, #1
   c174a:	e7f6      	b.n	c173a <_strtod_l+0x28a>
   c174c:	000c58cc 	.word	0x000c58cc
   c1750:	000c5704 	.word	0x000c5704
   c1754:	7ff00000 	.word	0x7ff00000
   c1758:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c175a:	1c51      	adds	r1, r2, #1
   c175c:	9117      	str	r1, [sp, #92]	; 0x5c
   c175e:	7852      	ldrb	r2, [r2, #1]
   c1760:	2a30      	cmp	r2, #48	; 0x30
   c1762:	d0f9      	beq.n	c1758 <_strtod_l+0x2a8>
   c1764:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   c1768:	2908      	cmp	r1, #8
   c176a:	f63f af79 	bhi.w	c1660 <_strtod_l+0x1b0>
   c176e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   c1772:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c1774:	9206      	str	r2, [sp, #24]
   c1776:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   c1778:	1c51      	adds	r1, r2, #1
   c177a:	9117      	str	r1, [sp, #92]	; 0x5c
   c177c:	7852      	ldrb	r2, [r2, #1]
   c177e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   c1782:	2e09      	cmp	r6, #9
   c1784:	d937      	bls.n	c17f6 <_strtod_l+0x346>
   c1786:	9e06      	ldr	r6, [sp, #24]
   c1788:	1b89      	subs	r1, r1, r6
   c178a:	2908      	cmp	r1, #8
   c178c:	f644 661f 	movw	r6, #19999	; 0x4e1f
   c1790:	dc02      	bgt.n	c1798 <_strtod_l+0x2e8>
   c1792:	4576      	cmp	r6, lr
   c1794:	bfa8      	it	ge
   c1796:	4676      	movge	r6, lr
   c1798:	f1bc 0f00 	cmp.w	ip, #0
   c179c:	d000      	beq.n	c17a0 <_strtod_l+0x2f0>
   c179e:	4276      	negs	r6, r6
   c17a0:	2d00      	cmp	r5, #0
   c17a2:	d14d      	bne.n	c1840 <_strtod_l+0x390>
   c17a4:	9904      	ldr	r1, [sp, #16]
   c17a6:	4301      	orrs	r1, r0
   c17a8:	f47f aec6 	bne.w	c1538 <_strtod_l+0x88>
   c17ac:	2b00      	cmp	r3, #0
   c17ae:	f47f aee1 	bne.w	c1574 <_strtod_l+0xc4>
   c17b2:	2a69      	cmp	r2, #105	; 0x69
   c17b4:	d027      	beq.n	c1806 <_strtod_l+0x356>
   c17b6:	dc24      	bgt.n	c1802 <_strtod_l+0x352>
   c17b8:	2a49      	cmp	r2, #73	; 0x49
   c17ba:	d024      	beq.n	c1806 <_strtod_l+0x356>
   c17bc:	2a4e      	cmp	r2, #78	; 0x4e
   c17be:	f47f aed9 	bne.w	c1574 <_strtod_l+0xc4>
   c17c2:	499f      	ldr	r1, [pc, #636]	; (c1a40 <_strtod_l+0x590>)
   c17c4:	a817      	add	r0, sp, #92	; 0x5c
   c17c6:	f001 f93d 	bl	c2a44 <__match>
   c17ca:	2800      	cmp	r0, #0
   c17cc:	f43f aed2 	beq.w	c1574 <_strtod_l+0xc4>
   c17d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c17d2:	781b      	ldrb	r3, [r3, #0]
   c17d4:	2b28      	cmp	r3, #40	; 0x28
   c17d6:	d12d      	bne.n	c1834 <_strtod_l+0x384>
   c17d8:	499a      	ldr	r1, [pc, #616]	; (c1a44 <_strtod_l+0x594>)
   c17da:	aa1a      	add	r2, sp, #104	; 0x68
   c17dc:	a817      	add	r0, sp, #92	; 0x5c
   c17de:	f001 f945 	bl	c2a6c <__hexnan>
   c17e2:	2805      	cmp	r0, #5
   c17e4:	d126      	bne.n	c1834 <_strtod_l+0x384>
   c17e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   c17e8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   c17ec:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   c17f0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   c17f4:	e6a0      	b.n	c1538 <_strtod_l+0x88>
   c17f6:	210a      	movs	r1, #10
   c17f8:	fb01 2e0e 	mla	lr, r1, lr, r2
   c17fc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   c1800:	e7b9      	b.n	c1776 <_strtod_l+0x2c6>
   c1802:	2a6e      	cmp	r2, #110	; 0x6e
   c1804:	e7db      	b.n	c17be <_strtod_l+0x30e>
   c1806:	4990      	ldr	r1, [pc, #576]	; (c1a48 <_strtod_l+0x598>)
   c1808:	a817      	add	r0, sp, #92	; 0x5c
   c180a:	f001 f91b 	bl	c2a44 <__match>
   c180e:	2800      	cmp	r0, #0
   c1810:	f43f aeb0 	beq.w	c1574 <_strtod_l+0xc4>
   c1814:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c1816:	498d      	ldr	r1, [pc, #564]	; (c1a4c <_strtod_l+0x59c>)
   c1818:	3b01      	subs	r3, #1
   c181a:	a817      	add	r0, sp, #92	; 0x5c
   c181c:	9317      	str	r3, [sp, #92]	; 0x5c
   c181e:	f001 f911 	bl	c2a44 <__match>
   c1822:	b910      	cbnz	r0, c182a <_strtod_l+0x37a>
   c1824:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c1826:	3301      	adds	r3, #1
   c1828:	9317      	str	r3, [sp, #92]	; 0x5c
   c182a:	f8df b230 	ldr.w	fp, [pc, #560]	; c1a5c <_strtod_l+0x5ac>
   c182e:	f04f 0a00 	mov.w	sl, #0
   c1832:	e681      	b.n	c1538 <_strtod_l+0x88>
   c1834:	4886      	ldr	r0, [pc, #536]	; (c1a50 <_strtod_l+0x5a0>)
   c1836:	f7fe ff6b 	bl	c0710 <nan>
   c183a:	ec5b ab10 	vmov	sl, fp, d0
   c183e:	e67b      	b.n	c1538 <_strtod_l+0x88>
   c1840:	9b05      	ldr	r3, [sp, #20]
   c1842:	9807      	ldr	r0, [sp, #28]
   c1844:	1af3      	subs	r3, r6, r3
   c1846:	2f00      	cmp	r7, #0
   c1848:	bf08      	it	eq
   c184a:	462f      	moveq	r7, r5
   c184c:	2d10      	cmp	r5, #16
   c184e:	9306      	str	r3, [sp, #24]
   c1850:	46a8      	mov	r8, r5
   c1852:	bfa8      	it	ge
   c1854:	f04f 0810 	movge.w	r8, #16
   c1858:	f7ff f8a4 	bl	c09a4 <__aeabi_ui2d>
   c185c:	2d09      	cmp	r5, #9
   c185e:	4682      	mov	sl, r0
   c1860:	468b      	mov	fp, r1
   c1862:	dd13      	ble.n	c188c <_strtod_l+0x3dc>
   c1864:	4b7b      	ldr	r3, [pc, #492]	; (c1a54 <_strtod_l+0x5a4>)
   c1866:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   c186a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   c186e:	f7ff f913 	bl	c0a98 <__aeabi_dmul>
   c1872:	4682      	mov	sl, r0
   c1874:	4648      	mov	r0, r9
   c1876:	468b      	mov	fp, r1
   c1878:	f7ff f894 	bl	c09a4 <__aeabi_ui2d>
   c187c:	4602      	mov	r2, r0
   c187e:	460b      	mov	r3, r1
   c1880:	4650      	mov	r0, sl
   c1882:	4659      	mov	r1, fp
   c1884:	f7fe ff52 	bl	c072c <__adddf3>
   c1888:	4682      	mov	sl, r0
   c188a:	468b      	mov	fp, r1
   c188c:	2d0f      	cmp	r5, #15
   c188e:	dc38      	bgt.n	c1902 <_strtod_l+0x452>
   c1890:	9b06      	ldr	r3, [sp, #24]
   c1892:	2b00      	cmp	r3, #0
   c1894:	f43f ae50 	beq.w	c1538 <_strtod_l+0x88>
   c1898:	dd24      	ble.n	c18e4 <_strtod_l+0x434>
   c189a:	2b16      	cmp	r3, #22
   c189c:	dc0b      	bgt.n	c18b6 <_strtod_l+0x406>
   c189e:	496d      	ldr	r1, [pc, #436]	; (c1a54 <_strtod_l+0x5a4>)
   c18a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   c18a4:	e9d1 0100 	ldrd	r0, r1, [r1]
   c18a8:	4652      	mov	r2, sl
   c18aa:	465b      	mov	r3, fp
   c18ac:	f7ff f8f4 	bl	c0a98 <__aeabi_dmul>
   c18b0:	4682      	mov	sl, r0
   c18b2:	468b      	mov	fp, r1
   c18b4:	e640      	b.n	c1538 <_strtod_l+0x88>
   c18b6:	9a06      	ldr	r2, [sp, #24]
   c18b8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   c18bc:	4293      	cmp	r3, r2
   c18be:	db20      	blt.n	c1902 <_strtod_l+0x452>
   c18c0:	4c64      	ldr	r4, [pc, #400]	; (c1a54 <_strtod_l+0x5a4>)
   c18c2:	f1c5 050f 	rsb	r5, r5, #15
   c18c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   c18ca:	4652      	mov	r2, sl
   c18cc:	465b      	mov	r3, fp
   c18ce:	e9d1 0100 	ldrd	r0, r1, [r1]
   c18d2:	f7ff f8e1 	bl	c0a98 <__aeabi_dmul>
   c18d6:	9b06      	ldr	r3, [sp, #24]
   c18d8:	1b5d      	subs	r5, r3, r5
   c18da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   c18de:	e9d4 2300 	ldrd	r2, r3, [r4]
   c18e2:	e7e3      	b.n	c18ac <_strtod_l+0x3fc>
   c18e4:	9b06      	ldr	r3, [sp, #24]
   c18e6:	3316      	adds	r3, #22
   c18e8:	db0b      	blt.n	c1902 <_strtod_l+0x452>
   c18ea:	9b05      	ldr	r3, [sp, #20]
   c18ec:	1b9e      	subs	r6, r3, r6
   c18ee:	4b59      	ldr	r3, [pc, #356]	; (c1a54 <_strtod_l+0x5a4>)
   c18f0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   c18f4:	e9d6 2300 	ldrd	r2, r3, [r6]
   c18f8:	4650      	mov	r0, sl
   c18fa:	4659      	mov	r1, fp
   c18fc:	f7ff f9f6 	bl	c0cec <__aeabi_ddiv>
   c1900:	e7d6      	b.n	c18b0 <_strtod_l+0x400>
   c1902:	9b06      	ldr	r3, [sp, #24]
   c1904:	eba5 0808 	sub.w	r8, r5, r8
   c1908:	4498      	add	r8, r3
   c190a:	f1b8 0f00 	cmp.w	r8, #0
   c190e:	dd74      	ble.n	c19fa <_strtod_l+0x54a>
   c1910:	f018 030f 	ands.w	r3, r8, #15
   c1914:	d00a      	beq.n	c192c <_strtod_l+0x47c>
   c1916:	494f      	ldr	r1, [pc, #316]	; (c1a54 <_strtod_l+0x5a4>)
   c1918:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   c191c:	4652      	mov	r2, sl
   c191e:	465b      	mov	r3, fp
   c1920:	e9d1 0100 	ldrd	r0, r1, [r1]
   c1924:	f7ff f8b8 	bl	c0a98 <__aeabi_dmul>
   c1928:	4682      	mov	sl, r0
   c192a:	468b      	mov	fp, r1
   c192c:	f038 080f 	bics.w	r8, r8, #15
   c1930:	d04f      	beq.n	c19d2 <_strtod_l+0x522>
   c1932:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   c1936:	dd22      	ble.n	c197e <_strtod_l+0x4ce>
   c1938:	2500      	movs	r5, #0
   c193a:	462e      	mov	r6, r5
   c193c:	9507      	str	r5, [sp, #28]
   c193e:	9505      	str	r5, [sp, #20]
   c1940:	2322      	movs	r3, #34	; 0x22
   c1942:	f8df b118 	ldr.w	fp, [pc, #280]	; c1a5c <_strtod_l+0x5ac>
   c1946:	6023      	str	r3, [r4, #0]
   c1948:	f04f 0a00 	mov.w	sl, #0
   c194c:	9b07      	ldr	r3, [sp, #28]
   c194e:	2b00      	cmp	r3, #0
   c1950:	f43f adf2 	beq.w	c1538 <_strtod_l+0x88>
   c1954:	9918      	ldr	r1, [sp, #96]	; 0x60
   c1956:	4620      	mov	r0, r4
   c1958:	f001 f98c 	bl	c2c74 <_Bfree>
   c195c:	9905      	ldr	r1, [sp, #20]
   c195e:	4620      	mov	r0, r4
   c1960:	f001 f988 	bl	c2c74 <_Bfree>
   c1964:	4631      	mov	r1, r6
   c1966:	4620      	mov	r0, r4
   c1968:	f001 f984 	bl	c2c74 <_Bfree>
   c196c:	9907      	ldr	r1, [sp, #28]
   c196e:	4620      	mov	r0, r4
   c1970:	f001 f980 	bl	c2c74 <_Bfree>
   c1974:	4629      	mov	r1, r5
   c1976:	4620      	mov	r0, r4
   c1978:	f001 f97c 	bl	c2c74 <_Bfree>
   c197c:	e5dc      	b.n	c1538 <_strtod_l+0x88>
   c197e:	4b36      	ldr	r3, [pc, #216]	; (c1a58 <_strtod_l+0x5a8>)
   c1980:	9304      	str	r3, [sp, #16]
   c1982:	2300      	movs	r3, #0
   c1984:	ea4f 1828 	mov.w	r8, r8, asr #4
   c1988:	4650      	mov	r0, sl
   c198a:	4659      	mov	r1, fp
   c198c:	4699      	mov	r9, r3
   c198e:	f1b8 0f01 	cmp.w	r8, #1
   c1992:	dc21      	bgt.n	c19d8 <_strtod_l+0x528>
   c1994:	b10b      	cbz	r3, c199a <_strtod_l+0x4ea>
   c1996:	4682      	mov	sl, r0
   c1998:	468b      	mov	fp, r1
   c199a:	4b2f      	ldr	r3, [pc, #188]	; (c1a58 <_strtod_l+0x5a8>)
   c199c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   c19a0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   c19a4:	4652      	mov	r2, sl
   c19a6:	465b      	mov	r3, fp
   c19a8:	e9d9 0100 	ldrd	r0, r1, [r9]
   c19ac:	f7ff f874 	bl	c0a98 <__aeabi_dmul>
   c19b0:	4b2a      	ldr	r3, [pc, #168]	; (c1a5c <_strtod_l+0x5ac>)
   c19b2:	460a      	mov	r2, r1
   c19b4:	400b      	ands	r3, r1
   c19b6:	492a      	ldr	r1, [pc, #168]	; (c1a60 <_strtod_l+0x5b0>)
   c19b8:	428b      	cmp	r3, r1
   c19ba:	4682      	mov	sl, r0
   c19bc:	d8bc      	bhi.n	c1938 <_strtod_l+0x488>
   c19be:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   c19c2:	428b      	cmp	r3, r1
   c19c4:	bf86      	itte	hi
   c19c6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; c1a64 <_strtod_l+0x5b4>
   c19ca:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   c19ce:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   c19d2:	2300      	movs	r3, #0
   c19d4:	9304      	str	r3, [sp, #16]
   c19d6:	e084      	b.n	c1ae2 <_strtod_l+0x632>
   c19d8:	f018 0f01 	tst.w	r8, #1
   c19dc:	d005      	beq.n	c19ea <_strtod_l+0x53a>
   c19de:	9b04      	ldr	r3, [sp, #16]
   c19e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   c19e4:	f7ff f858 	bl	c0a98 <__aeabi_dmul>
   c19e8:	2301      	movs	r3, #1
   c19ea:	9a04      	ldr	r2, [sp, #16]
   c19ec:	3208      	adds	r2, #8
   c19ee:	f109 0901 	add.w	r9, r9, #1
   c19f2:	ea4f 0868 	mov.w	r8, r8, asr #1
   c19f6:	9204      	str	r2, [sp, #16]
   c19f8:	e7c9      	b.n	c198e <_strtod_l+0x4de>
   c19fa:	d0ea      	beq.n	c19d2 <_strtod_l+0x522>
   c19fc:	f1c8 0800 	rsb	r8, r8, #0
   c1a00:	f018 020f 	ands.w	r2, r8, #15
   c1a04:	d00a      	beq.n	c1a1c <_strtod_l+0x56c>
   c1a06:	4b13      	ldr	r3, [pc, #76]	; (c1a54 <_strtod_l+0x5a4>)
   c1a08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   c1a0c:	4650      	mov	r0, sl
   c1a0e:	4659      	mov	r1, fp
   c1a10:	e9d3 2300 	ldrd	r2, r3, [r3]
   c1a14:	f7ff f96a 	bl	c0cec <__aeabi_ddiv>
   c1a18:	4682      	mov	sl, r0
   c1a1a:	468b      	mov	fp, r1
   c1a1c:	ea5f 1828 	movs.w	r8, r8, asr #4
   c1a20:	d0d7      	beq.n	c19d2 <_strtod_l+0x522>
   c1a22:	f1b8 0f1f 	cmp.w	r8, #31
   c1a26:	dd1f      	ble.n	c1a68 <_strtod_l+0x5b8>
   c1a28:	2500      	movs	r5, #0
   c1a2a:	462e      	mov	r6, r5
   c1a2c:	9507      	str	r5, [sp, #28]
   c1a2e:	9505      	str	r5, [sp, #20]
   c1a30:	2322      	movs	r3, #34	; 0x22
   c1a32:	f04f 0a00 	mov.w	sl, #0
   c1a36:	f04f 0b00 	mov.w	fp, #0
   c1a3a:	6023      	str	r3, [r4, #0]
   c1a3c:	e786      	b.n	c194c <_strtod_l+0x49c>
   c1a3e:	bf00      	nop
   c1a40:	000c5519 	.word	0x000c5519
   c1a44:	000c5718 	.word	0x000c5718
   c1a48:	000c551d 	.word	0x000c551d
   c1a4c:	000c56fb 	.word	0x000c56fb
   c1a50:	000c5454 	.word	0x000c5454
   c1a54:	000c5968 	.word	0x000c5968
   c1a58:	000c5940 	.word	0x000c5940
   c1a5c:	7ff00000 	.word	0x7ff00000
   c1a60:	7ca00000 	.word	0x7ca00000
   c1a64:	7fefffff 	.word	0x7fefffff
   c1a68:	f018 0310 	ands.w	r3, r8, #16
   c1a6c:	bf18      	it	ne
   c1a6e:	236a      	movne	r3, #106	; 0x6a
   c1a70:	f8df 93ac 	ldr.w	r9, [pc, #940]	; c1e20 <_strtod_l+0x970>
   c1a74:	9304      	str	r3, [sp, #16]
   c1a76:	4650      	mov	r0, sl
   c1a78:	4659      	mov	r1, fp
   c1a7a:	2300      	movs	r3, #0
   c1a7c:	f018 0f01 	tst.w	r8, #1
   c1a80:	d004      	beq.n	c1a8c <_strtod_l+0x5dc>
   c1a82:	e9d9 2300 	ldrd	r2, r3, [r9]
   c1a86:	f7ff f807 	bl	c0a98 <__aeabi_dmul>
   c1a8a:	2301      	movs	r3, #1
   c1a8c:	ea5f 0868 	movs.w	r8, r8, asr #1
   c1a90:	f109 0908 	add.w	r9, r9, #8
   c1a94:	d1f2      	bne.n	c1a7c <_strtod_l+0x5cc>
   c1a96:	b10b      	cbz	r3, c1a9c <_strtod_l+0x5ec>
   c1a98:	4682      	mov	sl, r0
   c1a9a:	468b      	mov	fp, r1
   c1a9c:	9b04      	ldr	r3, [sp, #16]
   c1a9e:	b1c3      	cbz	r3, c1ad2 <_strtod_l+0x622>
   c1aa0:	f3cb 520a 	ubfx	r2, fp, #20, #11
   c1aa4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   c1aa8:	2b00      	cmp	r3, #0
   c1aaa:	4659      	mov	r1, fp
   c1aac:	dd11      	ble.n	c1ad2 <_strtod_l+0x622>
   c1aae:	2b1f      	cmp	r3, #31
   c1ab0:	f340 8124 	ble.w	c1cfc <_strtod_l+0x84c>
   c1ab4:	2b34      	cmp	r3, #52	; 0x34
   c1ab6:	bfde      	ittt	le
   c1ab8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   c1abc:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   c1ac0:	fa03 f202 	lslle.w	r2, r3, r2
   c1ac4:	f04f 0a00 	mov.w	sl, #0
   c1ac8:	bfcc      	ite	gt
   c1aca:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   c1ace:	ea02 0b01 	andle.w	fp, r2, r1
   c1ad2:	2200      	movs	r2, #0
   c1ad4:	2300      	movs	r3, #0
   c1ad6:	4650      	mov	r0, sl
   c1ad8:	4659      	mov	r1, fp
   c1ada:	f7ff fa45 	bl	c0f68 <__aeabi_dcmpeq>
   c1ade:	2800      	cmp	r0, #0
   c1ae0:	d1a2      	bne.n	c1a28 <_strtod_l+0x578>
   c1ae2:	9b07      	ldr	r3, [sp, #28]
   c1ae4:	9300      	str	r3, [sp, #0]
   c1ae6:	9908      	ldr	r1, [sp, #32]
   c1ae8:	462b      	mov	r3, r5
   c1aea:	463a      	mov	r2, r7
   c1aec:	4620      	mov	r0, r4
   c1aee:	f001 f929 	bl	c2d44 <__s2b>
   c1af2:	9007      	str	r0, [sp, #28]
   c1af4:	2800      	cmp	r0, #0
   c1af6:	f43f af1f 	beq.w	c1938 <_strtod_l+0x488>
   c1afa:	9b05      	ldr	r3, [sp, #20]
   c1afc:	1b9e      	subs	r6, r3, r6
   c1afe:	9b06      	ldr	r3, [sp, #24]
   c1b00:	2b00      	cmp	r3, #0
   c1b02:	bfb4      	ite	lt
   c1b04:	4633      	movlt	r3, r6
   c1b06:	2300      	movge	r3, #0
   c1b08:	930c      	str	r3, [sp, #48]	; 0x30
   c1b0a:	9b06      	ldr	r3, [sp, #24]
   c1b0c:	2500      	movs	r5, #0
   c1b0e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   c1b12:	9312      	str	r3, [sp, #72]	; 0x48
   c1b14:	462e      	mov	r6, r5
   c1b16:	9b07      	ldr	r3, [sp, #28]
   c1b18:	4620      	mov	r0, r4
   c1b1a:	6859      	ldr	r1, [r3, #4]
   c1b1c:	f001 f86a 	bl	c2bf4 <_Balloc>
   c1b20:	9005      	str	r0, [sp, #20]
   c1b22:	2800      	cmp	r0, #0
   c1b24:	f43f af0c 	beq.w	c1940 <_strtod_l+0x490>
   c1b28:	9b07      	ldr	r3, [sp, #28]
   c1b2a:	691a      	ldr	r2, [r3, #16]
   c1b2c:	3202      	adds	r2, #2
   c1b2e:	f103 010c 	add.w	r1, r3, #12
   c1b32:	0092      	lsls	r2, r2, #2
   c1b34:	300c      	adds	r0, #12
   c1b36:	f7ff fb67 	bl	c1208 <memcpy>
   c1b3a:	ec4b ab10 	vmov	d0, sl, fp
   c1b3e:	aa1a      	add	r2, sp, #104	; 0x68
   c1b40:	a919      	add	r1, sp, #100	; 0x64
   c1b42:	4620      	mov	r0, r4
   c1b44:	f001 fc44 	bl	c33d0 <__d2b>
   c1b48:	ec4b ab18 	vmov	d8, sl, fp
   c1b4c:	9018      	str	r0, [sp, #96]	; 0x60
   c1b4e:	2800      	cmp	r0, #0
   c1b50:	f43f aef6 	beq.w	c1940 <_strtod_l+0x490>
   c1b54:	2101      	movs	r1, #1
   c1b56:	4620      	mov	r0, r4
   c1b58:	f001 f98e 	bl	c2e78 <__i2b>
   c1b5c:	4606      	mov	r6, r0
   c1b5e:	2800      	cmp	r0, #0
   c1b60:	f43f aeee 	beq.w	c1940 <_strtod_l+0x490>
   c1b64:	9b19      	ldr	r3, [sp, #100]	; 0x64
   c1b66:	9904      	ldr	r1, [sp, #16]
   c1b68:	2b00      	cmp	r3, #0
   c1b6a:	bfab      	itete	ge
   c1b6c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   c1b6e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   c1b70:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   c1b72:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   c1b76:	bfac      	ite	ge
   c1b78:	eb03 0902 	addge.w	r9, r3, r2
   c1b7c:	1ad7      	sublt	r7, r2, r3
   c1b7e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   c1b80:	eba3 0801 	sub.w	r8, r3, r1
   c1b84:	4490      	add	r8, r2
   c1b86:	4ba1      	ldr	r3, [pc, #644]	; (c1e0c <_strtod_l+0x95c>)
   c1b88:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   c1b8c:	4598      	cmp	r8, r3
   c1b8e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   c1b92:	f280 80c7 	bge.w	c1d24 <_strtod_l+0x874>
   c1b96:	eba3 0308 	sub.w	r3, r3, r8
   c1b9a:	2b1f      	cmp	r3, #31
   c1b9c:	eba2 0203 	sub.w	r2, r2, r3
   c1ba0:	f04f 0101 	mov.w	r1, #1
   c1ba4:	f300 80b1 	bgt.w	c1d0a <_strtod_l+0x85a>
   c1ba8:	fa01 f303 	lsl.w	r3, r1, r3
   c1bac:	930d      	str	r3, [sp, #52]	; 0x34
   c1bae:	2300      	movs	r3, #0
   c1bb0:	9308      	str	r3, [sp, #32]
   c1bb2:	eb09 0802 	add.w	r8, r9, r2
   c1bb6:	9b04      	ldr	r3, [sp, #16]
   c1bb8:	45c1      	cmp	r9, r8
   c1bba:	4417      	add	r7, r2
   c1bbc:	441f      	add	r7, r3
   c1bbe:	464b      	mov	r3, r9
   c1bc0:	bfa8      	it	ge
   c1bc2:	4643      	movge	r3, r8
   c1bc4:	42bb      	cmp	r3, r7
   c1bc6:	bfa8      	it	ge
   c1bc8:	463b      	movge	r3, r7
   c1bca:	2b00      	cmp	r3, #0
   c1bcc:	bfc2      	ittt	gt
   c1bce:	eba8 0803 	subgt.w	r8, r8, r3
   c1bd2:	1aff      	subgt	r7, r7, r3
   c1bd4:	eba9 0903 	subgt.w	r9, r9, r3
   c1bd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   c1bda:	2b00      	cmp	r3, #0
   c1bdc:	dd17      	ble.n	c1c0e <_strtod_l+0x75e>
   c1bde:	4631      	mov	r1, r6
   c1be0:	461a      	mov	r2, r3
   c1be2:	4620      	mov	r0, r4
   c1be4:	f001 fa08 	bl	c2ff8 <__pow5mult>
   c1be8:	4606      	mov	r6, r0
   c1bea:	2800      	cmp	r0, #0
   c1bec:	f43f aea8 	beq.w	c1940 <_strtod_l+0x490>
   c1bf0:	4601      	mov	r1, r0
   c1bf2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   c1bf4:	4620      	mov	r0, r4
   c1bf6:	f001 f955 	bl	c2ea4 <__multiply>
   c1bfa:	900b      	str	r0, [sp, #44]	; 0x2c
   c1bfc:	2800      	cmp	r0, #0
   c1bfe:	f43f ae9f 	beq.w	c1940 <_strtod_l+0x490>
   c1c02:	9918      	ldr	r1, [sp, #96]	; 0x60
   c1c04:	4620      	mov	r0, r4
   c1c06:	f001 f835 	bl	c2c74 <_Bfree>
   c1c0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c1c0c:	9318      	str	r3, [sp, #96]	; 0x60
   c1c0e:	f1b8 0f00 	cmp.w	r8, #0
   c1c12:	f300 808c 	bgt.w	c1d2e <_strtod_l+0x87e>
   c1c16:	9b06      	ldr	r3, [sp, #24]
   c1c18:	2b00      	cmp	r3, #0
   c1c1a:	dd08      	ble.n	c1c2e <_strtod_l+0x77e>
   c1c1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   c1c1e:	9905      	ldr	r1, [sp, #20]
   c1c20:	4620      	mov	r0, r4
   c1c22:	f001 f9e9 	bl	c2ff8 <__pow5mult>
   c1c26:	9005      	str	r0, [sp, #20]
   c1c28:	2800      	cmp	r0, #0
   c1c2a:	f43f ae89 	beq.w	c1940 <_strtod_l+0x490>
   c1c2e:	2f00      	cmp	r7, #0
   c1c30:	dd08      	ble.n	c1c44 <_strtod_l+0x794>
   c1c32:	9905      	ldr	r1, [sp, #20]
   c1c34:	463a      	mov	r2, r7
   c1c36:	4620      	mov	r0, r4
   c1c38:	f001 fa38 	bl	c30ac <__lshift>
   c1c3c:	9005      	str	r0, [sp, #20]
   c1c3e:	2800      	cmp	r0, #0
   c1c40:	f43f ae7e 	beq.w	c1940 <_strtod_l+0x490>
   c1c44:	f1b9 0f00 	cmp.w	r9, #0
   c1c48:	dd08      	ble.n	c1c5c <_strtod_l+0x7ac>
   c1c4a:	4631      	mov	r1, r6
   c1c4c:	464a      	mov	r2, r9
   c1c4e:	4620      	mov	r0, r4
   c1c50:	f001 fa2c 	bl	c30ac <__lshift>
   c1c54:	4606      	mov	r6, r0
   c1c56:	2800      	cmp	r0, #0
   c1c58:	f43f ae72 	beq.w	c1940 <_strtod_l+0x490>
   c1c5c:	9a05      	ldr	r2, [sp, #20]
   c1c5e:	9918      	ldr	r1, [sp, #96]	; 0x60
   c1c60:	4620      	mov	r0, r4
   c1c62:	f001 faaf 	bl	c31c4 <__mdiff>
   c1c66:	4605      	mov	r5, r0
   c1c68:	2800      	cmp	r0, #0
   c1c6a:	f43f ae69 	beq.w	c1940 <_strtod_l+0x490>
   c1c6e:	68c3      	ldr	r3, [r0, #12]
   c1c70:	930b      	str	r3, [sp, #44]	; 0x2c
   c1c72:	2300      	movs	r3, #0
   c1c74:	60c3      	str	r3, [r0, #12]
   c1c76:	4631      	mov	r1, r6
   c1c78:	f001 fa88 	bl	c318c <__mcmp>
   c1c7c:	2800      	cmp	r0, #0
   c1c7e:	da60      	bge.n	c1d42 <_strtod_l+0x892>
   c1c80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c1c82:	ea53 030a 	orrs.w	r3, r3, sl
   c1c86:	f040 8082 	bne.w	c1d8e <_strtod_l+0x8de>
   c1c8a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c1c8e:	2b00      	cmp	r3, #0
   c1c90:	d17d      	bne.n	c1d8e <_strtod_l+0x8de>
   c1c92:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   c1c96:	0d1b      	lsrs	r3, r3, #20
   c1c98:	051b      	lsls	r3, r3, #20
   c1c9a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   c1c9e:	d976      	bls.n	c1d8e <_strtod_l+0x8de>
   c1ca0:	696b      	ldr	r3, [r5, #20]
   c1ca2:	b913      	cbnz	r3, c1caa <_strtod_l+0x7fa>
   c1ca4:	692b      	ldr	r3, [r5, #16]
   c1ca6:	2b01      	cmp	r3, #1
   c1ca8:	dd71      	ble.n	c1d8e <_strtod_l+0x8de>
   c1caa:	4629      	mov	r1, r5
   c1cac:	2201      	movs	r2, #1
   c1cae:	4620      	mov	r0, r4
   c1cb0:	f001 f9fc 	bl	c30ac <__lshift>
   c1cb4:	4631      	mov	r1, r6
   c1cb6:	4605      	mov	r5, r0
   c1cb8:	f001 fa68 	bl	c318c <__mcmp>
   c1cbc:	2800      	cmp	r0, #0
   c1cbe:	dd66      	ble.n	c1d8e <_strtod_l+0x8de>
   c1cc0:	9904      	ldr	r1, [sp, #16]
   c1cc2:	4a53      	ldr	r2, [pc, #332]	; (c1e10 <_strtod_l+0x960>)
   c1cc4:	465b      	mov	r3, fp
   c1cc6:	2900      	cmp	r1, #0
   c1cc8:	f000 8081 	beq.w	c1dce <_strtod_l+0x91e>
   c1ccc:	ea02 010b 	and.w	r1, r2, fp
   c1cd0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   c1cd4:	dc7b      	bgt.n	c1dce <_strtod_l+0x91e>
   c1cd6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   c1cda:	f77f aea9 	ble.w	c1a30 <_strtod_l+0x580>
   c1cde:	4b4d      	ldr	r3, [pc, #308]	; (c1e14 <_strtod_l+0x964>)
   c1ce0:	4650      	mov	r0, sl
   c1ce2:	4659      	mov	r1, fp
   c1ce4:	2200      	movs	r2, #0
   c1ce6:	f7fe fed7 	bl	c0a98 <__aeabi_dmul>
   c1cea:	460b      	mov	r3, r1
   c1cec:	4303      	orrs	r3, r0
   c1cee:	bf08      	it	eq
   c1cf0:	2322      	moveq	r3, #34	; 0x22
   c1cf2:	4682      	mov	sl, r0
   c1cf4:	468b      	mov	fp, r1
   c1cf6:	bf08      	it	eq
   c1cf8:	6023      	streq	r3, [r4, #0]
   c1cfa:	e62b      	b.n	c1954 <_strtod_l+0x4a4>
   c1cfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c1d00:	fa02 f303 	lsl.w	r3, r2, r3
   c1d04:	ea03 0a0a 	and.w	sl, r3, sl
   c1d08:	e6e3      	b.n	c1ad2 <_strtod_l+0x622>
   c1d0a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   c1d0e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   c1d12:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   c1d16:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   c1d1a:	fa01 f308 	lsl.w	r3, r1, r8
   c1d1e:	9308      	str	r3, [sp, #32]
   c1d20:	910d      	str	r1, [sp, #52]	; 0x34
   c1d22:	e746      	b.n	c1bb2 <_strtod_l+0x702>
   c1d24:	2300      	movs	r3, #0
   c1d26:	9308      	str	r3, [sp, #32]
   c1d28:	2301      	movs	r3, #1
   c1d2a:	930d      	str	r3, [sp, #52]	; 0x34
   c1d2c:	e741      	b.n	c1bb2 <_strtod_l+0x702>
   c1d2e:	9918      	ldr	r1, [sp, #96]	; 0x60
   c1d30:	4642      	mov	r2, r8
   c1d32:	4620      	mov	r0, r4
   c1d34:	f001 f9ba 	bl	c30ac <__lshift>
   c1d38:	9018      	str	r0, [sp, #96]	; 0x60
   c1d3a:	2800      	cmp	r0, #0
   c1d3c:	f47f af6b 	bne.w	c1c16 <_strtod_l+0x766>
   c1d40:	e5fe      	b.n	c1940 <_strtod_l+0x490>
   c1d42:	465f      	mov	r7, fp
   c1d44:	d16e      	bne.n	c1e24 <_strtod_l+0x974>
   c1d46:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   c1d48:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c1d4c:	b342      	cbz	r2, c1da0 <_strtod_l+0x8f0>
   c1d4e:	4a32      	ldr	r2, [pc, #200]	; (c1e18 <_strtod_l+0x968>)
   c1d50:	4293      	cmp	r3, r2
   c1d52:	d128      	bne.n	c1da6 <_strtod_l+0x8f6>
   c1d54:	9b04      	ldr	r3, [sp, #16]
   c1d56:	4651      	mov	r1, sl
   c1d58:	b1eb      	cbz	r3, c1d96 <_strtod_l+0x8e6>
   c1d5a:	4b2d      	ldr	r3, [pc, #180]	; (c1e10 <_strtod_l+0x960>)
   c1d5c:	403b      	ands	r3, r7
   c1d5e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   c1d62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c1d66:	d819      	bhi.n	c1d9c <_strtod_l+0x8ec>
   c1d68:	0d1b      	lsrs	r3, r3, #20
   c1d6a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   c1d6e:	fa02 f303 	lsl.w	r3, r2, r3
   c1d72:	4299      	cmp	r1, r3
   c1d74:	d117      	bne.n	c1da6 <_strtod_l+0x8f6>
   c1d76:	4b29      	ldr	r3, [pc, #164]	; (c1e1c <_strtod_l+0x96c>)
   c1d78:	429f      	cmp	r7, r3
   c1d7a:	d102      	bne.n	c1d82 <_strtod_l+0x8d2>
   c1d7c:	3101      	adds	r1, #1
   c1d7e:	f43f addf 	beq.w	c1940 <_strtod_l+0x490>
   c1d82:	4b23      	ldr	r3, [pc, #140]	; (c1e10 <_strtod_l+0x960>)
   c1d84:	403b      	ands	r3, r7
   c1d86:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   c1d8a:	f04f 0a00 	mov.w	sl, #0
   c1d8e:	9b04      	ldr	r3, [sp, #16]
   c1d90:	2b00      	cmp	r3, #0
   c1d92:	d1a4      	bne.n	c1cde <_strtod_l+0x82e>
   c1d94:	e5de      	b.n	c1954 <_strtod_l+0x4a4>
   c1d96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   c1d9a:	e7ea      	b.n	c1d72 <_strtod_l+0x8c2>
   c1d9c:	4613      	mov	r3, r2
   c1d9e:	e7e8      	b.n	c1d72 <_strtod_l+0x8c2>
   c1da0:	ea53 030a 	orrs.w	r3, r3, sl
   c1da4:	d08c      	beq.n	c1cc0 <_strtod_l+0x810>
   c1da6:	9b08      	ldr	r3, [sp, #32]
   c1da8:	b1db      	cbz	r3, c1de2 <_strtod_l+0x932>
   c1daa:	423b      	tst	r3, r7
   c1dac:	d0ef      	beq.n	c1d8e <_strtod_l+0x8de>
   c1dae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c1db0:	9a04      	ldr	r2, [sp, #16]
   c1db2:	4650      	mov	r0, sl
   c1db4:	4659      	mov	r1, fp
   c1db6:	b1c3      	cbz	r3, c1dea <_strtod_l+0x93a>
   c1db8:	f7ff fb5c 	bl	c1474 <sulp>
   c1dbc:	4602      	mov	r2, r0
   c1dbe:	460b      	mov	r3, r1
   c1dc0:	ec51 0b18 	vmov	r0, r1, d8
   c1dc4:	f7fe fcb2 	bl	c072c <__adddf3>
   c1dc8:	4682      	mov	sl, r0
   c1dca:	468b      	mov	fp, r1
   c1dcc:	e7df      	b.n	c1d8e <_strtod_l+0x8de>
   c1dce:	4013      	ands	r3, r2
   c1dd0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   c1dd4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   c1dd8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   c1ddc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   c1de0:	e7d5      	b.n	c1d8e <_strtod_l+0x8de>
   c1de2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   c1de4:	ea13 0f0a 	tst.w	r3, sl
   c1de8:	e7e0      	b.n	c1dac <_strtod_l+0x8fc>
   c1dea:	f7ff fb43 	bl	c1474 <sulp>
   c1dee:	4602      	mov	r2, r0
   c1df0:	460b      	mov	r3, r1
   c1df2:	ec51 0b18 	vmov	r0, r1, d8
   c1df6:	f7fe fc97 	bl	c0728 <__aeabi_dsub>
   c1dfa:	2200      	movs	r2, #0
   c1dfc:	2300      	movs	r3, #0
   c1dfe:	4682      	mov	sl, r0
   c1e00:	468b      	mov	fp, r1
   c1e02:	f7ff f8b1 	bl	c0f68 <__aeabi_dcmpeq>
   c1e06:	2800      	cmp	r0, #0
   c1e08:	d0c1      	beq.n	c1d8e <_strtod_l+0x8de>
   c1e0a:	e611      	b.n	c1a30 <_strtod_l+0x580>
   c1e0c:	fffffc02 	.word	0xfffffc02
   c1e10:	7ff00000 	.word	0x7ff00000
   c1e14:	39500000 	.word	0x39500000
   c1e18:	000fffff 	.word	0x000fffff
   c1e1c:	7fefffff 	.word	0x7fefffff
   c1e20:	000c5730 	.word	0x000c5730
   c1e24:	4631      	mov	r1, r6
   c1e26:	4628      	mov	r0, r5
   c1e28:	f001 fb2e 	bl	c3488 <__ratio>
   c1e2c:	ec59 8b10 	vmov	r8, r9, d0
   c1e30:	ee10 0a10 	vmov	r0, s0
   c1e34:	2200      	movs	r2, #0
   c1e36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   c1e3a:	4649      	mov	r1, r9
   c1e3c:	f7ff f8a8 	bl	c0f90 <__aeabi_dcmple>
   c1e40:	2800      	cmp	r0, #0
   c1e42:	d07a      	beq.n	c1f3a <_strtod_l+0xa8a>
   c1e44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c1e46:	2b00      	cmp	r3, #0
   c1e48:	d04a      	beq.n	c1ee0 <_strtod_l+0xa30>
   c1e4a:	4b95      	ldr	r3, [pc, #596]	; (c20a0 <_strtod_l+0xbf0>)
   c1e4c:	2200      	movs	r2, #0
   c1e4e:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c1e52:	f8df 924c 	ldr.w	r9, [pc, #588]	; c20a0 <_strtod_l+0xbf0>
   c1e56:	f04f 0800 	mov.w	r8, #0
   c1e5a:	4b92      	ldr	r3, [pc, #584]	; (c20a4 <_strtod_l+0xbf4>)
   c1e5c:	403b      	ands	r3, r7
   c1e5e:	930d      	str	r3, [sp, #52]	; 0x34
   c1e60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c1e62:	4b91      	ldr	r3, [pc, #580]	; (c20a8 <_strtod_l+0xbf8>)
   c1e64:	429a      	cmp	r2, r3
   c1e66:	f040 80b0 	bne.w	c1fca <_strtod_l+0xb1a>
   c1e6a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c1e6e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   c1e72:	ec4b ab10 	vmov	d0, sl, fp
   c1e76:	e9cd 0108 	strd	r0, r1, [sp, #32]
   c1e7a:	f001 fa2d 	bl	c32d8 <__ulp>
   c1e7e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c1e82:	ec53 2b10 	vmov	r2, r3, d0
   c1e86:	f7fe fe07 	bl	c0a98 <__aeabi_dmul>
   c1e8a:	4652      	mov	r2, sl
   c1e8c:	465b      	mov	r3, fp
   c1e8e:	f7fe fc4d 	bl	c072c <__adddf3>
   c1e92:	460b      	mov	r3, r1
   c1e94:	4983      	ldr	r1, [pc, #524]	; (c20a4 <_strtod_l+0xbf4>)
   c1e96:	4a85      	ldr	r2, [pc, #532]	; (c20ac <_strtod_l+0xbfc>)
   c1e98:	4019      	ands	r1, r3
   c1e9a:	4291      	cmp	r1, r2
   c1e9c:	4682      	mov	sl, r0
   c1e9e:	d960      	bls.n	c1f62 <_strtod_l+0xab2>
   c1ea0:	ee18 3a90 	vmov	r3, s17
   c1ea4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   c1ea8:	4293      	cmp	r3, r2
   c1eaa:	d104      	bne.n	c1eb6 <_strtod_l+0xa06>
   c1eac:	ee18 3a10 	vmov	r3, s16
   c1eb0:	3301      	adds	r3, #1
   c1eb2:	f43f ad45 	beq.w	c1940 <_strtod_l+0x490>
   c1eb6:	f8df b200 	ldr.w	fp, [pc, #512]	; c20b8 <_strtod_l+0xc08>
   c1eba:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   c1ebe:	9918      	ldr	r1, [sp, #96]	; 0x60
   c1ec0:	4620      	mov	r0, r4
   c1ec2:	f000 fed7 	bl	c2c74 <_Bfree>
   c1ec6:	9905      	ldr	r1, [sp, #20]
   c1ec8:	4620      	mov	r0, r4
   c1eca:	f000 fed3 	bl	c2c74 <_Bfree>
   c1ece:	4631      	mov	r1, r6
   c1ed0:	4620      	mov	r0, r4
   c1ed2:	f000 fecf 	bl	c2c74 <_Bfree>
   c1ed6:	4629      	mov	r1, r5
   c1ed8:	4620      	mov	r0, r4
   c1eda:	f000 fecb 	bl	c2c74 <_Bfree>
   c1ede:	e61a      	b.n	c1b16 <_strtod_l+0x666>
   c1ee0:	f1ba 0f00 	cmp.w	sl, #0
   c1ee4:	d11b      	bne.n	c1f1e <_strtod_l+0xa6e>
   c1ee6:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c1eea:	b9f3      	cbnz	r3, c1f2a <_strtod_l+0xa7a>
   c1eec:	4b6c      	ldr	r3, [pc, #432]	; (c20a0 <_strtod_l+0xbf0>)
   c1eee:	2200      	movs	r2, #0
   c1ef0:	4640      	mov	r0, r8
   c1ef2:	4649      	mov	r1, r9
   c1ef4:	f7ff f842 	bl	c0f7c <__aeabi_dcmplt>
   c1ef8:	b9d0      	cbnz	r0, c1f30 <_strtod_l+0xa80>
   c1efa:	4640      	mov	r0, r8
   c1efc:	4649      	mov	r1, r9
   c1efe:	4b6c      	ldr	r3, [pc, #432]	; (c20b0 <_strtod_l+0xc00>)
   c1f00:	2200      	movs	r2, #0
   c1f02:	f7fe fdc9 	bl	c0a98 <__aeabi_dmul>
   c1f06:	4680      	mov	r8, r0
   c1f08:	4689      	mov	r9, r1
   c1f0a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   c1f0e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   c1f12:	9315      	str	r3, [sp, #84]	; 0x54
   c1f14:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   c1f18:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c1f1c:	e79d      	b.n	c1e5a <_strtod_l+0x9aa>
   c1f1e:	f1ba 0f01 	cmp.w	sl, #1
   c1f22:	d102      	bne.n	c1f2a <_strtod_l+0xa7a>
   c1f24:	2f00      	cmp	r7, #0
   c1f26:	f43f ad83 	beq.w	c1a30 <_strtod_l+0x580>
   c1f2a:	4b62      	ldr	r3, [pc, #392]	; (c20b4 <_strtod_l+0xc04>)
   c1f2c:	2200      	movs	r2, #0
   c1f2e:	e78e      	b.n	c1e4e <_strtod_l+0x99e>
   c1f30:	f8df 917c 	ldr.w	r9, [pc, #380]	; c20b0 <_strtod_l+0xc00>
   c1f34:	f04f 0800 	mov.w	r8, #0
   c1f38:	e7e7      	b.n	c1f0a <_strtod_l+0xa5a>
   c1f3a:	4b5d      	ldr	r3, [pc, #372]	; (c20b0 <_strtod_l+0xc00>)
   c1f3c:	4640      	mov	r0, r8
   c1f3e:	4649      	mov	r1, r9
   c1f40:	2200      	movs	r2, #0
   c1f42:	f7fe fda9 	bl	c0a98 <__aeabi_dmul>
   c1f46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c1f48:	4680      	mov	r8, r0
   c1f4a:	4689      	mov	r9, r1
   c1f4c:	b933      	cbnz	r3, c1f5c <_strtod_l+0xaac>
   c1f4e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c1f52:	900e      	str	r0, [sp, #56]	; 0x38
   c1f54:	930f      	str	r3, [sp, #60]	; 0x3c
   c1f56:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   c1f5a:	e7dd      	b.n	c1f18 <_strtod_l+0xa68>
   c1f5c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   c1f60:	e7f9      	b.n	c1f56 <_strtod_l+0xaa6>
   c1f62:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   c1f66:	9b04      	ldr	r3, [sp, #16]
   c1f68:	2b00      	cmp	r3, #0
   c1f6a:	d1a8      	bne.n	c1ebe <_strtod_l+0xa0e>
   c1f6c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   c1f70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c1f72:	0d1b      	lsrs	r3, r3, #20
   c1f74:	051b      	lsls	r3, r3, #20
   c1f76:	429a      	cmp	r2, r3
   c1f78:	d1a1      	bne.n	c1ebe <_strtod_l+0xa0e>
   c1f7a:	4640      	mov	r0, r8
   c1f7c:	4649      	mov	r1, r9
   c1f7e:	f001 fb33 	bl	c35e8 <__aeabi_d2lz>
   c1f82:	f7fe fd5b 	bl	c0a3c <__aeabi_l2d>
   c1f86:	4602      	mov	r2, r0
   c1f88:	460b      	mov	r3, r1
   c1f8a:	4640      	mov	r0, r8
   c1f8c:	4649      	mov	r1, r9
   c1f8e:	f7fe fbcb 	bl	c0728 <__aeabi_dsub>
   c1f92:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   c1f94:	f3cb 0313 	ubfx	r3, fp, #0, #20
   c1f98:	ea43 030a 	orr.w	r3, r3, sl
   c1f9c:	4313      	orrs	r3, r2
   c1f9e:	4680      	mov	r8, r0
   c1fa0:	4689      	mov	r9, r1
   c1fa2:	d055      	beq.n	c2050 <_strtod_l+0xba0>
   c1fa4:	a336      	add	r3, pc, #216	; (adr r3, c2080 <_strtod_l+0xbd0>)
   c1fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
   c1faa:	f7fe ffe7 	bl	c0f7c <__aeabi_dcmplt>
   c1fae:	2800      	cmp	r0, #0
   c1fb0:	f47f acd0 	bne.w	c1954 <_strtod_l+0x4a4>
   c1fb4:	a334      	add	r3, pc, #208	; (adr r3, c2088 <_strtod_l+0xbd8>)
   c1fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
   c1fba:	4640      	mov	r0, r8
   c1fbc:	4649      	mov	r1, r9
   c1fbe:	f7fe fffb 	bl	c0fb8 <__aeabi_dcmpgt>
   c1fc2:	2800      	cmp	r0, #0
   c1fc4:	f43f af7b 	beq.w	c1ebe <_strtod_l+0xa0e>
   c1fc8:	e4c4      	b.n	c1954 <_strtod_l+0x4a4>
   c1fca:	9b04      	ldr	r3, [sp, #16]
   c1fcc:	b333      	cbz	r3, c201c <_strtod_l+0xb6c>
   c1fce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   c1fd0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   c1fd4:	d822      	bhi.n	c201c <_strtod_l+0xb6c>
   c1fd6:	a32e      	add	r3, pc, #184	; (adr r3, c2090 <_strtod_l+0xbe0>)
   c1fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
   c1fdc:	4640      	mov	r0, r8
   c1fde:	4649      	mov	r1, r9
   c1fe0:	f7fe ffd6 	bl	c0f90 <__aeabi_dcmple>
   c1fe4:	b1a0      	cbz	r0, c2010 <_strtod_l+0xb60>
   c1fe6:	4649      	mov	r1, r9
   c1fe8:	4640      	mov	r0, r8
   c1fea:	f7ff f82d 	bl	c1048 <__aeabi_d2uiz>
   c1fee:	2801      	cmp	r0, #1
   c1ff0:	bf38      	it	cc
   c1ff2:	2001      	movcc	r0, #1
   c1ff4:	f7fe fcd6 	bl	c09a4 <__aeabi_ui2d>
   c1ff8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   c1ffa:	4680      	mov	r8, r0
   c1ffc:	4689      	mov	r9, r1
   c1ffe:	bb23      	cbnz	r3, c204a <_strtod_l+0xb9a>
   c2000:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   c2004:	9010      	str	r0, [sp, #64]	; 0x40
   c2006:	9311      	str	r3, [sp, #68]	; 0x44
   c2008:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   c200c:	e9cd 2308 	strd	r2, r3, [sp, #32]
   c2010:	9b09      	ldr	r3, [sp, #36]	; 0x24
   c2012:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   c2014:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   c2018:	1a9b      	subs	r3, r3, r2
   c201a:	9309      	str	r3, [sp, #36]	; 0x24
   c201c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c2020:	eeb0 0a48 	vmov.f32	s0, s16
   c2024:	eef0 0a68 	vmov.f32	s1, s17
   c2028:	e9cd 0108 	strd	r0, r1, [sp, #32]
   c202c:	f001 f954 	bl	c32d8 <__ulp>
   c2030:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   c2034:	ec53 2b10 	vmov	r2, r3, d0
   c2038:	f7fe fd2e 	bl	c0a98 <__aeabi_dmul>
   c203c:	ec53 2b18 	vmov	r2, r3, d8
   c2040:	f7fe fb74 	bl	c072c <__adddf3>
   c2044:	4682      	mov	sl, r0
   c2046:	468b      	mov	fp, r1
   c2048:	e78d      	b.n	c1f66 <_strtod_l+0xab6>
   c204a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   c204e:	e7db      	b.n	c2008 <_strtod_l+0xb58>
   c2050:	a311      	add	r3, pc, #68	; (adr r3, c2098 <_strtod_l+0xbe8>)
   c2052:	e9d3 2300 	ldrd	r2, r3, [r3]
   c2056:	f7fe ff91 	bl	c0f7c <__aeabi_dcmplt>
   c205a:	e7b2      	b.n	c1fc2 <_strtod_l+0xb12>
   c205c:	2300      	movs	r3, #0
   c205e:	930a      	str	r3, [sp, #40]	; 0x28
   c2060:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   c2062:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   c2064:	6013      	str	r3, [r2, #0]
   c2066:	f7ff ba6b 	b.w	c1540 <_strtod_l+0x90>
   c206a:	2a65      	cmp	r2, #101	; 0x65
   c206c:	f43f ab5f 	beq.w	c172e <_strtod_l+0x27e>
   c2070:	2a45      	cmp	r2, #69	; 0x45
   c2072:	f43f ab5c 	beq.w	c172e <_strtod_l+0x27e>
   c2076:	2301      	movs	r3, #1
   c2078:	f7ff bb94 	b.w	c17a4 <_strtod_l+0x2f4>
   c207c:	f3af 8000 	nop.w
   c2080:	94a03595 	.word	0x94a03595
   c2084:	3fdfffff 	.word	0x3fdfffff
   c2088:	35afe535 	.word	0x35afe535
   c208c:	3fe00000 	.word	0x3fe00000
   c2090:	ffc00000 	.word	0xffc00000
   c2094:	41dfffff 	.word	0x41dfffff
   c2098:	94a03595 	.word	0x94a03595
   c209c:	3fcfffff 	.word	0x3fcfffff
   c20a0:	3ff00000 	.word	0x3ff00000
   c20a4:	7ff00000 	.word	0x7ff00000
   c20a8:	7fe00000 	.word	0x7fe00000
   c20ac:	7c9fffff 	.word	0x7c9fffff
   c20b0:	3fe00000 	.word	0x3fe00000
   c20b4:	bff00000 	.word	0xbff00000
   c20b8:	7fefffff 	.word	0x7fefffff

000c20bc <strtof>:
   c20bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c20c0:	f8df 80ac 	ldr.w	r8, [pc, #172]	; c2170 <strtof+0xb4>
   c20c4:	4b26      	ldr	r3, [pc, #152]	; (c2160 <strtof+0xa4>)
   c20c6:	460a      	mov	r2, r1
   c20c8:	ed2d 8b02 	vpush	{d8}
   c20cc:	4601      	mov	r1, r0
   c20ce:	f8d8 0000 	ldr.w	r0, [r8]
   c20d2:	f7ff f9ed 	bl	c14b0 <_strtod_l>
   c20d6:	ec55 4b10 	vmov	r4, r5, d0
   c20da:	ee10 2a10 	vmov	r2, s0
   c20de:	ee10 0a10 	vmov	r0, s0
   c20e2:	462b      	mov	r3, r5
   c20e4:	4629      	mov	r1, r5
   c20e6:	f7fe ff71 	bl	c0fcc <__aeabi_dcmpun>
   c20ea:	b190      	cbz	r0, c2112 <strtof+0x56>
   c20ec:	2d00      	cmp	r5, #0
   c20ee:	481d      	ldr	r0, [pc, #116]	; (c2164 <strtof+0xa8>)
   c20f0:	da09      	bge.n	c2106 <strtof+0x4a>
   c20f2:	f001 fa65 	bl	c35c0 <nanf>
   c20f6:	eeb1 8a40 	vneg.f32	s16, s0
   c20fa:	eeb0 0a48 	vmov.f32	s0, s16
   c20fe:	ecbd 8b02 	vpop	{d8}
   c2102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c2106:	ecbd 8b02 	vpop	{d8}
   c210a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   c210e:	f001 ba57 	b.w	c35c0 <nanf>
   c2112:	4620      	mov	r0, r4
   c2114:	4629      	mov	r1, r5
   c2116:	f7fe ffb7 	bl	c1088 <__aeabi_d2f>
   c211a:	ee08 0a10 	vmov	s16, r0
   c211e:	eddf 7a12 	vldr	s15, [pc, #72]	; c2168 <strtof+0xac>
   c2122:	eeb0 7ac8 	vabs.f32	s14, s16
   c2126:	eeb4 7a67 	vcmp.f32	s14, s15
   c212a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   c212e:	dde4      	ble.n	c20fa <strtof+0x3e>
   c2130:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
   c2134:	4b0d      	ldr	r3, [pc, #52]	; (c216c <strtof+0xb0>)
   c2136:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c213a:	4620      	mov	r0, r4
   c213c:	4639      	mov	r1, r7
   c213e:	f7fe ff45 	bl	c0fcc <__aeabi_dcmpun>
   c2142:	b940      	cbnz	r0, c2156 <strtof+0x9a>
   c2144:	4b09      	ldr	r3, [pc, #36]	; (c216c <strtof+0xb0>)
   c2146:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c214a:	4620      	mov	r0, r4
   c214c:	4639      	mov	r1, r7
   c214e:	f7fe ff1f 	bl	c0f90 <__aeabi_dcmple>
   c2152:	2800      	cmp	r0, #0
   c2154:	d0d1      	beq.n	c20fa <strtof+0x3e>
   c2156:	f8d8 3000 	ldr.w	r3, [r8]
   c215a:	2222      	movs	r2, #34	; 0x22
   c215c:	601a      	str	r2, [r3, #0]
   c215e:	e7cc      	b.n	c20fa <strtof+0x3e>
   c2160:	2003d6f8 	.word	0x2003d6f8
   c2164:	000c5454 	.word	0x000c5454
   c2168:	7f7fffff 	.word	0x7f7fffff
   c216c:	7fefffff 	.word	0x7fefffff
   c2170:	2003d68c 	.word	0x2003d68c

000c2174 <__strtok_r>:
   c2174:	b5f0      	push	{r4, r5, r6, r7, lr}
   c2176:	b908      	cbnz	r0, c217c <__strtok_r+0x8>
   c2178:	6810      	ldr	r0, [r2, #0]
   c217a:	b188      	cbz	r0, c21a0 <__strtok_r+0x2c>
   c217c:	4604      	mov	r4, r0
   c217e:	4620      	mov	r0, r4
   c2180:	f814 5b01 	ldrb.w	r5, [r4], #1
   c2184:	460f      	mov	r7, r1
   c2186:	f817 6b01 	ldrb.w	r6, [r7], #1
   c218a:	b91e      	cbnz	r6, c2194 <__strtok_r+0x20>
   c218c:	b965      	cbnz	r5, c21a8 <__strtok_r+0x34>
   c218e:	6015      	str	r5, [r2, #0]
   c2190:	4628      	mov	r0, r5
   c2192:	e005      	b.n	c21a0 <__strtok_r+0x2c>
   c2194:	42b5      	cmp	r5, r6
   c2196:	d1f6      	bne.n	c2186 <__strtok_r+0x12>
   c2198:	2b00      	cmp	r3, #0
   c219a:	d1f0      	bne.n	c217e <__strtok_r+0xa>
   c219c:	6014      	str	r4, [r2, #0]
   c219e:	7003      	strb	r3, [r0, #0]
   c21a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   c21a2:	461c      	mov	r4, r3
   c21a4:	e00c      	b.n	c21c0 <__strtok_r+0x4c>
   c21a6:	b915      	cbnz	r5, c21ae <__strtok_r+0x3a>
   c21a8:	f814 3b01 	ldrb.w	r3, [r4], #1
   c21ac:	460e      	mov	r6, r1
   c21ae:	f816 5b01 	ldrb.w	r5, [r6], #1
   c21b2:	42ab      	cmp	r3, r5
   c21b4:	d1f7      	bne.n	c21a6 <__strtok_r+0x32>
   c21b6:	2b00      	cmp	r3, #0
   c21b8:	d0f3      	beq.n	c21a2 <__strtok_r+0x2e>
   c21ba:	2300      	movs	r3, #0
   c21bc:	f804 3c01 	strb.w	r3, [r4, #-1]
   c21c0:	6014      	str	r4, [r2, #0]
   c21c2:	e7ed      	b.n	c21a0 <__strtok_r+0x2c>

000c21c4 <strtok_r>:
   c21c4:	2301      	movs	r3, #1
   c21c6:	f7ff bfd5 	b.w	c2174 <__strtok_r>
	...

000c21cc <_strtol_l.constprop.0>:
   c21cc:	2b01      	cmp	r3, #1
   c21ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c21d2:	d001      	beq.n	c21d8 <_strtol_l.constprop.0+0xc>
   c21d4:	2b24      	cmp	r3, #36	; 0x24
   c21d6:	d906      	bls.n	c21e6 <_strtol_l.constprop.0+0x1a>
   c21d8:	f7fb f8a8 	bl	bd32c <__errno>
   c21dc:	2316      	movs	r3, #22
   c21de:	6003      	str	r3, [r0, #0]
   c21e0:	2000      	movs	r0, #0
   c21e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c21e6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; c22cc <_strtol_l.constprop.0+0x100>
   c21ea:	460d      	mov	r5, r1
   c21ec:	462e      	mov	r6, r5
   c21ee:	f815 4b01 	ldrb.w	r4, [r5], #1
   c21f2:	f814 700c 	ldrb.w	r7, [r4, ip]
   c21f6:	f017 0708 	ands.w	r7, r7, #8
   c21fa:	d1f7      	bne.n	c21ec <_strtol_l.constprop.0+0x20>
   c21fc:	2c2d      	cmp	r4, #45	; 0x2d
   c21fe:	d132      	bne.n	c2266 <_strtol_l.constprop.0+0x9a>
   c2200:	782c      	ldrb	r4, [r5, #0]
   c2202:	2701      	movs	r7, #1
   c2204:	1cb5      	adds	r5, r6, #2
   c2206:	2b00      	cmp	r3, #0
   c2208:	d05b      	beq.n	c22c2 <_strtol_l.constprop.0+0xf6>
   c220a:	2b10      	cmp	r3, #16
   c220c:	d109      	bne.n	c2222 <_strtol_l.constprop.0+0x56>
   c220e:	2c30      	cmp	r4, #48	; 0x30
   c2210:	d107      	bne.n	c2222 <_strtol_l.constprop.0+0x56>
   c2212:	782c      	ldrb	r4, [r5, #0]
   c2214:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   c2218:	2c58      	cmp	r4, #88	; 0x58
   c221a:	d14d      	bne.n	c22b8 <_strtol_l.constprop.0+0xec>
   c221c:	786c      	ldrb	r4, [r5, #1]
   c221e:	2310      	movs	r3, #16
   c2220:	3502      	adds	r5, #2
   c2222:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   c2226:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   c222a:	f04f 0c00 	mov.w	ip, #0
   c222e:	fbb8 f9f3 	udiv	r9, r8, r3
   c2232:	4666      	mov	r6, ip
   c2234:	fb03 8a19 	mls	sl, r3, r9, r8
   c2238:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   c223c:	f1be 0f09 	cmp.w	lr, #9
   c2240:	d816      	bhi.n	c2270 <_strtol_l.constprop.0+0xa4>
   c2242:	4674      	mov	r4, lr
   c2244:	42a3      	cmp	r3, r4
   c2246:	dd24      	ble.n	c2292 <_strtol_l.constprop.0+0xc6>
   c2248:	f1bc 0f00 	cmp.w	ip, #0
   c224c:	db1e      	blt.n	c228c <_strtol_l.constprop.0+0xc0>
   c224e:	45b1      	cmp	r9, r6
   c2250:	d31c      	bcc.n	c228c <_strtol_l.constprop.0+0xc0>
   c2252:	d101      	bne.n	c2258 <_strtol_l.constprop.0+0x8c>
   c2254:	45a2      	cmp	sl, r4
   c2256:	db19      	blt.n	c228c <_strtol_l.constprop.0+0xc0>
   c2258:	fb06 4603 	mla	r6, r6, r3, r4
   c225c:	f04f 0c01 	mov.w	ip, #1
   c2260:	f815 4b01 	ldrb.w	r4, [r5], #1
   c2264:	e7e8      	b.n	c2238 <_strtol_l.constprop.0+0x6c>
   c2266:	2c2b      	cmp	r4, #43	; 0x2b
   c2268:	bf04      	itt	eq
   c226a:	782c      	ldrbeq	r4, [r5, #0]
   c226c:	1cb5      	addeq	r5, r6, #2
   c226e:	e7ca      	b.n	c2206 <_strtol_l.constprop.0+0x3a>
   c2270:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   c2274:	f1be 0f19 	cmp.w	lr, #25
   c2278:	d801      	bhi.n	c227e <_strtol_l.constprop.0+0xb2>
   c227a:	3c37      	subs	r4, #55	; 0x37
   c227c:	e7e2      	b.n	c2244 <_strtol_l.constprop.0+0x78>
   c227e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   c2282:	f1be 0f19 	cmp.w	lr, #25
   c2286:	d804      	bhi.n	c2292 <_strtol_l.constprop.0+0xc6>
   c2288:	3c57      	subs	r4, #87	; 0x57
   c228a:	e7db      	b.n	c2244 <_strtol_l.constprop.0+0x78>
   c228c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   c2290:	e7e6      	b.n	c2260 <_strtol_l.constprop.0+0x94>
   c2292:	f1bc 0f00 	cmp.w	ip, #0
   c2296:	da05      	bge.n	c22a4 <_strtol_l.constprop.0+0xd8>
   c2298:	2322      	movs	r3, #34	; 0x22
   c229a:	6003      	str	r3, [r0, #0]
   c229c:	4646      	mov	r6, r8
   c229e:	b942      	cbnz	r2, c22b2 <_strtol_l.constprop.0+0xe6>
   c22a0:	4630      	mov	r0, r6
   c22a2:	e79e      	b.n	c21e2 <_strtol_l.constprop.0+0x16>
   c22a4:	b107      	cbz	r7, c22a8 <_strtol_l.constprop.0+0xdc>
   c22a6:	4276      	negs	r6, r6
   c22a8:	2a00      	cmp	r2, #0
   c22aa:	d0f9      	beq.n	c22a0 <_strtol_l.constprop.0+0xd4>
   c22ac:	f1bc 0f00 	cmp.w	ip, #0
   c22b0:	d000      	beq.n	c22b4 <_strtol_l.constprop.0+0xe8>
   c22b2:	1e69      	subs	r1, r5, #1
   c22b4:	6011      	str	r1, [r2, #0]
   c22b6:	e7f3      	b.n	c22a0 <_strtol_l.constprop.0+0xd4>
   c22b8:	2430      	movs	r4, #48	; 0x30
   c22ba:	2b00      	cmp	r3, #0
   c22bc:	d1b1      	bne.n	c2222 <_strtol_l.constprop.0+0x56>
   c22be:	2308      	movs	r3, #8
   c22c0:	e7af      	b.n	c2222 <_strtol_l.constprop.0+0x56>
   c22c2:	2c30      	cmp	r4, #48	; 0x30
   c22c4:	d0a5      	beq.n	c2212 <_strtol_l.constprop.0+0x46>
   c22c6:	230a      	movs	r3, #10
   c22c8:	e7ab      	b.n	c2222 <_strtol_l.constprop.0+0x56>
   c22ca:	bf00      	nop
   c22cc:	000c5759 	.word	0x000c5759

000c22d0 <strtol>:
   c22d0:	4613      	mov	r3, r2
   c22d2:	460a      	mov	r2, r1
   c22d4:	4601      	mov	r1, r0
   c22d6:	4802      	ldr	r0, [pc, #8]	; (c22e0 <strtol+0x10>)
   c22d8:	6800      	ldr	r0, [r0, #0]
   c22da:	f7ff bf77 	b.w	c21cc <_strtol_l.constprop.0>
   c22de:	bf00      	nop
   c22e0:	2003d68c 	.word	0x2003d68c

000c22e4 <close>:
   c22e4:	4b02      	ldr	r3, [pc, #8]	; (c22f0 <close+0xc>)
   c22e6:	4601      	mov	r1, r0
   c22e8:	6818      	ldr	r0, [r3, #0]
   c22ea:	f000 b8c9 	b.w	c2480 <_close_r>
   c22ee:	bf00      	nop
   c22f0:	2003d68c 	.word	0x2003d68c

000c22f4 <fstat>:
   c22f4:	4b02      	ldr	r3, [pc, #8]	; (c2300 <fstat+0xc>)
   c22f6:	460a      	mov	r2, r1
   c22f8:	4601      	mov	r1, r0
   c22fa:	6818      	ldr	r0, [r3, #0]
   c22fc:	f000 b8d0 	b.w	c24a0 <_fstat_r>
   c2300:	2003d68c 	.word	0x2003d68c

000c2304 <lseek>:
   c2304:	4613      	mov	r3, r2
   c2306:	460a      	mov	r2, r1
   c2308:	4601      	mov	r1, r0
   c230a:	4802      	ldr	r0, [pc, #8]	; (c2314 <lseek+0x10>)
   c230c:	6800      	ldr	r0, [r0, #0]
   c230e:	f000 bc4d 	b.w	c2bac <_lseek_r>
   c2312:	bf00      	nop
   c2314:	2003d68c 	.word	0x2003d68c

000c2318 <open>:
   c2318:	b40e      	push	{r1, r2, r3}
   c231a:	b503      	push	{r0, r1, lr}
   c231c:	ab03      	add	r3, sp, #12
   c231e:	4601      	mov	r1, r0
   c2320:	4806      	ldr	r0, [pc, #24]	; (c233c <open+0x24>)
   c2322:	f853 2b04 	ldr.w	r2, [r3], #4
   c2326:	9301      	str	r3, [sp, #4]
   c2328:	6800      	ldr	r0, [r0, #0]
   c232a:	9b04      	ldr	r3, [sp, #16]
   c232c:	f001 f924 	bl	c3578 <_open_r>
   c2330:	b002      	add	sp, #8
   c2332:	f85d eb04 	ldr.w	lr, [sp], #4
   c2336:	b003      	add	sp, #12
   c2338:	4770      	bx	lr
   c233a:	bf00      	nop
   c233c:	2003d68c 	.word	0x2003d68c

000c2340 <read>:
   c2340:	4613      	mov	r3, r2
   c2342:	460a      	mov	r2, r1
   c2344:	4601      	mov	r1, r0
   c2346:	4802      	ldr	r0, [pc, #8]	; (c2350 <read+0x10>)
   c2348:	6800      	ldr	r0, [r0, #0]
   c234a:	f001 b927 	b.w	c359c <_read_r>
   c234e:	bf00      	nop
   c2350:	2003d68c 	.word	0x2003d68c

000c2354 <unlink>:
   c2354:	4b02      	ldr	r3, [pc, #8]	; (c2360 <unlink+0xc>)
   c2356:	4601      	mov	r1, r0
   c2358:	6818      	ldr	r0, [r3, #0]
   c235a:	f000 b80d 	b.w	c2378 <_unlink_r>
   c235e:	bf00      	nop
   c2360:	2003d68c 	.word	0x2003d68c

000c2364 <write>:
   c2364:	4613      	mov	r3, r2
   c2366:	460a      	mov	r2, r1
   c2368:	4601      	mov	r1, r0
   c236a:	4802      	ldr	r0, [pc, #8]	; (c2374 <write+0x10>)
   c236c:	6800      	ldr	r0, [r0, #0]
   c236e:	f000 b813 	b.w	c2398 <_write_r>
   c2372:	bf00      	nop
   c2374:	2003d68c 	.word	0x2003d68c

000c2378 <_unlink_r>:
   c2378:	b538      	push	{r3, r4, r5, lr}
   c237a:	4d06      	ldr	r5, [pc, #24]	; (c2394 <_unlink_r+0x1c>)
   c237c:	2300      	movs	r3, #0
   c237e:	4604      	mov	r4, r0
   c2380:	4608      	mov	r0, r1
   c2382:	602b      	str	r3, [r5, #0]
   c2384:	f7fa fd5e 	bl	bce44 <_unlink>
   c2388:	1c43      	adds	r3, r0, #1
   c238a:	d102      	bne.n	c2392 <_unlink_r+0x1a>
   c238c:	682b      	ldr	r3, [r5, #0]
   c238e:	b103      	cbz	r3, c2392 <_unlink_r+0x1a>
   c2390:	6023      	str	r3, [r4, #0]
   c2392:	bd38      	pop	{r3, r4, r5, pc}
   c2394:	2003e7f0 	.word	0x2003e7f0

000c2398 <_write_r>:
   c2398:	b538      	push	{r3, r4, r5, lr}
   c239a:	4d07      	ldr	r5, [pc, #28]	; (c23b8 <_write_r+0x20>)
   c239c:	4604      	mov	r4, r0
   c239e:	4608      	mov	r0, r1
   c23a0:	4611      	mov	r1, r2
   c23a2:	2200      	movs	r2, #0
   c23a4:	602a      	str	r2, [r5, #0]
   c23a6:	461a      	mov	r2, r3
   c23a8:	f7fa fd14 	bl	bcdd4 <_write>
   c23ac:	1c43      	adds	r3, r0, #1
   c23ae:	d102      	bne.n	c23b6 <_write_r+0x1e>
   c23b0:	682b      	ldr	r3, [r5, #0]
   c23b2:	b103      	cbz	r3, c23b6 <_write_r+0x1e>
   c23b4:	6023      	str	r3, [r4, #0]
   c23b6:	bd38      	pop	{r3, r4, r5, pc}
   c23b8:	2003e7f0 	.word	0x2003e7f0

000c23bc <__register_exitproc>:
   c23bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c23c0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; c247c <__register_exitproc+0xc0>
   c23c4:	4606      	mov	r6, r0
   c23c6:	f8d8 0000 	ldr.w	r0, [r8]
   c23ca:	461f      	mov	r7, r3
   c23cc:	460d      	mov	r5, r1
   c23ce:	4691      	mov	r9, r2
   c23d0:	f000 fbe8 	bl	c2ba4 <__retarget_lock_acquire_recursive>
   c23d4:	4b25      	ldr	r3, [pc, #148]	; (c246c <__register_exitproc+0xb0>)
   c23d6:	681c      	ldr	r4, [r3, #0]
   c23d8:	b934      	cbnz	r4, c23e8 <__register_exitproc+0x2c>
   c23da:	4c25      	ldr	r4, [pc, #148]	; (c2470 <__register_exitproc+0xb4>)
   c23dc:	601c      	str	r4, [r3, #0]
   c23de:	4b25      	ldr	r3, [pc, #148]	; (c2474 <__register_exitproc+0xb8>)
   c23e0:	b113      	cbz	r3, c23e8 <__register_exitproc+0x2c>
   c23e2:	681b      	ldr	r3, [r3, #0]
   c23e4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   c23e8:	6863      	ldr	r3, [r4, #4]
   c23ea:	2b1f      	cmp	r3, #31
   c23ec:	dd07      	ble.n	c23fe <__register_exitproc+0x42>
   c23ee:	f8d8 0000 	ldr.w	r0, [r8]
   c23f2:	f000 fbd9 	bl	c2ba8 <__retarget_lock_release_recursive>
   c23f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   c23fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c23fe:	b34e      	cbz	r6, c2454 <__register_exitproc+0x98>
   c2400:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   c2404:	b988      	cbnz	r0, c242a <__register_exitproc+0x6e>
   c2406:	4b1c      	ldr	r3, [pc, #112]	; (c2478 <__register_exitproc+0xbc>)
   c2408:	b923      	cbnz	r3, c2414 <__register_exitproc+0x58>
   c240a:	f8d8 0000 	ldr.w	r0, [r8]
   c240e:	f000 fbca 	bl	c2ba6 <__retarget_lock_release>
   c2412:	e7f0      	b.n	c23f6 <__register_exitproc+0x3a>
   c2414:	f44f 7084 	mov.w	r0, #264	; 0x108
   c2418:	f7fa ff40 	bl	bd29c <malloc>
   c241c:	2800      	cmp	r0, #0
   c241e:	d0f4      	beq.n	c240a <__register_exitproc+0x4e>
   c2420:	2300      	movs	r3, #0
   c2422:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   c2426:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   c242a:	6863      	ldr	r3, [r4, #4]
   c242c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   c2430:	2201      	movs	r2, #1
   c2432:	409a      	lsls	r2, r3
   c2434:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   c2438:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   c243c:	4313      	orrs	r3, r2
   c243e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   c2442:	2e02      	cmp	r6, #2
   c2444:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   c2448:	bf02      	ittt	eq
   c244a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   c244e:	4313      	orreq	r3, r2
   c2450:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   c2454:	6863      	ldr	r3, [r4, #4]
   c2456:	f8d8 0000 	ldr.w	r0, [r8]
   c245a:	1c5a      	adds	r2, r3, #1
   c245c:	3302      	adds	r3, #2
   c245e:	6062      	str	r2, [r4, #4]
   c2460:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   c2464:	f000 fba0 	bl	c2ba8 <__retarget_lock_release_recursive>
   c2468:	2000      	movs	r0, #0
   c246a:	e7c6      	b.n	c23fa <__register_exitproc+0x3e>
   c246c:	2003e7e8 	.word	0x2003e7e8
   c2470:	2003e75c 	.word	0x2003e75c
   c2474:	00000000 	.word	0x00000000
   c2478:	000bd29d 	.word	0x000bd29d
   c247c:	2003d6f0 	.word	0x2003d6f0

000c2480 <_close_r>:
   c2480:	b538      	push	{r3, r4, r5, lr}
   c2482:	4d06      	ldr	r5, [pc, #24]	; (c249c <_close_r+0x1c>)
   c2484:	2300      	movs	r3, #0
   c2486:	4604      	mov	r4, r0
   c2488:	4608      	mov	r0, r1
   c248a:	602b      	str	r3, [r5, #0]
   c248c:	f7fa fcb2 	bl	bcdf4 <_close>
   c2490:	1c43      	adds	r3, r0, #1
   c2492:	d102      	bne.n	c249a <_close_r+0x1a>
   c2494:	682b      	ldr	r3, [r5, #0]
   c2496:	b103      	cbz	r3, c249a <_close_r+0x1a>
   c2498:	6023      	str	r3, [r4, #0]
   c249a:	bd38      	pop	{r3, r4, r5, pc}
   c249c:	2003e7f0 	.word	0x2003e7f0

000c24a0 <_fstat_r>:
   c24a0:	b538      	push	{r3, r4, r5, lr}
   c24a2:	4d07      	ldr	r5, [pc, #28]	; (c24c0 <_fstat_r+0x20>)
   c24a4:	2300      	movs	r3, #0
   c24a6:	4604      	mov	r4, r0
   c24a8:	4608      	mov	r0, r1
   c24aa:	4611      	mov	r1, r2
   c24ac:	602b      	str	r3, [r5, #0]
   c24ae:	f7fa fca9 	bl	bce04 <_fstat>
   c24b2:	1c43      	adds	r3, r0, #1
   c24b4:	d102      	bne.n	c24bc <_fstat_r+0x1c>
   c24b6:	682b      	ldr	r3, [r5, #0]
   c24b8:	b103      	cbz	r3, c24bc <_fstat_r+0x1c>
   c24ba:	6023      	str	r3, [r4, #0]
   c24bc:	bd38      	pop	{r3, r4, r5, pc}
   c24be:	bf00      	nop
   c24c0:	2003e7f0 	.word	0x2003e7f0

000c24c4 <rshift>:
   c24c4:	6903      	ldr	r3, [r0, #16]
   c24c6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   c24ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   c24ce:	ea4f 1261 	mov.w	r2, r1, asr #5
   c24d2:	f100 0414 	add.w	r4, r0, #20
   c24d6:	dd45      	ble.n	c2564 <rshift+0xa0>
   c24d8:	f011 011f 	ands.w	r1, r1, #31
   c24dc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   c24e0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   c24e4:	d10c      	bne.n	c2500 <rshift+0x3c>
   c24e6:	f100 0710 	add.w	r7, r0, #16
   c24ea:	4629      	mov	r1, r5
   c24ec:	42b1      	cmp	r1, r6
   c24ee:	d334      	bcc.n	c255a <rshift+0x96>
   c24f0:	1a9b      	subs	r3, r3, r2
   c24f2:	009b      	lsls	r3, r3, #2
   c24f4:	1eea      	subs	r2, r5, #3
   c24f6:	4296      	cmp	r6, r2
   c24f8:	bf38      	it	cc
   c24fa:	2300      	movcc	r3, #0
   c24fc:	4423      	add	r3, r4
   c24fe:	e015      	b.n	c252c <rshift+0x68>
   c2500:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   c2504:	f1c1 0820 	rsb	r8, r1, #32
   c2508:	40cf      	lsrs	r7, r1
   c250a:	f105 0e04 	add.w	lr, r5, #4
   c250e:	46a1      	mov	r9, r4
   c2510:	4576      	cmp	r6, lr
   c2512:	46f4      	mov	ip, lr
   c2514:	d815      	bhi.n	c2542 <rshift+0x7e>
   c2516:	1a9a      	subs	r2, r3, r2
   c2518:	0092      	lsls	r2, r2, #2
   c251a:	3a04      	subs	r2, #4
   c251c:	3501      	adds	r5, #1
   c251e:	42ae      	cmp	r6, r5
   c2520:	bf38      	it	cc
   c2522:	2200      	movcc	r2, #0
   c2524:	18a3      	adds	r3, r4, r2
   c2526:	50a7      	str	r7, [r4, r2]
   c2528:	b107      	cbz	r7, c252c <rshift+0x68>
   c252a:	3304      	adds	r3, #4
   c252c:	1b1a      	subs	r2, r3, r4
   c252e:	42a3      	cmp	r3, r4
   c2530:	ea4f 02a2 	mov.w	r2, r2, asr #2
   c2534:	bf08      	it	eq
   c2536:	2300      	moveq	r3, #0
   c2538:	6102      	str	r2, [r0, #16]
   c253a:	bf08      	it	eq
   c253c:	6143      	streq	r3, [r0, #20]
   c253e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c2542:	f8dc c000 	ldr.w	ip, [ip]
   c2546:	fa0c fc08 	lsl.w	ip, ip, r8
   c254a:	ea4c 0707 	orr.w	r7, ip, r7
   c254e:	f849 7b04 	str.w	r7, [r9], #4
   c2552:	f85e 7b04 	ldr.w	r7, [lr], #4
   c2556:	40cf      	lsrs	r7, r1
   c2558:	e7da      	b.n	c2510 <rshift+0x4c>
   c255a:	f851 cb04 	ldr.w	ip, [r1], #4
   c255e:	f847 cf04 	str.w	ip, [r7, #4]!
   c2562:	e7c3      	b.n	c24ec <rshift+0x28>
   c2564:	4623      	mov	r3, r4
   c2566:	e7e1      	b.n	c252c <rshift+0x68>

000c2568 <__hexdig_fun>:
   c2568:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   c256c:	2b09      	cmp	r3, #9
   c256e:	d802      	bhi.n	c2576 <__hexdig_fun+0xe>
   c2570:	3820      	subs	r0, #32
   c2572:	b2c0      	uxtb	r0, r0
   c2574:	4770      	bx	lr
   c2576:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   c257a:	2b05      	cmp	r3, #5
   c257c:	d801      	bhi.n	c2582 <__hexdig_fun+0x1a>
   c257e:	3847      	subs	r0, #71	; 0x47
   c2580:	e7f7      	b.n	c2572 <__hexdig_fun+0xa>
   c2582:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   c2586:	2b05      	cmp	r3, #5
   c2588:	d801      	bhi.n	c258e <__hexdig_fun+0x26>
   c258a:	3827      	subs	r0, #39	; 0x27
   c258c:	e7f1      	b.n	c2572 <__hexdig_fun+0xa>
   c258e:	2000      	movs	r0, #0
   c2590:	4770      	bx	lr
	...

000c2594 <__gethex>:
   c2594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c2598:	ed2d 8b02 	vpush	{d8}
   c259c:	b089      	sub	sp, #36	; 0x24
   c259e:	ee08 0a10 	vmov	s16, r0
   c25a2:	9304      	str	r3, [sp, #16]
   c25a4:	4bb4      	ldr	r3, [pc, #720]	; (c2878 <__gethex+0x2e4>)
   c25a6:	681b      	ldr	r3, [r3, #0]
   c25a8:	9301      	str	r3, [sp, #4]
   c25aa:	4618      	mov	r0, r3
   c25ac:	468b      	mov	fp, r1
   c25ae:	4690      	mov	r8, r2
   c25b0:	f7fe ff1d 	bl	c13ee <strlen>
   c25b4:	9b01      	ldr	r3, [sp, #4]
   c25b6:	f8db 2000 	ldr.w	r2, [fp]
   c25ba:	4403      	add	r3, r0
   c25bc:	4682      	mov	sl, r0
   c25be:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   c25c2:	9305      	str	r3, [sp, #20]
   c25c4:	1c93      	adds	r3, r2, #2
   c25c6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   c25ca:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   c25ce:	32fe      	adds	r2, #254	; 0xfe
   c25d0:	18d1      	adds	r1, r2, r3
   c25d2:	461f      	mov	r7, r3
   c25d4:	f813 0b01 	ldrb.w	r0, [r3], #1
   c25d8:	9100      	str	r1, [sp, #0]
   c25da:	2830      	cmp	r0, #48	; 0x30
   c25dc:	d0f8      	beq.n	c25d0 <__gethex+0x3c>
   c25de:	f7ff ffc3 	bl	c2568 <__hexdig_fun>
   c25e2:	4604      	mov	r4, r0
   c25e4:	2800      	cmp	r0, #0
   c25e6:	d13a      	bne.n	c265e <__gethex+0xca>
   c25e8:	9901      	ldr	r1, [sp, #4]
   c25ea:	4652      	mov	r2, sl
   c25ec:	4638      	mov	r0, r7
   c25ee:	f7fe ff06 	bl	c13fe <strncmp>
   c25f2:	4605      	mov	r5, r0
   c25f4:	2800      	cmp	r0, #0
   c25f6:	d168      	bne.n	c26ca <__gethex+0x136>
   c25f8:	f817 000a 	ldrb.w	r0, [r7, sl]
   c25fc:	eb07 060a 	add.w	r6, r7, sl
   c2600:	f7ff ffb2 	bl	c2568 <__hexdig_fun>
   c2604:	2800      	cmp	r0, #0
   c2606:	d062      	beq.n	c26ce <__gethex+0x13a>
   c2608:	4633      	mov	r3, r6
   c260a:	7818      	ldrb	r0, [r3, #0]
   c260c:	2830      	cmp	r0, #48	; 0x30
   c260e:	461f      	mov	r7, r3
   c2610:	f103 0301 	add.w	r3, r3, #1
   c2614:	d0f9      	beq.n	c260a <__gethex+0x76>
   c2616:	f7ff ffa7 	bl	c2568 <__hexdig_fun>
   c261a:	2301      	movs	r3, #1
   c261c:	fab0 f480 	clz	r4, r0
   c2620:	0964      	lsrs	r4, r4, #5
   c2622:	4635      	mov	r5, r6
   c2624:	9300      	str	r3, [sp, #0]
   c2626:	463a      	mov	r2, r7
   c2628:	4616      	mov	r6, r2
   c262a:	3201      	adds	r2, #1
   c262c:	7830      	ldrb	r0, [r6, #0]
   c262e:	f7ff ff9b 	bl	c2568 <__hexdig_fun>
   c2632:	2800      	cmp	r0, #0
   c2634:	d1f8      	bne.n	c2628 <__gethex+0x94>
   c2636:	9901      	ldr	r1, [sp, #4]
   c2638:	4652      	mov	r2, sl
   c263a:	4630      	mov	r0, r6
   c263c:	f7fe fedf 	bl	c13fe <strncmp>
   c2640:	b980      	cbnz	r0, c2664 <__gethex+0xd0>
   c2642:	b94d      	cbnz	r5, c2658 <__gethex+0xc4>
   c2644:	eb06 050a 	add.w	r5, r6, sl
   c2648:	462a      	mov	r2, r5
   c264a:	4616      	mov	r6, r2
   c264c:	3201      	adds	r2, #1
   c264e:	7830      	ldrb	r0, [r6, #0]
   c2650:	f7ff ff8a 	bl	c2568 <__hexdig_fun>
   c2654:	2800      	cmp	r0, #0
   c2656:	d1f8      	bne.n	c264a <__gethex+0xb6>
   c2658:	1bad      	subs	r5, r5, r6
   c265a:	00ad      	lsls	r5, r5, #2
   c265c:	e004      	b.n	c2668 <__gethex+0xd4>
   c265e:	2400      	movs	r4, #0
   c2660:	4625      	mov	r5, r4
   c2662:	e7e0      	b.n	c2626 <__gethex+0x92>
   c2664:	2d00      	cmp	r5, #0
   c2666:	d1f7      	bne.n	c2658 <__gethex+0xc4>
   c2668:	7833      	ldrb	r3, [r6, #0]
   c266a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   c266e:	2b50      	cmp	r3, #80	; 0x50
   c2670:	d13b      	bne.n	c26ea <__gethex+0x156>
   c2672:	7873      	ldrb	r3, [r6, #1]
   c2674:	2b2b      	cmp	r3, #43	; 0x2b
   c2676:	d02c      	beq.n	c26d2 <__gethex+0x13e>
   c2678:	2b2d      	cmp	r3, #45	; 0x2d
   c267a:	d02e      	beq.n	c26da <__gethex+0x146>
   c267c:	1c71      	adds	r1, r6, #1
   c267e:	f04f 0900 	mov.w	r9, #0
   c2682:	7808      	ldrb	r0, [r1, #0]
   c2684:	f7ff ff70 	bl	c2568 <__hexdig_fun>
   c2688:	1e43      	subs	r3, r0, #1
   c268a:	b2db      	uxtb	r3, r3
   c268c:	2b18      	cmp	r3, #24
   c268e:	d82c      	bhi.n	c26ea <__gethex+0x156>
   c2690:	f1a0 0210 	sub.w	r2, r0, #16
   c2694:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   c2698:	f7ff ff66 	bl	c2568 <__hexdig_fun>
   c269c:	1e43      	subs	r3, r0, #1
   c269e:	b2db      	uxtb	r3, r3
   c26a0:	2b18      	cmp	r3, #24
   c26a2:	d91d      	bls.n	c26e0 <__gethex+0x14c>
   c26a4:	f1b9 0f00 	cmp.w	r9, #0
   c26a8:	d000      	beq.n	c26ac <__gethex+0x118>
   c26aa:	4252      	negs	r2, r2
   c26ac:	4415      	add	r5, r2
   c26ae:	f8cb 1000 	str.w	r1, [fp]
   c26b2:	b1e4      	cbz	r4, c26ee <__gethex+0x15a>
   c26b4:	9b00      	ldr	r3, [sp, #0]
   c26b6:	2b00      	cmp	r3, #0
   c26b8:	bf14      	ite	ne
   c26ba:	2700      	movne	r7, #0
   c26bc:	2706      	moveq	r7, #6
   c26be:	4638      	mov	r0, r7
   c26c0:	b009      	add	sp, #36	; 0x24
   c26c2:	ecbd 8b02 	vpop	{d8}
   c26c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c26ca:	463e      	mov	r6, r7
   c26cc:	4625      	mov	r5, r4
   c26ce:	2401      	movs	r4, #1
   c26d0:	e7ca      	b.n	c2668 <__gethex+0xd4>
   c26d2:	f04f 0900 	mov.w	r9, #0
   c26d6:	1cb1      	adds	r1, r6, #2
   c26d8:	e7d3      	b.n	c2682 <__gethex+0xee>
   c26da:	f04f 0901 	mov.w	r9, #1
   c26de:	e7fa      	b.n	c26d6 <__gethex+0x142>
   c26e0:	230a      	movs	r3, #10
   c26e2:	fb03 0202 	mla	r2, r3, r2, r0
   c26e6:	3a10      	subs	r2, #16
   c26e8:	e7d4      	b.n	c2694 <__gethex+0x100>
   c26ea:	4631      	mov	r1, r6
   c26ec:	e7df      	b.n	c26ae <__gethex+0x11a>
   c26ee:	1bf3      	subs	r3, r6, r7
   c26f0:	3b01      	subs	r3, #1
   c26f2:	4621      	mov	r1, r4
   c26f4:	2b07      	cmp	r3, #7
   c26f6:	dc0b      	bgt.n	c2710 <__gethex+0x17c>
   c26f8:	ee18 0a10 	vmov	r0, s16
   c26fc:	f000 fa7a 	bl	c2bf4 <_Balloc>
   c2700:	4604      	mov	r4, r0
   c2702:	b940      	cbnz	r0, c2716 <__gethex+0x182>
   c2704:	4b5d      	ldr	r3, [pc, #372]	; (c287c <__gethex+0x2e8>)
   c2706:	4602      	mov	r2, r0
   c2708:	21de      	movs	r1, #222	; 0xde
   c270a:	485d      	ldr	r0, [pc, #372]	; (c2880 <__gethex+0x2ec>)
   c270c:	f7fa fe16 	bl	bd33c <__assert_func>
   c2710:	3101      	adds	r1, #1
   c2712:	105b      	asrs	r3, r3, #1
   c2714:	e7ee      	b.n	c26f4 <__gethex+0x160>
   c2716:	f100 0914 	add.w	r9, r0, #20
   c271a:	f04f 0b00 	mov.w	fp, #0
   c271e:	f1ca 0301 	rsb	r3, sl, #1
   c2722:	f8cd 9008 	str.w	r9, [sp, #8]
   c2726:	f8cd b000 	str.w	fp, [sp]
   c272a:	9306      	str	r3, [sp, #24]
   c272c:	42b7      	cmp	r7, r6
   c272e:	d340      	bcc.n	c27b2 <__gethex+0x21e>
   c2730:	9802      	ldr	r0, [sp, #8]
   c2732:	9b00      	ldr	r3, [sp, #0]
   c2734:	f840 3b04 	str.w	r3, [r0], #4
   c2738:	eba0 0009 	sub.w	r0, r0, r9
   c273c:	1080      	asrs	r0, r0, #2
   c273e:	0146      	lsls	r6, r0, #5
   c2740:	6120      	str	r0, [r4, #16]
   c2742:	4618      	mov	r0, r3
   c2744:	f000 fb48 	bl	c2dd8 <__hi0bits>
   c2748:	1a30      	subs	r0, r6, r0
   c274a:	f8d8 6000 	ldr.w	r6, [r8]
   c274e:	42b0      	cmp	r0, r6
   c2750:	dd63      	ble.n	c281a <__gethex+0x286>
   c2752:	1b87      	subs	r7, r0, r6
   c2754:	4639      	mov	r1, r7
   c2756:	4620      	mov	r0, r4
   c2758:	f000 feec 	bl	c3534 <__any_on>
   c275c:	4682      	mov	sl, r0
   c275e:	b1a8      	cbz	r0, c278c <__gethex+0x1f8>
   c2760:	1e7b      	subs	r3, r7, #1
   c2762:	1159      	asrs	r1, r3, #5
   c2764:	f003 021f 	and.w	r2, r3, #31
   c2768:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   c276c:	f04f 0a01 	mov.w	sl, #1
   c2770:	fa0a f202 	lsl.w	r2, sl, r2
   c2774:	420a      	tst	r2, r1
   c2776:	d009      	beq.n	c278c <__gethex+0x1f8>
   c2778:	4553      	cmp	r3, sl
   c277a:	dd05      	ble.n	c2788 <__gethex+0x1f4>
   c277c:	1eb9      	subs	r1, r7, #2
   c277e:	4620      	mov	r0, r4
   c2780:	f000 fed8 	bl	c3534 <__any_on>
   c2784:	2800      	cmp	r0, #0
   c2786:	d145      	bne.n	c2814 <__gethex+0x280>
   c2788:	f04f 0a02 	mov.w	sl, #2
   c278c:	4639      	mov	r1, r7
   c278e:	4620      	mov	r0, r4
   c2790:	f7ff fe98 	bl	c24c4 <rshift>
   c2794:	443d      	add	r5, r7
   c2796:	f8d8 3008 	ldr.w	r3, [r8, #8]
   c279a:	42ab      	cmp	r3, r5
   c279c:	da4c      	bge.n	c2838 <__gethex+0x2a4>
   c279e:	ee18 0a10 	vmov	r0, s16
   c27a2:	4621      	mov	r1, r4
   c27a4:	f000 fa66 	bl	c2c74 <_Bfree>
   c27a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
   c27aa:	2300      	movs	r3, #0
   c27ac:	6013      	str	r3, [r2, #0]
   c27ae:	27a3      	movs	r7, #163	; 0xa3
   c27b0:	e785      	b.n	c26be <__gethex+0x12a>
   c27b2:	1e73      	subs	r3, r6, #1
   c27b4:	9a05      	ldr	r2, [sp, #20]
   c27b6:	9303      	str	r3, [sp, #12]
   c27b8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   c27bc:	4293      	cmp	r3, r2
   c27be:	d019      	beq.n	c27f4 <__gethex+0x260>
   c27c0:	f1bb 0f20 	cmp.w	fp, #32
   c27c4:	d107      	bne.n	c27d6 <__gethex+0x242>
   c27c6:	9b02      	ldr	r3, [sp, #8]
   c27c8:	9a00      	ldr	r2, [sp, #0]
   c27ca:	f843 2b04 	str.w	r2, [r3], #4
   c27ce:	9302      	str	r3, [sp, #8]
   c27d0:	2300      	movs	r3, #0
   c27d2:	9300      	str	r3, [sp, #0]
   c27d4:	469b      	mov	fp, r3
   c27d6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   c27da:	f7ff fec5 	bl	c2568 <__hexdig_fun>
   c27de:	9b00      	ldr	r3, [sp, #0]
   c27e0:	f000 000f 	and.w	r0, r0, #15
   c27e4:	fa00 f00b 	lsl.w	r0, r0, fp
   c27e8:	4303      	orrs	r3, r0
   c27ea:	9300      	str	r3, [sp, #0]
   c27ec:	f10b 0b04 	add.w	fp, fp, #4
   c27f0:	9b03      	ldr	r3, [sp, #12]
   c27f2:	e00d      	b.n	c2810 <__gethex+0x27c>
   c27f4:	9b03      	ldr	r3, [sp, #12]
   c27f6:	9a06      	ldr	r2, [sp, #24]
   c27f8:	4413      	add	r3, r2
   c27fa:	42bb      	cmp	r3, r7
   c27fc:	d3e0      	bcc.n	c27c0 <__gethex+0x22c>
   c27fe:	4618      	mov	r0, r3
   c2800:	9901      	ldr	r1, [sp, #4]
   c2802:	9307      	str	r3, [sp, #28]
   c2804:	4652      	mov	r2, sl
   c2806:	f7fe fdfa 	bl	c13fe <strncmp>
   c280a:	9b07      	ldr	r3, [sp, #28]
   c280c:	2800      	cmp	r0, #0
   c280e:	d1d7      	bne.n	c27c0 <__gethex+0x22c>
   c2810:	461e      	mov	r6, r3
   c2812:	e78b      	b.n	c272c <__gethex+0x198>
   c2814:	f04f 0a03 	mov.w	sl, #3
   c2818:	e7b8      	b.n	c278c <__gethex+0x1f8>
   c281a:	da0a      	bge.n	c2832 <__gethex+0x29e>
   c281c:	1a37      	subs	r7, r6, r0
   c281e:	4621      	mov	r1, r4
   c2820:	ee18 0a10 	vmov	r0, s16
   c2824:	463a      	mov	r2, r7
   c2826:	f000 fc41 	bl	c30ac <__lshift>
   c282a:	1bed      	subs	r5, r5, r7
   c282c:	4604      	mov	r4, r0
   c282e:	f100 0914 	add.w	r9, r0, #20
   c2832:	f04f 0a00 	mov.w	sl, #0
   c2836:	e7ae      	b.n	c2796 <__gethex+0x202>
   c2838:	f8d8 0004 	ldr.w	r0, [r8, #4]
   c283c:	42a8      	cmp	r0, r5
   c283e:	dd72      	ble.n	c2926 <__gethex+0x392>
   c2840:	1b45      	subs	r5, r0, r5
   c2842:	42ae      	cmp	r6, r5
   c2844:	dc36      	bgt.n	c28b4 <__gethex+0x320>
   c2846:	f8d8 300c 	ldr.w	r3, [r8, #12]
   c284a:	2b02      	cmp	r3, #2
   c284c:	d02a      	beq.n	c28a4 <__gethex+0x310>
   c284e:	2b03      	cmp	r3, #3
   c2850:	d02c      	beq.n	c28ac <__gethex+0x318>
   c2852:	2b01      	cmp	r3, #1
   c2854:	d11c      	bne.n	c2890 <__gethex+0x2fc>
   c2856:	42ae      	cmp	r6, r5
   c2858:	d11a      	bne.n	c2890 <__gethex+0x2fc>
   c285a:	2e01      	cmp	r6, #1
   c285c:	d112      	bne.n	c2884 <__gethex+0x2f0>
   c285e:	9a04      	ldr	r2, [sp, #16]
   c2860:	f8d8 3004 	ldr.w	r3, [r8, #4]
   c2864:	6013      	str	r3, [r2, #0]
   c2866:	2301      	movs	r3, #1
   c2868:	6123      	str	r3, [r4, #16]
   c286a:	f8c9 3000 	str.w	r3, [r9]
   c286e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   c2870:	2762      	movs	r7, #98	; 0x62
   c2872:	601c      	str	r4, [r3, #0]
   c2874:	e723      	b.n	c26be <__gethex+0x12a>
   c2876:	bf00      	nop
   c2878:	000c58cc 	.word	0x000c58cc
   c287c:	000c5859 	.word	0x000c5859
   c2880:	000c586a 	.word	0x000c586a
   c2884:	1e71      	subs	r1, r6, #1
   c2886:	4620      	mov	r0, r4
   c2888:	f000 fe54 	bl	c3534 <__any_on>
   c288c:	2800      	cmp	r0, #0
   c288e:	d1e6      	bne.n	c285e <__gethex+0x2ca>
   c2890:	ee18 0a10 	vmov	r0, s16
   c2894:	4621      	mov	r1, r4
   c2896:	f000 f9ed 	bl	c2c74 <_Bfree>
   c289a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   c289c:	2300      	movs	r3, #0
   c289e:	6013      	str	r3, [r2, #0]
   c28a0:	2750      	movs	r7, #80	; 0x50
   c28a2:	e70c      	b.n	c26be <__gethex+0x12a>
   c28a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c28a6:	2b00      	cmp	r3, #0
   c28a8:	d1f2      	bne.n	c2890 <__gethex+0x2fc>
   c28aa:	e7d8      	b.n	c285e <__gethex+0x2ca>
   c28ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c28ae:	2b00      	cmp	r3, #0
   c28b0:	d1d5      	bne.n	c285e <__gethex+0x2ca>
   c28b2:	e7ed      	b.n	c2890 <__gethex+0x2fc>
   c28b4:	1e6f      	subs	r7, r5, #1
   c28b6:	f1ba 0f00 	cmp.w	sl, #0
   c28ba:	d131      	bne.n	c2920 <__gethex+0x38c>
   c28bc:	b127      	cbz	r7, c28c8 <__gethex+0x334>
   c28be:	4639      	mov	r1, r7
   c28c0:	4620      	mov	r0, r4
   c28c2:	f000 fe37 	bl	c3534 <__any_on>
   c28c6:	4682      	mov	sl, r0
   c28c8:	117b      	asrs	r3, r7, #5
   c28ca:	2101      	movs	r1, #1
   c28cc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   c28d0:	f007 071f 	and.w	r7, r7, #31
   c28d4:	fa01 f707 	lsl.w	r7, r1, r7
   c28d8:	421f      	tst	r7, r3
   c28da:	4629      	mov	r1, r5
   c28dc:	4620      	mov	r0, r4
   c28de:	bf18      	it	ne
   c28e0:	f04a 0a02 	orrne.w	sl, sl, #2
   c28e4:	1b76      	subs	r6, r6, r5
   c28e6:	f7ff fded 	bl	c24c4 <rshift>
   c28ea:	f8d8 5004 	ldr.w	r5, [r8, #4]
   c28ee:	2702      	movs	r7, #2
   c28f0:	f1ba 0f00 	cmp.w	sl, #0
   c28f4:	d048      	beq.n	c2988 <__gethex+0x3f4>
   c28f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
   c28fa:	2b02      	cmp	r3, #2
   c28fc:	d015      	beq.n	c292a <__gethex+0x396>
   c28fe:	2b03      	cmp	r3, #3
   c2900:	d017      	beq.n	c2932 <__gethex+0x39e>
   c2902:	2b01      	cmp	r3, #1
   c2904:	d109      	bne.n	c291a <__gethex+0x386>
   c2906:	f01a 0f02 	tst.w	sl, #2
   c290a:	d006      	beq.n	c291a <__gethex+0x386>
   c290c:	f8d9 0000 	ldr.w	r0, [r9]
   c2910:	ea4a 0a00 	orr.w	sl, sl, r0
   c2914:	f01a 0f01 	tst.w	sl, #1
   c2918:	d10e      	bne.n	c2938 <__gethex+0x3a4>
   c291a:	f047 0710 	orr.w	r7, r7, #16
   c291e:	e033      	b.n	c2988 <__gethex+0x3f4>
   c2920:	f04f 0a01 	mov.w	sl, #1
   c2924:	e7d0      	b.n	c28c8 <__gethex+0x334>
   c2926:	2701      	movs	r7, #1
   c2928:	e7e2      	b.n	c28f0 <__gethex+0x35c>
   c292a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c292c:	f1c3 0301 	rsb	r3, r3, #1
   c2930:	9315      	str	r3, [sp, #84]	; 0x54
   c2932:	9b15      	ldr	r3, [sp, #84]	; 0x54
   c2934:	2b00      	cmp	r3, #0
   c2936:	d0f0      	beq.n	c291a <__gethex+0x386>
   c2938:	f8d4 b010 	ldr.w	fp, [r4, #16]
   c293c:	f104 0314 	add.w	r3, r4, #20
   c2940:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   c2944:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   c2948:	f04f 0c00 	mov.w	ip, #0
   c294c:	4618      	mov	r0, r3
   c294e:	f853 2b04 	ldr.w	r2, [r3], #4
   c2952:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   c2956:	d01c      	beq.n	c2992 <__gethex+0x3fe>
   c2958:	3201      	adds	r2, #1
   c295a:	6002      	str	r2, [r0, #0]
   c295c:	2f02      	cmp	r7, #2
   c295e:	f104 0314 	add.w	r3, r4, #20
   c2962:	d13f      	bne.n	c29e4 <__gethex+0x450>
   c2964:	f8d8 2000 	ldr.w	r2, [r8]
   c2968:	3a01      	subs	r2, #1
   c296a:	42b2      	cmp	r2, r6
   c296c:	d10a      	bne.n	c2984 <__gethex+0x3f0>
   c296e:	1171      	asrs	r1, r6, #5
   c2970:	2201      	movs	r2, #1
   c2972:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   c2976:	f006 061f 	and.w	r6, r6, #31
   c297a:	fa02 f606 	lsl.w	r6, r2, r6
   c297e:	421e      	tst	r6, r3
   c2980:	bf18      	it	ne
   c2982:	4617      	movne	r7, r2
   c2984:	f047 0720 	orr.w	r7, r7, #32
   c2988:	9b14      	ldr	r3, [sp, #80]	; 0x50
   c298a:	601c      	str	r4, [r3, #0]
   c298c:	9b04      	ldr	r3, [sp, #16]
   c298e:	601d      	str	r5, [r3, #0]
   c2990:	e695      	b.n	c26be <__gethex+0x12a>
   c2992:	4299      	cmp	r1, r3
   c2994:	f843 cc04 	str.w	ip, [r3, #-4]
   c2998:	d8d8      	bhi.n	c294c <__gethex+0x3b8>
   c299a:	68a3      	ldr	r3, [r4, #8]
   c299c:	459b      	cmp	fp, r3
   c299e:	db19      	blt.n	c29d4 <__gethex+0x440>
   c29a0:	6861      	ldr	r1, [r4, #4]
   c29a2:	ee18 0a10 	vmov	r0, s16
   c29a6:	3101      	adds	r1, #1
   c29a8:	f000 f924 	bl	c2bf4 <_Balloc>
   c29ac:	4681      	mov	r9, r0
   c29ae:	b918      	cbnz	r0, c29b8 <__gethex+0x424>
   c29b0:	4b1a      	ldr	r3, [pc, #104]	; (c2a1c <__gethex+0x488>)
   c29b2:	4602      	mov	r2, r0
   c29b4:	2184      	movs	r1, #132	; 0x84
   c29b6:	e6a8      	b.n	c270a <__gethex+0x176>
   c29b8:	6922      	ldr	r2, [r4, #16]
   c29ba:	3202      	adds	r2, #2
   c29bc:	f104 010c 	add.w	r1, r4, #12
   c29c0:	0092      	lsls	r2, r2, #2
   c29c2:	300c      	adds	r0, #12
   c29c4:	f7fe fc20 	bl	c1208 <memcpy>
   c29c8:	4621      	mov	r1, r4
   c29ca:	ee18 0a10 	vmov	r0, s16
   c29ce:	f000 f951 	bl	c2c74 <_Bfree>
   c29d2:	464c      	mov	r4, r9
   c29d4:	6923      	ldr	r3, [r4, #16]
   c29d6:	1c5a      	adds	r2, r3, #1
   c29d8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   c29dc:	6122      	str	r2, [r4, #16]
   c29de:	2201      	movs	r2, #1
   c29e0:	615a      	str	r2, [r3, #20]
   c29e2:	e7bb      	b.n	c295c <__gethex+0x3c8>
   c29e4:	6922      	ldr	r2, [r4, #16]
   c29e6:	455a      	cmp	r2, fp
   c29e8:	dd0b      	ble.n	c2a02 <__gethex+0x46e>
   c29ea:	2101      	movs	r1, #1
   c29ec:	4620      	mov	r0, r4
   c29ee:	f7ff fd69 	bl	c24c4 <rshift>
   c29f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   c29f6:	3501      	adds	r5, #1
   c29f8:	42ab      	cmp	r3, r5
   c29fa:	f6ff aed0 	blt.w	c279e <__gethex+0x20a>
   c29fe:	2701      	movs	r7, #1
   c2a00:	e7c0      	b.n	c2984 <__gethex+0x3f0>
   c2a02:	f016 061f 	ands.w	r6, r6, #31
   c2a06:	d0fa      	beq.n	c29fe <__gethex+0x46a>
   c2a08:	4453      	add	r3, sl
   c2a0a:	f1c6 0620 	rsb	r6, r6, #32
   c2a0e:	f853 0c04 	ldr.w	r0, [r3, #-4]
   c2a12:	f000 f9e1 	bl	c2dd8 <__hi0bits>
   c2a16:	42b0      	cmp	r0, r6
   c2a18:	dbe7      	blt.n	c29ea <__gethex+0x456>
   c2a1a:	e7f0      	b.n	c29fe <__gethex+0x46a>
   c2a1c:	000c5859 	.word	0x000c5859

000c2a20 <L_shift>:
   c2a20:	f1c2 0208 	rsb	r2, r2, #8
   c2a24:	0092      	lsls	r2, r2, #2
   c2a26:	b570      	push	{r4, r5, r6, lr}
   c2a28:	f1c2 0620 	rsb	r6, r2, #32
   c2a2c:	6843      	ldr	r3, [r0, #4]
   c2a2e:	6804      	ldr	r4, [r0, #0]
   c2a30:	fa03 f506 	lsl.w	r5, r3, r6
   c2a34:	432c      	orrs	r4, r5
   c2a36:	40d3      	lsrs	r3, r2
   c2a38:	6004      	str	r4, [r0, #0]
   c2a3a:	f840 3f04 	str.w	r3, [r0, #4]!
   c2a3e:	4288      	cmp	r0, r1
   c2a40:	d3f4      	bcc.n	c2a2c <L_shift+0xc>
   c2a42:	bd70      	pop	{r4, r5, r6, pc}

000c2a44 <__match>:
   c2a44:	b530      	push	{r4, r5, lr}
   c2a46:	6803      	ldr	r3, [r0, #0]
   c2a48:	3301      	adds	r3, #1
   c2a4a:	f811 4b01 	ldrb.w	r4, [r1], #1
   c2a4e:	b914      	cbnz	r4, c2a56 <__match+0x12>
   c2a50:	6003      	str	r3, [r0, #0]
   c2a52:	2001      	movs	r0, #1
   c2a54:	bd30      	pop	{r4, r5, pc}
   c2a56:	f813 2b01 	ldrb.w	r2, [r3], #1
   c2a5a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   c2a5e:	2d19      	cmp	r5, #25
   c2a60:	bf98      	it	ls
   c2a62:	3220      	addls	r2, #32
   c2a64:	42a2      	cmp	r2, r4
   c2a66:	d0f0      	beq.n	c2a4a <__match+0x6>
   c2a68:	2000      	movs	r0, #0
   c2a6a:	e7f3      	b.n	c2a54 <__match+0x10>

000c2a6c <__hexnan>:
   c2a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c2a70:	680b      	ldr	r3, [r1, #0]
   c2a72:	115e      	asrs	r6, r3, #5
   c2a74:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   c2a78:	f013 031f 	ands.w	r3, r3, #31
   c2a7c:	b087      	sub	sp, #28
   c2a7e:	bf18      	it	ne
   c2a80:	3604      	addne	r6, #4
   c2a82:	2500      	movs	r5, #0
   c2a84:	1f37      	subs	r7, r6, #4
   c2a86:	4690      	mov	r8, r2
   c2a88:	6802      	ldr	r2, [r0, #0]
   c2a8a:	9301      	str	r3, [sp, #4]
   c2a8c:	4682      	mov	sl, r0
   c2a8e:	f846 5c04 	str.w	r5, [r6, #-4]
   c2a92:	46b9      	mov	r9, r7
   c2a94:	463c      	mov	r4, r7
   c2a96:	9502      	str	r5, [sp, #8]
   c2a98:	46ab      	mov	fp, r5
   c2a9a:	7851      	ldrb	r1, [r2, #1]
   c2a9c:	1c53      	adds	r3, r2, #1
   c2a9e:	9303      	str	r3, [sp, #12]
   c2aa0:	b341      	cbz	r1, c2af4 <__hexnan+0x88>
   c2aa2:	4608      	mov	r0, r1
   c2aa4:	9205      	str	r2, [sp, #20]
   c2aa6:	9104      	str	r1, [sp, #16]
   c2aa8:	f7ff fd5e 	bl	c2568 <__hexdig_fun>
   c2aac:	2800      	cmp	r0, #0
   c2aae:	d14f      	bne.n	c2b50 <__hexnan+0xe4>
   c2ab0:	9904      	ldr	r1, [sp, #16]
   c2ab2:	9a05      	ldr	r2, [sp, #20]
   c2ab4:	2920      	cmp	r1, #32
   c2ab6:	d818      	bhi.n	c2aea <__hexnan+0x7e>
   c2ab8:	9b02      	ldr	r3, [sp, #8]
   c2aba:	459b      	cmp	fp, r3
   c2abc:	dd13      	ble.n	c2ae6 <__hexnan+0x7a>
   c2abe:	454c      	cmp	r4, r9
   c2ac0:	d206      	bcs.n	c2ad0 <__hexnan+0x64>
   c2ac2:	2d07      	cmp	r5, #7
   c2ac4:	dc04      	bgt.n	c2ad0 <__hexnan+0x64>
   c2ac6:	462a      	mov	r2, r5
   c2ac8:	4649      	mov	r1, r9
   c2aca:	4620      	mov	r0, r4
   c2acc:	f7ff ffa8 	bl	c2a20 <L_shift>
   c2ad0:	4544      	cmp	r4, r8
   c2ad2:	d950      	bls.n	c2b76 <__hexnan+0x10a>
   c2ad4:	2300      	movs	r3, #0
   c2ad6:	f1a4 0904 	sub.w	r9, r4, #4
   c2ada:	f844 3c04 	str.w	r3, [r4, #-4]
   c2ade:	f8cd b008 	str.w	fp, [sp, #8]
   c2ae2:	464c      	mov	r4, r9
   c2ae4:	461d      	mov	r5, r3
   c2ae6:	9a03      	ldr	r2, [sp, #12]
   c2ae8:	e7d7      	b.n	c2a9a <__hexnan+0x2e>
   c2aea:	2929      	cmp	r1, #41	; 0x29
   c2aec:	d156      	bne.n	c2b9c <__hexnan+0x130>
   c2aee:	3202      	adds	r2, #2
   c2af0:	f8ca 2000 	str.w	r2, [sl]
   c2af4:	f1bb 0f00 	cmp.w	fp, #0
   c2af8:	d050      	beq.n	c2b9c <__hexnan+0x130>
   c2afa:	454c      	cmp	r4, r9
   c2afc:	d206      	bcs.n	c2b0c <__hexnan+0xa0>
   c2afe:	2d07      	cmp	r5, #7
   c2b00:	dc04      	bgt.n	c2b0c <__hexnan+0xa0>
   c2b02:	462a      	mov	r2, r5
   c2b04:	4649      	mov	r1, r9
   c2b06:	4620      	mov	r0, r4
   c2b08:	f7ff ff8a 	bl	c2a20 <L_shift>
   c2b0c:	4544      	cmp	r4, r8
   c2b0e:	d934      	bls.n	c2b7a <__hexnan+0x10e>
   c2b10:	f1a8 0204 	sub.w	r2, r8, #4
   c2b14:	4623      	mov	r3, r4
   c2b16:	f853 1b04 	ldr.w	r1, [r3], #4
   c2b1a:	f842 1f04 	str.w	r1, [r2, #4]!
   c2b1e:	429f      	cmp	r7, r3
   c2b20:	d2f9      	bcs.n	c2b16 <__hexnan+0xaa>
   c2b22:	1b3b      	subs	r3, r7, r4
   c2b24:	f023 0303 	bic.w	r3, r3, #3
   c2b28:	3304      	adds	r3, #4
   c2b2a:	3401      	adds	r4, #1
   c2b2c:	3e03      	subs	r6, #3
   c2b2e:	42b4      	cmp	r4, r6
   c2b30:	bf88      	it	hi
   c2b32:	2304      	movhi	r3, #4
   c2b34:	4443      	add	r3, r8
   c2b36:	2200      	movs	r2, #0
   c2b38:	f843 2b04 	str.w	r2, [r3], #4
   c2b3c:	429f      	cmp	r7, r3
   c2b3e:	d2fb      	bcs.n	c2b38 <__hexnan+0xcc>
   c2b40:	683b      	ldr	r3, [r7, #0]
   c2b42:	b91b      	cbnz	r3, c2b4c <__hexnan+0xe0>
   c2b44:	4547      	cmp	r7, r8
   c2b46:	d127      	bne.n	c2b98 <__hexnan+0x12c>
   c2b48:	2301      	movs	r3, #1
   c2b4a:	603b      	str	r3, [r7, #0]
   c2b4c:	2005      	movs	r0, #5
   c2b4e:	e026      	b.n	c2b9e <__hexnan+0x132>
   c2b50:	3501      	adds	r5, #1
   c2b52:	2d08      	cmp	r5, #8
   c2b54:	f10b 0b01 	add.w	fp, fp, #1
   c2b58:	dd06      	ble.n	c2b68 <__hexnan+0xfc>
   c2b5a:	4544      	cmp	r4, r8
   c2b5c:	d9c3      	bls.n	c2ae6 <__hexnan+0x7a>
   c2b5e:	2300      	movs	r3, #0
   c2b60:	f844 3c04 	str.w	r3, [r4, #-4]
   c2b64:	2501      	movs	r5, #1
   c2b66:	3c04      	subs	r4, #4
   c2b68:	6822      	ldr	r2, [r4, #0]
   c2b6a:	f000 000f 	and.w	r0, r0, #15
   c2b6e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   c2b72:	6022      	str	r2, [r4, #0]
   c2b74:	e7b7      	b.n	c2ae6 <__hexnan+0x7a>
   c2b76:	2508      	movs	r5, #8
   c2b78:	e7b5      	b.n	c2ae6 <__hexnan+0x7a>
   c2b7a:	9b01      	ldr	r3, [sp, #4]
   c2b7c:	2b00      	cmp	r3, #0
   c2b7e:	d0df      	beq.n	c2b40 <__hexnan+0xd4>
   c2b80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c2b84:	f1c3 0320 	rsb	r3, r3, #32
   c2b88:	fa22 f303 	lsr.w	r3, r2, r3
   c2b8c:	f856 2c04 	ldr.w	r2, [r6, #-4]
   c2b90:	401a      	ands	r2, r3
   c2b92:	f846 2c04 	str.w	r2, [r6, #-4]
   c2b96:	e7d3      	b.n	c2b40 <__hexnan+0xd4>
   c2b98:	3f04      	subs	r7, #4
   c2b9a:	e7d1      	b.n	c2b40 <__hexnan+0xd4>
   c2b9c:	2004      	movs	r0, #4
   c2b9e:	b007      	add	sp, #28
   c2ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c2ba4 <__retarget_lock_acquire_recursive>:
   c2ba4:	4770      	bx	lr

000c2ba6 <__retarget_lock_release>:
   c2ba6:	4770      	bx	lr

000c2ba8 <__retarget_lock_release_recursive>:
   c2ba8:	4770      	bx	lr
	...

000c2bac <_lseek_r>:
   c2bac:	b538      	push	{r3, r4, r5, lr}
   c2bae:	4d07      	ldr	r5, [pc, #28]	; (c2bcc <_lseek_r+0x20>)
   c2bb0:	4604      	mov	r4, r0
   c2bb2:	4608      	mov	r0, r1
   c2bb4:	4611      	mov	r1, r2
   c2bb6:	2200      	movs	r2, #0
   c2bb8:	602a      	str	r2, [r5, #0]
   c2bba:	461a      	mov	r2, r3
   c2bbc:	f7fa f92a 	bl	bce14 <_lseek>
   c2bc0:	1c43      	adds	r3, r0, #1
   c2bc2:	d102      	bne.n	c2bca <_lseek_r+0x1e>
   c2bc4:	682b      	ldr	r3, [r5, #0]
   c2bc6:	b103      	cbz	r3, c2bca <_lseek_r+0x1e>
   c2bc8:	6023      	str	r3, [r4, #0]
   c2bca:	bd38      	pop	{r3, r4, r5, pc}
   c2bcc:	2003e7f0 	.word	0x2003e7f0

000c2bd0 <__ascii_mbtowc>:
   c2bd0:	b082      	sub	sp, #8
   c2bd2:	b901      	cbnz	r1, c2bd6 <__ascii_mbtowc+0x6>
   c2bd4:	a901      	add	r1, sp, #4
   c2bd6:	b142      	cbz	r2, c2bea <__ascii_mbtowc+0x1a>
   c2bd8:	b14b      	cbz	r3, c2bee <__ascii_mbtowc+0x1e>
   c2bda:	7813      	ldrb	r3, [r2, #0]
   c2bdc:	600b      	str	r3, [r1, #0]
   c2bde:	7812      	ldrb	r2, [r2, #0]
   c2be0:	1e10      	subs	r0, r2, #0
   c2be2:	bf18      	it	ne
   c2be4:	2001      	movne	r0, #1
   c2be6:	b002      	add	sp, #8
   c2be8:	4770      	bx	lr
   c2bea:	4610      	mov	r0, r2
   c2bec:	e7fb      	b.n	c2be6 <__ascii_mbtowc+0x16>
   c2bee:	f06f 0001 	mvn.w	r0, #1
   c2bf2:	e7f8      	b.n	c2be6 <__ascii_mbtowc+0x16>

000c2bf4 <_Balloc>:
   c2bf4:	b570      	push	{r4, r5, r6, lr}
   c2bf6:	6a46      	ldr	r6, [r0, #36]	; 0x24
   c2bf8:	4604      	mov	r4, r0
   c2bfa:	460d      	mov	r5, r1
   c2bfc:	b976      	cbnz	r6, c2c1c <_Balloc+0x28>
   c2bfe:	2010      	movs	r0, #16
   c2c00:	f7fa fb4c 	bl	bd29c <malloc>
   c2c04:	4602      	mov	r2, r0
   c2c06:	6260      	str	r0, [r4, #36]	; 0x24
   c2c08:	b920      	cbnz	r0, c2c14 <_Balloc+0x20>
   c2c0a:	4b18      	ldr	r3, [pc, #96]	; (c2c6c <_Balloc+0x78>)
   c2c0c:	4818      	ldr	r0, [pc, #96]	; (c2c70 <_Balloc+0x7c>)
   c2c0e:	2166      	movs	r1, #102	; 0x66
   c2c10:	f7fa fb94 	bl	bd33c <__assert_func>
   c2c14:	e9c0 6601 	strd	r6, r6, [r0, #4]
   c2c18:	6006      	str	r6, [r0, #0]
   c2c1a:	60c6      	str	r6, [r0, #12]
   c2c1c:	6a66      	ldr	r6, [r4, #36]	; 0x24
   c2c1e:	68f3      	ldr	r3, [r6, #12]
   c2c20:	b183      	cbz	r3, c2c44 <_Balloc+0x50>
   c2c22:	6a63      	ldr	r3, [r4, #36]	; 0x24
   c2c24:	68db      	ldr	r3, [r3, #12]
   c2c26:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   c2c2a:	b9b8      	cbnz	r0, c2c5c <_Balloc+0x68>
   c2c2c:	2101      	movs	r1, #1
   c2c2e:	fa01 f605 	lsl.w	r6, r1, r5
   c2c32:	1d72      	adds	r2, r6, #5
   c2c34:	0092      	lsls	r2, r2, #2
   c2c36:	4620      	mov	r0, r4
   c2c38:	f7fe fb16 	bl	c1268 <_calloc_r>
   c2c3c:	b160      	cbz	r0, c2c58 <_Balloc+0x64>
   c2c3e:	e9c0 5601 	strd	r5, r6, [r0, #4]
   c2c42:	e00e      	b.n	c2c62 <_Balloc+0x6e>
   c2c44:	2221      	movs	r2, #33	; 0x21
   c2c46:	2104      	movs	r1, #4
   c2c48:	4620      	mov	r0, r4
   c2c4a:	f7fe fb0d 	bl	c1268 <_calloc_r>
   c2c4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   c2c50:	60f0      	str	r0, [r6, #12]
   c2c52:	68db      	ldr	r3, [r3, #12]
   c2c54:	2b00      	cmp	r3, #0
   c2c56:	d1e4      	bne.n	c2c22 <_Balloc+0x2e>
   c2c58:	2000      	movs	r0, #0
   c2c5a:	bd70      	pop	{r4, r5, r6, pc}
   c2c5c:	6802      	ldr	r2, [r0, #0]
   c2c5e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   c2c62:	2300      	movs	r3, #0
   c2c64:	e9c0 3303 	strd	r3, r3, [r0, #12]
   c2c68:	e7f7      	b.n	c2c5a <_Balloc+0x66>
   c2c6a:	bf00      	nop
   c2c6c:	000c5632 	.word	0x000c5632
   c2c70:	000c58e0 	.word	0x000c58e0

000c2c74 <_Bfree>:
   c2c74:	b570      	push	{r4, r5, r6, lr}
   c2c76:	6a46      	ldr	r6, [r0, #36]	; 0x24
   c2c78:	4605      	mov	r5, r0
   c2c7a:	460c      	mov	r4, r1
   c2c7c:	b976      	cbnz	r6, c2c9c <_Bfree+0x28>
   c2c7e:	2010      	movs	r0, #16
   c2c80:	f7fa fb0c 	bl	bd29c <malloc>
   c2c84:	4602      	mov	r2, r0
   c2c86:	6268      	str	r0, [r5, #36]	; 0x24
   c2c88:	b920      	cbnz	r0, c2c94 <_Bfree+0x20>
   c2c8a:	4b09      	ldr	r3, [pc, #36]	; (c2cb0 <_Bfree+0x3c>)
   c2c8c:	4809      	ldr	r0, [pc, #36]	; (c2cb4 <_Bfree+0x40>)
   c2c8e:	218a      	movs	r1, #138	; 0x8a
   c2c90:	f7fa fb54 	bl	bd33c <__assert_func>
   c2c94:	e9c0 6601 	strd	r6, r6, [r0, #4]
   c2c98:	6006      	str	r6, [r0, #0]
   c2c9a:	60c6      	str	r6, [r0, #12]
   c2c9c:	b13c      	cbz	r4, c2cae <_Bfree+0x3a>
   c2c9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   c2ca0:	6862      	ldr	r2, [r4, #4]
   c2ca2:	68db      	ldr	r3, [r3, #12]
   c2ca4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   c2ca8:	6021      	str	r1, [r4, #0]
   c2caa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   c2cae:	bd70      	pop	{r4, r5, r6, pc}
   c2cb0:	000c5632 	.word	0x000c5632
   c2cb4:	000c58e0 	.word	0x000c58e0

000c2cb8 <__multadd>:
   c2cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   c2cbc:	690d      	ldr	r5, [r1, #16]
   c2cbe:	4607      	mov	r7, r0
   c2cc0:	460c      	mov	r4, r1
   c2cc2:	461e      	mov	r6, r3
   c2cc4:	f101 0c14 	add.w	ip, r1, #20
   c2cc8:	2000      	movs	r0, #0
   c2cca:	f8dc 3000 	ldr.w	r3, [ip]
   c2cce:	b299      	uxth	r1, r3
   c2cd0:	fb02 6101 	mla	r1, r2, r1, r6
   c2cd4:	0c1e      	lsrs	r6, r3, #16
   c2cd6:	0c0b      	lsrs	r3, r1, #16
   c2cd8:	fb02 3306 	mla	r3, r2, r6, r3
   c2cdc:	b289      	uxth	r1, r1
   c2cde:	3001      	adds	r0, #1
   c2ce0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   c2ce4:	4285      	cmp	r5, r0
   c2ce6:	f84c 1b04 	str.w	r1, [ip], #4
   c2cea:	ea4f 4613 	mov.w	r6, r3, lsr #16
   c2cee:	dcec      	bgt.n	c2cca <__multadd+0x12>
   c2cf0:	b30e      	cbz	r6, c2d36 <__multadd+0x7e>
   c2cf2:	68a3      	ldr	r3, [r4, #8]
   c2cf4:	42ab      	cmp	r3, r5
   c2cf6:	dc19      	bgt.n	c2d2c <__multadd+0x74>
   c2cf8:	6861      	ldr	r1, [r4, #4]
   c2cfa:	4638      	mov	r0, r7
   c2cfc:	3101      	adds	r1, #1
   c2cfe:	f7ff ff79 	bl	c2bf4 <_Balloc>
   c2d02:	4680      	mov	r8, r0
   c2d04:	b928      	cbnz	r0, c2d12 <__multadd+0x5a>
   c2d06:	4602      	mov	r2, r0
   c2d08:	4b0c      	ldr	r3, [pc, #48]	; (c2d3c <__multadd+0x84>)
   c2d0a:	480d      	ldr	r0, [pc, #52]	; (c2d40 <__multadd+0x88>)
   c2d0c:	21b5      	movs	r1, #181	; 0xb5
   c2d0e:	f7fa fb15 	bl	bd33c <__assert_func>
   c2d12:	6922      	ldr	r2, [r4, #16]
   c2d14:	3202      	adds	r2, #2
   c2d16:	f104 010c 	add.w	r1, r4, #12
   c2d1a:	0092      	lsls	r2, r2, #2
   c2d1c:	300c      	adds	r0, #12
   c2d1e:	f7fe fa73 	bl	c1208 <memcpy>
   c2d22:	4621      	mov	r1, r4
   c2d24:	4638      	mov	r0, r7
   c2d26:	f7ff ffa5 	bl	c2c74 <_Bfree>
   c2d2a:	4644      	mov	r4, r8
   c2d2c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   c2d30:	3501      	adds	r5, #1
   c2d32:	615e      	str	r6, [r3, #20]
   c2d34:	6125      	str	r5, [r4, #16]
   c2d36:	4620      	mov	r0, r4
   c2d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   c2d3c:	000c5859 	.word	0x000c5859
   c2d40:	000c58e0 	.word	0x000c58e0

000c2d44 <__s2b>:
   c2d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c2d48:	460c      	mov	r4, r1
   c2d4a:	4615      	mov	r5, r2
   c2d4c:	461f      	mov	r7, r3
   c2d4e:	2209      	movs	r2, #9
   c2d50:	3308      	adds	r3, #8
   c2d52:	4606      	mov	r6, r0
   c2d54:	fb93 f3f2 	sdiv	r3, r3, r2
   c2d58:	2100      	movs	r1, #0
   c2d5a:	2201      	movs	r2, #1
   c2d5c:	429a      	cmp	r2, r3
   c2d5e:	db09      	blt.n	c2d74 <__s2b+0x30>
   c2d60:	4630      	mov	r0, r6
   c2d62:	f7ff ff47 	bl	c2bf4 <_Balloc>
   c2d66:	b940      	cbnz	r0, c2d7a <__s2b+0x36>
   c2d68:	4602      	mov	r2, r0
   c2d6a:	4b19      	ldr	r3, [pc, #100]	; (c2dd0 <__s2b+0x8c>)
   c2d6c:	4819      	ldr	r0, [pc, #100]	; (c2dd4 <__s2b+0x90>)
   c2d6e:	21ce      	movs	r1, #206	; 0xce
   c2d70:	f7fa fae4 	bl	bd33c <__assert_func>
   c2d74:	0052      	lsls	r2, r2, #1
   c2d76:	3101      	adds	r1, #1
   c2d78:	e7f0      	b.n	c2d5c <__s2b+0x18>
   c2d7a:	9b08      	ldr	r3, [sp, #32]
   c2d7c:	6143      	str	r3, [r0, #20]
   c2d7e:	2d09      	cmp	r5, #9
   c2d80:	f04f 0301 	mov.w	r3, #1
   c2d84:	6103      	str	r3, [r0, #16]
   c2d86:	dd16      	ble.n	c2db6 <__s2b+0x72>
   c2d88:	f104 0909 	add.w	r9, r4, #9
   c2d8c:	46c8      	mov	r8, r9
   c2d8e:	442c      	add	r4, r5
   c2d90:	f818 3b01 	ldrb.w	r3, [r8], #1
   c2d94:	4601      	mov	r1, r0
   c2d96:	3b30      	subs	r3, #48	; 0x30
   c2d98:	220a      	movs	r2, #10
   c2d9a:	4630      	mov	r0, r6
   c2d9c:	f7ff ff8c 	bl	c2cb8 <__multadd>
   c2da0:	45a0      	cmp	r8, r4
   c2da2:	d1f5      	bne.n	c2d90 <__s2b+0x4c>
   c2da4:	f1a5 0408 	sub.w	r4, r5, #8
   c2da8:	444c      	add	r4, r9
   c2daa:	1b2d      	subs	r5, r5, r4
   c2dac:	1963      	adds	r3, r4, r5
   c2dae:	42bb      	cmp	r3, r7
   c2db0:	db04      	blt.n	c2dbc <__s2b+0x78>
   c2db2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c2db6:	340a      	adds	r4, #10
   c2db8:	2509      	movs	r5, #9
   c2dba:	e7f6      	b.n	c2daa <__s2b+0x66>
   c2dbc:	f814 3b01 	ldrb.w	r3, [r4], #1
   c2dc0:	4601      	mov	r1, r0
   c2dc2:	3b30      	subs	r3, #48	; 0x30
   c2dc4:	220a      	movs	r2, #10
   c2dc6:	4630      	mov	r0, r6
   c2dc8:	f7ff ff76 	bl	c2cb8 <__multadd>
   c2dcc:	e7ee      	b.n	c2dac <__s2b+0x68>
   c2dce:	bf00      	nop
   c2dd0:	000c5859 	.word	0x000c5859
   c2dd4:	000c58e0 	.word	0x000c58e0

000c2dd8 <__hi0bits>:
   c2dd8:	0c03      	lsrs	r3, r0, #16
   c2dda:	041b      	lsls	r3, r3, #16
   c2ddc:	b9d3      	cbnz	r3, c2e14 <__hi0bits+0x3c>
   c2dde:	0400      	lsls	r0, r0, #16
   c2de0:	2310      	movs	r3, #16
   c2de2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   c2de6:	bf04      	itt	eq
   c2de8:	0200      	lsleq	r0, r0, #8
   c2dea:	3308      	addeq	r3, #8
   c2dec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   c2df0:	bf04      	itt	eq
   c2df2:	0100      	lsleq	r0, r0, #4
   c2df4:	3304      	addeq	r3, #4
   c2df6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   c2dfa:	bf04      	itt	eq
   c2dfc:	0080      	lsleq	r0, r0, #2
   c2dfe:	3302      	addeq	r3, #2
   c2e00:	2800      	cmp	r0, #0
   c2e02:	db05      	blt.n	c2e10 <__hi0bits+0x38>
   c2e04:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   c2e08:	f103 0301 	add.w	r3, r3, #1
   c2e0c:	bf08      	it	eq
   c2e0e:	2320      	moveq	r3, #32
   c2e10:	4618      	mov	r0, r3
   c2e12:	4770      	bx	lr
   c2e14:	2300      	movs	r3, #0
   c2e16:	e7e4      	b.n	c2de2 <__hi0bits+0xa>

000c2e18 <__lo0bits>:
   c2e18:	6803      	ldr	r3, [r0, #0]
   c2e1a:	f013 0207 	ands.w	r2, r3, #7
   c2e1e:	4601      	mov	r1, r0
   c2e20:	d00b      	beq.n	c2e3a <__lo0bits+0x22>
   c2e22:	07da      	lsls	r2, r3, #31
   c2e24:	d423      	bmi.n	c2e6e <__lo0bits+0x56>
   c2e26:	0798      	lsls	r0, r3, #30
   c2e28:	bf49      	itett	mi
   c2e2a:	085b      	lsrmi	r3, r3, #1
   c2e2c:	089b      	lsrpl	r3, r3, #2
   c2e2e:	2001      	movmi	r0, #1
   c2e30:	600b      	strmi	r3, [r1, #0]
   c2e32:	bf5c      	itt	pl
   c2e34:	600b      	strpl	r3, [r1, #0]
   c2e36:	2002      	movpl	r0, #2
   c2e38:	4770      	bx	lr
   c2e3a:	b298      	uxth	r0, r3
   c2e3c:	b9a8      	cbnz	r0, c2e6a <__lo0bits+0x52>
   c2e3e:	0c1b      	lsrs	r3, r3, #16
   c2e40:	2010      	movs	r0, #16
   c2e42:	b2da      	uxtb	r2, r3
   c2e44:	b90a      	cbnz	r2, c2e4a <__lo0bits+0x32>
   c2e46:	3008      	adds	r0, #8
   c2e48:	0a1b      	lsrs	r3, r3, #8
   c2e4a:	071a      	lsls	r2, r3, #28
   c2e4c:	bf04      	itt	eq
   c2e4e:	091b      	lsreq	r3, r3, #4
   c2e50:	3004      	addeq	r0, #4
   c2e52:	079a      	lsls	r2, r3, #30
   c2e54:	bf04      	itt	eq
   c2e56:	089b      	lsreq	r3, r3, #2
   c2e58:	3002      	addeq	r0, #2
   c2e5a:	07da      	lsls	r2, r3, #31
   c2e5c:	d403      	bmi.n	c2e66 <__lo0bits+0x4e>
   c2e5e:	085b      	lsrs	r3, r3, #1
   c2e60:	f100 0001 	add.w	r0, r0, #1
   c2e64:	d005      	beq.n	c2e72 <__lo0bits+0x5a>
   c2e66:	600b      	str	r3, [r1, #0]
   c2e68:	4770      	bx	lr
   c2e6a:	4610      	mov	r0, r2
   c2e6c:	e7e9      	b.n	c2e42 <__lo0bits+0x2a>
   c2e6e:	2000      	movs	r0, #0
   c2e70:	4770      	bx	lr
   c2e72:	2020      	movs	r0, #32
   c2e74:	4770      	bx	lr
	...

000c2e78 <__i2b>:
   c2e78:	b510      	push	{r4, lr}
   c2e7a:	460c      	mov	r4, r1
   c2e7c:	2101      	movs	r1, #1
   c2e7e:	f7ff feb9 	bl	c2bf4 <_Balloc>
   c2e82:	4602      	mov	r2, r0
   c2e84:	b928      	cbnz	r0, c2e92 <__i2b+0x1a>
   c2e86:	4b05      	ldr	r3, [pc, #20]	; (c2e9c <__i2b+0x24>)
   c2e88:	4805      	ldr	r0, [pc, #20]	; (c2ea0 <__i2b+0x28>)
   c2e8a:	f44f 71a0 	mov.w	r1, #320	; 0x140
   c2e8e:	f7fa fa55 	bl	bd33c <__assert_func>
   c2e92:	2301      	movs	r3, #1
   c2e94:	6144      	str	r4, [r0, #20]
   c2e96:	6103      	str	r3, [r0, #16]
   c2e98:	bd10      	pop	{r4, pc}
   c2e9a:	bf00      	nop
   c2e9c:	000c5859 	.word	0x000c5859
   c2ea0:	000c58e0 	.word	0x000c58e0

000c2ea4 <__multiply>:
   c2ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c2ea8:	4691      	mov	r9, r2
   c2eaa:	690a      	ldr	r2, [r1, #16]
   c2eac:	f8d9 3010 	ldr.w	r3, [r9, #16]
   c2eb0:	429a      	cmp	r2, r3
   c2eb2:	bfb8      	it	lt
   c2eb4:	460b      	movlt	r3, r1
   c2eb6:	460c      	mov	r4, r1
   c2eb8:	bfbc      	itt	lt
   c2eba:	464c      	movlt	r4, r9
   c2ebc:	4699      	movlt	r9, r3
   c2ebe:	6927      	ldr	r7, [r4, #16]
   c2ec0:	f8d9 a010 	ldr.w	sl, [r9, #16]
   c2ec4:	68a3      	ldr	r3, [r4, #8]
   c2ec6:	6861      	ldr	r1, [r4, #4]
   c2ec8:	eb07 060a 	add.w	r6, r7, sl
   c2ecc:	42b3      	cmp	r3, r6
   c2ece:	b085      	sub	sp, #20
   c2ed0:	bfb8      	it	lt
   c2ed2:	3101      	addlt	r1, #1
   c2ed4:	f7ff fe8e 	bl	c2bf4 <_Balloc>
   c2ed8:	b930      	cbnz	r0, c2ee8 <__multiply+0x44>
   c2eda:	4602      	mov	r2, r0
   c2edc:	4b44      	ldr	r3, [pc, #272]	; (c2ff0 <__multiply+0x14c>)
   c2ede:	4845      	ldr	r0, [pc, #276]	; (c2ff4 <__multiply+0x150>)
   c2ee0:	f240 115d 	movw	r1, #349	; 0x15d
   c2ee4:	f7fa fa2a 	bl	bd33c <__assert_func>
   c2ee8:	f100 0514 	add.w	r5, r0, #20
   c2eec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   c2ef0:	462b      	mov	r3, r5
   c2ef2:	2200      	movs	r2, #0
   c2ef4:	4543      	cmp	r3, r8
   c2ef6:	d321      	bcc.n	c2f3c <__multiply+0x98>
   c2ef8:	f104 0314 	add.w	r3, r4, #20
   c2efc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   c2f00:	f109 0314 	add.w	r3, r9, #20
   c2f04:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   c2f08:	9202      	str	r2, [sp, #8]
   c2f0a:	1b3a      	subs	r2, r7, r4
   c2f0c:	3a15      	subs	r2, #21
   c2f0e:	f022 0203 	bic.w	r2, r2, #3
   c2f12:	3204      	adds	r2, #4
   c2f14:	f104 0115 	add.w	r1, r4, #21
   c2f18:	428f      	cmp	r7, r1
   c2f1a:	bf38      	it	cc
   c2f1c:	2204      	movcc	r2, #4
   c2f1e:	9201      	str	r2, [sp, #4]
   c2f20:	9a02      	ldr	r2, [sp, #8]
   c2f22:	9303      	str	r3, [sp, #12]
   c2f24:	429a      	cmp	r2, r3
   c2f26:	d80c      	bhi.n	c2f42 <__multiply+0x9e>
   c2f28:	2e00      	cmp	r6, #0
   c2f2a:	dd03      	ble.n	c2f34 <__multiply+0x90>
   c2f2c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   c2f30:	2b00      	cmp	r3, #0
   c2f32:	d05a      	beq.n	c2fea <__multiply+0x146>
   c2f34:	6106      	str	r6, [r0, #16]
   c2f36:	b005      	add	sp, #20
   c2f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c2f3c:	f843 2b04 	str.w	r2, [r3], #4
   c2f40:	e7d8      	b.n	c2ef4 <__multiply+0x50>
   c2f42:	f8b3 a000 	ldrh.w	sl, [r3]
   c2f46:	f1ba 0f00 	cmp.w	sl, #0
   c2f4a:	d024      	beq.n	c2f96 <__multiply+0xf2>
   c2f4c:	f104 0e14 	add.w	lr, r4, #20
   c2f50:	46a9      	mov	r9, r5
   c2f52:	f04f 0c00 	mov.w	ip, #0
   c2f56:	f85e 2b04 	ldr.w	r2, [lr], #4
   c2f5a:	f8d9 1000 	ldr.w	r1, [r9]
   c2f5e:	fa1f fb82 	uxth.w	fp, r2
   c2f62:	b289      	uxth	r1, r1
   c2f64:	fb0a 110b 	mla	r1, sl, fp, r1
   c2f68:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   c2f6c:	f8d9 2000 	ldr.w	r2, [r9]
   c2f70:	4461      	add	r1, ip
   c2f72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   c2f76:	fb0a c20b 	mla	r2, sl, fp, ip
   c2f7a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   c2f7e:	b289      	uxth	r1, r1
   c2f80:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   c2f84:	4577      	cmp	r7, lr
   c2f86:	f849 1b04 	str.w	r1, [r9], #4
   c2f8a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   c2f8e:	d8e2      	bhi.n	c2f56 <__multiply+0xb2>
   c2f90:	9a01      	ldr	r2, [sp, #4]
   c2f92:	f845 c002 	str.w	ip, [r5, r2]
   c2f96:	9a03      	ldr	r2, [sp, #12]
   c2f98:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   c2f9c:	3304      	adds	r3, #4
   c2f9e:	f1b9 0f00 	cmp.w	r9, #0
   c2fa2:	d020      	beq.n	c2fe6 <__multiply+0x142>
   c2fa4:	6829      	ldr	r1, [r5, #0]
   c2fa6:	f104 0c14 	add.w	ip, r4, #20
   c2faa:	46ae      	mov	lr, r5
   c2fac:	f04f 0a00 	mov.w	sl, #0
   c2fb0:	f8bc b000 	ldrh.w	fp, [ip]
   c2fb4:	f8be 2002 	ldrh.w	r2, [lr, #2]
   c2fb8:	fb09 220b 	mla	r2, r9, fp, r2
   c2fbc:	4492      	add	sl, r2
   c2fbe:	b289      	uxth	r1, r1
   c2fc0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   c2fc4:	f84e 1b04 	str.w	r1, [lr], #4
   c2fc8:	f85c 2b04 	ldr.w	r2, [ip], #4
   c2fcc:	f8be 1000 	ldrh.w	r1, [lr]
   c2fd0:	0c12      	lsrs	r2, r2, #16
   c2fd2:	fb09 1102 	mla	r1, r9, r2, r1
   c2fd6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   c2fda:	4567      	cmp	r7, ip
   c2fdc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   c2fe0:	d8e6      	bhi.n	c2fb0 <__multiply+0x10c>
   c2fe2:	9a01      	ldr	r2, [sp, #4]
   c2fe4:	50a9      	str	r1, [r5, r2]
   c2fe6:	3504      	adds	r5, #4
   c2fe8:	e79a      	b.n	c2f20 <__multiply+0x7c>
   c2fea:	3e01      	subs	r6, #1
   c2fec:	e79c      	b.n	c2f28 <__multiply+0x84>
   c2fee:	bf00      	nop
   c2ff0:	000c5859 	.word	0x000c5859
   c2ff4:	000c58e0 	.word	0x000c58e0

000c2ff8 <__pow5mult>:
   c2ff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   c2ffc:	4615      	mov	r5, r2
   c2ffe:	f012 0203 	ands.w	r2, r2, #3
   c3002:	4606      	mov	r6, r0
   c3004:	460f      	mov	r7, r1
   c3006:	d007      	beq.n	c3018 <__pow5mult+0x20>
   c3008:	4c25      	ldr	r4, [pc, #148]	; (c30a0 <__pow5mult+0xa8>)
   c300a:	3a01      	subs	r2, #1
   c300c:	2300      	movs	r3, #0
   c300e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   c3012:	f7ff fe51 	bl	c2cb8 <__multadd>
   c3016:	4607      	mov	r7, r0
   c3018:	10ad      	asrs	r5, r5, #2
   c301a:	d03d      	beq.n	c3098 <__pow5mult+0xa0>
   c301c:	6a74      	ldr	r4, [r6, #36]	; 0x24
   c301e:	b97c      	cbnz	r4, c3040 <__pow5mult+0x48>
   c3020:	2010      	movs	r0, #16
   c3022:	f7fa f93b 	bl	bd29c <malloc>
   c3026:	4602      	mov	r2, r0
   c3028:	6270      	str	r0, [r6, #36]	; 0x24
   c302a:	b928      	cbnz	r0, c3038 <__pow5mult+0x40>
   c302c:	4b1d      	ldr	r3, [pc, #116]	; (c30a4 <__pow5mult+0xac>)
   c302e:	481e      	ldr	r0, [pc, #120]	; (c30a8 <__pow5mult+0xb0>)
   c3030:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   c3034:	f7fa f982 	bl	bd33c <__assert_func>
   c3038:	e9c0 4401 	strd	r4, r4, [r0, #4]
   c303c:	6004      	str	r4, [r0, #0]
   c303e:	60c4      	str	r4, [r0, #12]
   c3040:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   c3044:	f8d8 4008 	ldr.w	r4, [r8, #8]
   c3048:	b94c      	cbnz	r4, c305e <__pow5mult+0x66>
   c304a:	f240 2171 	movw	r1, #625	; 0x271
   c304e:	4630      	mov	r0, r6
   c3050:	f7ff ff12 	bl	c2e78 <__i2b>
   c3054:	2300      	movs	r3, #0
   c3056:	f8c8 0008 	str.w	r0, [r8, #8]
   c305a:	4604      	mov	r4, r0
   c305c:	6003      	str	r3, [r0, #0]
   c305e:	f04f 0900 	mov.w	r9, #0
   c3062:	07eb      	lsls	r3, r5, #31
   c3064:	d50a      	bpl.n	c307c <__pow5mult+0x84>
   c3066:	4639      	mov	r1, r7
   c3068:	4622      	mov	r2, r4
   c306a:	4630      	mov	r0, r6
   c306c:	f7ff ff1a 	bl	c2ea4 <__multiply>
   c3070:	4639      	mov	r1, r7
   c3072:	4680      	mov	r8, r0
   c3074:	4630      	mov	r0, r6
   c3076:	f7ff fdfd 	bl	c2c74 <_Bfree>
   c307a:	4647      	mov	r7, r8
   c307c:	106d      	asrs	r5, r5, #1
   c307e:	d00b      	beq.n	c3098 <__pow5mult+0xa0>
   c3080:	6820      	ldr	r0, [r4, #0]
   c3082:	b938      	cbnz	r0, c3094 <__pow5mult+0x9c>
   c3084:	4622      	mov	r2, r4
   c3086:	4621      	mov	r1, r4
   c3088:	4630      	mov	r0, r6
   c308a:	f7ff ff0b 	bl	c2ea4 <__multiply>
   c308e:	6020      	str	r0, [r4, #0]
   c3090:	f8c0 9000 	str.w	r9, [r0]
   c3094:	4604      	mov	r4, r0
   c3096:	e7e4      	b.n	c3062 <__pow5mult+0x6a>
   c3098:	4638      	mov	r0, r7
   c309a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   c309e:	bf00      	nop
   c30a0:	000c5a30 	.word	0x000c5a30
   c30a4:	000c5632 	.word	0x000c5632
   c30a8:	000c58e0 	.word	0x000c58e0

000c30ac <__lshift>:
   c30ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   c30b0:	460c      	mov	r4, r1
   c30b2:	6849      	ldr	r1, [r1, #4]
   c30b4:	6923      	ldr	r3, [r4, #16]
   c30b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
   c30ba:	68a3      	ldr	r3, [r4, #8]
   c30bc:	4607      	mov	r7, r0
   c30be:	4691      	mov	r9, r2
   c30c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
   c30c4:	f108 0601 	add.w	r6, r8, #1
   c30c8:	42b3      	cmp	r3, r6
   c30ca:	db0b      	blt.n	c30e4 <__lshift+0x38>
   c30cc:	4638      	mov	r0, r7
   c30ce:	f7ff fd91 	bl	c2bf4 <_Balloc>
   c30d2:	4605      	mov	r5, r0
   c30d4:	b948      	cbnz	r0, c30ea <__lshift+0x3e>
   c30d6:	4602      	mov	r2, r0
   c30d8:	4b2a      	ldr	r3, [pc, #168]	; (c3184 <__lshift+0xd8>)
   c30da:	482b      	ldr	r0, [pc, #172]	; (c3188 <__lshift+0xdc>)
   c30dc:	f240 11d9 	movw	r1, #473	; 0x1d9
   c30e0:	f7fa f92c 	bl	bd33c <__assert_func>
   c30e4:	3101      	adds	r1, #1
   c30e6:	005b      	lsls	r3, r3, #1
   c30e8:	e7ee      	b.n	c30c8 <__lshift+0x1c>
   c30ea:	2300      	movs	r3, #0
   c30ec:	f100 0114 	add.w	r1, r0, #20
   c30f0:	f100 0210 	add.w	r2, r0, #16
   c30f4:	4618      	mov	r0, r3
   c30f6:	4553      	cmp	r3, sl
   c30f8:	db37      	blt.n	c316a <__lshift+0xbe>
   c30fa:	6920      	ldr	r0, [r4, #16]
   c30fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   c3100:	f104 0314 	add.w	r3, r4, #20
   c3104:	f019 091f 	ands.w	r9, r9, #31
   c3108:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   c310c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   c3110:	d02f      	beq.n	c3172 <__lshift+0xc6>
   c3112:	f1c9 0e20 	rsb	lr, r9, #32
   c3116:	468a      	mov	sl, r1
   c3118:	f04f 0c00 	mov.w	ip, #0
   c311c:	681a      	ldr	r2, [r3, #0]
   c311e:	fa02 f209 	lsl.w	r2, r2, r9
   c3122:	ea42 020c 	orr.w	r2, r2, ip
   c3126:	f84a 2b04 	str.w	r2, [sl], #4
   c312a:	f853 2b04 	ldr.w	r2, [r3], #4
   c312e:	4298      	cmp	r0, r3
   c3130:	fa22 fc0e 	lsr.w	ip, r2, lr
   c3134:	d8f2      	bhi.n	c311c <__lshift+0x70>
   c3136:	1b03      	subs	r3, r0, r4
   c3138:	3b15      	subs	r3, #21
   c313a:	f023 0303 	bic.w	r3, r3, #3
   c313e:	3304      	adds	r3, #4
   c3140:	f104 0215 	add.w	r2, r4, #21
   c3144:	4290      	cmp	r0, r2
   c3146:	bf38      	it	cc
   c3148:	2304      	movcc	r3, #4
   c314a:	f841 c003 	str.w	ip, [r1, r3]
   c314e:	f1bc 0f00 	cmp.w	ip, #0
   c3152:	d001      	beq.n	c3158 <__lshift+0xac>
   c3154:	f108 0602 	add.w	r6, r8, #2
   c3158:	3e01      	subs	r6, #1
   c315a:	4638      	mov	r0, r7
   c315c:	612e      	str	r6, [r5, #16]
   c315e:	4621      	mov	r1, r4
   c3160:	f7ff fd88 	bl	c2c74 <_Bfree>
   c3164:	4628      	mov	r0, r5
   c3166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   c316a:	f842 0f04 	str.w	r0, [r2, #4]!
   c316e:	3301      	adds	r3, #1
   c3170:	e7c1      	b.n	c30f6 <__lshift+0x4a>
   c3172:	3904      	subs	r1, #4
   c3174:	f853 2b04 	ldr.w	r2, [r3], #4
   c3178:	f841 2f04 	str.w	r2, [r1, #4]!
   c317c:	4298      	cmp	r0, r3
   c317e:	d8f9      	bhi.n	c3174 <__lshift+0xc8>
   c3180:	e7ea      	b.n	c3158 <__lshift+0xac>
   c3182:	bf00      	nop
   c3184:	000c5859 	.word	0x000c5859
   c3188:	000c58e0 	.word	0x000c58e0

000c318c <__mcmp>:
   c318c:	b530      	push	{r4, r5, lr}
   c318e:	6902      	ldr	r2, [r0, #16]
   c3190:	690c      	ldr	r4, [r1, #16]
   c3192:	1b12      	subs	r2, r2, r4
   c3194:	d10e      	bne.n	c31b4 <__mcmp+0x28>
   c3196:	f100 0314 	add.w	r3, r0, #20
   c319a:	3114      	adds	r1, #20
   c319c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   c31a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   c31a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   c31a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   c31ac:	42a5      	cmp	r5, r4
   c31ae:	d003      	beq.n	c31b8 <__mcmp+0x2c>
   c31b0:	d305      	bcc.n	c31be <__mcmp+0x32>
   c31b2:	2201      	movs	r2, #1
   c31b4:	4610      	mov	r0, r2
   c31b6:	bd30      	pop	{r4, r5, pc}
   c31b8:	4283      	cmp	r3, r0
   c31ba:	d3f3      	bcc.n	c31a4 <__mcmp+0x18>
   c31bc:	e7fa      	b.n	c31b4 <__mcmp+0x28>
   c31be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   c31c2:	e7f7      	b.n	c31b4 <__mcmp+0x28>

000c31c4 <__mdiff>:
   c31c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c31c8:	460c      	mov	r4, r1
   c31ca:	4606      	mov	r6, r0
   c31cc:	4611      	mov	r1, r2
   c31ce:	4620      	mov	r0, r4
   c31d0:	4690      	mov	r8, r2
   c31d2:	f7ff ffdb 	bl	c318c <__mcmp>
   c31d6:	1e05      	subs	r5, r0, #0
   c31d8:	d110      	bne.n	c31fc <__mdiff+0x38>
   c31da:	4629      	mov	r1, r5
   c31dc:	4630      	mov	r0, r6
   c31de:	f7ff fd09 	bl	c2bf4 <_Balloc>
   c31e2:	b930      	cbnz	r0, c31f2 <__mdiff+0x2e>
   c31e4:	4b3a      	ldr	r3, [pc, #232]	; (c32d0 <__mdiff+0x10c>)
   c31e6:	4602      	mov	r2, r0
   c31e8:	f240 2132 	movw	r1, #562	; 0x232
   c31ec:	4839      	ldr	r0, [pc, #228]	; (c32d4 <__mdiff+0x110>)
   c31ee:	f7fa f8a5 	bl	bd33c <__assert_func>
   c31f2:	2301      	movs	r3, #1
   c31f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
   c31f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   c31fc:	bfa4      	itt	ge
   c31fe:	4643      	movge	r3, r8
   c3200:	46a0      	movge	r8, r4
   c3202:	4630      	mov	r0, r6
   c3204:	f8d8 1004 	ldr.w	r1, [r8, #4]
   c3208:	bfa6      	itte	ge
   c320a:	461c      	movge	r4, r3
   c320c:	2500      	movge	r5, #0
   c320e:	2501      	movlt	r5, #1
   c3210:	f7ff fcf0 	bl	c2bf4 <_Balloc>
   c3214:	b920      	cbnz	r0, c3220 <__mdiff+0x5c>
   c3216:	4b2e      	ldr	r3, [pc, #184]	; (c32d0 <__mdiff+0x10c>)
   c3218:	4602      	mov	r2, r0
   c321a:	f44f 7110 	mov.w	r1, #576	; 0x240
   c321e:	e7e5      	b.n	c31ec <__mdiff+0x28>
   c3220:	f8d8 7010 	ldr.w	r7, [r8, #16]
   c3224:	6926      	ldr	r6, [r4, #16]
   c3226:	60c5      	str	r5, [r0, #12]
   c3228:	f104 0914 	add.w	r9, r4, #20
   c322c:	f108 0514 	add.w	r5, r8, #20
   c3230:	f100 0e14 	add.w	lr, r0, #20
   c3234:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   c3238:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   c323c:	f108 0210 	add.w	r2, r8, #16
   c3240:	46f2      	mov	sl, lr
   c3242:	2100      	movs	r1, #0
   c3244:	f859 3b04 	ldr.w	r3, [r9], #4
   c3248:	f852 bf04 	ldr.w	fp, [r2, #4]!
   c324c:	fa1f f883 	uxth.w	r8, r3
   c3250:	fa11 f18b 	uxtah	r1, r1, fp
   c3254:	0c1b      	lsrs	r3, r3, #16
   c3256:	eba1 0808 	sub.w	r8, r1, r8
   c325a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   c325e:	eb03 4328 	add.w	r3, r3, r8, asr #16
   c3262:	fa1f f888 	uxth.w	r8, r8
   c3266:	1419      	asrs	r1, r3, #16
   c3268:	454e      	cmp	r6, r9
   c326a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   c326e:	f84a 3b04 	str.w	r3, [sl], #4
   c3272:	d8e7      	bhi.n	c3244 <__mdiff+0x80>
   c3274:	1b33      	subs	r3, r6, r4
   c3276:	3b15      	subs	r3, #21
   c3278:	f023 0303 	bic.w	r3, r3, #3
   c327c:	3304      	adds	r3, #4
   c327e:	3415      	adds	r4, #21
   c3280:	42a6      	cmp	r6, r4
   c3282:	bf38      	it	cc
   c3284:	2304      	movcc	r3, #4
   c3286:	441d      	add	r5, r3
   c3288:	4473      	add	r3, lr
   c328a:	469e      	mov	lr, r3
   c328c:	462e      	mov	r6, r5
   c328e:	4566      	cmp	r6, ip
   c3290:	d30e      	bcc.n	c32b0 <__mdiff+0xec>
   c3292:	f10c 0203 	add.w	r2, ip, #3
   c3296:	1b52      	subs	r2, r2, r5
   c3298:	f022 0203 	bic.w	r2, r2, #3
   c329c:	3d03      	subs	r5, #3
   c329e:	45ac      	cmp	ip, r5
   c32a0:	bf38      	it	cc
   c32a2:	2200      	movcc	r2, #0
   c32a4:	441a      	add	r2, r3
   c32a6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   c32aa:	b17b      	cbz	r3, c32cc <__mdiff+0x108>
   c32ac:	6107      	str	r7, [r0, #16]
   c32ae:	e7a3      	b.n	c31f8 <__mdiff+0x34>
   c32b0:	f856 8b04 	ldr.w	r8, [r6], #4
   c32b4:	fa11 f288 	uxtah	r2, r1, r8
   c32b8:	1414      	asrs	r4, r2, #16
   c32ba:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   c32be:	b292      	uxth	r2, r2
   c32c0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   c32c4:	f84e 2b04 	str.w	r2, [lr], #4
   c32c8:	1421      	asrs	r1, r4, #16
   c32ca:	e7e0      	b.n	c328e <__mdiff+0xca>
   c32cc:	3f01      	subs	r7, #1
   c32ce:	e7ea      	b.n	c32a6 <__mdiff+0xe2>
   c32d0:	000c5859 	.word	0x000c5859
   c32d4:	000c58e0 	.word	0x000c58e0

000c32d8 <__ulp>:
   c32d8:	b082      	sub	sp, #8
   c32da:	ed8d 0b00 	vstr	d0, [sp]
   c32de:	9b01      	ldr	r3, [sp, #4]
   c32e0:	4912      	ldr	r1, [pc, #72]	; (c332c <__ulp+0x54>)
   c32e2:	4019      	ands	r1, r3
   c32e4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   c32e8:	2900      	cmp	r1, #0
   c32ea:	dd05      	ble.n	c32f8 <__ulp+0x20>
   c32ec:	2200      	movs	r2, #0
   c32ee:	460b      	mov	r3, r1
   c32f0:	ec43 2b10 	vmov	d0, r2, r3
   c32f4:	b002      	add	sp, #8
   c32f6:	4770      	bx	lr
   c32f8:	4249      	negs	r1, r1
   c32fa:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   c32fe:	ea4f 5021 	mov.w	r0, r1, asr #20
   c3302:	f04f 0200 	mov.w	r2, #0
   c3306:	f04f 0300 	mov.w	r3, #0
   c330a:	da04      	bge.n	c3316 <__ulp+0x3e>
   c330c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   c3310:	fa41 f300 	asr.w	r3, r1, r0
   c3314:	e7ec      	b.n	c32f0 <__ulp+0x18>
   c3316:	f1a0 0114 	sub.w	r1, r0, #20
   c331a:	291e      	cmp	r1, #30
   c331c:	bfda      	itte	le
   c331e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   c3322:	fa20 f101 	lsrle.w	r1, r0, r1
   c3326:	2101      	movgt	r1, #1
   c3328:	460a      	mov	r2, r1
   c332a:	e7e1      	b.n	c32f0 <__ulp+0x18>
   c332c:	7ff00000 	.word	0x7ff00000

000c3330 <__b2d>:
   c3330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   c3332:	6905      	ldr	r5, [r0, #16]
   c3334:	f100 0714 	add.w	r7, r0, #20
   c3338:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   c333c:	1f2e      	subs	r6, r5, #4
   c333e:	f855 4c04 	ldr.w	r4, [r5, #-4]
   c3342:	4620      	mov	r0, r4
   c3344:	f7ff fd48 	bl	c2dd8 <__hi0bits>
   c3348:	f1c0 0320 	rsb	r3, r0, #32
   c334c:	280a      	cmp	r0, #10
   c334e:	f8df c07c 	ldr.w	ip, [pc, #124]	; c33cc <__b2d+0x9c>
   c3352:	600b      	str	r3, [r1, #0]
   c3354:	dc14      	bgt.n	c3380 <__b2d+0x50>
   c3356:	f1c0 0e0b 	rsb	lr, r0, #11
   c335a:	fa24 f10e 	lsr.w	r1, r4, lr
   c335e:	42b7      	cmp	r7, r6
   c3360:	ea41 030c 	orr.w	r3, r1, ip
   c3364:	bf34      	ite	cc
   c3366:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   c336a:	2100      	movcs	r1, #0
   c336c:	3015      	adds	r0, #21
   c336e:	fa04 f000 	lsl.w	r0, r4, r0
   c3372:	fa21 f10e 	lsr.w	r1, r1, lr
   c3376:	ea40 0201 	orr.w	r2, r0, r1
   c337a:	ec43 2b10 	vmov	d0, r2, r3
   c337e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   c3380:	42b7      	cmp	r7, r6
   c3382:	bf3a      	itte	cc
   c3384:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   c3388:	f1a5 0608 	subcc.w	r6, r5, #8
   c338c:	2100      	movcs	r1, #0
   c338e:	380b      	subs	r0, #11
   c3390:	d017      	beq.n	c33c2 <__b2d+0x92>
   c3392:	f1c0 0c20 	rsb	ip, r0, #32
   c3396:	fa04 f500 	lsl.w	r5, r4, r0
   c339a:	42be      	cmp	r6, r7
   c339c:	fa21 f40c 	lsr.w	r4, r1, ip
   c33a0:	ea45 0504 	orr.w	r5, r5, r4
   c33a4:	bf8c      	ite	hi
   c33a6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   c33aa:	2400      	movls	r4, #0
   c33ac:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   c33b0:	fa01 f000 	lsl.w	r0, r1, r0
   c33b4:	fa24 f40c 	lsr.w	r4, r4, ip
   c33b8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   c33bc:	ea40 0204 	orr.w	r2, r0, r4
   c33c0:	e7db      	b.n	c337a <__b2d+0x4a>
   c33c2:	ea44 030c 	orr.w	r3, r4, ip
   c33c6:	460a      	mov	r2, r1
   c33c8:	e7d7      	b.n	c337a <__b2d+0x4a>
   c33ca:	bf00      	nop
   c33cc:	3ff00000 	.word	0x3ff00000

000c33d0 <__d2b>:
   c33d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   c33d4:	4689      	mov	r9, r1
   c33d6:	2101      	movs	r1, #1
   c33d8:	ec57 6b10 	vmov	r6, r7, d0
   c33dc:	4690      	mov	r8, r2
   c33de:	f7ff fc09 	bl	c2bf4 <_Balloc>
   c33e2:	4604      	mov	r4, r0
   c33e4:	b930      	cbnz	r0, c33f4 <__d2b+0x24>
   c33e6:	4602      	mov	r2, r0
   c33e8:	4b25      	ldr	r3, [pc, #148]	; (c3480 <__d2b+0xb0>)
   c33ea:	4826      	ldr	r0, [pc, #152]	; (c3484 <__d2b+0xb4>)
   c33ec:	f240 310a 	movw	r1, #778	; 0x30a
   c33f0:	f7f9 ffa4 	bl	bd33c <__assert_func>
   c33f4:	f3c7 550a 	ubfx	r5, r7, #20, #11
   c33f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
   c33fc:	bb35      	cbnz	r5, c344c <__d2b+0x7c>
   c33fe:	2e00      	cmp	r6, #0
   c3400:	9301      	str	r3, [sp, #4]
   c3402:	d028      	beq.n	c3456 <__d2b+0x86>
   c3404:	4668      	mov	r0, sp
   c3406:	9600      	str	r6, [sp, #0]
   c3408:	f7ff fd06 	bl	c2e18 <__lo0bits>
   c340c:	9900      	ldr	r1, [sp, #0]
   c340e:	b300      	cbz	r0, c3452 <__d2b+0x82>
   c3410:	9a01      	ldr	r2, [sp, #4]
   c3412:	f1c0 0320 	rsb	r3, r0, #32
   c3416:	fa02 f303 	lsl.w	r3, r2, r3
   c341a:	430b      	orrs	r3, r1
   c341c:	40c2      	lsrs	r2, r0
   c341e:	6163      	str	r3, [r4, #20]
   c3420:	9201      	str	r2, [sp, #4]
   c3422:	9b01      	ldr	r3, [sp, #4]
   c3424:	61a3      	str	r3, [r4, #24]
   c3426:	2b00      	cmp	r3, #0
   c3428:	bf14      	ite	ne
   c342a:	2202      	movne	r2, #2
   c342c:	2201      	moveq	r2, #1
   c342e:	6122      	str	r2, [r4, #16]
   c3430:	b1d5      	cbz	r5, c3468 <__d2b+0x98>
   c3432:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   c3436:	4405      	add	r5, r0
   c3438:	f8c9 5000 	str.w	r5, [r9]
   c343c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   c3440:	f8c8 0000 	str.w	r0, [r8]
   c3444:	4620      	mov	r0, r4
   c3446:	b003      	add	sp, #12
   c3448:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   c344c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   c3450:	e7d5      	b.n	c33fe <__d2b+0x2e>
   c3452:	6161      	str	r1, [r4, #20]
   c3454:	e7e5      	b.n	c3422 <__d2b+0x52>
   c3456:	a801      	add	r0, sp, #4
   c3458:	f7ff fcde 	bl	c2e18 <__lo0bits>
   c345c:	9b01      	ldr	r3, [sp, #4]
   c345e:	6163      	str	r3, [r4, #20]
   c3460:	2201      	movs	r2, #1
   c3462:	6122      	str	r2, [r4, #16]
   c3464:	3020      	adds	r0, #32
   c3466:	e7e3      	b.n	c3430 <__d2b+0x60>
   c3468:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   c346c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   c3470:	f8c9 0000 	str.w	r0, [r9]
   c3474:	6918      	ldr	r0, [r3, #16]
   c3476:	f7ff fcaf 	bl	c2dd8 <__hi0bits>
   c347a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   c347e:	e7df      	b.n	c3440 <__d2b+0x70>
   c3480:	000c5859 	.word	0x000c5859
   c3484:	000c58e0 	.word	0x000c58e0

000c3488 <__ratio>:
   c3488:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   c348c:	4688      	mov	r8, r1
   c348e:	4669      	mov	r1, sp
   c3490:	4681      	mov	r9, r0
   c3492:	f7ff ff4d 	bl	c3330 <__b2d>
   c3496:	a901      	add	r1, sp, #4
   c3498:	4640      	mov	r0, r8
   c349a:	ec55 4b10 	vmov	r4, r5, d0
   c349e:	f7ff ff47 	bl	c3330 <__b2d>
   c34a2:	f8d9 3010 	ldr.w	r3, [r9, #16]
   c34a6:	f8d8 2010 	ldr.w	r2, [r8, #16]
   c34aa:	eba3 0c02 	sub.w	ip, r3, r2
   c34ae:	e9dd 3200 	ldrd	r3, r2, [sp]
   c34b2:	1a9b      	subs	r3, r3, r2
   c34b4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   c34b8:	ec51 0b10 	vmov	r0, r1, d0
   c34bc:	2b00      	cmp	r3, #0
   c34be:	bfd6      	itet	le
   c34c0:	460a      	movle	r2, r1
   c34c2:	462a      	movgt	r2, r5
   c34c4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   c34c8:	468b      	mov	fp, r1
   c34ca:	462f      	mov	r7, r5
   c34cc:	bfd4      	ite	le
   c34ce:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   c34d2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   c34d6:	4620      	mov	r0, r4
   c34d8:	ee10 2a10 	vmov	r2, s0
   c34dc:	465b      	mov	r3, fp
   c34de:	4639      	mov	r1, r7
   c34e0:	f7fd fc04 	bl	c0cec <__aeabi_ddiv>
   c34e4:	ec41 0b10 	vmov	d0, r0, r1
   c34e8:	b003      	add	sp, #12
   c34ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000c34ee <__copybits>:
   c34ee:	3901      	subs	r1, #1
   c34f0:	b570      	push	{r4, r5, r6, lr}
   c34f2:	1149      	asrs	r1, r1, #5
   c34f4:	6914      	ldr	r4, [r2, #16]
   c34f6:	3101      	adds	r1, #1
   c34f8:	f102 0314 	add.w	r3, r2, #20
   c34fc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   c3500:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   c3504:	1f05      	subs	r5, r0, #4
   c3506:	42a3      	cmp	r3, r4
   c3508:	d30c      	bcc.n	c3524 <__copybits+0x36>
   c350a:	1aa3      	subs	r3, r4, r2
   c350c:	3b11      	subs	r3, #17
   c350e:	f023 0303 	bic.w	r3, r3, #3
   c3512:	3211      	adds	r2, #17
   c3514:	42a2      	cmp	r2, r4
   c3516:	bf88      	it	hi
   c3518:	2300      	movhi	r3, #0
   c351a:	4418      	add	r0, r3
   c351c:	2300      	movs	r3, #0
   c351e:	4288      	cmp	r0, r1
   c3520:	d305      	bcc.n	c352e <__copybits+0x40>
   c3522:	bd70      	pop	{r4, r5, r6, pc}
   c3524:	f853 6b04 	ldr.w	r6, [r3], #4
   c3528:	f845 6f04 	str.w	r6, [r5, #4]!
   c352c:	e7eb      	b.n	c3506 <__copybits+0x18>
   c352e:	f840 3b04 	str.w	r3, [r0], #4
   c3532:	e7f4      	b.n	c351e <__copybits+0x30>

000c3534 <__any_on>:
   c3534:	f100 0214 	add.w	r2, r0, #20
   c3538:	6900      	ldr	r0, [r0, #16]
   c353a:	114b      	asrs	r3, r1, #5
   c353c:	4298      	cmp	r0, r3
   c353e:	b510      	push	{r4, lr}
   c3540:	db11      	blt.n	c3566 <__any_on+0x32>
   c3542:	dd0a      	ble.n	c355a <__any_on+0x26>
   c3544:	f011 011f 	ands.w	r1, r1, #31
   c3548:	d007      	beq.n	c355a <__any_on+0x26>
   c354a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   c354e:	fa24 f001 	lsr.w	r0, r4, r1
   c3552:	fa00 f101 	lsl.w	r1, r0, r1
   c3556:	428c      	cmp	r4, r1
   c3558:	d10b      	bne.n	c3572 <__any_on+0x3e>
   c355a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   c355e:	4293      	cmp	r3, r2
   c3560:	d803      	bhi.n	c356a <__any_on+0x36>
   c3562:	2000      	movs	r0, #0
   c3564:	bd10      	pop	{r4, pc}
   c3566:	4603      	mov	r3, r0
   c3568:	e7f7      	b.n	c355a <__any_on+0x26>
   c356a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   c356e:	2900      	cmp	r1, #0
   c3570:	d0f5      	beq.n	c355e <__any_on+0x2a>
   c3572:	2001      	movs	r0, #1
   c3574:	e7f6      	b.n	c3564 <__any_on+0x30>
	...

000c3578 <_open_r>:
   c3578:	b538      	push	{r3, r4, r5, lr}
   c357a:	4d07      	ldr	r5, [pc, #28]	; (c3598 <_open_r+0x20>)
   c357c:	4604      	mov	r4, r0
   c357e:	4608      	mov	r0, r1
   c3580:	4611      	mov	r1, r2
   c3582:	2200      	movs	r2, #0
   c3584:	602a      	str	r2, [r5, #0]
   c3586:	461a      	mov	r2, r3
   c3588:	f7f9 fc1c 	bl	bcdc4 <_open>
   c358c:	1c43      	adds	r3, r0, #1
   c358e:	d102      	bne.n	c3596 <_open_r+0x1e>
   c3590:	682b      	ldr	r3, [r5, #0]
   c3592:	b103      	cbz	r3, c3596 <_open_r+0x1e>
   c3594:	6023      	str	r3, [r4, #0]
   c3596:	bd38      	pop	{r3, r4, r5, pc}
   c3598:	2003e7f0 	.word	0x2003e7f0

000c359c <_read_r>:
   c359c:	b538      	push	{r3, r4, r5, lr}
   c359e:	4d07      	ldr	r5, [pc, #28]	; (c35bc <_read_r+0x20>)
   c35a0:	4604      	mov	r4, r0
   c35a2:	4608      	mov	r0, r1
   c35a4:	4611      	mov	r1, r2
   c35a6:	2200      	movs	r2, #0
   c35a8:	602a      	str	r2, [r5, #0]
   c35aa:	461a      	mov	r2, r3
   c35ac:	f7f9 fc1a 	bl	bcde4 <_read>
   c35b0:	1c43      	adds	r3, r0, #1
   c35b2:	d102      	bne.n	c35ba <_read_r+0x1e>
   c35b4:	682b      	ldr	r3, [r5, #0]
   c35b6:	b103      	cbz	r3, c35ba <_read_r+0x1e>
   c35b8:	6023      	str	r3, [r4, #0]
   c35ba:	bd38      	pop	{r3, r4, r5, pc}
   c35bc:	2003e7f0 	.word	0x2003e7f0

000c35c0 <nanf>:
   c35c0:	ed9f 0a01 	vldr	s0, [pc, #4]	; c35c8 <nanf+0x8>
   c35c4:	4770      	bx	lr
   c35c6:	bf00      	nop
   c35c8:	7fc00000 	.word	0x7fc00000

000c35cc <__ascii_wctomb>:
   c35cc:	b149      	cbz	r1, c35e2 <__ascii_wctomb+0x16>
   c35ce:	2aff      	cmp	r2, #255	; 0xff
   c35d0:	bf85      	ittet	hi
   c35d2:	238a      	movhi	r3, #138	; 0x8a
   c35d4:	6003      	strhi	r3, [r0, #0]
   c35d6:	700a      	strbls	r2, [r1, #0]
   c35d8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   c35dc:	bf98      	it	ls
   c35de:	2001      	movls	r0, #1
   c35e0:	4770      	bx	lr
   c35e2:	4608      	mov	r0, r1
   c35e4:	4770      	bx	lr
	...

000c35e8 <__aeabi_d2lz>:
   c35e8:	b538      	push	{r3, r4, r5, lr}
   c35ea:	2200      	movs	r2, #0
   c35ec:	2300      	movs	r3, #0
   c35ee:	4604      	mov	r4, r0
   c35f0:	460d      	mov	r5, r1
   c35f2:	f7fd fcc3 	bl	c0f7c <__aeabi_dcmplt>
   c35f6:	b928      	cbnz	r0, c3604 <__aeabi_d2lz+0x1c>
   c35f8:	4620      	mov	r0, r4
   c35fa:	4629      	mov	r1, r5
   c35fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   c3600:	f7fd bd92 	b.w	c1128 <__aeabi_d2ulz>
   c3604:	4620      	mov	r0, r4
   c3606:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   c360a:	f7fd fd8d 	bl	c1128 <__aeabi_d2ulz>
   c360e:	4240      	negs	r0, r0
   c3610:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   c3614:	bd38      	pop	{r3, r4, r5, pc}
   c3616:	bf00      	nop

000c3618 <dynalib_user>:
   c3618:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   c3628:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   c3638:	7620 7269 7574 6c61 6900 696e 2074 6166      virtual.init fa
   c3648:	6c69 6465 4c00 526f 2041 6152 6964 206f     iled.LoRA Radio 
   c3658:	6e69 7469 6169 696c 657a 2064 7361 6120     initialized as a
   c3668:	6720 7461 7765 7961 7720 7469 2068 2061      gateway with a 
   c3678:	6564 6976 6563 4449 6f20 2066 7325 4c00     deviceID of %s.L
   c3688:	526f 2041 6152 6964 206f 6e69 7469 6169     oRA Radio initia
   c3698:	696c 657a 2064 7361 6e20 646f 2065 6925     lized as node %i
   c36a8:	6120 646e 6120 6420 7665 6369 4965 2044      and a deviceID 
   c36b8:	666f 2520 0073 6f4c 4152 5220 6461 6f69     of %s.LoRA Radio
   c36c8:	6920 696e 6974 6c61 7a69 6465 6120 2073      initialized as 
   c36d8:	6e61 7520 636e 6e6f 6966 7567 6572 2064     an unconfigured 
   c36e8:	6f6e 6564 2520 2069 6e61 2064 2061 6564     node %i and a de
   c36f8:	6976 6563 4449 6f20 2066 7325 5400 6568     viceID of %s.The
   c3708:	6e20 646f 2065 7473 6972 676e 6920 3a73      node string is:
   c3718:	2520 0073 6150 7372 6465 5320 6375 6563      %s.Parsed Succe
   c3728:	7373 7566 6c6c 0079 6150 7372 6e69 2067     ssfully.Parsing 
   c3738:	7265 6f72 2072 6572 6573 7474 6e69 2067     error resetting 
   c3748:	6f6e 6564 4449 6420 7461 6261 7361 0065     nodeID database.
   c3758:	6f6e 6564 0073 756e 6c6c 7200 4449 6400     nodes.null.rID.d
   c3768:	4449 4e00 646f 2065 6f6e 2074 6f63 666e     ID.Node not conf
   c3778:	6769 7275 6465 4600 6f72 206d 6567 5474     igured.From getT
   c3788:	7079 2065 7566 636e 6974 6e6f 4e20 646f     ype function Nod
   c3798:	2065 756e 626d 7265 6e20 746f 6620 756f     e number not fou
   c37a8:	646e 7320 206f 6572 7574 6e72 6e69 2067     nd so returning 
   c37b8:	6425 7400 7079 0065 6552 7574 6e72 6e69     %d.type.Returnin
   c37c8:	2067 6573 736e 726f 7420 7079 2065 6425     g sensor type %d
   c37d8:	4600 6f72 206d 6567 4174 656c 7472 6620     .From getAlert f
   c37e8:	6e75 7463 6f69 2c6e 4e20 646f 2065 756e     unction, Node nu
   c37f8:	626d 7265 6e20 746f 6620 756f 646e 7000     mber not found.p
   c3808:	6e65 0064 6e75 6568 6c61 6874 0079 616c     end.unhealthy.la
   c3818:	7473 4e00 646f 2065 6f63 6e6e 6365 6974     st.Node connecti
   c3828:	6e6f 2073 7261 2065 7325 0020 6f4e 6564     ons are %s .Node
   c3838:	6320 6e6f 656e 7463 6f69 736e 7520 686e      connections unh
   c3848:	6165 746c 7968 202c 6572 6573 6974 676e     ealthy, reseting
   c3858:	4c20 526f 2041 6172 6964 006f 6163 0072      LoRA radio.car.
   c3868:	6570 7372 6e6f 4100 6b63 6f6e 6c77 6465     person.Acknowled
   c3878:	6567 4a20 696f 206e 6552 7571 7365 0074     ge Join Request.
   c3888:	6553 646e 6e69 2067 6572 7073 6e6f 6573     Sending response
   c3898:	7420 206f 6425 7720 7469 2068 7266 6565      to %d with free
   c38a8:	6d20 6d65 726f 2079 203d 6c25 0069 6f4e      memory = %li.No
   c38b8:	6564 2520 2064 6f6a 6e69 6465 7720 7469     de %d joined wit
   c38c8:	2068 6573 736e 726f 7954 6570 2520 2c73     h sensorType %s,
   c38d8:	6120 656c 7472 2520 2064 6e61 2064 5352      alert %d and RS
   c38e8:	4953 2f20 5320 524e 6f20 2066 6425 2f20     SI / SNR of %d /
   c38f8:	2520 0064 7473 7461 7375 4e00 646f 2065      %d.status.Node 
   c3908:	6425 6a20 696f 206e 6572 7073 6e6f 6573     %d join response
   c3918:	6e20 746f 6120 6b63 6f6e 6c77 6465 6567      not acknowledge
   c3928:	0064 6f6e 6564 7300 6375 0063 6f4e 6564     d.node.succ.Node
   c3938:	2520 2c64 6420 7665 6369 4965 3a44 2520      %d, deviceID: %
   c3948:	2c73 6320 6568 6b63 7573 206d 6425 202c     s, checksum %d, 
   c3958:	616c 7473 6f43 6e6e 6365 6574 3a64 2520     lastConnected: %
   c3968:	2c73 7420 7079 2065 6425 202c 7573 6363     s, type %d, succ
   c3978:	7365 2073 3425 322e 2066 6977 6874 7020     ess %4.2f with p
   c3988:	6e65 6964 676e 6120 656c 7472 2520 0064     ending alert %d.
   c3998:	6f6e 6564 6144 6174 4400 7665 6369 4965     nodeData.DeviceI
   c39a8:	2044 6e61 2064 6863 6365 736b 6d75 6d20     D and checksum m
   c39b8:	7369 616d 6374 2068 202d 6573 7474 6e69     ismatch - settin
   c39c8:	2067 6f6e 6564 7420 206f 3131 4300 6568     g node to 11.Che
   c39d8:	6b63 7573 206d 6176 696c 6164 6574 0064     cksum validated.
   c39e8:	6966 646e 6f4e 6564 754e 626d 7265 7220     findNodeNumber r
   c39f8:	6e61 6f20 7475 6f20 2066 6e65 7274 6569     an out of entrie
   c3a08:	2073 7461 6920 3d20 2520 0064 654e 2077     s at i = %d.New 
   c3a18:	6f6e 6564 7720 6c69 206c 6562 6120 7373     node will be ass
   c3a28:	6769 656e 2064 756e 626d 7265 2520 2c64     igned number %d,
   c3a38:	6420 7665 6369 4965 2044 666f 2520 0073      deviceID of %s.
   c3a48:	6843 6e61 6967 676e 7320 6e65 6f73 2072     Changing sensor 
   c3a58:	7974 6570 6620 6f72 206d 6425 7420 206f     type from %d to 
   c3a68:	6425 4e00 646f 2065 6425 6a20 696f 206e     %d.Node %d join 
   c3a78:	6572 7571 7365 2074 7266 6d6f 2520 2073     request from %s 
   c3a88:	6573 7474 6e69 2067 6c63 636f 006b 6f4e     setting clock.No
   c3a98:	6564 2520 2064 6f6a 6e69 7220 7165 6575     de %d join reque
   c3aa8:	7473 6620 6f72 206d 7325 7720 6c69 206c     st from %s will 
   c3ab8:	6863 6e61 6567 6e20 646f 2065 756e 626d     change node numb
   c3ac8:	7265 7420 206f 6425 4300 6168 676e 6e69     er to %d.Changin
   c3ad8:	2067 6570 646e 6e69 2067 6c61 7265 2074     g pending alert 
   c3ae8:	7266 6d6f 2520 2064 6f74 2520 0064 6f4e     from %d to %d.No
   c3af8:	6564 2520 2064 7369 6920 766e 6c61 6469     de %d is invalid
   c3b08:	202c 6573 7474 6e69 2067 6c61 7265 2074     , setting alert 
   c3b18:	6f63 6564 7420 206f 0031 6f4e 6564 2520     code to 1.Node %
   c3b28:	2064 6168 2073 2061 6570 646e 6e69 2067     d has a pending 
   c3b38:	6c61 7265 2074 6425 4900 206e 6164 6174     alert %d.In data
   c3b48:	6120 6b63 6f6e 6c77 6465 6567 202c 6863      acknowledge, ch
   c3b58:	6e61 6967 676e 7420 7079 2065 6f74 6620     anging type to f
   c3b68:	6f72 206d 6425 7420 206f 6425 4e00 646f     rom %d to %d.Nod
   c3b78:	2065 6425 6420 7461 2061 6572 6f70 7472     e %d data report
   c3b88:	2520 2064 6361 6e6b 776f 656c 6764 6465      %d acknowledged
   c3b98:	7720 7469 2068 6c61 7265 2074 6425 202c      with alert %d, 
   c3ba8:	6e61 2064 5352 4953 2f20 5320 524e 6f20     and RSSI / SNR o
   c3bb8:	2066 6425 2f20 2520 0064 6f4e 6564 2520     f %d / %d.Node %
   c3bc8:	2064 6164 6174 7220 7065 726f 2074 6572     d data report re
   c3bd8:	7073 6e6f 6573 6e20 746f 6120 6b63 6f6e     sponse not ackno
   c3be8:	6c77 6465 6567 0064 6f4e 6564 2520 2064     wledged.Node %d 
   c3bf8:	656d 7373 6761 2065 616d 6967 2063 756e     message magic nu
   c3c08:	626d 7265 6f20 2066 6425 6420 6469 6e20     mber of %d did n
   c3c18:	746f 6d20 7461 6863 7420 6568 4d20 6761     ot match the Mag
   c3c28:	6369 4e20 6d75 6562 2072 6e69 6d20 6d65     ic Number in mem
   c3c38:	726f 2079 6425 2d20 4920 6e67 726f 6e69     ory %d - Ignorin
   c3c48:	0067 6f4e 6564 2520 2064 6977 6874 4920     g.Node %d with I
   c3c58:	2044 6425 6120 2520 2073 656d 7373 6761     D %d a %s messag
   c3c68:	2065 6977 6874 5220 5353 2f49 4e53 2052     e with RSSI/SNR 
   c3c78:	666f 2520 2064 202f 6425 4e00 646f 2065     of %d / %d.Node 
   c3c88:	6f6e 2074 7270 706f 7265 796c 6320 6e6f     not properly con
   c3c98:	6966 7567 6572 2c64 7220 7365 7465 6974     figured, resetti
   c3ca8:	676e 6e20 646f 2065 756e 626d 7265 4900     ng node number.I
   c3cb8:	766e 6c61 6469 6d20 7365 6173 6567 6620     nvalid message f
   c3cc8:	616c 2c67 7220 7465 7275 696e 676e 5700     lag, returning.W
   c3cd8:	2065 7261 2065 7075 6164 6974 676e 7420     e are updating t
   c3ce8:	6568 7020 6275 696c 6873 6620 6572 7571     he publish frequ
   c3cf8:	6e65 7963 7420 206f 6925 6d20 6e69 7475     ency to %i minut
   c3d08:	7365 4900 766e 6c61 6469 6d20 7365 6173     es.Invalid messa
   c3d18:	6567 6620 616c 0067                         ge flag.

000c3d20 <_ZTV16JsonParserStaticILj1024ELj50EE>:
	...
   c3d28:	40dd 000b 40f1 000b                         .@...@..

000c3d30 <_ZTV14LoRA_Functions>:
	...
   c3d38:	40cd 000b 40cf 000b 7246 6d6f 2520 2073     .@...@..From %s 
   c3d48:	6f74 2520 2073 6977 6874 6920 766e 6c61     to %s with inval
   c3d58:	6469 7420 6d69 0065 7246 6d6f 2520 2073     id time.From %s 
   c3d68:	6f74 2520 0073 6e55 6e6b 776f 006e 6f4e     to %s.Unknown.No
   c3d78:	2074 6843 7261 6967 676e 4300 6168 6772     t Charging.Charg
   c3d88:	6465 4400 7369 6863 7261 6967 676e 4600     ed.Discharging.F
   c3d98:	7561 746c 4400 6369 6e6f 656e 7463 6465     ault.Diconnected
   c3da8:	7b00 6422 7665 6369 6965 2264 223a 7325     .{"deviceid":"%s
   c3db8:	2c22 2220 6f68 7275 796c 3a22 7525 202c     ", "hourly":%u, 
   c3dc8:	6422 6961 796c 3a22 7525 202c 7322 6e65     "daily":%u, "sen
   c3dd8:	6f73 7472 7079 2265 253a 2c64 2220 6162     sortype":%d, "ba
   c3de8:	7474 7265 2279 253a 2e34 6632 222c 656b     ttery":%4.2f,"ke
   c3df8:	3179 3a22 2522 2273 222c 6574 706d 3a22     y1":"%s","temp":
   c3e08:	6425 202c 7222 7365 7465 2273 253a 2c64     %d, "resets":%d,
   c3e18:	6122 656c 7472 2273 203a 6425 202c 6e22     "alerts": %d, "n
   c3e28:	646f 2265 203a 6425 202c 7222 7373 2269     ode": %d, "rssi"
   c3e38:	253a 2c64 2020 7322 726e 3a22 6425 202c     :%d,  "snr":%d, 
   c3e48:	6d22 6773 3a22 6425 202c 7322 6375 6563     "msg":%d, "succe
   c3e58:	7373 3a22 3425 322e 2c66 2220 6974 656d     ss":%4.2f, "time
   c3e68:	7473 6d61 2270 253a 756c 3030 7d30 5500     stamp":%lu000}.U
   c3e78:	6962 6f64 7374 4c2d 526f 2d41 6f4e 6564     bidots-LoRA-Node
   c3e88:	762d 0031 227b 6564 6976 6563 6469 3a22     -v1.{"deviceid":
   c3e98:	2522 2273 202c 6822 756f 6c72 2279 253a     "%s", "hourly":%
   c3ea8:	2c75 2220 6164 6c69 2279 253a 2c75 2220     u, "daily":%u, "
   c3eb8:	6573 736e 726f 7974 6570 3a22 6425 202c     sensortype":%d, 
   c3ec8:	6222 7461 6574 7972 3a22 3425 322e 2c66     "battery":%4.2f,
   c3ed8:	6b22 7965 2231 223a 7325 2c22 7422 6d65     "key1":"%s","tem
   c3ee8:	2270 253a 2c64 2220 6572 6573 7374 3a22     p":%d, "resets":
   c3ef8:	6425 202c 6d22 6773 3a22 6425 202c 7422     %d, "msg":%d, "t
   c3f08:	6d69 7365 6174 706d 3a22 6c25 3075 3030     imestamp":%lu000
   c3f18:	007d 6255 6469 746f 2d73 6f4c 4152 472d     }.Ubidots-LoRA-G
   c3f28:	7461 7765 7961 762d 0031 7369 6900 2073     ateway-v1.is.is 
   c3f38:	6f6e 0074 5345 3554 4445 2c54 334d 322e     not.EST5EDT,M3.2
   c3f48:	302e 322f 303a 3a30 3030 4d2c 3131 312e     .0/2:00:00,M11.1
   c3f58:	302e 322f 303a 3a30 3030 2500 3a49 4d25     .0/2:00:00.%I:%M
   c3f68:	253a 2553 0070 6f4c 6163 546c 6d69 2065     :%S%p.LocalTime 
   c3f78:	6e69 7469 6169 696c 657a 2c64 7420 6d69     initialized, tim
   c3f88:	2065 7369 2520 2073 6e61 2064 5452 2043     e is %s and RTC 
   c3f98:	7325 7320 7465 4c00 636f 6c61 6954 656d     %s set.LocalTime
   c3fa8:	6e20 746f 6920 696e 6974 6c61 7a69 6465      not initialized
   c3fb8:	7320 206f 6977 6c6c 6e20 6565 2064 6f74      so will need to
   c3fc8:	4320 6e6f 656e 7463 7420 206f 6150 7472      Connect to Part
   c3fd8:	6369 656c 5500 6573 2072 7562 7474 6e6f     icle.User button
   c3fe8:	7020 6572 7373 6465 202c 6f63 6e6e 6365      pressed, connec
   c3ff8:	6574 2064 6f6d 6564 6f00 6570 006e 6c63     ted mode.open.cl
   c4008:	736f 6465 2500 0054 6c53 6565 2070 6f66     osed.%T.Sleep fo
   c4018:	2072 6925 7320 6365 6e6f 7364 7420 6c69     r %i seconds til
   c4028:	206c 656e 7478 6520 6576 746e 6120 2074     l next event at 
   c4038:	7325 7720 7469 2068 6c25 2069 7266 6565     %s with %li free
   c4048:	6d20 6d65 726f 0079 7741 6b6f 2065 7461      memory.Awoke at
   c4058:	2520 2073 6977 6874 2520 696c 6620 6572      %s with %li fre
   c4068:	2065 656d 6f6d 7972 4700 7461 7765 7961     e memory.Gateway
   c4078:	6920 2073 696c 7473 6e65 6e69 2067 6f66      is listening fo
   c4088:	2072 7525 2820 7525 2029 696d 756e 6574     r %u (%u) minute
   c4098:	2073 6f66 2072 6f4c 4152 6d20 7365 6173     s for LoRA messa
   c40a8:	6567 2073 6e61 2064 6874 2065 6170 6b72     ges and the park
   c40b8:	6920 2073 7325 2820 6425 2f20 2520 2064      is %s (%d / %d 
   c40c8:	202f 6425 0029 654e 2077 6144 2079 202d     / %d).New Day - 
   c40d8:	6552 6573 7474 6e69 2067 7665 7265 7479     Resetting everyt
   c40e8:	6968 676e 4400 6565 2070 6f70 6577 2072     hing.Deep power 
   c40f8:	6f64 6e77 6420 7665 6369 0065 6552 6573     down device.Rese
   c4108:	7474 6e69 2067 7564 2065 6f74 6c20 776f     tting due to low
   c4118:	6d20 6d65 726f 0079 6f6e 2074 6176 696c      memory.not vali
   c4128:	0064 6f6e 6564 4449 6420 7461 2061 7369     d.nodeID data is
   c4138:	2520 0073 227b 6f6e 6564 2273 5b3a 7d5d      %s.{"nodes":[]}
   c4148:	5200 7365 7465 6974 2067 6f4e 6564 4449     .Resettig NodeID
   c4158:	6320 6e6f 6966 2067 6f74 203a 7325 4e00      config to: %s.N
   c4168:	646f 4965 2044 6164 6174 6920 2073 6f6e     odeID data is no
   c4178:	2077 7325 4500 6172 6973 676e 4620 4152     w %s.Erasing FRA
   c4188:	204d 6572 6967 6e6f 4900 696e 6974 6c61     M region.Initial
   c4198:	7a69 6e69 2067 6164 6174 6400 7461 2061     izing data.data 
   c41a8:	6f6e 2074 6176 696c 2064 706f 6e65 6954     not valid openTi
   c41b8:	656d 253d 2064 6e61 2064 6c63 736f 5465     me=%d and closeT
   c41c8:	6d69 3d65 6425 6400 7461 2061 6f6e 2074     ime=%d.data not 
   c41d8:	6176 696c 2064 7266 7165 6575 636e 2079     valid frequency 
   c41e8:	696d 756e 6574 2073 253d 0064 6164 6174     minutes =%d.data
   c41f8:	6e20 746f 7620 6c61 6469 6e20 646f 2065      not valid node 
   c4208:	756e 626d 7265 3d20 6425 7300 7379 7453     number =%d.sysSt
   c4218:	7461 7375 6420 7461 2061 7369 2520 0073     atus data is %s.
   c4228:	7563 7272 6e65 2074 6164 6174 6e20 746f     current data not
   c4238:	7620 6c61 6469 6820 756f 6c72 4379 756f      valid hourlyCou
   c4248:	746e 253d 0064 7563 7272 6e65 2074 6164     nt=%d.current da
   c4258:	6174 6920 2073 7325 4100 6e20 7765 6420     ta is %s.A new d
   c4268:	7961 2d20 7220 7365 7465 6974 676e 6520     ay - resetting e
   c4278:	6576 7972 6874 6e69 0067 7543 7272 6e65     verything.Curren
   c4288:	2074 6144 6174 4920 696e 6974 6c61 7a69     t Data Initializ
   c4298:	6465 6400 7461 2061 6e69 7469 6169 696c     ed.data initiali
   c42a8:	657a 0064                                   zed.

000c42ac <_ZTV8MB85RC64>:
	...
   c42b4:	6225 000b 6239 000b 9e9d 000b 9f33 000b     %b..9b......3...
   c42c4:	9fb5 000b                                   ....

000c42c8 <_ZTV10nodeIDData>:
	...
   c42d0:	6579 000b 62af 000b 6287 000b c723 000b     ye...b...b..#...
   c42e0:	c74b 000b 624d 000b 663d 000b 6351 000b     K...Mb..=f..Qc..
   c42f0:	6365 000b                                   ec..

000c42f4 <_ZTV13sysStatusData>:
	...
   c42fc:	63d9 000b 62af 000b 6287 000b c723 000b     .c...b...b..#...
   c430c:	c74b 000b 6885 000b 6c0d 000b 6301 000b     K....h...l...c..
   c431c:	6315 000b                                   .c..

000c4320 <_ZTV17currentStatusData>:
	...
   c4328:	6469 000b 62af 000b 6287 000b c723 000b     id...b...b..#...
   c4338:	c74b 000b 6955 000b 6b79 000b 6329 000b     K...Ui..yk..)c..
   c4348:	633d 000b 6e49 7469 6169 696c 697a 676e     =c..Initializing
   c4358:	5020 7261 6974 6c63 2065 7566 636e 6974      Particle functi
   c4368:	6e6f 2073 6e61 2064 6176 6972 6261 656c     ons and variable
   c4378:	0073 6f43 6d6d 6e61 7364 5600 7265 7a69     s.Commands.Veriz
   c4388:	6e6f 5000 7261 6973 676e 6620 6961 656c     on.Parsing faile
   c4398:	2064 202d 6863 6365 206b 7973 746e 7861     d - check syntax
   c43a8:	6300 646d 7600 7261 6600 006e 6572 6573     .cmd.var.fn.rese
   c43b8:	0074 6552 6573 7474 6e69 2067 6874 2065     t.Resetting the 
   c43c8:	6167 6574 6177 2779 2073 6f6e 6564 4420     gateway's node D
   c43d8:	7461 0061 6552 6573 7474 6e69 2067 6874     ata.Resetting th
   c43e8:	2065 6147 6574 6177 2079 6f6e 6564 7320     e Gateway node s
   c43f8:	206f 656e 2077 6164 6174 6162 6573 6920     o new database i
   c4408:	2073 6e69 6520 6666 6365 0074 6552 6573     s in effect.Rese
   c4418:	7474 6e69 2067 6147 6574 6177 0079 6c41     tting Gateway.Al
   c4428:	7265 0074 6c61 006c 6552 6573 7474 6e69     ert.all.Resettin
   c4438:	2067 6874 2065 6167 6574 6177 2779 2073     g the gateway's 
   c4448:	7973 7473 6d65 6120 646e 6320 7275 6572     system and curre
   c4458:	746e 6420 7461 0061 6552 6573 7474 6e69     nt data.Resettin
   c4468:	2067 6874 2065 6167 6574 6177 2779 2073     g the gateway's 
   c4478:	7563 7272 6e65 2074 6164 6174 5200 7365     current data.Res
   c4488:	7465 6974 676e 6e20 646f 2065 6425 7327     etting node %d's
   c4498:	7320 7379 6574 206d 6e61 2064 7563 7272      system and curr
   c44a8:	6e65 2074 6164 6174 5200 7365 7465 6974     ent data.Resetti
   c44b8:	676e 6e20 646f 2065 6425 7327 6320 7275     ng node %d's cur
   c44c8:	6572 746e 6420 7461 0061 7266 7165 5300     rent data.freq.S
   c44d8:	7465 6974 676e 7220 7065 726f 6974 676e     etting reporting
   c44e8:	6620 6572 7571 6e65 7963 7420 206f 6425      frequency to %d
   c44f8:	6d20 6e69 7475 7365 4e00 746f 6120 7620      minutes.Not a v
   c4508:	6c61 6469 7220 7065 726f 6974 676e 6620     alid reporting f
   c4518:	6572 7571 6e65 7963 7300 6174 0079 7274     requency.stay.tr
   c4528:	6575 4700 696f 676e 7420 206f 656b 7065     ue.Going to keep
   c4538:	4720 7461 7765 7961 6f20 206e 6150 7472      Gateway on Part
   c4548:	6369 656c 6120 646e 4c20 526f 2041 656e     icle and LoRA ne
   c4558:	7774 726f 736b 4700 696f 676e 6220 6361     tworks.Going bac
   c4568:	206b 6f74 6e20 726f 616d 206c 6f63 6e6e     k to normal conn
   c4578:	6365 6974 6976 7974 7200 7470 5000 6972     ectivity.rpt.Pri
   c4588:	746e 6e69 2067 6f6e 6564 4449 4420 7461     nting nodeID Dat
   c4598:	0061 6553 7474 6e69 2067 706f 6e65 6e69     a.Setting openin
   c45a8:	2067 6f68 7275 7420 206f 6425 303a 0030     g hour to %d:00.
   c45b8:	704f 6e65 6820 756f 2072 202d 756d 7473     Open hour - must
   c45c8:	6220 2065 2d30 3231 6300 6f6c 6573 5300      be 0-12.close.S
   c45d8:	7465 6974 676e 6320 6f6c 6973 676e 6820     etting closing h
   c45e8:	756f 2072 6f74 2520 3a64 3030 4300 6f6c     our to %d:00.Clo
   c45f8:	6573 6820 756f 2072 202d 756d 7473 6220     se hour - must b
   c4608:	2065 3331 322d 0034 6553 7474 6e69 2067     e 13-24.Setting 
   c4618:	6573 736e 726f 7420 7079 2065 6f74 2520     sensor type to %
   c4628:	2064 6f66 2072 6f6e 6564 2520 0064 6553     d for node %d.Se
   c4638:	736e 726f 5420 7079 2065 2d20 6d20 7375     nsor Type  - mus
   c4648:	2074 6562 3020 322d 7300 6d69 5300 7465     t be 0-2.sim.Set
   c4658:	6974 676e 5320 4d49 7420 206f 7325 5300     ting SIM to %s.S
   c4668:	4d49 5420 7079 2065 2d20 6d20 7375 2074     IM Type  - must 
   c4678:	6562 3020 2820 6150 7472 6369 656c 2029     be 0 (Particle) 
   c4688:	726f 3120 2820 6556 6972 6f7a 296e 4e00     or 1 (Verizon).N
   c4698:	746f 6120 7620 6c61 6469 6320 6d6f 616d     ot a valid comma
   c46a8:	646e 4900 206e 6874 2065 6964 6373 6e6f     nd.In the discon
   c46b8:	656e 7463 6620 6f72 206d 6150 7472 6369     nect from Partic
   c46c8:	656c 6620 6e75 7463 6f69 006e 6146 6c69     le function.Fail
   c46d8:	6465 7420 206f 6964 6373 6e6f 656e 7463     ed to disconnect
   c46e8:	6620 6f72 206d 6150 7472 6369 656c 4400      from Particle.D
   c46f8:	7369 6f63 6e6e 6365 6574 2064 7266 6d6f     isconnected from
   c4708:	5020 7261 6974 6c63 2065 6e69 2520 2069      Particle in %i 
   c4718:	6573 6f63 646e 0073 6146 6c69 6465 7420     seconds.Failed t
   c4728:	206f 7574 6e72 6f20 6666 7420 6568 4320     o turn off the C
   c4738:	6c65 756c 616c 2072 6f6d 6564 006d 7554     ellular modem.Tu
   c4748:	6e72 6465 6f20 6666 7420 6568 6320 6c65     rned off the cel
   c4758:	756c 616c 2072 6f6d 6564 206d 6e69 2520     lular modem in %
   c4768:	2069 6573 6f63 646e 0073 0000               i seconds...

000c4774 <_ZTVN5spark10LogHandlerE>:
	...
   c4784:	40a5 000b 6d71 000b                         .@..qm..

000c478c <_ZTVN5spark16SerialLogHandlerE>:
	...
   c4794:	6e49 000b 6e7d 000b eee9 000b 6d73 000b     In..}n......sm..

000c47a4 <_ZTV16JsonParserStaticILj1024ELj80EE>:
	...
   c47ac:	6d8d 000b 6da1 000b                         .m...m..

000c47b4 <_ZTV18Particle_Functions>:
	...
   c47bc:	6d7b 000b 6d7d 000b 6e49 7469 6c61 7a69     {m..}m..Initaliz
   c47cc:	6e69 2067 6874 2065 6970 4d6e 646f 7365     ing the pinModes
   c47dc:	4900 696e 6974 6c61 7a69 6e69 2067 6f50     .Initializing Po
   c47ec:	6577 2072 6f43 666e 6769 0000               wer Config..

000c47f8 <BLUE_LED>:
   c47f8:	0007                                        ..

000c47fa <BUTTON_PIN>:
   c47fa:	0004                                        ..

000c47fc <RFM95_CS>:
   c47fc:	0005                                        ..

000c47fe <RFM95_INT>:
   c47fe:	0002                                        ..

000c4800 <RFM95_RST>:
   c4800:	0006                                        ..

000c4802 <TMP36_SENSE_PIN>:
   c4802:	000f 6f4e 656e 5700 4669 0069 5347 004d     ..None.WiFi.GSM.
   c4812:	4d55 5354 4300 4d44 0041 544c 0045 4549     UMTS.CDMA.LTE.IE
   c4822:	4545 3038 3132 3435 4c00 4554 435f 5441     EE802154.LTE_CAT
   c4832:	4d5f 0031 544c 5f45 4143 5f54 424e 0031     _M1.LTE_CAT_NB1.
   c4842:	7325 5320 253a 2e32 6630 2525 202c 3a51     %s S:%2.0f%%, Q:
   c4852:	3225 302e 2566 2025 4100 7373 7265 6974     %2.0f%% .Asserti
   c4862:	6e6f 6146 6c69 7275 2065 7273 2063 2626     onFailure src &&
   c4872:	7320 6372 3e2d 6163 6c6c 6162 6b63 0000      src->callback..
   c4882:	0000 3d6e 000c 4804 000c 4809 000c 480e     ..n=...H...H...H
   c4892:	000c 4812 000c 4817 000c 481c 000c 4820     ...H...H...H.. H
   c48a2:	000c 482b 000c 4836 000c 6166 6c69 6465     ..+H..6H..failed
   c48b2:	7420 206f 6572 6461 7220 6765 6441 7264      to read regAddr
   c48c2:	253d 3230 2078 6f63 6e75 3d74 7525 6600     =%02x count=%u.f
   c48d2:	6961 656c 2064 6f74 7220 6165 2064 6572     ailed to read re
   c48e2:	4167 6464 3d72 3025 7832 7320 6174 3d74     gAddr=%02x stat=
   c48f2:	6425 4600 554f 2054 6964 2064 6f6e 2074     %d.FOUT did not 
   c4902:	6f67 4820 4749 0048 6f6e 2074 6564 6574     go HIGH.not dete
   c4912:	7463 6465 6600 6961 656c 2064 6f74 7720     cted.failed to w
   c4922:	6972 6574 7220 6765 6441 7264 253d 3230     rite regAddr=%02
   c4932:	2078 7473 7461 253d 0064 6573 5774 5444     x stat=%d.setWDT
   c4942:	2520 0064 6177 6374 6468 676f 6320 656c      %d.watchdog cle
   c4952:	7261 6465 6220 6552 7573 746c 253d 0064     ared bResult=%d.
   c4962:	6177 6374 6468 676f 7320 7465 6620 756f     watchdog set fou
   c4972:	5372 6365 3d73 6425 6220 6552 7573 746c     rSecs=%d bResult
   c4982:	253d 0064 4157 4354 4448 474f 4400 4545     =%d.WATCHDOG.DEE
   c4992:	5f50 4f50 4557 5f52 4f44 4e57 4300 554f     P_POWER_DOWN.COU
   c49a2:	544e 4f44 4e57 545f 4d49 5245 4100 414c     NTDOWN_TIMER.ALA
   c49b2:	4d52 6600 6961 756c 6572 6920 206e 7075     RM.failure in up
   c49c2:	6164 6574 6157 656b 6552 7361 6e6f 2520     dateWakeReason %
   c49d2:	0064 6177 656b 7220 6165 6f73 206e 203d     d.wake reason = 
   c49e2:	7325 6600 6961 756c 6572 6920 206e 6573     %s.failure in se
   c49f2:	4374 756f 746e 6f64 6e77 6954 656d 2072     tCountdownTimer 
   c4a02:	6425 6600 6961 756c 6572 6920 206e 6564     %d.failure in de
   c4a12:	7065 6f50 6577 4472 776f 206e 6425 5200     epPowerDown %d.R
   c4a22:	4745 535f 454c 5045 435f 5254 3d4c 7830     EG_SLEEP_CTRL=0x
   c4a32:	3225 0078 6964 6e64 7427 7020 776f 7265     %2x.didn't power
   c4a42:	6420 776f 006e 3025 6434 252d 3230 2d64      down.%04d-%02d-
   c4a52:	3025 6432 2520 3230 3a64 3025 6432 253a     %02d %02d:%02d:%
   c4a62:	3230 0064 6567 5274 6374 7341 6d54 2520     02d.getRtcAsTm %
   c4a72:	0073 6573 5274 6374 7341 6d54 2520 0073     s.setRtcAsTm %s.
   c4a82:	6166 6c69 7275 2065 6e69 7320 7465 7452     failure in setRt
   c4a92:	4663 6f72 546d 206d 6425 7300 7465 5220     cFromTm %d.set R
   c4aa2:	4354 6620 6f72 206d 6c63 756f 2064 7325     TC from cloud %s
   c4ab2:	7300 7465 7320 7379 6574 206d 6c63 636f     .set system cloc
   c4ac2:	206b 7266 6d6f 5220 4354 2520 0073 6166     k from RTC %s.fa
   c4ad2:	6c69 6465 7420 206f 6564 6574 7463 4120     iled to detect A
   c4ae2:	3142 3038 0035 7061 2e70 6261 3831 3530     B1805.app.ab1805
	...

000c4af4 <_ZTV6AB1805>:
	...
   c4afc:	7959 000b 795b 000b 7fd1 000b 8057 000b     Yy..[y......W...
   c4b0c:	6142 6b63 7267 756f 646e 7550 6c62 7369     BackgroundPublis
   c4b1c:	5268 004b                                   hRK.

000c4b20 <_ZTV19BackgroundPublishRK>:
	...
   c4b28:	858d 000b 85a9 000b 755c 3025 5834 2500     ........\u%04X.%
   c4b38:	2a2e 0066 6625 0000                         .*f.%f..

000c4b40 <_ZTV10JsonBuffer>:
	...
   c4b48:	888d 000b 88a9 000b                         ........

000c4b50 <_ZTV10JsonParser>:
	...
   c4b58:	890d 000b 8931 000b                         ....1...

000c4b60 <_ZTV10JsonWriter>:
	...
   c4b68:	88bd 000b 88d1 000b                         ........

000c4b70 <_ZTV12JsonModifier>:
	...
   c4b78:	88e5 000b 88f9 000b 6425 253a 3a64 6425     ........%d:%d:%d
   c4b88:	3000 3a30 3030 303a 0030 3332 353a 3a39     .00:00:00.23:59:
   c4b98:	3935 4d00 6425 252e 2e64 6425 2c00 5a00     59.M%d.%d.%d.,.Z
   c4ba8:	2500 302b 6433 253a 3230 0075               .%+03d:%02u.

000c4bb4 <_ZTV9LocalTime>:
	...
   c4bbc:	955d 000b 9575 000b                         ]...u...

000c4bc4 <_ZTV12LocalTimeHMS>:
	...
   c4bcc:	950d 000b 9511 000b                         ........

000c4bd4 <_ZTV15LocalTimeChange>:
	...
   c4bdc:	950f 000b 951f 000b                         ........

000c4be4 <_ZTV22LocalTimePosixTimezone>:
	...
   c4bec:	952d 000b 9549 000b                         -...I...

000c4bf4 <_ZTV6MB85RC>:
	...
   c4bfc:	9e5d 000b 9e5f 000b 9e9d 000b 9f33 000b     ]..._.......3...
   c4c0c:	9fb5 000b 6966 656c 754e 3d6d 6425 7320     ....fileNum=%d s
   c4c1c:	7a69 3d65 6c25 0064 6572 6461 7551 7565     ize=%ld.readQueu
   c4c2c:	4665 6c69 2065 6425 6520 6576 746e 253d     eFile %d event=%
   c4c3c:	2073 6164 6174 253d 0073 6572 6461 7551     s data=%s.readQu
   c4c4c:	7565 4665 6c69 2065 6425 6320 726f 7572     eueFile %d corru
   c4c5c:	7470 6465 6520 6576 746e 6e20 6d61 2065     pted event name 
   c4c6c:	726f 6420 7461 0061 6572 6461 7551 7565     or data.readQueu
   c4c7c:	4665 6c69 2065 6425 6220 6461 6d20 6761     eFile %d bad mag
   c4c8c:	6369 253d 3830 786c 7620 7265 6973 6e6f     ic=%08lx version
   c4c9c:	253d 2075 6568 6461 7265 6953 657a 253d     =%u headerSize=%
   c4cac:	2075 616e 656d 654c 3d6e 7525 2f00 7375     u nameLen=%u./us
   c4cbc:	2f72 7570 7162 6575 6575 7700 6972 6574     r/pubqueue.write
   c4ccc:	7551 7565 5465 466f 6c69 7365 6620 6c69     QueueToFiles fil
   c4cdc:	4e65 6d75 253d 0064 6964 6373 7261 6564     eNum=%d.discarde
   c4cec:	2064 7665 6e65 2074 6425 7200 7365 7465     d event %d.reset
   c4cfc:	6f20 2072 6964 6373 6e6f 656e 7463 6520      or disconnect e
   c4d0c:	6576 746e 202c 6173 6576 6620 6c69 7365     vent, save files
   c4d1c:	7420 206f 7571 7565 0065 6172 006d 6964      to queue.ram.di
   c4d2c:	6373 7261 6964 676e 6320 726f 7572 7470     scarding corrupt
   c4d3c:	6465 6620 6c69 2065 6425 7000 6275 696c     ed file %d.publi
   c4d4c:	6873 6e69 2067 7325 6520 6576 746e 253d     shing %s event=%
   c4d5c:	2073 6164 6174 253d 0073 5953 5453 4d45     s data=%s.SYSTEM
   c4d6c:	545f 5248 4145 2844 4e45 4241 454c 2944     _THREAD(ENABLED)
   c4d7c:	6920 2073 6572 7571 7269 6465 7000 6275      is required.pub
   c4d8c:	696c 6873 6f43 6d6d 6e6f 6520 6576 746e     lishCommon event
   c4d9c:	614e 656d 253d 2073 7665 6e65 4474 7461     Name=%s eventDat
   c4dac:	3d61 7325 6300 6e61 6f6e 2074 7263 6165     a=%s.cannot crea
   c4dbc:	6574 7320 6474 3a3a 6564 7571 2065 616c     te std::deque la
   c4dcc:	6772 7265 7420 6168 206e 616d 5f78 6973     rger than max_si
   c4ddc:	657a 2928 6600 6c69 5165 6575 6575 654c     ze().fileQueueLe
   c4dec:	3d6e 7525 7220 6d61 7551 7565 4c65 6e65     n=%u ramQueueLen
   c4dfc:	253d 2075 6f63 6e6e 6365 6574 3d64 6425     =%u connected=%d
   c4e0c:	7100 6575 6575 2064 6f74 7220 6d61 7551     .queued to ramQu
   c4e1c:	7565 0065 7570 6c62 7369 2068 7573 6363     eue.publish succ
   c4e2c:	7365 2073 6425 7200 6d65 766f 6465 6620     ess %d.removed f
   c4e3c:	6c69 2065 6425 7000 6275 696c 6873 6620     ile %d.publish f
   c4e4c:	6961 656c 2064 6425 7700 6972 6974 676e     ailed %d.writing
   c4e5c:	7420 206f 6966 656c 2073 6661 6574 2072      to files after 
   c4e6c:	7570 6c62 7369 2068 6166 6c69 7275 0065     publish failure.
   c4e7c:	7061 2e70 7570 7162 0000 0000               app.pubq....

000c4e88 <_ZTV17PublishQueuePosix>:
	...
   c4e90:	a8e9 000b aba5 000b abc9 000b               ............

000c4e9c <_ZTV15RHGenericDriver>:
	...
   c4eac:	ace9 000b 40a5 000b 40a5 000b 40a5 000b     .....@...@...@..
   c4ebc:	40a5 000b ad4b 000b aced 000b ad9b 000b     .@..K...........
   c4ecc:	ad69 000b adbf 000b acf7 000b acff 000b     i...............
   c4edc:	ad03 000b ad07 000b ad0b 000b ad0f 000b     ................
   c4eec:	acfb 000b ad1b 000b ad1f 000b ad23 000b     ............#...
   c4efc:	ad27 000b ad2b 000b ad31 000b ad35 000b     '...+...1...5...
   c4f0c:	acf7 000b ad39 000b ad3f 000b ad45 000b     ....9...?...E...

000c4f1c <_ZTV12RHGenericSPI>:
	...
   c4f24:	40a5 000b ae1d 000b ae1f 000b 40a5 000b     .@...........@..
   c4f34:	40a5 000b ae27 000b ae2b 000b ae2f 000b     .@..'...+.../...
   c4f44:	ae21 000b ae23 000b ae25 000b 6564 6166     !...#...%...defa
   c4f54:	6c75 2074 4d00 4253 4c00 4253 3c00 5053     ult .MSB.LSB.<SP
   c4f64:	5349 7465 6974 676e 2073 6564 6166 6c75     ISettings defaul
   c4f74:	3e74 3c00 5053 5349 7465 6974 676e 2073     t>.<SPISettings 
   c4f84:	7325 7525 2520 2073 4f4d 4544 7525 003e     %s%u %s MODE%u>.

000c4f94 <_ZTVN8particle11SPISettingsE>:
	...
   c4f9c:	ae75 000b ae49 000b ae4b 000b               u...I...K...

000c4fa8 <_ZTV13RHHardwareSPI>:
	...
   c4fb0:	af29 000b af3d 000b af4b 000b af59 000b     )...=...K...Y...
   c4fc0:	afc5 000b ae27 000b ae2b 000b ae2f 000b     ....'...+.../...
   c4fd0:	afd3 000b afe7 000b aff5 000b               ............

000c4fdc <_ZTV6RHMesh>:
	...
   c4fe4:	b0c1 000b b369 000b b021 000b b00d 000b     ....i...!.......

000c4ff4 <_ZTV8RHRouter>:
	...
   c4ffc:	b5d5 000b b619 000b                         ........

000c5004 <_ZTV11RHSPIDriver>:
	...
   c5014:	b8b5 000b 40a5 000b 40a5 000b 40a5 000b     .....@...@...@..
   c5024:	40a5 000b ad4b 000b aced 000b ad9b 000b     .@..K...........
   c5034:	ad69 000b adbf 000b acf7 000b acff 000b     i...............
   c5044:	ad03 000b ad07 000b ad0b 000b ad0f 000b     ................
   c5054:	acfb 000b ad1b 000b ad1f 000b ad23 000b     ............#...
   c5064:	ad27 000b ad2b 000b ad31 000b ad35 000b     '...+...1...5...
   c5074:	acf7 000b ad39 000b ad3f 000b ad45 000b     ....9...?...E...
   c5084:	b8e1 000b b8eb 000b                         ........

000c508c <_ZL18MODEM_CONFIG_TABLE>:
   c508c:	7472 9204 0474 9448 7804 0cc4 b472 0004     rt..t.H..x..r...

000c509c <_ZTV7RH_RF95>:
	...
   c50a4:	ba53 000b ba8b 000b bf61 000b bdf7 000b     S.......a.......
   c50b4:	bac1 000b be3f 000b ba4f 000b ad4b 000b     ....?...O...K...
   c50c4:	aced 000b ad9b 000b ad69 000b adbf 000b     ........i.......
   c50d4:	ba55 000b acff 000b ad03 000b ad07 000b     U...............
   c50e4:	ad0b 000b ad0f 000b acfb 000b ad1b 000b     ................
   c50f4:	ad1f 000b ad23 000b ad27 000b ad2b 000b     ....#...'...+...
   c5104:	ad31 000b ad35 000b ba9b 000b ad39 000b     1...5.......9...
   c5114:	ad3f 000b ad45 000b b8e1 000b b8eb 000b     ?...E...........
   c5124:	ba4b 000b 3025 6438 2f00 7200 6d65 766f     K...%08d./.remov
   c5134:	6465 2520 0073 7325 6520 6978 7473 2073     ed %s.%s exists 
   c5144:	6e61 2064 7369 6120 6420 7269 6365 6f74     and is a directo
   c5154:	7972 6600 6c69 2065 6e69 7420 6568 7720     ry.file in the w
   c5164:	7961 202c 6564 656c 6974 676e 2520 0073     ay, deleting %s.
   c5174:	7473 7461 6620 6c69 6465 6520 7272 6f6e     stat filed errno
   c5184:	253d 0064 7263 6165 6574 2064 6964 2072     =%d.created dir 
   c5194:	7325 6d00 646b 7269 6620 6961 656c 2064     %s.mkdir failed 
   c51a4:	7265 6e72 3d6f 6425 7500 636e 6e6f 6966     errno=%d.unconfi
   c51b4:	7567 6572 2064 6964 5072 7461 0068 6373     gured dirPath.sc
   c51c4:	6e61 696e 676e 2520 2073 6977 6874 7020     anning %s with p
   c51d4:	7461 6574 6e72 2520 0073 6461 6964 676e     attern %s.adding
   c51e4:	7420 206f 7571 7565 2065 6425 2520 0073      to queue %d %s.
   c51f4:	6567 4674 6c69 4665 6f72 516d 6575 6575     getFileFromQueue
   c5204:	7220 7465 7275 656e 2064 6425 6100 7070      returned %d.app
   c5214:	732e 7165 6966 656c 0000 0000               .seqfile....

000c5220 <_ZTV14SequentialFile>:
	...
   c5228:	c3c5 000b c3f1 000b c06f 000b 6173 6976     ........o...savi
   c5238:	676e 6420 7461 2061 6973 657a 253d 0064     ng data size=%d.
   c5248:	6176 696c 6164 6974 676e 6420 7461 2061     validating data 
   c5258:	6973 657a 253d 0064 6f67 3a74 6d20 6761     size=%d.got: mag
   c5268:	6369 253d 3830 2078 6576 7372 6f69 3d6e     ic=%08x version=
   c5278:	3025 7834 7320 7a69 3d65 3025 7834 6820     %04x size=%04x h
   c5288:	7361 3d68 3025 7838 6500 7078 203a 616d     ash=%08x.exp: ma
   c5298:	6967 3d63 3025 7838 7620 7265 6973 6e6f     gic=%08x version
   c52a8:	253d 3430 2078 6973 657a 253d 3430 2078     =%04x size=%04x 
   c52b8:	6168 6873 253d 3830 0078 0000               hash=%08x...

000c52c4 <_ZTVN15StorageHelperRK18PersistentDataBaseE>:
	...
   c52cc:	c71d 000b c7c9 000b c785 000b c723 000b     ............#...
   c52dc:	c74b 000b c94d 000b ca19 000b               K...M.......

000c52e8 <_ZTVN5spark13CellularClassE>:
	...
   c52f0:	d487 000b d47d 000b d473 000b d429 000b     ....}...s...)...
   c5300:	d467 000b d45b 000b f241 000b f249 000b     g...[...A...I...
   c5310:	d44f 000b d447 000b d43d 000b d433 000b     O...G...=...3...
   c5320:	f279 000b                                   y...

000c5324 <_ZTV14CellularSignal>:
	...
   c532c:	d515 000b d579 000b d517 000b d589 000b     ....y...........
   c533c:	d5bd 000b d5e9 000b d61d 000b d53d 000b     ............=...
   c534c:	d51b 000b d537 000b fffc ffff 0000 0000     ....7...........
   c535c:	d571 000b                                   q...

000c5360 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c5368:	d661 000b d667 000b d6a5 000b d675 000b     a...g.......u...
   c5378:	d663 000b                                   c...

000c537c <_ZTVN5spark13EthernetClassE>:
	...
   c5384:	dc6b 000b dc61 000b dc57 000b dc4d 000b     k...a...W...M...
   c5394:	dc41 000b dc35 000b f241 000b f249 000b     A...5...A...I...
   c53a4:	dc29 000b dc21 000b dc17 000b dc0d 000b     )...!...........
   c53b4:	f279 000b                                   y...

000c53b8 <_ZTV7TwoWire>:
	...
   c53c0:	dd3b 000b dd85 000b dd5d 000b dd3d 000b     ;.......]...=...
   c53d0:	dd65 000b dd6d 000b dd75 000b dd7d 000b     e...m...u...}...

000c53e0 <_ZTV9IPAddress>:
	...
   c53e8:	df01 000b def1 000b def3 000b 2575 3430     ............u%04
   c53f8:	0078 6162 6475 5300 7265 6169 006c 6553     x.baud.Serial.Se
   c5408:	6972 6c61 0031 534a 4e4f 7453 6572 6d61     rial1.JSONStream
   c5418:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   c5428:	3130 7530 0020 205d 2c00 0020 2928 203a     010u .] ., .(): 
   c5438:	2000 005b 6f63 6564 3d20 0020 6925 6400     . [.code = .%i.d
   c5448:	7465 6961 736c 3d20 0020 0a0d 6c00 006e     etails = ....ln.
   c5458:	6f63 6564 6400 7465 6961 006c               code.detail.

000c5464 <_ZTVN5spark16JSONStreamWriterE>:
	...
   c546c:	e3ad 000b e3d3 000b e391 000b e00f 000b     ................

000c547c <_ZTVN5spark16StreamLogHandlerE>:
	...
   c5484:	e791 000b e7a9 000b eee9 000b 6d73 000b     ............sm..

000c5494 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   c549c:	e7bd 000b e7d1 000b f08d 000b e399 000b     ................

000c54ac <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   c54b4:	e3ab 000b e3e1 000b ee4d 000b e39b 000b     ........M.......

000c54c4 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   c54cc:	e3a9 000b e3ef 000b e6f9 000b e411 000b     ................

000c54dc <_ZTVN5spark12NetworkClassE>:
	...
   c54e4:	f201 000b f20b 000b f215 000b f21f 000b     ................
   c54f4:	f229 000b f235 000b f241 000b f249 000b     )...5...A...I...
   c5504:	f251 000b f25d 000b f265 000b f26f 000b     Q...]...e...o...
   c5514:	f279 000b 616e 006e 6e69 0066 766f 0066     y...nan.inf.ovf.

000c5524 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   c5524:	0800 1810 2820 3830 6977 6972 676e 5300     .... (08wiring.S
   c5534:	7379 6574 206d 6c73 6565 2070 6f63 666e     ystem sleep conf
   c5544:	6769 7275 7461 6f69 206e 7369 6920 766e     iguration is inv
   c5554:	6c61 6469 002e 5925 252d 2d6d 6425 2554     alid..%Y-%m-%dT%
   c5564:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   c5574:	0065 0000                                   e...

000c5578 <_ZTV11USARTSerial>:
	...
   c5580:	0121 000c 018d 000c 0165 000c f4c9 000b     !.......e.......
   c5590:	0135 000c 0151 000c 0143 000c 015f 000c     5...Q...C..._...
   c55a0:	0123 000c 0127 000c                         #...'...

000c55a8 <_ZTV9USBSerial>:
	...
   c55b0:	01df 000c 0247 000c 021d 000c f4c9 000b     ....G...........
   c55c0:	020f 000c 01e1 000c 01f1 000c 0241 000c     ............A...
   c55d0:	0201 000c 01d9 000c                         ........

000c55d8 <_ZSt7nothrow>:
   c55d8:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
   c55e8:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

000c55f9 <day_name.1>:
   c55f9:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   c5609:	6972 6153                                    riSat

000c560e <mon_name.0>:
   c560e:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   c561e:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   c562e:	4476 6365 4552 4e45 2054 616d 6c6c 636f     vDecREENT malloc
   c563e:	7320 6375 6563 6465 6465 2f00 6d74 2f70      succeeded./tmp/
   c564e:	656a 6b6e 6e69 2d73 4347 2d43 3031 702d     jenkins-GCC-10-p
   c565e:	7069 6c65 6e69 2d65 3834 325f 3230 3130     ipeline-48_20201
   c566e:	3231 5f34 3631 3630 3831 3630 3933 732f     124_1606180639/s
   c567e:	6372 6e2f 7765 696c 2f62 656e 6c77 6269     rc/newlib/newlib
   c568e:	6c2f 6269 2f63 6974 656d 672f 746d 6d69     /libc/time/gmtim
   c569e:	2e65 0063 742f 706d 6a2f 6e65 696b 736e     e.c./tmp/jenkins
   c56ae:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   c56be:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   c56ce:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   c56de:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   c56ee:	6474 696c 2f62 6172 646e 632e 6900 696e     tdlib/rand.c.ini
   c56fe:	7974 0000 0000                              ty....

000c5704 <fpi.1>:
   c5704:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   c5714:	0000 0000                                   ....

000c5718 <fpinan.0>:
   c5718:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000c5730 <tinytens>:
   c5730:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   c5740:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   c5750:	6f43 64ac 0628 1168                         Co.d(.h.

000c5758 <_ctype_>:
   c5758:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   c5768:	2020 2020 2020 2020 2020 2020 2020 2020                     
   c5778:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   c5788:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   c5798:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   c57a8:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   c57b8:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   c57c8:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   c57d8:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   c5858:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   c5868:	0064 742f 706d 6a2f 6e65 696b 736e 472d     d./tmp/jenkins-G
   c5878:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   c5888:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   c5898:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   c58a8:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   c58b8:	696c 2f62 6467 6f74 2d61 6567 6874 7865     lib/gdtoa-gethex
   c58c8:	632e 0000                                   .c..

000c58cc <_C_numeric_locale>:
   c58cc:	5558 000c 5454 000c d6f4 2003 0043 4f50     XU..TT..... C.PO
   c58dc:	4953 0058 742f 706d 6a2f 6e65 696b 736e     SIX./tmp/jenkins
   c58ec:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   c58fc:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   c590c:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   c591c:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   c592c:	6474 696c 2f62 706d 6572 2e63 0063 0000     tdlib/mprec.c...
   c593c:	0000 0000                                   ....

000c5940 <__mprec_bigtens>:
   c5940:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   c5950:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   c5960:	bf3c 7f73 4fdd 7515                         <.s..O.u

000c5968 <__mprec_tens>:
   c5968:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   c5978:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   c5988:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   c5998:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   c59a8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   c59b8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   c59c8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   c59d8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   c59e8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   c59f8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   c5a08:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   c5a18:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   c5a28:	9db4 79d9 7843 44ea                         ...yCx.D

000c5a30 <p05.0>:
   c5a30:	0005 0000 0019 0000 007d 0000               ........}...

000c5a3c <link_const_variable_data_end>:
   c5a3c:	000b4a0d 	.word	0x000b4a0d
   c5a40:	000b59ed 	.word	0x000b59ed
   c5a44:	000b6d4d 	.word	0x000b6d4d
   c5a48:	000b7479 	.word	0x000b7479
   c5a4c:	000b794d 	.word	0x000b794d
   c5a50:	000b8471 	.word	0x000b8471
   c5a54:	000bab95 	.word	0x000bab95
   c5a58:	000baffd 	.word	0x000baffd
   c5a5c:	000bc70d 	.word	0x000bc70d
   c5a60:	000bd419 	.word	0x000bd419
   c5a64:	000bd4e5 	.word	0x000bd4e5
   c5a68:	000bdc75 	.word	0x000bdc75
   c5a6c:	000beed9 	.word	0x000beed9
   c5a70:	000bf351 	.word	0x000bf351
   c5a74:	000bf7b9 	.word	0x000bf7b9
   c5a78:	000bfdd5 	.word	0x000bfdd5
   c5a7c:	000c010d 	.word	0x000c010d
